op0_op1_op3_op4_op5_op7: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op0_op1_op3_op4_op5_op7.writes = 
    [   MemoryDep('buf0', c0, {c0: 2048}, None),
        MemoryDep('buf1', c0, {c0: 2048}, None),
        MemoryDep('buf3', c0, {c0: 2097152}, None),
        MemoryDep('buf4', c0, {c0: 2048}, None),
        MemoryDep('buf5', c0, {c0: 2048}, None),
        MemoryDep('buf7', c0, {c0: 2097152}, None)]
op0_op1_op3_op4_op5_op7.unmet_dependencies = []
op0_op1_op3_op4_op5_op7.met_dependencies = 
    [   MemoryDep('arg1_1', c0, {c0: 2048}, None),
        MemoryDep('arg2_1', c1 + 1024*tmp0, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg3_1', c1 + 2048, {c0: 2, c1: 1048576}, None),
        MemoryDep('arg4_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg5_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg6_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg7_1', c1, {c0: 2048, c1: 1024}, None)]
op0_op1_op3_op4_op5_op7.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf0.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf1.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False),
    ]
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf7.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
    ]
]
op0_op1_op3_op4_op5_op7.snodes[0] =
op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 2048}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg1_1', c0, {c0: 2048}, None),
        MemoryDep('arg2_1', c1 + 1024*tmp0, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg3_1', c1 + 2048, {c0: 2, c1: 1048576}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf0.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (2048, 1024)
op0.sizes = ([2, 1024], [1024])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[2, 1024], stride=[1024, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 1024], stride=[1024, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1026, 1024], stride=[1024, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op0_loop_body:
    var_ranges = {z0: 2, z1: 1024, z2: 1024}
    index0 = 1024*z0 + z1
    index1 = 1024*indirect0 + z2
    index2 = z1 + 2
    index3 = 1026
    index4 = 1024*z1 + z2 + 2048
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg3_1', get_index_4)
        add = ops.add(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf0', get_index_5, getitem)
        return store_reduction
op0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 2048
        rnumel = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        x0 = xindex % 1024
        tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp9 = tl.load(in_ptr2 + (2048 + r2 + (1024*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
            tmp6 = tl.load(in_ptr1 + (r2 + (1024*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp7 = 1.0
            tmp8 = tmp6 * tmp7
            tmp10 = tmp8 + tmp9
            tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
            tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
                tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
            )
            tmp12_mean = tl.where(rmask, tmp12_mean_next, tmp12_mean)
            tmp12_m2 = tl.where(rmask, tmp12_m2_next, tmp12_m2)
            tmp12_weight = tl.where(rmask, tmp12_weight_next, tmp12_weight)
        tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
            tmp12_mean, tmp12_m2, tmp12_weight, 1
        )
        tmp12 = tmp12_tmp[:, None]
        tmp13 = tmp13_tmp[:, None]
        tmp14 = tmp14_tmp[:, None]
        tl.store(out_ptr0 + (x3), tmp12, None)
op0_op1_op3_op4_op5_op7.snodes[1] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 2048}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = 
    [   MemoryDep('arg1_1', c0, {c0: 2048}, None),
        MemoryDep('arg2_1', c1 + 1024*tmp0, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg3_1', c1 + 2048, {c0: 2, c1: 1048576}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf1.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (2048, 1024)
op1.sizes = ([2, 1024], [1024])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[2, 1024], stride=[1024, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 1024], stride=[1024, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1026, 1024], stride=[1024, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op1_loop_body:
    var_ranges = {z0: 2, z1: 1024, z2: 1024}
    index0 = 1024*z0 + z1
    index1 = 1024*indirect0 + z2
    index2 = z1 + 2
    index3 = 1026
    index4 = 1024*z1 + z2 + 2048
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg3_1', get_index_4)
        add = ops.add(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf1', get_index_5, getitem_1)
        return store_reduction
op1 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 2048
        rnumel = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        x0 = xindex % 1024
        tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp9 = tl.load(in_ptr2 + (2048 + r2 + (1024*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
            tmp6 = tl.load(in_ptr1 + (r2 + (1024*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp7 = 1.0
            tmp8 = tmp6 * tmp7
            tmp10 = tmp8 + tmp9
            tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
            tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
                tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
            )
            tmp12_mean = tl.where(rmask, tmp12_mean_next, tmp12_mean)
            tmp12_m2 = tl.where(rmask, tmp12_m2_next, tmp12_m2)
            tmp12_weight = tl.where(rmask, tmp12_weight_next, tmp12_weight)
        tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
            tmp12_mean, tmp12_m2, tmp12_weight, 1
        )
        tmp12 = tmp12_tmp[:, None]
        tmp13 = tmp13_tmp[:, None]
        tmp14 = tmp14_tmp[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op0_op1_op3_op4_op5_op7.snodes[2] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 2097152}, None)]
op3.unmet_dependencies = 
    [   MemoryDep('buf0', c0, {c0: 2048}, None),
        MemoryDep('buf1', c0, {c0: 2048}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg1_1', c0, {c0: 2048}, None),
        MemoryDep('arg2_1', c1 + 1024*tmp0, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg3_1', c1 + 2048, {c0: 2, c1: 1048576}, None),
        MemoryDep('arg4_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg5_1', c1, {c0: 2048, c1: 1024}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (2097152, 1)
op3.sizes = ([2, 1024, 1024], [])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[2, 1024], stride=[1024, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 1024], stride=[1024, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1026, 1024], stride=[1024, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf1_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op3_loop_body:
    var_ranges = {z0: 2, z1: 1024, z2: 1024}
    index0 = 1024*z0 + z1
    index1 = 1024*indirect0 + z2
    index2 = z1 + 2
    index3 = 1026
    index4 = 1024*z1 + z2 + 2048
    index5 = z2
    index6 = 1048576*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg3_1', get_index_4)
        add = ops.add(mul, load_2)
        get_index_5 = self.get_index('index0')
        load_3 = ops.load('buf0', get_index_5)
        sub = ops.sub(add, load_3)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_6)
        constant_1 = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_1)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_7 = self.get_index('index5')
        load_5 = ops.load('arg4_1', get_index_7)
        mul_2 = ops.mul(mul_1, load_5)
        get_index_8 = self.get_index('index5')
        load_6 = ops.load('arg5_1', get_index_8)
        add_2 = ops.add(mul_2, load_6)
        get_index_9 = self.get_index('index6')
        store = ops.store('buf3', get_index_9, add_2, None)
        return store
op3 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 1024)
        x0 = xindex % 1024
        x4 = xindex % 1048576
        x5 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        tmp9 = tl.load(in_ptr2 + (2048 + x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr3 + (x3), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr4 + (x3), None, eviction_policy='evict_last')
        tmp20 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([XBLOCK], 50265, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
        tmp6 = tl.load(in_ptr1 + (x0 + (1024*tmp4)), None)
        tmp7 = 1.0
        tmp8 = tmp6 * tmp7
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 - tmp11
        tmp14 = 1024.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-05
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp21 = tmp19 * tmp20
        tmp23 = tmp21 + tmp22
        tl.store(out_ptr0 + (x5), tmp23, None)
op0_op1_op3_op4_op5_op7.snodes[3] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 2048}, None)]
op4.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 2097152}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (2048, 1024)
op4.sizes = ([2048], [1024])
buf3_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op4_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf4', get_index_1, getitem)
        return store_reduction
op4 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op0_op1_op3_op4_op5_op7.snodes[4] =
op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 2048}, None)]
op5.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 2097152}, None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (2048, 1024)
op5.sizes = ([2048], [1024])
buf3_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op5_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf5', get_index_1, getitem_1)
        return store_reduction
op5 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op0_op1_op3_op4_op5_op7.snodes[5] =
op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 2097152}, None)]
op7.unmet_dependencies = 
    [   MemoryDep('buf3', c0, {c0: 2097152}, None),
        MemoryDep('buf4', c0, {c0: 2048}, None),
        MemoryDep('buf5', c0, {c0: 2048}, None)]
op7.met_dependencies = 
    [   MemoryDep('arg6_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg7_1', c1, {c0: 2048, c1: 1024}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf7.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
    ]
]
op7.group.device = cuda:0
op7.group.iteration = (2097152, 1)
op7.sizes = ([2048, 1024], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf5_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op7_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf4', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf5', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg6_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg7_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf7', get_index_5, add_1, None)
        return store
op7 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op0_op1_op3_op4_op5_op7 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: 'i32', 10: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr2, out_ptr5, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 2048
        rnumel = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        x0 = xindex % 1024
        tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp9 = tl.load(in_ptr2 + (2048 + r2 + (1024*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
            tmp6 = tl.load(in_ptr1 + (r2 + (1024*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp7 = 1.0
            tmp8 = tmp6 * tmp7
            tmp10 = tmp8 + tmp9
            tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
            tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
                tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
            )
            tmp12_mean = tl.where(rmask, tmp12_mean_next, tmp12_mean)
            tmp12_m2 = tl.where(rmask, tmp12_m2_next, tmp12_m2)
            tmp12_weight = tl.where(rmask, tmp12_weight_next, tmp12_weight)
        tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
            tmp12_mean, tmp12_m2, tmp12_weight, 1
        )
        tmp12 = tmp12_tmp[:, None]
        tmp13 = tmp13_tmp[:, None]
        tmp14 = tmp14_tmp[:, None]
        tmp37_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp37_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp37_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp23 = tl.load(in_ptr2 + (2048 + r2 + (1024*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp32 = tl.load(in_ptr3 + (r2), rmask, eviction_policy='evict_last', other=0.0)
            tmp34 = tl.load(in_ptr4 + (r2), rmask, eviction_policy='evict_last', other=0.0)
            tmp15 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp16 = tmp0 + tmp15
            tmp17 = tmp0 < 0
            tmp18 = tl.where(tmp17, tmp16, tmp0)
            tl.device_assert((0 <= tmp18) & (tmp18 < 50265), "index out of bounds: 0 <= tmp18 < 50265")
            tmp20 = tl.load(in_ptr1 + (r2 + (1024*tmp18)), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = 1.0
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tmp25 = tmp24 - tmp12
            tmp26 = 1024.0
            tmp27 = tmp13 / tmp26
            tmp28 = 1e-05
            tmp29 = tmp27 + tmp28
            tmp30 = libdevice.rsqrt(tmp29)
            tmp31 = tmp25 * tmp30
            tmp33 = tmp31 * tmp32
            tmp35 = tmp33 + tmp34
            tmp36 = tl.broadcast_to(tmp35, [XBLOCK, RBLOCK])
            tmp37_mean_next, tmp37_m2_next, tmp37_weight_next = triton_helpers.welford_reduce(
                tmp36, tmp37_mean, tmp37_m2, tmp37_weight, roffset == 0
            )
            tmp37_mean = tl.where(rmask, tmp37_mean_next, tmp37_mean)
            tmp37_m2 = tl.where(rmask, tmp37_m2_next, tmp37_m2)
            tmp37_weight = tl.where(rmask, tmp37_weight_next, tmp37_weight)
            tl.store(out_ptr2 + (r2 + (1024*x3)), tmp35, rmask)
        tmp37_tmp, tmp38_tmp, tmp39_tmp = triton_helpers.welford(
            tmp37_mean, tmp37_m2, tmp37_weight, 1
        )
        tmp37 = tmp37_tmp[:, None]
        tmp38 = tmp38_tmp[:, None]
        tmp39 = tmp39_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp40 = tl.load(out_ptr2 + (r2 + (1024*x3)), rmask, eviction_policy='evict_last', other=0.0)
            tmp48 = tl.load(in_ptr5 + (r2), rmask, eviction_policy='evict_last', other=0.0)
            tmp50 = tl.load(in_ptr6 + (r2), rmask, eviction_policy='evict_last', other=0.0)
            tmp41 = tmp40 - tmp37
            tmp42 = 1024.0
            tmp43 = tmp38 / tmp42
            tmp44 = 1e-05
            tmp45 = tmp43 + tmp44
            tmp46 = libdevice.rsqrt(tmp45)
            tmp47 = tmp41 * tmp46
            tmp49 = tmp47 * tmp48
            tmp51 = tmp49 + tmp50
            tl.store(out_ptr5 + (r2 + (1024*x3)), tmp51, rmask)


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op8.met_dependencies = [StarDep(name='arg8_1', mode=None)]
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf8.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op8.node.kernel = extern_kernels.mm


op9: ExternKernelSchedulerNode(ExternKernelOut)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op9.met_dependencies = [StarDep(name='arg10_1', mode=None)]
op9.outputs = [
    buf9: ExternKernelOut
    buf9.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf9.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op9.node.kernel = extern_kernels.mm


op10: ExternKernelSchedulerNode(ExternKernelOut)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op10.met_dependencies = [StarDep(name='arg12_1', mode=None)]
op10.outputs = [
    buf10: ExternKernelOut
    buf10.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf10.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op10.node.kernel = extern_kernels.mm


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 2097152}, None)]
op11.unmet_dependencies = [   MemoryDep('buf8', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op11.met_dependencies = [MemoryDep('arg9_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (2097152, 1)
op11.sizes = ([2, 16, 1024, 64], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op11_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg9_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf11', get_index_2, add, None)
        return store
op11 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 2097152}, None)]
op12.unmet_dependencies = [   MemoryDep('buf9', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op12.met_dependencies = [MemoryDep('arg11_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (2097152, 1)
op12.sizes = ([2, 16, 1024, 64], [])
buf9_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op12_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg11_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf12', get_index_2, add, None)
        return store
op12 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 2097152}, None)]
op13.unmet_dependencies = [   MemoryDep('buf10', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op13.met_dependencies = [MemoryDep('arg13_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (2097152, 1)
op13.sizes = ([2, 16, 1024, 64], [])
buf10_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op13_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg13_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf13', get_index_2, add, None)
        return store
op13 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op14: ExternKernelSchedulerNode(FallbackKernel)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = 
    [   StarDep(name='buf11', mode=None),
        StarDep(name='buf12', mode=None),
        StarDep(name='buf13', mode=None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: FallbackKernel
    buf14.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf14.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False),
    ]
]
op14.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op15: ExternKernelSchedulerNode(MultiOutput)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf14', mode=None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: MultiOutput
    buf15.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op15.node.kernel = None


op19: ExternKernelSchedulerNode(ExternKernelOut)
op19.writes = [StarDep(name='buf19', mode=None)]
op19.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op19.met_dependencies = [StarDep(name='arg14_1', mode=None)]
op19.outputs = [
    buf19: ExternKernelOut
    buf19.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf19.users = [
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False),
    ]
]
op19.node.kernel = extern_kernels.mm


op20_op21_op23: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op20_op21_op23.writes = 
    [   MemoryDep('buf20', c0, {c0: 2048}, None),
        MemoryDep('buf21', c0, {c0: 2048}, None),
        MemoryDep('buf23', c0, {c0: 2097152}, None)]
op20_op21_op23.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 2097152}, None),
        MemoryDep('buf3', c0, {c0: 2097152}, None)]
op20_op21_op23.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg16_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg17_1', c1, {c0: 2048, c1: 1024}, None)]
op20_op21_op23.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf20.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf21.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op20_op21_op23.snodes[0] =
op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 2048}, None)]
op20.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 2097152}, None),
        MemoryDep('buf3', c0, {c0: 2097152}, None)]
op20.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 2048, c1: 1024}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf20.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (2048, 1024)
op20.sizes = ([2048], [1024])
buf3_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op20_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf19', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg15_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf20', get_index_3, getitem)
        return store_reduction
op20 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op20_op21_op23.snodes[1] =
op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 2048}, None)]
op21.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 2097152}, None),
        MemoryDep('buf3', c0, {c0: 2097152}, None)]
op21.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 2048, c1: 1024}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf21.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (2048, 1024)
op21.sizes = ([2048], [1024])
buf3_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op21_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf19', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg15_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf21', get_index_3, getitem_1)
        return store_reduction
op21 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op20_op21_op23.snodes[2] =
op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 2097152}, None)]
op23.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 2097152}, None),
        MemoryDep('buf20', c0, {c0: 2048}, None),
        MemoryDep('buf21', c0, {c0: 2048}, None),
        MemoryDep('buf3', c0, {c0: 2097152}, None)]
op23.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg16_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg17_1', c1, {c0: 2048, c1: 1024}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (2097152, 1)
op23.sizes = ([2048, 1024], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf21_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op23_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf19', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg15_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf20', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf21', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg16_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg17_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf23', get_index_7, add_3, None)
        return store
op23 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op20_op21_op23 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op24: ExternKernelSchedulerNode(ExternKernelOut)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelOut
    buf24.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf24.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False)]
]
op24.node.kernel = extern_kernels.mm


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 8388608}, None)]
op25.unmet_dependencies = [MemoryDep('buf24', c0, {c0: 8388608}, None)]
op25.met_dependencies = [MemoryDep('arg19_1', c1, {c0: 2048, c1: 4096}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf25.users = [NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (8388608, 1)
op25.sizes = ([2048, 4096], [])
buf24_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op25_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg19_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf24', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf25', get_index_4, mul_2, None)
        return store
op25 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op26: ExternKernelSchedulerNode(ExternKernelOut)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf25', mode=None)]
op26.met_dependencies = [StarDep(name='arg20_1', mode=None)]
op26.outputs = [
    buf26: ExternKernelOut
    buf26.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf26.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False)]
]
op26.node.kernel = extern_kernels.mm


op27_op28_op29_op31: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op27_op28_op29_op31.writes = 
    [   MemoryDep('buf27', c0, {c0: 2097152}, None),
        MemoryDep('buf28', c0, {c0: 2048}, None),
        MemoryDep('buf29', c0, {c0: 2048}, None),
        MemoryDep('buf31', c0, {c0: 2097152}, None)]
op27_op28_op29_op31.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 2097152}, None),
        MemoryDep('buf26', c0, {c0: 2097152}, None),
        MemoryDep('buf3', c0, {c0: 2097152}, None)]
op27_op28_op29_op31.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg21_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg22_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg23_1', c1, {c0: 2048, c1: 1024}, None)]
op27_op28_op29_op31.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf27.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False),
    ]
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf28.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf29.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf31.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
    ]
]
op27_op28_op29_op31.snodes[0] =
op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 2097152}, None)]
op27.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 2097152}, None),
        MemoryDep('buf26', c0, {c0: 2097152}, None),
        MemoryDep('buf3', c0, {c0: 2097152}, None)]
op27.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg21_1', c1, {c0: 2048, c1: 1024}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf27.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False),
    ]
]
op27.group.device = cuda:0
op27.group.iteration = (2097152, 1)
op27.sizes = ([2048, 1024], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op27_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf19', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg15_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf26', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg21_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf27', get_index_5, add_3, None)
        return store
op27 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op27_op28_op29_op31.snodes[1] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 2048}, None)]
op28.unmet_dependencies = [MemoryDep('buf27', c0, {c0: 2097152}, None)]
op28.met_dependencies = []
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf28.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (2048, 1024)
op28.sizes = ([2048], [1024])
buf27_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op28_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf28', get_index_1, getitem)
        return store_reduction
op28 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op27_op28_op29_op31.snodes[2] =
op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 2048}, None)]
op29.unmet_dependencies = [MemoryDep('buf27', c0, {c0: 2097152}, None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf29.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (2048, 1024)
op29.sizes = ([2048], [1024])
buf27_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op29_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf29', get_index_1, getitem_1)
        return store_reduction
op29 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op27_op28_op29_op31.snodes[3] =
op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 2097152}, None)]
op31.unmet_dependencies = 
    [   MemoryDep('buf27', c0, {c0: 2097152}, None),
        MemoryDep('buf28', c0, {c0: 2048}, None),
        MemoryDep('buf29', c0, {c0: 2048}, None)]
op31.met_dependencies = 
    [   MemoryDep('arg22_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg23_1', c1, {c0: 2048, c1: 1024}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf31.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
    ]
]
op31.group.device = cuda:0
op31.group.iteration = (2097152, 1)
op31.sizes = ([2048, 1024], [])
buf27_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf29_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op31_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf28', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf29', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg22_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg23_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf31', get_index_5, add_1, None)
        return store
op31 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op27_op28_op29_op31 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op32: ExternKernelSchedulerNode(ExternKernelOut)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op32.met_dependencies = [StarDep(name='arg24_1', mode=None)]
op32.outputs = [
    buf32: ExternKernelOut
    buf32.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf32.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op32.node.kernel = extern_kernels.mm


op33: ExternKernelSchedulerNode(ExternKernelOut)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op33.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op33.outputs = [
    buf33: ExternKernelOut
    buf33.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf33.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op33.node.kernel = extern_kernels.mm


op34: ExternKernelSchedulerNode(ExternKernelOut)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op34.met_dependencies = [StarDep(name='arg28_1', mode=None)]
op34.outputs = [
    buf34: ExternKernelOut
    buf34.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf34.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op34.node.kernel = extern_kernels.mm


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 2097152}, None)]
op35.unmet_dependencies = [   MemoryDep('buf32', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op35.met_dependencies = [MemoryDep('arg25_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (2097152, 1)
op35.sizes = ([2, 16, 1024, 64], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op35_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg25_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf35', get_index_2, add, None)
        return store
op35 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 2097152}, None)]
op36.unmet_dependencies = [   MemoryDep('buf33', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op36.met_dependencies = [MemoryDep('arg27_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (2097152, 1)
op36.sizes = ([2, 16, 1024, 64], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op36_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf36', get_index_2, add, None)
        return store
op36 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 2097152}, None)]
op37.unmet_dependencies = [   MemoryDep('buf34', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op37.met_dependencies = [MemoryDep('arg29_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (2097152, 1)
op37.sizes = ([2, 16, 1024, 64], [])
buf34_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op37_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg29_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf37', get_index_2, add, None)
        return store
op37 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op38: ExternKernelSchedulerNode(FallbackKernel)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = 
    [   StarDep(name='buf35', mode=None),
        StarDep(name='buf36', mode=None),
        StarDep(name='buf37', mode=None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: FallbackKernel
    buf38.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf38.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
    ]
]
op38.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op39: ExternKernelSchedulerNode(MultiOutput)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf38', mode=None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: MultiOutput
    buf39.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op39.node.kernel = None


op43: ExternKernelSchedulerNode(ExternKernelOut)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op43.met_dependencies = [StarDep(name='arg30_1', mode=None)]
op43.outputs = [
    buf43: ExternKernelOut
    buf43.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf43.users = [
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False),
    ]
]
op43.node.kernel = extern_kernels.mm


op44_op45_op47: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op44_op45_op47.writes = 
    [   MemoryDep('buf44', c0, {c0: 2048}, None),
        MemoryDep('buf45', c0, {c0: 2048}, None),
        MemoryDep('buf47', c0, {c0: 2097152}, None)]
op44_op45_op47.unmet_dependencies = 
    [   MemoryDep('buf27', c0, {c0: 2097152}, None),
        MemoryDep('buf43', c0, {c0: 2097152}, None)]
op44_op45_op47.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg32_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg33_1', c1, {c0: 2048, c1: 1024}, None)]
op44_op45_op47.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf44.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf45.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op44_op45_op47.snodes[0] =
op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 2048}, None)]
op44.unmet_dependencies = 
    [   MemoryDep('buf27', c0, {c0: 2097152}, None),
        MemoryDep('buf43', c0, {c0: 2097152}, None)]
op44.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 2048, c1: 1024}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf44.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (2048, 1024)
op44.sizes = ([2048], [1024])
buf27_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op44_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf43', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf44', get_index_3, getitem)
        return store_reduction
op44 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op44_op45_op47.snodes[1] =
op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 2048}, None)]
op45.unmet_dependencies = 
    [   MemoryDep('buf27', c0, {c0: 2097152}, None),
        MemoryDep('buf43', c0, {c0: 2097152}, None)]
op45.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 2048, c1: 1024}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf45.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (2048, 1024)
op45.sizes = ([2048], [1024])
buf27_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op45_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf43', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf45', get_index_3, getitem_1)
        return store_reduction
op45 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op44_op45_op47.snodes[2] =
op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 2097152}, None)]
op47.unmet_dependencies = 
    [   MemoryDep('buf27', c0, {c0: 2097152}, None),
        MemoryDep('buf43', c0, {c0: 2097152}, None),
        MemoryDep('buf44', c0, {c0: 2048}, None),
        MemoryDep('buf45', c0, {c0: 2048}, None)]
op47.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg32_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg33_1', c1, {c0: 2048, c1: 1024}, None)]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (2097152, 1)
op47.sizes = ([2048, 1024], [])
buf27_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf45_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op47_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf43', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf44', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf45', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg32_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg33_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf47', get_index_7, add_3, None)
        return store
op47 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op44_op45_op47 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op48: ExternKernelSchedulerNode(ExternKernelOut)
op48.writes = [StarDep(name='buf48', mode=None)]
op48.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op48.met_dependencies = [StarDep(name='arg34_1', mode=None)]
op48.outputs = [
    buf48: ExternKernelOut
    buf48.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf48.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False)]
]
op48.node.kernel = extern_kernels.mm


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 8388608}, None)]
op49.unmet_dependencies = [MemoryDep('buf48', c0, {c0: 8388608}, None)]
op49.met_dependencies = [MemoryDep('arg35_1', c1, {c0: 2048, c1: 4096}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (8388608, 1)
op49.sizes = ([2048, 4096], [])
buf48_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op49_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg35_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf48', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg35_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf49', get_index_4, mul_2, None)
        return store
op49 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op50: ExternKernelSchedulerNode(ExternKernelOut)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf49', mode=None)]
op50.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op50.outputs = [
    buf50: ExternKernelOut
    buf50.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf50.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False)]
]
op50.node.kernel = extern_kernels.mm


op51_op52_op53_op55: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op51_op52_op53_op55.writes = 
    [   MemoryDep('buf51', c0, {c0: 2097152}, None),
        MemoryDep('buf52', c0, {c0: 2048}, None),
        MemoryDep('buf53', c0, {c0: 2048}, None),
        MemoryDep('buf55', c0, {c0: 2097152}, None)]
op51_op52_op53_op55.unmet_dependencies = 
    [   MemoryDep('buf27', c0, {c0: 2097152}, None),
        MemoryDep('buf43', c0, {c0: 2097152}, None),
        MemoryDep('buf50', c0, {c0: 2097152}, None)]
op51_op52_op53_op55.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg37_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg38_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg39_1', c1, {c0: 2048, c1: 1024}, None)]
op51_op52_op53_op55.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False),
    ]
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf52.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf53.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf55.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False),
    ]
]
op51_op52_op53_op55.snodes[0] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 2097152}, None)]
op51.unmet_dependencies = 
    [   MemoryDep('buf27', c0, {c0: 2097152}, None),
        MemoryDep('buf43', c0, {c0: 2097152}, None),
        MemoryDep('buf50', c0, {c0: 2097152}, None)]
op51.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg37_1', c1, {c0: 2048, c1: 1024}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False),
    ]
]
op51.group.device = cuda:0
op51.group.iteration = (2097152, 1)
op51.sizes = ([2048, 1024], [])
buf27_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op51_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf43', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf50', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg37_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf51', get_index_5, add_3, None)
        return store
op51 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op51_op52_op53_op55.snodes[1] =
op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 2048}, None)]
op52.unmet_dependencies = [MemoryDep('buf51', c0, {c0: 2097152}, None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf52.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (2048, 1024)
op52.sizes = ([2048], [1024])
buf51_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op52_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf52', get_index_1, getitem)
        return store_reduction
op52 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op51_op52_op53_op55.snodes[2] =
op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 2048}, None)]
op53.unmet_dependencies = [MemoryDep('buf51', c0, {c0: 2097152}, None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf53.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (2048, 1024)
op53.sizes = ([2048], [1024])
buf51_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op53_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf53', get_index_1, getitem_1)
        return store_reduction
op53 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op51_op52_op53_op55.snodes[3] =
op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 2097152}, None)]
op55.unmet_dependencies = 
    [   MemoryDep('buf51', c0, {c0: 2097152}, None),
        MemoryDep('buf52', c0, {c0: 2048}, None),
        MemoryDep('buf53', c0, {c0: 2048}, None)]
op55.met_dependencies = 
    [   MemoryDep('arg38_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg39_1', c1, {c0: 2048, c1: 1024}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf55.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False),
    ]
]
op55.group.device = cuda:0
op55.group.iteration = (2097152, 1)
op55.sizes = ([2048, 1024], [])
buf51_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf53_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op55_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf52', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf53', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg38_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg39_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf55', get_index_5, add_1, None)
        return store
op55 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op51_op52_op53_op55 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op56: ExternKernelSchedulerNode(ExternKernelOut)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf55', mode=None)]
op56.met_dependencies = [StarDep(name='arg40_1', mode=None)]
op56.outputs = [
    buf56: ExternKernelOut
    buf56.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf56.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op56.node.kernel = extern_kernels.mm


op57: ExternKernelSchedulerNode(ExternKernelOut)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf55', mode=None)]
op57.met_dependencies = [StarDep(name='arg42_1', mode=None)]
op57.outputs = [
    buf57: ExternKernelOut
    buf57.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf57.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op57.node.kernel = extern_kernels.mm


op58: ExternKernelSchedulerNode(ExternKernelOut)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf55', mode=None)]
op58.met_dependencies = [StarDep(name='arg44_1', mode=None)]
op58.outputs = [
    buf58: ExternKernelOut
    buf58.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf58.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op58.node.kernel = extern_kernels.mm


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 2097152}, None)]
op59.unmet_dependencies = [   MemoryDep('buf56', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op59.met_dependencies = [MemoryDep('arg41_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (2097152, 1)
op59.sizes = ([2, 16, 1024, 64], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op59_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg41_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf59', get_index_2, add, None)
        return store
op59 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 2097152}, None)]
op60.unmet_dependencies = [   MemoryDep('buf57', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op60.met_dependencies = [MemoryDep('arg43_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (2097152, 1)
op60.sizes = ([2, 16, 1024, 64], [])
buf57_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op60_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg43_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf60', get_index_2, add, None)
        return store
op60 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 2097152}, None)]
op61.unmet_dependencies = [   MemoryDep('buf58', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op61.met_dependencies = [MemoryDep('arg45_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf61.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (2097152, 1)
op61.sizes = ([2, 16, 1024, 64], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op61_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg45_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf61', get_index_2, add, None)
        return store
op61 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op62: ExternKernelSchedulerNode(FallbackKernel)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = 
    [   StarDep(name='buf59', mode=None),
        StarDep(name='buf60', mode=None),
        StarDep(name='buf61', mode=None)]
op62.met_dependencies = []
op62.outputs = [
    buf62: FallbackKernel
    buf62.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf62.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False),
    ]
]
op62.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op63: ExternKernelSchedulerNode(MultiOutput)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf62', mode=None)]
op63.met_dependencies = []
op63.outputs = [
    buf63: MultiOutput
    buf63.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op63.node.kernel = None


op67: ExternKernelSchedulerNode(ExternKernelOut)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op67.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op67.outputs = [
    buf67: ExternKernelOut
    buf67.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf67.users = [
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False),
    ]
]
op67.node.kernel = extern_kernels.mm


op68_op69_op71: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op68_op69_op71.writes = 
    [   MemoryDep('buf68', c0, {c0: 2048}, None),
        MemoryDep('buf69', c0, {c0: 2048}, None),
        MemoryDep('buf71', c0, {c0: 2097152}, None)]
op68_op69_op71.unmet_dependencies = 
    [   MemoryDep('buf51', c0, {c0: 2097152}, None),
        MemoryDep('buf67', c0, {c0: 2097152}, None)]
op68_op69_op71.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg48_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg49_1', c1, {c0: 2048, c1: 1024}, None)]
op68_op69_op71.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf68.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf69.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op68_op69_op71.snodes[0] =
op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 2048}, None)]
op68.unmet_dependencies = 
    [   MemoryDep('buf51', c0, {c0: 2097152}, None),
        MemoryDep('buf67', c0, {c0: 2097152}, None)]
op68.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 2048, c1: 1024}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf68.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (2048, 1024)
op68.sizes = ([2048], [1024])
buf51_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op68_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf67', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg47_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf68', get_index_3, getitem)
        return store_reduction
op68 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op68_op69_op71.snodes[1] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 2048}, None)]
op69.unmet_dependencies = 
    [   MemoryDep('buf51', c0, {c0: 2097152}, None),
        MemoryDep('buf67', c0, {c0: 2097152}, None)]
op69.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 2048, c1: 1024}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf69.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (2048, 1024)
op69.sizes = ([2048], [1024])
buf51_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op69_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf67', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg47_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf69', get_index_3, getitem_1)
        return store_reduction
op69 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op68_op69_op71.snodes[2] =
op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 2097152}, None)]
op71.unmet_dependencies = 
    [   MemoryDep('buf51', c0, {c0: 2097152}, None),
        MemoryDep('buf67', c0, {c0: 2097152}, None),
        MemoryDep('buf68', c0, {c0: 2048}, None),
        MemoryDep('buf69', c0, {c0: 2048}, None)]
op71.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg48_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg49_1', c1, {c0: 2048, c1: 1024}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (2097152, 1)
op71.sizes = ([2048, 1024], [])
buf51_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf69_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op71_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf67', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg47_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf68', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf69', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg48_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg49_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf71', get_index_7, add_3, None)
        return store
op71 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op68_op69_op71 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op72: ExternKernelSchedulerNode(ExternKernelOut)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='arg50_1', mode=None)]
op72.outputs = [
    buf72: ExternKernelOut
    buf72.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op72.node.kernel = extern_kernels.mm


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 8388608}, None)]
op73.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 8388608}, None)]
op73.met_dependencies = [MemoryDep('arg51_1', c1, {c0: 2048, c1: 4096}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (8388608, 1)
op73.sizes = ([2048, 4096], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op73_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg51_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf72', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg51_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf73', get_index_4, mul_2, None)
        return store
op73 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op74: ExternKernelSchedulerNode(ExternKernelOut)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='arg52_1', mode=None)]
op74.outputs = [
    buf74: ExternKernelOut
    buf74.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf74.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False)]
]
op74.node.kernel = extern_kernels.mm


op75_op76_op77_op79: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op75_op76_op77_op79.writes = 
    [   MemoryDep('buf75', c0, {c0: 2097152}, None),
        MemoryDep('buf76', c0, {c0: 2048}, None),
        MemoryDep('buf77', c0, {c0: 2048}, None),
        MemoryDep('buf79', c0, {c0: 2097152}, None)]
op75_op76_op77_op79.unmet_dependencies = 
    [   MemoryDep('buf51', c0, {c0: 2097152}, None),
        MemoryDep('buf67', c0, {c0: 2097152}, None),
        MemoryDep('buf74', c0, {c0: 2097152}, None)]
op75_op76_op77_op79.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg53_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg54_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg55_1', c1, {c0: 2048, c1: 1024}, None)]
op75_op76_op77_op79.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf75.users = [
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
    ]
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf76.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf77.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf79.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False),
    ]
]
op75_op76_op77_op79.snodes[0] =
op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 2097152}, None)]
op75.unmet_dependencies = 
    [   MemoryDep('buf51', c0, {c0: 2097152}, None),
        MemoryDep('buf67', c0, {c0: 2097152}, None),
        MemoryDep('buf74', c0, {c0: 2097152}, None)]
op75.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg53_1', c1, {c0: 2048, c1: 1024}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf75.users = [
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
    ]
]
op75.group.device = cuda:0
op75.group.iteration = (2097152, 1)
op75.sizes = ([2048, 1024], [])
buf51_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op75_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf67', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg47_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf74', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg53_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf75', get_index_5, add_3, None)
        return store
op75 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op75_op76_op77_op79.snodes[1] =
op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 2048}, None)]
op76.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 2097152}, None)]
op76.met_dependencies = []
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf76.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (2048, 1024)
op76.sizes = ([2048], [1024])
buf75_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op76_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf76', get_index_1, getitem)
        return store_reduction
op76 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op75_op76_op77_op79.snodes[2] =
op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 2048}, None)]
op77.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 2097152}, None)]
op77.met_dependencies = []
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf77.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (2048, 1024)
op77.sizes = ([2048], [1024])
buf75_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op77_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf77', get_index_1, getitem_1)
        return store_reduction
op77 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op75_op76_op77_op79.snodes[3] =
op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 2097152}, None)]
op79.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 2097152}, None),
        MemoryDep('buf76', c0, {c0: 2048}, None),
        MemoryDep('buf77', c0, {c0: 2048}, None)]
op79.met_dependencies = 
    [   MemoryDep('arg54_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg55_1', c1, {c0: 2048, c1: 1024}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf79.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False),
    ]
]
op79.group.device = cuda:0
op79.group.iteration = (2097152, 1)
op79.sizes = ([2048, 1024], [])
buf75_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf77_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op79_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf76', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf77', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg54_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg55_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf79', get_index_5, add_1, None)
        return store
op79 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op75_op76_op77_op79 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op80: ExternKernelSchedulerNode(ExternKernelOut)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op80.met_dependencies = [StarDep(name='arg56_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelOut
    buf80.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf80.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op80.node.kernel = extern_kernels.mm


op81: ExternKernelSchedulerNode(ExternKernelOut)
op81.writes = [StarDep(name='buf81', mode=None)]
op81.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op81.met_dependencies = [StarDep(name='arg58_1', mode=None)]
op81.outputs = [
    buf81: ExternKernelOut
    buf81.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf81.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op81.node.kernel = extern_kernels.mm


op82: ExternKernelSchedulerNode(ExternKernelOut)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op82.met_dependencies = [StarDep(name='arg60_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelOut
    buf82.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf82.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op82.node.kernel = extern_kernels.mm


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 2097152}, None)]
op83.unmet_dependencies = [   MemoryDep('buf80', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op83.met_dependencies = [MemoryDep('arg57_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (2097152, 1)
op83.sizes = ([2, 16, 1024, 64], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op83_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg57_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf83', get_index_2, add, None)
        return store
op83 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 2097152}, None)]
op84.unmet_dependencies = [   MemoryDep('buf81', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op84.met_dependencies = [MemoryDep('arg59_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (2097152, 1)
op84.sizes = ([2, 16, 1024, 64], [])
buf81_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op84_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg59_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf84', get_index_2, add, None)
        return store
op84 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 2097152}, None)]
op85.unmet_dependencies = [   MemoryDep('buf82', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op85.met_dependencies = [MemoryDep('arg61_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (2097152, 1)
op85.sizes = ([2, 16, 1024, 64], [])
buf82_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op85_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf85', get_index_2, add, None)
        return store
op85 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op86: ExternKernelSchedulerNode(FallbackKernel)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = 
    [   StarDep(name='buf83', mode=None),
        StarDep(name='buf84', mode=None),
        StarDep(name='buf85', mode=None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: FallbackKernel
    buf86.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf86.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False),
    ]
]
op86.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op87: ExternKernelSchedulerNode(MultiOutput)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op87.met_dependencies = []
op87.outputs = [
    buf87: MultiOutput
    buf87.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op87.node.kernel = None


op91: ExternKernelSchedulerNode(ExternKernelOut)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op91.met_dependencies = [StarDep(name='arg62_1', mode=None)]
op91.outputs = [
    buf91: ExternKernelOut
    buf91.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf91.users = [
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
    ]
]
op91.node.kernel = extern_kernels.mm


op92_op93_op95: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op92_op93_op95.writes = 
    [   MemoryDep('buf92', c0, {c0: 2048}, None),
        MemoryDep('buf93', c0, {c0: 2048}, None),
        MemoryDep('buf95', c0, {c0: 2097152}, None)]
op92_op93_op95.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 2097152}, None),
        MemoryDep('buf91', c0, {c0: 2097152}, None)]
op92_op93_op95.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg64_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg65_1', c1, {c0: 2048, c1: 1024}, None)]
op92_op93_op95.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf92.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf93.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op92_op93_op95.snodes[0] =
op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 2048}, None)]
op92.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 2097152}, None),
        MemoryDep('buf91', c0, {c0: 2097152}, None)]
op92.met_dependencies = [MemoryDep('arg63_1', c1, {c0: 2048, c1: 1024}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf92.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (2048, 1024)
op92.sizes = ([2048], [1024])
buf75_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op92_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf91', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf92', get_index_3, getitem)
        return store_reduction
op92 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op92_op93_op95.snodes[1] =
op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 2048}, None)]
op93.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 2097152}, None),
        MemoryDep('buf91', c0, {c0: 2097152}, None)]
op93.met_dependencies = [MemoryDep('arg63_1', c1, {c0: 2048, c1: 1024}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf93.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (2048, 1024)
op93.sizes = ([2048], [1024])
buf75_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op93_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf91', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf93', get_index_3, getitem_1)
        return store_reduction
op93 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op92_op93_op95.snodes[2] =
op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 2097152}, None)]
op95.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 2097152}, None),
        MemoryDep('buf91', c0, {c0: 2097152}, None),
        MemoryDep('buf92', c0, {c0: 2048}, None),
        MemoryDep('buf93', c0, {c0: 2048}, None)]
op95.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg64_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg65_1', c1, {c0: 2048, c1: 1024}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (2097152, 1)
op95.sizes = ([2048, 1024], [])
buf75_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf93_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op95_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf91', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf92', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf93', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg64_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg65_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf95', get_index_7, add_3, None)
        return store
op95 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op92_op93_op95 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op96: ExternKernelSchedulerNode(ExternKernelOut)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op96.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op96.outputs = [
    buf96: ExternKernelOut
    buf96.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf96.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False)]
]
op96.node.kernel = extern_kernels.mm


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 8388608}, None)]
op97.unmet_dependencies = [MemoryDep('buf96', c0, {c0: 8388608}, None)]
op97.met_dependencies = [MemoryDep('arg67_1', c1, {c0: 2048, c1: 4096}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (8388608, 1)
op97.sizes = ([2048, 4096], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op97_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf96', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg67_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf97', get_index_4, mul_2, None)
        return store
op97 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op98: ExternKernelSchedulerNode(ExternKernelOut)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf97', mode=None)]
op98.met_dependencies = [StarDep(name='arg68_1', mode=None)]
op98.outputs = [
    buf98: ExternKernelOut
    buf98.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False)]
]
op98.node.kernel = extern_kernels.mm


op99_op100_op101_op103: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op99_op100_op101_op103.writes = 
    [   MemoryDep('buf100', c0, {c0: 2048}, None),
        MemoryDep('buf101', c0, {c0: 2048}, None),
        MemoryDep('buf103', c0, {c0: 2097152}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op99_op100_op101_op103.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 2097152}, None),
        MemoryDep('buf91', c0, {c0: 2097152}, None),
        MemoryDep('buf98', c0, {c0: 2097152}, None)]
op99_op100_op101_op103.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg69_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg70_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg71_1', c1, {c0: 2048, c1: 1024}, None)]
op99_op100_op101_op103.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False),
    ]
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf100.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf101.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf103.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
    ]
]
op99_op100_op101_op103.snodes[0] =
op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 2097152}, None)]
op99.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 2097152}, None),
        MemoryDep('buf91', c0, {c0: 2097152}, None),
        MemoryDep('buf98', c0, {c0: 2097152}, None)]
op99.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg69_1', c1, {c0: 2048, c1: 1024}, None)]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False),
    ]
]
op99.group.device = cuda:0
op99.group.iteration = (2097152, 1)
op99.sizes = ([2048, 1024], [])
buf75_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op99_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf91', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf98', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg69_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf99', get_index_5, add_3, None)
        return store
op99 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op99_op100_op101_op103.snodes[1] =
op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 2048}, None)]
op100.unmet_dependencies = [MemoryDep('buf99', c0, {c0: 2097152}, None)]
op100.met_dependencies = []
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf100.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (2048, 1024)
op100.sizes = ([2048], [1024])
buf99_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op100_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf100', get_index_1, getitem)
        return store_reduction
op100 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op99_op100_op101_op103.snodes[2] =
op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 2048}, None)]
op101.unmet_dependencies = [MemoryDep('buf99', c0, {c0: 2097152}, None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf101.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (2048, 1024)
op101.sizes = ([2048], [1024])
buf99_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op101_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf101', get_index_1, getitem_1)
        return store_reduction
op101 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op99_op100_op101_op103.snodes[3] =
op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 2097152}, None)]
op103.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 2048}, None),
        MemoryDep('buf101', c0, {c0: 2048}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op103.met_dependencies = 
    [   MemoryDep('arg70_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg71_1', c1, {c0: 2048, c1: 1024}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf103.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
    ]
]
op103.group.device = cuda:0
op103.group.iteration = (2097152, 1)
op103.sizes = ([2048, 1024], [])
buf99_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf101_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op103_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf100', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf101', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg70_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg71_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf103', get_index_5, add_1, None)
        return store
op103 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op99_op100_op101_op103 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='arg72_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf104.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op104.node.kernel = extern_kernels.mm


op105: ExternKernelSchedulerNode(ExternKernelOut)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op105.met_dependencies = [StarDep(name='arg74_1', mode=None)]
op105.outputs = [
    buf105: ExternKernelOut
    buf105.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf105.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op105.node.kernel = extern_kernels.mm


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op106.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf106.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op106.node.kernel = extern_kernels.mm


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 2097152}, None)]
op107.unmet_dependencies = [   MemoryDep('buf104', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op107.met_dependencies = [MemoryDep('arg73_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (2097152, 1)
op107.sizes = ([2, 16, 1024, 64], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op107_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg73_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf107', get_index_2, add, None)
        return store
op107 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 2097152}, None)]
op108.unmet_dependencies = [   MemoryDep('buf105', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op108.met_dependencies = [MemoryDep('arg75_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf108.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (2097152, 1)
op108.sizes = ([2, 16, 1024, 64], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op108_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg75_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf108', get_index_2, add, None)
        return store
op108 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 2097152}, None)]
op109.unmet_dependencies = [   MemoryDep('buf106', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op109.met_dependencies = [MemoryDep('arg77_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (2097152, 1)
op109.sizes = ([2, 16, 1024, 64], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op109_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf109', get_index_2, add, None)
        return store
op109 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op110: ExternKernelSchedulerNode(FallbackKernel)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = 
    [   StarDep(name='buf107', mode=None),
        StarDep(name='buf108', mode=None),
        StarDep(name='buf109', mode=None)]
op110.met_dependencies = []
op110.outputs = [
    buf110: FallbackKernel
    buf110.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf110.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False),
    ]
]
op110.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op111: ExternKernelSchedulerNode(MultiOutput)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: MultiOutput
    buf111.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op111.node.kernel = None


op115: ExternKernelSchedulerNode(ExternKernelOut)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf111', mode=None)]
op115.met_dependencies = [StarDep(name='arg78_1', mode=None)]
op115.outputs = [
    buf115: ExternKernelOut
    buf115.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf115.users = [
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False),
    ]
]
op115.node.kernel = extern_kernels.mm


op116_op117_op119: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op116_op117_op119.writes = 
    [   MemoryDep('buf116', c0, {c0: 2048}, None),
        MemoryDep('buf117', c0, {c0: 2048}, None),
        MemoryDep('buf119', c0, {c0: 2097152}, None)]
op116_op117_op119.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 2097152}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op116_op117_op119.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg80_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg81_1', c1, {c0: 2048, c1: 1024}, None)]
op116_op117_op119.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf116.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf117.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op116_op117_op119.snodes[0] =
op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 2048}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 2097152}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op116.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 2048, c1: 1024}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf116.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (2048, 1024)
op116.sizes = ([2048], [1024])
buf99_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op116_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf115', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf116', get_index_3, getitem)
        return store_reduction
op116 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op116_op117_op119.snodes[1] =
op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 2048}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 2097152}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op117.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 2048, c1: 1024}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf117.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (2048, 1024)
op117.sizes = ([2048], [1024])
buf99_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op117_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf115', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf117', get_index_3, getitem_1)
        return store_reduction
op117 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op116_op117_op119.snodes[2] =
op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 2097152}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 2097152}, None),
        MemoryDep('buf116', c0, {c0: 2048}, None),
        MemoryDep('buf117', c0, {c0: 2048}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op119.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg80_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg81_1', c1, {c0: 2048, c1: 1024}, None)]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (2097152, 1)
op119.sizes = ([2048, 1024], [])
buf99_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf117_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op119_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf115', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf116', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf117', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg80_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg81_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf119', get_index_7, add_3, None)
        return store
op119 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op116_op117_op119 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op120: ExternKernelSchedulerNode(ExternKernelOut)
op120.writes = [StarDep(name='buf120', mode=None)]
op120.unmet_dependencies = [StarDep(name='buf119', mode=None)]
op120.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op120.outputs = [
    buf120: ExternKernelOut
    buf120.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf120.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False)]
]
op120.node.kernel = extern_kernels.mm


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 8388608}, None)]
op121.unmet_dependencies = [MemoryDep('buf120', c0, {c0: 8388608}, None)]
op121.met_dependencies = [MemoryDep('arg83_1', c1, {c0: 2048, c1: 4096}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (8388608, 1)
op121.sizes = ([2048, 4096], [])
buf120_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op121_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg83_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf120', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg83_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf121', get_index_4, mul_2, None)
        return store
op121 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op122: ExternKernelSchedulerNode(ExternKernelOut)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf121', mode=None)]
op122.met_dependencies = [StarDep(name='arg84_1', mode=None)]
op122.outputs = [
    buf122: ExternKernelOut
    buf122.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf122.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False)]
]
op122.node.kernel = extern_kernels.mm


op123_op124_op125_op127: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op123_op124_op125_op127.writes = 
    [   MemoryDep('buf123', c0, {c0: 2097152}, None),
        MemoryDep('buf124', c0, {c0: 2048}, None),
        MemoryDep('buf125', c0, {c0: 2048}, None),
        MemoryDep('buf127', c0, {c0: 2097152}, None)]
op123_op124_op125_op127.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 2097152}, None),
        MemoryDep('buf122', c0, {c0: 2097152}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op123_op124_op125_op127.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg85_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg86_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg87_1', c1, {c0: 2048, c1: 1024}, None)]
op123_op124_op125_op127.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf123.users = [
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf124.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf125.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf127.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
    ]
]
op123_op124_op125_op127.snodes[0] =
op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 2097152}, None)]
op123.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 2097152}, None),
        MemoryDep('buf122', c0, {c0: 2097152}, None),
        MemoryDep('buf99', c0, {c0: 2097152}, None)]
op123.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg85_1', c1, {c0: 2048, c1: 1024}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf123.users = [
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
]
op123.group.device = cuda:0
op123.group.iteration = (2097152, 1)
op123.sizes = ([2048, 1024], [])
buf99_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op123_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf115', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf122', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg85_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf123', get_index_5, add_3, None)
        return store
op123 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op123_op124_op125_op127.snodes[1] =
op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 2048}, None)]
op124.unmet_dependencies = [MemoryDep('buf123', c0, {c0: 2097152}, None)]
op124.met_dependencies = []
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf124.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (2048, 1024)
op124.sizes = ([2048], [1024])
buf123_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op124_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf124', get_index_1, getitem)
        return store_reduction
op124 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op123_op124_op125_op127.snodes[2] =
op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 2048}, None)]
op125.unmet_dependencies = [MemoryDep('buf123', c0, {c0: 2097152}, None)]
op125.met_dependencies = []
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf125.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (2048, 1024)
op125.sizes = ([2048], [1024])
buf123_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op125_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf125', get_index_1, getitem_1)
        return store_reduction
op125 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op123_op124_op125_op127.snodes[3] =
op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 2097152}, None)]
op127.unmet_dependencies = 
    [   MemoryDep('buf123', c0, {c0: 2097152}, None),
        MemoryDep('buf124', c0, {c0: 2048}, None),
        MemoryDep('buf125', c0, {c0: 2048}, None)]
op127.met_dependencies = 
    [   MemoryDep('arg86_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg87_1', c1, {c0: 2048, c1: 1024}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf127.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
    ]
]
op127.group.device = cuda:0
op127.group.iteration = (2097152, 1)
op127.sizes = ([2048, 1024], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf125_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op127_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf124', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf125', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg86_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg87_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf127', get_index_5, add_1, None)
        return store
op127 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op123_op124_op125_op127 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op128: ExternKernelSchedulerNode(ExternKernelOut)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf127', mode=None)]
op128.met_dependencies = [StarDep(name='arg88_1', mode=None)]
op128.outputs = [
    buf128: ExternKernelOut
    buf128.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf128.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op128.node.kernel = extern_kernels.mm


op129: ExternKernelSchedulerNode(ExternKernelOut)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf127', mode=None)]
op129.met_dependencies = [StarDep(name='arg90_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelOut
    buf129.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op129.node.kernel = extern_kernels.mm


op130: ExternKernelSchedulerNode(ExternKernelOut)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf127', mode=None)]
op130.met_dependencies = [StarDep(name='arg92_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelOut
    buf130.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf130.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op130.node.kernel = extern_kernels.mm


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 2097152}, None)]
op131.unmet_dependencies = [   MemoryDep('buf128', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op131.met_dependencies = [MemoryDep('arg89_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (2097152, 1)
op131.sizes = ([2, 16, 1024, 64], [])
buf128_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op131_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg89_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf131', get_index_2, add, None)
        return store
op131 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 2097152}, None)]
op132.unmet_dependencies = [   MemoryDep('buf129', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op132.met_dependencies = [MemoryDep('arg91_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (2097152, 1)
op132.sizes = ([2, 16, 1024, 64], [])
buf129_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op132_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg91_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf132', get_index_2, add, None)
        return store
op132 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 2097152}, None)]
op133.unmet_dependencies = [   MemoryDep('buf130', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op133.met_dependencies = [MemoryDep('arg93_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (2097152, 1)
op133.sizes = ([2, 16, 1024, 64], [])
buf130_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op133_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg93_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf133', get_index_2, add, None)
        return store
op133 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op134: ExternKernelSchedulerNode(FallbackKernel)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = 
    [   StarDep(name='buf131', mode=None),
        StarDep(name='buf132', mode=None),
        StarDep(name='buf133', mode=None)]
op134.met_dependencies = []
op134.outputs = [
    buf134: FallbackKernel
    buf134.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf134.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False),
    ]
]
op134.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op135: ExternKernelSchedulerNode(MultiOutput)
op135.writes = [StarDep(name='buf135', mode=None)]
op135.unmet_dependencies = [StarDep(name='buf134', mode=None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: MultiOutput
    buf135.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op135.node.kernel = None


op139: ExternKernelSchedulerNode(ExternKernelOut)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op139.met_dependencies = [StarDep(name='arg94_1', mode=None)]
op139.outputs = [
    buf139: ExternKernelOut
    buf139.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
]
op139.node.kernel = extern_kernels.mm


op140_op141_op143: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op140_op141_op143.writes = 
    [   MemoryDep('buf140', c0, {c0: 2048}, None),
        MemoryDep('buf141', c0, {c0: 2048}, None),
        MemoryDep('buf143', c0, {c0: 2097152}, None)]
op140_op141_op143.unmet_dependencies = 
    [   MemoryDep('buf123', c0, {c0: 2097152}, None),
        MemoryDep('buf139', c0, {c0: 2097152}, None)]
op140_op141_op143.met_dependencies = 
    [   MemoryDep('arg95_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg96_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg97_1', c1, {c0: 2048, c1: 1024}, None)]
op140_op141_op143.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf140.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf141.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op140_op141_op143.snodes[0] =
op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 2048}, None)]
op140.unmet_dependencies = 
    [   MemoryDep('buf123', c0, {c0: 2097152}, None),
        MemoryDep('buf139', c0, {c0: 2097152}, None)]
op140.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 2048, c1: 1024}, None)]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf140.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (2048, 1024)
op140.sizes = ([2048], [1024])
buf123_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op140_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf139', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg95_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf140', get_index_3, getitem)
        return store_reduction
op140 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op140_op141_op143.snodes[1] =
op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 2048}, None)]
op141.unmet_dependencies = 
    [   MemoryDep('buf123', c0, {c0: 2097152}, None),
        MemoryDep('buf139', c0, {c0: 2097152}, None)]
op141.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 2048, c1: 1024}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf141.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (2048, 1024)
op141.sizes = ([2048], [1024])
buf123_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op141_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf139', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg95_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf141', get_index_3, getitem_1)
        return store_reduction
op141 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op140_op141_op143.snodes[2] =
op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 2097152}, None)]
op143.unmet_dependencies = 
    [   MemoryDep('buf123', c0, {c0: 2097152}, None),
        MemoryDep('buf139', c0, {c0: 2097152}, None),
        MemoryDep('buf140', c0, {c0: 2048}, None),
        MemoryDep('buf141', c0, {c0: 2048}, None)]
op143.met_dependencies = 
    [   MemoryDep('arg95_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg96_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg97_1', c1, {c0: 2048, c1: 1024}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (2097152, 1)
op143.sizes = ([2048, 1024], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf141_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op143_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf139', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg95_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf140', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf141', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg96_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg97_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf143', get_index_7, add_3, None)
        return store
op143 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op140_op141_op143 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op144: ExternKernelSchedulerNode(ExternKernelOut)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf143', mode=None)]
op144.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op144.outputs = [
    buf144: ExternKernelOut
    buf144.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf144.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False)]
]
op144.node.kernel = extern_kernels.mm


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 8388608}, None)]
op145.unmet_dependencies = [MemoryDep('buf144', c0, {c0: 8388608}, None)]
op145.met_dependencies = [MemoryDep('arg99_1', c1, {c0: 2048, c1: 4096}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (8388608, 1)
op145.sizes = ([2048, 4096], [])
buf144_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op145_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg99_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf144', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg99_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf145', get_index_4, mul_2, None)
        return store
op145 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op146.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf146.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False)]
]
op146.node.kernel = extern_kernels.mm


op147_op148_op149_op151: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op147_op148_op149_op151.writes = 
    [   MemoryDep('buf147', c0, {c0: 2097152}, None),
        MemoryDep('buf148', c0, {c0: 2048}, None),
        MemoryDep('buf149', c0, {c0: 2048}, None),
        MemoryDep('buf151', c0, {c0: 2097152}, None)]
op147_op148_op149_op151.unmet_dependencies = 
    [   MemoryDep('buf123', c0, {c0: 2097152}, None),
        MemoryDep('buf139', c0, {c0: 2097152}, None),
        MemoryDep('buf146', c0, {c0: 2097152}, None)]
op147_op148_op149_op151.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg102_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg103_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg95_1', c1, {c0: 2048, c1: 1024}, None)]
op147_op148_op149_op151.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
    ]
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf148.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf149.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf151.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False),
    ]
]
op147_op148_op149_op151.snodes[0] =
op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 2097152}, None)]
op147.unmet_dependencies = 
    [   MemoryDep('buf123', c0, {c0: 2097152}, None),
        MemoryDep('buf139', c0, {c0: 2097152}, None),
        MemoryDep('buf146', c0, {c0: 2097152}, None)]
op147.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg95_1', c1, {c0: 2048, c1: 1024}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
    ]
]
op147.group.device = cuda:0
op147.group.iteration = (2097152, 1)
op147.sizes = ([2048, 1024], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op147_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf139', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg95_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf146', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg101_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf147', get_index_5, add_3, None)
        return store
op147 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op147_op148_op149_op151.snodes[1] =
op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 2048}, None)]
op148.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 2097152}, None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf148.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (2048, 1024)
op148.sizes = ([2048], [1024])
buf147_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op148_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf148', get_index_1, getitem)
        return store_reduction
op148 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op147_op148_op149_op151.snodes[2] =
op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 2048}, None)]
op149.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 2097152}, None)]
op149.met_dependencies = []
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf149.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (2048, 1024)
op149.sizes = ([2048], [1024])
buf147_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op149_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf149', get_index_1, getitem_1)
        return store_reduction
op149 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op147_op148_op149_op151.snodes[3] =
op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 2097152}, None)]
op151.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 2097152}, None),
        MemoryDep('buf148', c0, {c0: 2048}, None),
        MemoryDep('buf149', c0, {c0: 2048}, None)]
op151.met_dependencies = 
    [   MemoryDep('arg102_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg103_1', c1, {c0: 2048, c1: 1024}, None)]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf151.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False),
    ]
]
op151.group.device = cuda:0
op151.group.iteration = (2097152, 1)
op151.sizes = ([2048, 1024], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf149_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op151_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf148', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf149', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg102_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg103_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf151', get_index_5, add_1, None)
        return store
op151 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op147_op148_op149_op151 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op152: ExternKernelSchedulerNode(ExternKernelOut)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf151', mode=None)]
op152.met_dependencies = [StarDep(name='arg104_1', mode=None)]
op152.outputs = [
    buf152: ExternKernelOut
    buf152.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf152.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op152.node.kernel = extern_kernels.mm


op153: ExternKernelSchedulerNode(ExternKernelOut)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = [StarDep(name='buf151', mode=None)]
op153.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op153.outputs = [
    buf153: ExternKernelOut
    buf153.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf153.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op153.node.kernel = extern_kernels.mm


op154: ExternKernelSchedulerNode(ExternKernelOut)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf151', mode=None)]
op154.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op154.outputs = [
    buf154: ExternKernelOut
    buf154.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf154.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op154.node.kernel = extern_kernels.mm


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 2097152}, None)]
op155.unmet_dependencies = [   MemoryDep('buf152', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op155.met_dependencies = [MemoryDep('arg105_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (2097152, 1)
op155.sizes = ([2, 16, 1024, 64], [])
buf152_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op155_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg105_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf155', get_index_2, add, None)
        return store
op155 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 2097152}, None)]
op156.unmet_dependencies = [   MemoryDep('buf153', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op156.met_dependencies = [MemoryDep('arg107_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (2097152, 1)
op156.sizes = ([2, 16, 1024, 64], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op156_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg107_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf156', get_index_2, add, None)
        return store
op156 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 2097152}, None)]
op157.unmet_dependencies = [   MemoryDep('buf154', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op157.met_dependencies = [MemoryDep('arg109_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (2097152, 1)
op157.sizes = ([2, 16, 1024, 64], [])
buf154_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op157_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg109_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf157', get_index_2, add, None)
        return store
op157 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op158: ExternKernelSchedulerNode(FallbackKernel)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = 
    [   StarDep(name='buf155', mode=None),
        StarDep(name='buf156', mode=None),
        StarDep(name='buf157', mode=None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: FallbackKernel
    buf158.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf158.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False),
    ]
]
op158.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op159: ExternKernelSchedulerNode(MultiOutput)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf158', mode=None)]
op159.met_dependencies = []
op159.outputs = [
    buf159: MultiOutput
    buf159.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op159.node.kernel = None


op163: ExternKernelSchedulerNode(ExternKernelOut)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = [StarDep(name='buf159', mode=None)]
op163.met_dependencies = [StarDep(name='arg110_1', mode=None)]
op163.outputs = [
    buf163: ExternKernelOut
    buf163.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf163.users = [
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
    ]
]
op163.node.kernel = extern_kernels.mm


op164_op165_op167: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op164_op165_op167.writes = 
    [   MemoryDep('buf164', c0, {c0: 2048}, None),
        MemoryDep('buf165', c0, {c0: 2048}, None),
        MemoryDep('buf167', c0, {c0: 2097152}, None)]
op164_op165_op167.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 2097152}, None),
        MemoryDep('buf163', c0, {c0: 2097152}, None)]
op164_op165_op167.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg112_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg113_1', c1, {c0: 2048, c1: 1024}, None)]
op164_op165_op167.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf164.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf165.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op164_op165_op167.snodes[0] =
op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 2048}, None)]
op164.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 2097152}, None),
        MemoryDep('buf163', c0, {c0: 2097152}, None)]
op164.met_dependencies = [MemoryDep('arg111_1', c1, {c0: 2048, c1: 1024}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf164.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (2048, 1024)
op164.sizes = ([2048], [1024])
buf147_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op164_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf163', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg111_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf164', get_index_3, getitem)
        return store_reduction
op164 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op164_op165_op167.snodes[1] =
op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 2048}, None)]
op165.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 2097152}, None),
        MemoryDep('buf163', c0, {c0: 2097152}, None)]
op165.met_dependencies = [MemoryDep('arg111_1', c1, {c0: 2048, c1: 1024}, None)]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf165.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (2048, 1024)
op165.sizes = ([2048], [1024])
buf147_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op165_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf163', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg111_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf165', get_index_3, getitem_1)
        return store_reduction
op165 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op164_op165_op167.snodes[2] =
op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 2097152}, None)]
op167.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 2097152}, None),
        MemoryDep('buf163', c0, {c0: 2097152}, None),
        MemoryDep('buf164', c0, {c0: 2048}, None),
        MemoryDep('buf165', c0, {c0: 2048}, None)]
op167.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg112_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg113_1', c1, {c0: 2048, c1: 1024}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (2097152, 1)
op167.sizes = ([2048, 1024], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf165_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op167_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf163', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg111_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf164', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf165', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg112_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg113_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf167', get_index_7, add_3, None)
        return store
op167 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op164_op165_op167 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op168: ExternKernelSchedulerNode(ExternKernelOut)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op168.met_dependencies = [StarDep(name='arg114_1', mode=None)]
op168.outputs = [
    buf168: ExternKernelOut
    buf168.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf168.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False)]
]
op168.node.kernel = extern_kernels.mm


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 8388608}, None)]
op169.unmet_dependencies = [MemoryDep('buf168', c0, {c0: 8388608}, None)]
op169.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 2048, c1: 4096}, None)]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf169.users = [NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (8388608, 1)
op169.sizes = ([2048, 4096], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op169_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg115_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf168', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg115_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf169', get_index_4, mul_2, None)
        return store
op169 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op170: ExternKernelSchedulerNode(ExternKernelOut)
op170.writes = [StarDep(name='buf170', mode=None)]
op170.unmet_dependencies = [StarDep(name='buf169', mode=None)]
op170.met_dependencies = [StarDep(name='arg116_1', mode=None)]
op170.outputs = [
    buf170: ExternKernelOut
    buf170.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf170.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False)]
]
op170.node.kernel = extern_kernels.mm


op171_op172_op173_op175: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op171_op172_op173_op175.writes = 
    [   MemoryDep('buf171', c0, {c0: 2097152}, None),
        MemoryDep('buf172', c0, {c0: 2048}, None),
        MemoryDep('buf173', c0, {c0: 2048}, None),
        MemoryDep('buf175', c0, {c0: 2097152}, None)]
op171_op172_op173_op175.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 2097152}, None),
        MemoryDep('buf163', c0, {c0: 2097152}, None),
        MemoryDep('buf170', c0, {c0: 2097152}, None)]
op171_op172_op173_op175.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg117_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg118_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg119_1', c1, {c0: 2048, c1: 1024}, None)]
op171_op172_op173_op175.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False),
    ]
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf172.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf173.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf175.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False),
    ]
]
op171_op172_op173_op175.snodes[0] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 2097152}, None)]
op171.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 2097152}, None),
        MemoryDep('buf163', c0, {c0: 2097152}, None),
        MemoryDep('buf170', c0, {c0: 2097152}, None)]
op171.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg117_1', c1, {c0: 2048, c1: 1024}, None)]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False),
    ]
]
op171.group.device = cuda:0
op171.group.iteration = (2097152, 1)
op171.sizes = ([2048, 1024], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op171_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf163', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg111_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf170', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg117_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf171', get_index_5, add_3, None)
        return store
op171 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op171_op172_op173_op175.snodes[1] =
op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 2048}, None)]
op172.unmet_dependencies = [MemoryDep('buf171', c0, {c0: 2097152}, None)]
op172.met_dependencies = []
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf172.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (2048, 1024)
op172.sizes = ([2048], [1024])
buf171_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op172_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf172', get_index_1, getitem)
        return store_reduction
op172 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op171_op172_op173_op175.snodes[2] =
op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 2048}, None)]
op173.unmet_dependencies = [MemoryDep('buf171', c0, {c0: 2097152}, None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf173.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (2048, 1024)
op173.sizes = ([2048], [1024])
buf171_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op173_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf173', get_index_1, getitem_1)
        return store_reduction
op173 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op171_op172_op173_op175.snodes[3] =
op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 2097152}, None)]
op175.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 2097152}, None),
        MemoryDep('buf172', c0, {c0: 2048}, None),
        MemoryDep('buf173', c0, {c0: 2048}, None)]
op175.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg119_1', c1, {c0: 2048, c1: 1024}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf175.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False),
    ]
]
op175.group.device = cuda:0
op175.group.iteration = (2097152, 1)
op175.sizes = ([2048, 1024], [])
buf171_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf173_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op175_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf172', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf173', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg118_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg119_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf175', get_index_5, add_1, None)
        return store
op175 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op171_op172_op173_op175 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op176: ExternKernelSchedulerNode(ExternKernelOut)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf175', mode=None)]
op176.met_dependencies = [StarDep(name='arg120_1', mode=None)]
op176.outputs = [
    buf176: ExternKernelOut
    buf176.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf176.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op176.node.kernel = extern_kernels.mm


op177: ExternKernelSchedulerNode(ExternKernelOut)
op177.writes = [StarDep(name='buf177', mode=None)]
op177.unmet_dependencies = [StarDep(name='buf175', mode=None)]
op177.met_dependencies = [StarDep(name='arg122_1', mode=None)]
op177.outputs = [
    buf177: ExternKernelOut
    buf177.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf177.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op177.node.kernel = extern_kernels.mm


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf175', mode=None)]
op178.met_dependencies = [StarDep(name='arg124_1', mode=None)]
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op178.node.kernel = extern_kernels.mm


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 2097152}, None)]
op179.unmet_dependencies = [   MemoryDep('buf176', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op179.met_dependencies = [MemoryDep('arg121_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (2097152, 1)
op179.sizes = ([2, 16, 1024, 64], [])
buf176_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op179_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg121_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf179', get_index_2, add, None)
        return store
op179 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 2097152}, None)]
op180.unmet_dependencies = [   MemoryDep('buf177', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op180.met_dependencies = [MemoryDep('arg123_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf180.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (2097152, 1)
op180.sizes = ([2, 16, 1024, 64], [])
buf177_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op180_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg123_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf180', get_index_2, add, None)
        return store
op180 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 2097152}, None)]
op181.unmet_dependencies = [   MemoryDep('buf178', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op181.met_dependencies = [MemoryDep('arg125_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (2097152, 1)
op181.sizes = ([2, 16, 1024, 64], [])
buf178_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op181_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg125_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf181', get_index_2, add, None)
        return store
op181 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op182: ExternKernelSchedulerNode(FallbackKernel)
op182.writes = [StarDep(name='buf182', mode=None)]
op182.unmet_dependencies = 
    [   StarDep(name='buf179', mode=None),
        StarDep(name='buf180', mode=None),
        StarDep(name='buf181', mode=None)]
op182.met_dependencies = []
op182.outputs = [
    buf182: FallbackKernel
    buf182.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf182.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
    ]
]
op182.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op183: ExternKernelSchedulerNode(MultiOutput)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf182', mode=None)]
op183.met_dependencies = []
op183.outputs = [
    buf183: MultiOutput
    buf183.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf183.users = [NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op183.node.kernel = None


op187: ExternKernelSchedulerNode(ExternKernelOut)
op187.writes = [StarDep(name='buf187', mode=None)]
op187.unmet_dependencies = [StarDep(name='buf183', mode=None)]
op187.met_dependencies = [StarDep(name='arg126_1', mode=None)]
op187.outputs = [
    buf187: ExternKernelOut
    buf187.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf187.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False),
    ]
]
op187.node.kernel = extern_kernels.mm


op188_op189_op191: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op188_op189_op191.writes = 
    [   MemoryDep('buf188', c0, {c0: 2048}, None),
        MemoryDep('buf189', c0, {c0: 2048}, None),
        MemoryDep('buf191', c0, {c0: 2097152}, None)]
op188_op189_op191.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 2097152}, None),
        MemoryDep('buf187', c0, {c0: 2097152}, None)]
op188_op189_op191.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg128_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg129_1', c1, {c0: 2048, c1: 1024}, None)]
op188_op189_op191.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf188.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf189.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op188_op189_op191.snodes[0] =
op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 2048}, None)]
op188.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 2097152}, None),
        MemoryDep('buf187', c0, {c0: 2097152}, None)]
op188.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 2048, c1: 1024}, None)]
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf188.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (2048, 1024)
op188.sizes = ([2048], [1024])
buf171_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op188_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf187', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf188', get_index_3, getitem)
        return store_reduction
op188 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op188_op189_op191.snodes[1] =
op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 2048}, None)]
op189.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 2097152}, None),
        MemoryDep('buf187', c0, {c0: 2097152}, None)]
op189.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 2048, c1: 1024}, None)]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf189.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (2048, 1024)
op189.sizes = ([2048], [1024])
buf171_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op189_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf187', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf189', get_index_3, getitem_1)
        return store_reduction
op189 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op188_op189_op191.snodes[2] =
op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 2097152}, None)]
op191.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 2097152}, None),
        MemoryDep('buf187', c0, {c0: 2097152}, None),
        MemoryDep('buf188', c0, {c0: 2048}, None),
        MemoryDep('buf189', c0, {c0: 2048}, None)]
op191.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg128_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg129_1', c1, {c0: 2048, c1: 1024}, None)]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (2097152, 1)
op191.sizes = ([2048, 1024], [])
buf171_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf189_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op191_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf187', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf188', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf189', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg128_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg129_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf191', get_index_7, add_3, None)
        return store
op191 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op188_op189_op191 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op192: ExternKernelSchedulerNode(ExternKernelOut)
op192.writes = [StarDep(name='buf192', mode=None)]
op192.unmet_dependencies = [StarDep(name='buf191', mode=None)]
op192.met_dependencies = [StarDep(name='arg130_1', mode=None)]
op192.outputs = [
    buf192: ExternKernelOut
    buf192.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf192.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False)]
]
op192.node.kernel = extern_kernels.mm


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 8388608}, None)]
op193.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 8388608}, None)]
op193.met_dependencies = [MemoryDep('arg131_1', c1, {c0: 2048, c1: 4096}, None)]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (8388608, 1)
op193.sizes = ([2048, 4096], [])
buf192_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op193_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg131_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf192', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg131_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf193', get_index_4, mul_2, None)
        return store
op193 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op194: ExternKernelSchedulerNode(ExternKernelOut)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = [StarDep(name='buf193', mode=None)]
op194.met_dependencies = [StarDep(name='arg132_1', mode=None)]
op194.outputs = [
    buf194: ExternKernelOut
    buf194.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf194.users = [NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False)]
]
op194.node.kernel = extern_kernels.mm


op195_op196_op197_op199: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op195_op196_op197_op199.writes = 
    [   MemoryDep('buf195', c0, {c0: 2097152}, None),
        MemoryDep('buf196', c0, {c0: 2048}, None),
        MemoryDep('buf197', c0, {c0: 2048}, None),
        MemoryDep('buf199', c0, {c0: 2097152}, None)]
op195_op196_op197_op199.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 2097152}, None),
        MemoryDep('buf187', c0, {c0: 2097152}, None),
        MemoryDep('buf194', c0, {c0: 2097152}, None)]
op195_op196_op197_op199.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg133_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg134_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg135_1', c1, {c0: 2048, c1: 1024}, None)]
op195_op196_op197_op199.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf195.users = [
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
    ]
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf196.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf197.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf199.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False),
    ]
]
op195_op196_op197_op199.snodes[0] =
op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 2097152}, None)]
op195.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 2097152}, None),
        MemoryDep('buf187', c0, {c0: 2097152}, None),
        MemoryDep('buf194', c0, {c0: 2097152}, None)]
op195.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg133_1', c1, {c0: 2048, c1: 1024}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf195.users = [
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
    ]
]
op195.group.device = cuda:0
op195.group.iteration = (2097152, 1)
op195.sizes = ([2048, 1024], [])
buf171_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op195_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf187', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf194', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg133_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf195', get_index_5, add_3, None)
        return store
op195 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op195_op196_op197_op199.snodes[1] =
op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 2048}, None)]
op196.unmet_dependencies = [MemoryDep('buf195', c0, {c0: 2097152}, None)]
op196.met_dependencies = []
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf196.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (2048, 1024)
op196.sizes = ([2048], [1024])
buf195_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op196_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf196', get_index_1, getitem)
        return store_reduction
op196 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op195_op196_op197_op199.snodes[2] =
op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 2048}, None)]
op197.unmet_dependencies = [MemoryDep('buf195', c0, {c0: 2097152}, None)]
op197.met_dependencies = []
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf197.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (2048, 1024)
op197.sizes = ([2048], [1024])
buf195_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op197_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf197', get_index_1, getitem_1)
        return store_reduction
op197 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op195_op196_op197_op199.snodes[3] =
op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 2097152}, None)]
op199.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 2097152}, None),
        MemoryDep('buf196', c0, {c0: 2048}, None),
        MemoryDep('buf197', c0, {c0: 2048}, None)]
op199.met_dependencies = 
    [   MemoryDep('arg134_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg135_1', c1, {c0: 2048, c1: 1024}, None)]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf199.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False),
    ]
]
op199.group.device = cuda:0
op199.group.iteration = (2097152, 1)
op199.sizes = ([2048, 1024], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf197_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op199_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf196', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf197', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg134_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg135_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf199', get_index_5, add_1, None)
        return store
op199 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op195_op196_op197_op199 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op200: ExternKernelSchedulerNode(ExternKernelOut)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op200.met_dependencies = [StarDep(name='arg136_1', mode=None)]
op200.outputs = [
    buf200: ExternKernelOut
    buf200.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf200.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op200.node.kernel = extern_kernels.mm


op201: ExternKernelSchedulerNode(ExternKernelOut)
op201.writes = [StarDep(name='buf201', mode=None)]
op201.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op201.met_dependencies = [StarDep(name='arg138_1', mode=None)]
op201.outputs = [
    buf201: ExternKernelOut
    buf201.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf201.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op201.node.kernel = extern_kernels.mm


op202: ExternKernelSchedulerNode(ExternKernelOut)
op202.writes = [StarDep(name='buf202', mode=None)]
op202.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op202.met_dependencies = [StarDep(name='arg140_1', mode=None)]
op202.outputs = [
    buf202: ExternKernelOut
    buf202.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf202.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op202.node.kernel = extern_kernels.mm


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 2097152}, None)]
op203.unmet_dependencies = [   MemoryDep('buf200', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op203.met_dependencies = [MemoryDep('arg137_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (2097152, 1)
op203.sizes = ([2, 16, 1024, 64], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op203_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf203', get_index_2, add, None)
        return store
op203 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 2097152}, None)]
op204.unmet_dependencies = [   MemoryDep('buf201', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op204.met_dependencies = [MemoryDep('arg139_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf204.users = [NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (2097152, 1)
op204.sizes = ([2, 16, 1024, 64], [])
buf201_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op204_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg139_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf204', get_index_2, add, None)
        return store
op204 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 2097152}, None)]
op205.unmet_dependencies = [   MemoryDep('buf202', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op205.met_dependencies = [MemoryDep('arg141_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf205.users = [NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (2097152, 1)
op205.sizes = ([2, 16, 1024, 64], [])
buf202_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op205_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg141_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf205', get_index_2, add, None)
        return store
op205 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op206: ExternKernelSchedulerNode(FallbackKernel)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = 
    [   StarDep(name='buf203', mode=None),
        StarDep(name='buf204', mode=None),
        StarDep(name='buf205', mode=None)]
op206.met_dependencies = []
op206.outputs = [
    buf206: FallbackKernel
    buf206.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf206.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False),
    ]
]
op206.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op207: ExternKernelSchedulerNode(MultiOutput)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op207.met_dependencies = []
op207.outputs = [
    buf207: MultiOutput
    buf207.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op207.node.kernel = None


op211: ExternKernelSchedulerNode(ExternKernelOut)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf207', mode=None)]
op211.met_dependencies = [StarDep(name='arg142_1', mode=None)]
op211.outputs = [
    buf211: ExternKernelOut
    buf211.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf211.users = [
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
    ]
]
op211.node.kernel = extern_kernels.mm


op212_op213_op215: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op212_op213_op215.writes = 
    [   MemoryDep('buf212', c0, {c0: 2048}, None),
        MemoryDep('buf213', c0, {c0: 2048}, None),
        MemoryDep('buf215', c0, {c0: 2097152}, None)]
op212_op213_op215.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 2097152}, None),
        MemoryDep('buf211', c0, {c0: 2097152}, None)]
op212_op213_op215.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg144_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg145_1', c1, {c0: 2048, c1: 1024}, None)]
op212_op213_op215.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf212.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf213.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op212_op213_op215.snodes[0] =
op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 2048}, None)]
op212.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 2097152}, None),
        MemoryDep('buf211', c0, {c0: 2097152}, None)]
op212.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 2048, c1: 1024}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf212.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (2048, 1024)
op212.sizes = ([2048], [1024])
buf195_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op212_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf211', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf212', get_index_3, getitem)
        return store_reduction
op212 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op212_op213_op215.snodes[1] =
op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 2048}, None)]
op213.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 2097152}, None),
        MemoryDep('buf211', c0, {c0: 2097152}, None)]
op213.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 2048, c1: 1024}, None)]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf213.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (2048, 1024)
op213.sizes = ([2048], [1024])
buf195_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op213_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf211', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf213', get_index_3, getitem_1)
        return store_reduction
op213 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op212_op213_op215.snodes[2] =
op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 2097152}, None)]
op215.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 2097152}, None),
        MemoryDep('buf211', c0, {c0: 2097152}, None),
        MemoryDep('buf212', c0, {c0: 2048}, None),
        MemoryDep('buf213', c0, {c0: 2048}, None)]
op215.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg144_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg145_1', c1, {c0: 2048, c1: 1024}, None)]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (2097152, 1)
op215.sizes = ([2048, 1024], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf213_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op215_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf211', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf212', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf213', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg144_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg145_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf215', get_index_7, add_3, None)
        return store
op215 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op212_op213_op215 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op216: ExternKernelSchedulerNode(ExternKernelOut)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op216.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op216.outputs = [
    buf216: ExternKernelOut
    buf216.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op216.node.kernel = extern_kernels.mm


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 8388608}, None)]
op217.unmet_dependencies = [MemoryDep('buf216', c0, {c0: 8388608}, None)]
op217.met_dependencies = [MemoryDep('arg147_1', c1, {c0: 2048, c1: 4096}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (8388608, 1)
op217.sizes = ([2048, 4096], [])
buf216_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op217_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg147_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf216', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg147_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf217', get_index_4, mul_2, None)
        return store
op217 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op218: ExternKernelSchedulerNode(ExternKernelOut)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf217', mode=None)]
op218.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op218.outputs = [
    buf218: ExternKernelOut
    buf218.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf218.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False)]
]
op218.node.kernel = extern_kernels.mm


op219_op220_op221_op223: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op219_op220_op221_op223.writes = 
    [   MemoryDep('buf219', c0, {c0: 2097152}, None),
        MemoryDep('buf220', c0, {c0: 2048}, None),
        MemoryDep('buf221', c0, {c0: 2048}, None),
        MemoryDep('buf223', c0, {c0: 2097152}, None)]
op219_op220_op221_op223.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 2097152}, None),
        MemoryDep('buf211', c0, {c0: 2097152}, None),
        MemoryDep('buf218', c0, {c0: 2097152}, None)]
op219_op220_op221_op223.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg149_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg150_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg151_1', c1, {c0: 2048, c1: 1024}, None)]
op219_op220_op221_op223.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf219.users = [
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False),
    ]
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf220.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf221.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf223.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False),
    ]
]
op219_op220_op221_op223.snodes[0] =
op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 2097152}, None)]
op219.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 2097152}, None),
        MemoryDep('buf211', c0, {c0: 2097152}, None),
        MemoryDep('buf218', c0, {c0: 2097152}, None)]
op219.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg149_1', c1, {c0: 2048, c1: 1024}, None)]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf219.users = [
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False),
    ]
]
op219.group.device = cuda:0
op219.group.iteration = (2097152, 1)
op219.sizes = ([2048, 1024], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op219_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf211', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf218', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg149_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf219', get_index_5, add_3, None)
        return store
op219 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op219_op220_op221_op223.snodes[1] =
op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 2048}, None)]
op220.unmet_dependencies = [MemoryDep('buf219', c0, {c0: 2097152}, None)]
op220.met_dependencies = []
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf220.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (2048, 1024)
op220.sizes = ([2048], [1024])
buf219_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op220_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf220', get_index_1, getitem)
        return store_reduction
op220 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op219_op220_op221_op223.snodes[2] =
op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 2048}, None)]
op221.unmet_dependencies = [MemoryDep('buf219', c0, {c0: 2097152}, None)]
op221.met_dependencies = []
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf221.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (2048, 1024)
op221.sizes = ([2048], [1024])
buf219_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op221_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf221', get_index_1, getitem_1)
        return store_reduction
op221 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op219_op220_op221_op223.snodes[3] =
op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 2097152}, None)]
op223.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 2097152}, None),
        MemoryDep('buf220', c0, {c0: 2048}, None),
        MemoryDep('buf221', c0, {c0: 2048}, None)]
op223.met_dependencies = 
    [   MemoryDep('arg150_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg151_1', c1, {c0: 2048, c1: 1024}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf223.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False),
    ]
]
op223.group.device = cuda:0
op223.group.iteration = (2097152, 1)
op223.sizes = ([2048, 1024], [])
buf219_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf221_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op223_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf220', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf221', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg150_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg151_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf223', get_index_5, add_1, None)
        return store
op223 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op219_op220_op221_op223 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf223', mode=None)]
op224.met_dependencies = [StarDep(name='arg152_1', mode=None)]
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf224.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op224.node.kernel = extern_kernels.mm


op225: ExternKernelSchedulerNode(ExternKernelOut)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf223', mode=None)]
op225.met_dependencies = [StarDep(name='arg154_1', mode=None)]
op225.outputs = [
    buf225: ExternKernelOut
    buf225.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf225.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op225.node.kernel = extern_kernels.mm


op226: ExternKernelSchedulerNode(ExternKernelOut)
op226.writes = [StarDep(name='buf226', mode=None)]
op226.unmet_dependencies = [StarDep(name='buf223', mode=None)]
op226.met_dependencies = [StarDep(name='arg156_1', mode=None)]
op226.outputs = [
    buf226: ExternKernelOut
    buf226.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf226.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op226.node.kernel = extern_kernels.mm


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 2097152}, None)]
op227.unmet_dependencies = [   MemoryDep('buf224', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op227.met_dependencies = [MemoryDep('arg153_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (2097152, 1)
op227.sizes = ([2, 16, 1024, 64], [])
buf224_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op227_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg153_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf227', get_index_2, add, None)
        return store
op227 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 2097152}, None)]
op228.unmet_dependencies = [   MemoryDep('buf225', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op228.met_dependencies = [MemoryDep('arg155_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf228.users = [NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (2097152, 1)
op228.sizes = ([2, 16, 1024, 64], [])
buf225_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op228_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg155_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf228', get_index_2, add, None)
        return store
op228 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 2097152}, None)]
op229.unmet_dependencies = [   MemoryDep('buf226', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op229.met_dependencies = [MemoryDep('arg157_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (2097152, 1)
op229.sizes = ([2, 16, 1024, 64], [])
buf226_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op229_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg157_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf229', get_index_2, add, None)
        return store
op229 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op230: ExternKernelSchedulerNode(FallbackKernel)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = 
    [   StarDep(name='buf227', mode=None),
        StarDep(name='buf228', mode=None),
        StarDep(name='buf229', mode=None)]
op230.met_dependencies = []
op230.outputs = [
    buf230: FallbackKernel
    buf230.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf230.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op234'), can_inplace=False, is_weak=False),
    ]
]
op230.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op231: ExternKernelSchedulerNode(MultiOutput)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf230', mode=None)]
op231.met_dependencies = []
op231.outputs = [
    buf231: MultiOutput
    buf231.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op231.node.kernel = None


op235: ExternKernelSchedulerNode(ExternKernelOut)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf231', mode=None)]
op235.met_dependencies = [StarDep(name='arg158_1', mode=None)]
op235.outputs = [
    buf235: ExternKernelOut
    buf235.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf235.users = [
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False),
    ]
]
op235.node.kernel = extern_kernels.mm


op236_op237_op239: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op236_op237_op239.writes = 
    [   MemoryDep('buf236', c0, {c0: 2048}, None),
        MemoryDep('buf237', c0, {c0: 2048}, None),
        MemoryDep('buf239', c0, {c0: 2097152}, None)]
op236_op237_op239.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 2097152}, None),
        MemoryDep('buf235', c0, {c0: 2097152}, None)]
op236_op237_op239.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg160_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg161_1', c1, {c0: 2048, c1: 1024}, None)]
op236_op237_op239.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf236.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf237.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op236_op237_op239.snodes[0] =
op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 2048}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 2097152}, None),
        MemoryDep('buf235', c0, {c0: 2097152}, None)]
op236.met_dependencies = [MemoryDep('arg159_1', c1, {c0: 2048, c1: 1024}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf236.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (2048, 1024)
op236.sizes = ([2048], [1024])
buf219_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op236_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf235', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg159_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf236', get_index_3, getitem)
        return store_reduction
op236 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op236_op237_op239.snodes[1] =
op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 2048}, None)]
op237.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 2097152}, None),
        MemoryDep('buf235', c0, {c0: 2097152}, None)]
op237.met_dependencies = [MemoryDep('arg159_1', c1, {c0: 2048, c1: 1024}, None)]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf237.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (2048, 1024)
op237.sizes = ([2048], [1024])
buf219_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op237_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf235', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg159_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf237', get_index_3, getitem_1)
        return store_reduction
op237 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op236_op237_op239.snodes[2] =
op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 2097152}, None)]
op239.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 2097152}, None),
        MemoryDep('buf235', c0, {c0: 2097152}, None),
        MemoryDep('buf236', c0, {c0: 2048}, None),
        MemoryDep('buf237', c0, {c0: 2048}, None)]
op239.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg160_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg161_1', c1, {c0: 2048, c1: 1024}, None)]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (2097152, 1)
op239.sizes = ([2048, 1024], [])
buf219_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf237_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op239_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf235', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg159_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf236', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf237', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg160_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg161_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf239', get_index_7, add_3, None)
        return store
op239 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op236_op237_op239 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op240: ExternKernelSchedulerNode(ExternKernelOut)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op240.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op240.outputs = [
    buf240: ExternKernelOut
    buf240.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf240.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False)]
]
op240.node.kernel = extern_kernels.mm


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 8388608}, None)]
op241.unmet_dependencies = [MemoryDep('buf240', c0, {c0: 8388608}, None)]
op241.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 2048, c1: 4096}, None)]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (8388608, 1)
op241.sizes = ([2048, 4096], [])
buf240_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op241_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf240', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg163_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf241', get_index_4, mul_2, None)
        return store
op241 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op242: ExternKernelSchedulerNode(ExternKernelOut)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf241', mode=None)]
op242.met_dependencies = [StarDep(name='arg164_1', mode=None)]
op242.outputs = [
    buf242: ExternKernelOut
    buf242.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf242.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False)]
]
op242.node.kernel = extern_kernels.mm


op243_op244_op245_op247: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op243_op244_op245_op247.writes = 
    [   MemoryDep('buf243', c0, {c0: 2097152}, None),
        MemoryDep('buf244', c0, {c0: 2048}, None),
        MemoryDep('buf245', c0, {c0: 2048}, None),
        MemoryDep('buf247', c0, {c0: 2097152}, None)]
op243_op244_op245_op247.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 2097152}, None),
        MemoryDep('buf235', c0, {c0: 2097152}, None),
        MemoryDep('buf242', c0, {c0: 2097152}, None)]
op243_op244_op245_op247.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg165_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg166_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg167_1', c1, {c0: 2048, c1: 1024}, None)]
op243_op244_op245_op247.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf243.users = [
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf244.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf245.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf247.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False),
    ]
]
op243_op244_op245_op247.snodes[0] =
op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 2097152}, None)]
op243.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 2097152}, None),
        MemoryDep('buf235', c0, {c0: 2097152}, None),
        MemoryDep('buf242', c0, {c0: 2097152}, None)]
op243.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg165_1', c1, {c0: 2048, c1: 1024}, None)]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf243.users = [
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op243.group.device = cuda:0
op243.group.iteration = (2097152, 1)
op243.sizes = ([2048, 1024], [])
buf219_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op243_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf235', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg159_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf242', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg165_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf243', get_index_5, add_3, None)
        return store
op243 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op243_op244_op245_op247.snodes[1] =
op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 2048}, None)]
op244.unmet_dependencies = [MemoryDep('buf243', c0, {c0: 2097152}, None)]
op244.met_dependencies = []
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf244.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (2048, 1024)
op244.sizes = ([2048], [1024])
buf243_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op244_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf244', get_index_1, getitem)
        return store_reduction
op244 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op243_op244_op245_op247.snodes[2] =
op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 2048}, None)]
op245.unmet_dependencies = [MemoryDep('buf243', c0, {c0: 2097152}, None)]
op245.met_dependencies = []
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf245.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (2048, 1024)
op245.sizes = ([2048], [1024])
buf243_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op245_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf245', get_index_1, getitem_1)
        return store_reduction
op245 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op243_op244_op245_op247.snodes[3] =
op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 2097152}, None)]
op247.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 2097152}, None),
        MemoryDep('buf244', c0, {c0: 2048}, None),
        MemoryDep('buf245', c0, {c0: 2048}, None)]
op247.met_dependencies = 
    [   MemoryDep('arg166_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg167_1', c1, {c0: 2048, c1: 1024}, None)]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf247.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False),
    ]
]
op247.group.device = cuda:0
op247.group.iteration = (2097152, 1)
op247.sizes = ([2048, 1024], [])
buf243_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf245_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op247_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf244', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf245', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg166_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg167_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf247', get_index_5, add_1, None)
        return store
op247 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op243_op244_op245_op247 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op248: ExternKernelSchedulerNode(ExternKernelOut)
op248.writes = [StarDep(name='buf248', mode=None)]
op248.unmet_dependencies = [StarDep(name='buf247', mode=None)]
op248.met_dependencies = [StarDep(name='arg168_1', mode=None)]
op248.outputs = [
    buf248: ExternKernelOut
    buf248.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf248.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op248.node.kernel = extern_kernels.mm


op249: ExternKernelSchedulerNode(ExternKernelOut)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf247', mode=None)]
op249.met_dependencies = [StarDep(name='arg170_1', mode=None)]
op249.outputs = [
    buf249: ExternKernelOut
    buf249.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf249.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op249.node.kernel = extern_kernels.mm


op250: ExternKernelSchedulerNode(ExternKernelOut)
op250.writes = [StarDep(name='buf250', mode=None)]
op250.unmet_dependencies = [StarDep(name='buf247', mode=None)]
op250.met_dependencies = [StarDep(name='arg172_1', mode=None)]
op250.outputs = [
    buf250: ExternKernelOut
    buf250.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf250.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op250.node.kernel = extern_kernels.mm


op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 2097152}, None)]
op251.unmet_dependencies = [   MemoryDep('buf248', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op251.met_dependencies = [MemoryDep('arg169_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf251.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (2097152, 1)
op251.sizes = ([2, 16, 1024, 64], [])
buf248_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op251_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg169_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf251', get_index_2, add, None)
        return store
op251 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 2097152}, None)]
op252.unmet_dependencies = [   MemoryDep('buf249', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op252.met_dependencies = [MemoryDep('arg171_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (2097152, 1)
op252.sizes = ([2, 16, 1024, 64], [])
buf249_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op252_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg171_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf252', get_index_2, add, None)
        return store
op252 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 2097152}, None)]
op253.unmet_dependencies = [   MemoryDep('buf250', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op253.met_dependencies = [MemoryDep('arg173_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf253.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (2097152, 1)
op253.sizes = ([2, 16, 1024, 64], [])
buf250_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op253_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg173_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf253', get_index_2, add, None)
        return store
op253 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op254: ExternKernelSchedulerNode(FallbackKernel)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = 
    [   StarDep(name='buf251', mode=None),
        StarDep(name='buf252', mode=None),
        StarDep(name='buf253', mode=None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: FallbackKernel
    buf254.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf254.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False),
    ]
]
op254.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op255: ExternKernelSchedulerNode(MultiOutput)
op255.writes = [StarDep(name='buf255', mode=None)]
op255.unmet_dependencies = [StarDep(name='buf254', mode=None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: MultiOutput
    buf255.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op255.node.kernel = None


op259: ExternKernelSchedulerNode(ExternKernelOut)
op259.writes = [StarDep(name='buf259', mode=None)]
op259.unmet_dependencies = [StarDep(name='buf255', mode=None)]
op259.met_dependencies = [StarDep(name='arg174_1', mode=None)]
op259.outputs = [
    buf259: ExternKernelOut
    buf259.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op259.node.kernel = extern_kernels.mm


op260_op261_op263: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op260_op261_op263.writes = 
    [   MemoryDep('buf260', c0, {c0: 2048}, None),
        MemoryDep('buf261', c0, {c0: 2048}, None),
        MemoryDep('buf263', c0, {c0: 2097152}, None)]
op260_op261_op263.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 2097152}, None),
        MemoryDep('buf259', c0, {c0: 2097152}, None)]
op260_op261_op263.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg176_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg177_1', c1, {c0: 2048, c1: 1024}, None)]
op260_op261_op263.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf260.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf261.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op260_op261_op263.snodes[0] =
op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 2048}, None)]
op260.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 2097152}, None),
        MemoryDep('buf259', c0, {c0: 2097152}, None)]
op260.met_dependencies = [MemoryDep('arg175_1', c1, {c0: 2048, c1: 1024}, None)]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf260.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (2048, 1024)
op260.sizes = ([2048], [1024])
buf243_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op260_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf260', get_index_3, getitem)
        return store_reduction
op260 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op260_op261_op263.snodes[1] =
op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 2048}, None)]
op261.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 2097152}, None),
        MemoryDep('buf259', c0, {c0: 2097152}, None)]
op261.met_dependencies = [MemoryDep('arg175_1', c1, {c0: 2048, c1: 1024}, None)]
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf261.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (2048, 1024)
op261.sizes = ([2048], [1024])
buf243_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op261_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf261', get_index_3, getitem_1)
        return store_reduction
op261 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op260_op261_op263.snodes[2] =
op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 2097152}, None)]
op263.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 2097152}, None),
        MemoryDep('buf259', c0, {c0: 2097152}, None),
        MemoryDep('buf260', c0, {c0: 2048}, None),
        MemoryDep('buf261', c0, {c0: 2048}, None)]
op263.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg176_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg177_1', c1, {c0: 2048, c1: 1024}, None)]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (2097152, 1)
op263.sizes = ([2048, 1024], [])
buf243_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf261_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op263_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf260', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf261', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg176_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg177_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf263', get_index_7, add_3, None)
        return store
op263 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op260_op261_op263 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op264: ExternKernelSchedulerNode(ExternKernelOut)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf263', mode=None)]
op264.met_dependencies = [StarDep(name='arg178_1', mode=None)]
op264.outputs = [
    buf264: ExternKernelOut
    buf264.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf264.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=True, is_weak=False)]
]
op264.node.kernel = extern_kernels.mm


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 8388608}, None)]
op265.unmet_dependencies = [MemoryDep('buf264', c0, {c0: 8388608}, None)]
op265.met_dependencies = [MemoryDep('arg179_1', c1, {c0: 2048, c1: 4096}, None)]
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (8388608, 1)
op265.sizes = ([2048, 4096], [])
buf264_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op265_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg179_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf264', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg179_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf265', get_index_4, mul_2, None)
        return store
op265 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op266: ExternKernelSchedulerNode(ExternKernelOut)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = [StarDep(name='arg180_1', mode=None)]
op266.outputs = [
    buf266: ExternKernelOut
    buf266.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf266.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False)]
]
op266.node.kernel = extern_kernels.mm


op267_op268_op269_op271: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op267_op268_op269_op271.writes = 
    [   MemoryDep('buf267', c0, {c0: 2097152}, None),
        MemoryDep('buf268', c0, {c0: 2048}, None),
        MemoryDep('buf269', c0, {c0: 2048}, None),
        MemoryDep('buf271', c0, {c0: 2097152}, None)]
op267_op268_op269_op271.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 2097152}, None),
        MemoryDep('buf259', c0, {c0: 2097152}, None),
        MemoryDep('buf266', c0, {c0: 2097152}, None)]
op267_op268_op269_op271.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg181_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg182_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg183_1', c1, {c0: 2048, c1: 1024}, None)]
op267_op268_op269_op271.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=True, is_weak=False),
    ]
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf268.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf271.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False),
    ]
]
op267_op268_op269_op271.snodes[0] =
op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 2097152}, None)]
op267.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 2097152}, None),
        MemoryDep('buf259', c0, {c0: 2097152}, None),
        MemoryDep('buf266', c0, {c0: 2097152}, None)]
op267.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg181_1', c1, {c0: 2048, c1: 1024}, None)]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=True, is_weak=False),
    ]
]
op267.group.device = cuda:0
op267.group.iteration = (2097152, 1)
op267.sizes = ([2048, 1024], [])
buf243_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op267_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf266', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg181_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf267', get_index_5, add_3, None)
        return store
op267 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op267_op268_op269_op271.snodes[1] =
op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 2048}, None)]
op268.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 2097152}, None)]
op268.met_dependencies = []
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf268.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (2048, 1024)
op268.sizes = ([2048], [1024])
buf267_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op268_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf268', get_index_1, getitem)
        return store_reduction
op268 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op267_op268_op269_op271.snodes[2] =
op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 2048}, None)]
op269.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 2097152}, None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (2048, 1024)
op269.sizes = ([2048], [1024])
buf267_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op269_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf269', get_index_1, getitem_1)
        return store_reduction
op269 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op267_op268_op269_op271.snodes[3] =
op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 2097152}, None)]
op271.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 2097152}, None),
        MemoryDep('buf268', c0, {c0: 2048}, None),
        MemoryDep('buf269', c0, {c0: 2048}, None)]
op271.met_dependencies = 
    [   MemoryDep('arg182_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg183_1', c1, {c0: 2048, c1: 1024}, None)]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf271.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False),
    ]
]
op271.group.device = cuda:0
op271.group.iteration = (2097152, 1)
op271.sizes = ([2048, 1024], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf269_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op271_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf268', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf269', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg182_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg183_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf271', get_index_5, add_1, None)
        return store
op271 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op267_op268_op269_op271 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op272: ExternKernelSchedulerNode(ExternKernelOut)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf271', mode=None)]
op272.met_dependencies = [StarDep(name='arg184_1', mode=None)]
op272.outputs = [
    buf272: ExternKernelOut
    buf272.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op272.node.kernel = extern_kernels.mm


op273: ExternKernelSchedulerNode(ExternKernelOut)
op273.writes = [StarDep(name='buf273', mode=None)]
op273.unmet_dependencies = [StarDep(name='buf271', mode=None)]
op273.met_dependencies = [StarDep(name='arg186_1', mode=None)]
op273.outputs = [
    buf273: ExternKernelOut
    buf273.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf273.users = [NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op273.node.kernel = extern_kernels.mm


op274: ExternKernelSchedulerNode(ExternKernelOut)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf271', mode=None)]
op274.met_dependencies = [StarDep(name='arg188_1', mode=None)]
op274.outputs = [
    buf274: ExternKernelOut
    buf274.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf274.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op274.node.kernel = extern_kernels.mm


op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 2097152}, None)]
op275.unmet_dependencies = [   MemoryDep('buf272', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op275.met_dependencies = [MemoryDep('arg185_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf275.users = [NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (2097152, 1)
op275.sizes = ([2, 16, 1024, 64], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op275_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg185_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf275', get_index_2, add, None)
        return store
op275 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 2097152}, None)]
op276.unmet_dependencies = [   MemoryDep('buf273', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op276.met_dependencies = [MemoryDep('arg187_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf276.users = [NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (2097152, 1)
op276.sizes = ([2, 16, 1024, 64], [])
buf273_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op276_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg187_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf276', get_index_2, add, None)
        return store
op276 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 2097152}, None)]
op277.unmet_dependencies = [   MemoryDep('buf274', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op277.met_dependencies = [MemoryDep('arg189_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf277.users = [NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (2097152, 1)
op277.sizes = ([2, 16, 1024, 64], [])
buf274_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op277_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg189_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf277', get_index_2, add, None)
        return store
op277 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op278: ExternKernelSchedulerNode(FallbackKernel)
op278.writes = [StarDep(name='buf278', mode=None)]
op278.unmet_dependencies = 
    [   StarDep(name='buf275', mode=None),
        StarDep(name='buf276', mode=None),
        StarDep(name='buf277', mode=None)]
op278.met_dependencies = []
op278.outputs = [
    buf278: FallbackKernel
    buf278.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf278.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op282'), can_inplace=False, is_weak=False),
    ]
]
op278.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op279: ExternKernelSchedulerNode(MultiOutput)
op279.writes = [StarDep(name='buf279', mode=None)]
op279.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op279.met_dependencies = []
op279.outputs = [
    buf279: MultiOutput
    buf279.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op279.node.kernel = None


op283: ExternKernelSchedulerNode(ExternKernelOut)
op283.writes = [StarDep(name='buf283', mode=None)]
op283.unmet_dependencies = [StarDep(name='buf279', mode=None)]
op283.met_dependencies = [StarDep(name='arg190_1', mode=None)]
op283.outputs = [
    buf283: ExternKernelOut
    buf283.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf283.users = [
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=True, is_weak=False),
    ]
]
op283.node.kernel = extern_kernels.mm


op284_op285_op287: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op284_op285_op287.writes = 
    [   MemoryDep('buf284', c0, {c0: 2048}, None),
        MemoryDep('buf285', c0, {c0: 2048}, None),
        MemoryDep('buf287', c0, {c0: 2097152}, None)]
op284_op285_op287.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 2097152}, None),
        MemoryDep('buf283', c0, {c0: 2097152}, None)]
op284_op285_op287.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg192_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg193_1', c1, {c0: 2048, c1: 1024}, None)]
op284_op285_op287.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf284.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf285.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf287.users = [NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op284_op285_op287.snodes[0] =
op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 2048}, None)]
op284.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 2097152}, None),
        MemoryDep('buf283', c0, {c0: 2097152}, None)]
op284.met_dependencies = [MemoryDep('arg191_1', c1, {c0: 2048, c1: 1024}, None)]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf284.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op284.group.device = cuda:0
op284.group.iteration = (2048, 1024)
op284.sizes = ([2048], [1024])
buf267_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op284_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf283', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf284', get_index_3, getitem)
        return store_reduction
op284 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op284_op285_op287.snodes[1] =
op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 2048}, None)]
op285.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 2097152}, None),
        MemoryDep('buf283', c0, {c0: 2097152}, None)]
op285.met_dependencies = [MemoryDep('arg191_1', c1, {c0: 2048, c1: 1024}, None)]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf285.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (2048, 1024)
op285.sizes = ([2048], [1024])
buf267_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op285_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf283', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf285', get_index_3, getitem_1)
        return store_reduction
op285 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op284_op285_op287.snodes[2] =
op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 2097152}, None)]
op287.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 2097152}, None),
        MemoryDep('buf283', c0, {c0: 2097152}, None),
        MemoryDep('buf284', c0, {c0: 2048}, None),
        MemoryDep('buf285', c0, {c0: 2048}, None)]
op287.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg192_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg193_1', c1, {c0: 2048, c1: 1024}, None)]
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf287.users = [NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (2097152, 1)
op287.sizes = ([2048, 1024], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf285_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op287_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf283', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf284', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf285', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg192_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg193_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf287', get_index_7, add_3, None)
        return store
op287 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op284_op285_op287 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op288: ExternKernelSchedulerNode(ExternKernelOut)
op288.writes = [StarDep(name='buf288', mode=None)]
op288.unmet_dependencies = [StarDep(name='buf287', mode=None)]
op288.met_dependencies = [StarDep(name='arg194_1', mode=None)]
op288.outputs = [
    buf288: ExternKernelOut
    buf288.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf288.users = [NodeUser(node=SchedulerNode(name='op289'), can_inplace=True, is_weak=False)]
]
op288.node.kernel = extern_kernels.mm


op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', c0, {c0: 8388608}, None)]
op289.unmet_dependencies = [MemoryDep('buf288', c0, {c0: 8388608}, None)]
op289.met_dependencies = [MemoryDep('arg195_1', c1, {c0: 2048, c1: 4096}, None)]
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf289.users = [NodeUser(node=ExternKernelSchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op289.group.device = cuda:0
op289.group.iteration = (8388608, 1)
op289.sizes = ([2048, 4096], [])
buf288_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf289_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op289_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf288', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg195_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf288', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg195_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf289', get_index_4, mul_2, None)
        return store
op289 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op290: ExternKernelSchedulerNode(ExternKernelOut)
op290.writes = [StarDep(name='buf290', mode=None)]
op290.unmet_dependencies = [StarDep(name='buf289', mode=None)]
op290.met_dependencies = [StarDep(name='arg196_1', mode=None)]
op290.outputs = [
    buf290: ExternKernelOut
    buf290.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf290.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=True, is_weak=False)]
]
op290.node.kernel = extern_kernels.mm


op291_op292_op293_op323: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op291_op292_op293_op323.writes = 
    [   MemoryDep('buf291', c0, {c0: 2097152}, None),
        MemoryDep('buf292', c0, {c0: 2048}, None),
        MemoryDep('buf293', c0, {c0: 2048}, None),
        MemoryDep('buf323', c0, {c0: 2097152}, None)]
op291_op292_op293_op323.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 2097152}, None),
        MemoryDep('buf283', c0, {c0: 2097152}, None),
        MemoryDep('buf290', c0, {c0: 2097152}, None)]
op291_op292_op293_op323.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg197_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg198_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg199_1', c1, {c0: 2048, c1: 1024}, None)]
op291_op292_op293_op323.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf291.users = [
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=True, is_weak=False),
    ]
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf292.users = [NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf293.users = [NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf323.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op325'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op407'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op449'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op491'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op532'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op573'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op574'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op615'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op616'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op656'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op657'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op698'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op699'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op739'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op740'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op781'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op782'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op291_op292_op293_op323.snodes[0] =
op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 2097152}, None)]
op291.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 2097152}, None),
        MemoryDep('buf283', c0, {c0: 2097152}, None),
        MemoryDep('buf290', c0, {c0: 2097152}, None)]
op291.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg197_1', c1, {c0: 2048, c1: 1024}, None)]
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf291.users = [
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=True, is_weak=False),
    ]
]
op291.group.device = cuda:0
op291.group.iteration = (2097152, 1)
op291.sizes = ([2048, 1024], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op291_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf283', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf290', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg197_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf291', get_index_5, add_3, None)
        return store
op291 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op291_op292_op293_op323.snodes[1] =
op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 2048}, None)]
op292.unmet_dependencies = [MemoryDep('buf291', c0, {c0: 2097152}, None)]
op292.met_dependencies = []
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf292.users = [NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op292.group.device = cuda:0
op292.group.iteration = (2048, 1024)
op292.sizes = ([2048], [1024])
buf291_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op292_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf292', get_index_1, getitem)
        return store_reduction
op292 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op291_op292_op293_op323.snodes[2] =
op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 2048}, None)]
op293.unmet_dependencies = [MemoryDep('buf291', c0, {c0: 2097152}, None)]
op293.met_dependencies = []
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf293.users = [NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op293.group.device = cuda:0
op293.group.iteration = (2048, 1024)
op293.sizes = ([2048], [1024])
buf291_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op293_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf293', get_index_1, getitem_1)
        return store_reduction
op293 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op291_op292_op293_op323.snodes[3] =
op323: SchedulerNode(ComputedBuffer)
op323.writes = [MemoryDep('buf323', c0, {c0: 2097152}, None)]
op323.unmet_dependencies = 
    [   MemoryDep('buf291', c0, {c0: 2097152}, None),
        MemoryDep('buf292', c0, {c0: 2048}, None),
        MemoryDep('buf293', c0, {c0: 2048}, None)]
op323.met_dependencies = 
    [   MemoryDep('arg198_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg199_1', c1, {c0: 2048, c1: 1024}, None)]
op323.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf323.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op325'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op407'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op449'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op491'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op532'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op573'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op574'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op615'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op616'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op656'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op657'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op698'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op699'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op739'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op740'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op781'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op782'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op323.group.device = cuda:0
op323.group.iteration = (2097152, 1)
op323.sizes = ([2048, 1024], [])
buf291_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf293_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op323_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf292', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf293', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg198_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg199_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf323', get_index_5, add_1, None)
        return store
op323 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op291_op292_op293_op323 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 2}, None)]
op295.unmet_dependencies = []
op295.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 2048}, None)]
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.int64, size=[2], stride=[1])
    buf295.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op295.group.device = cuda:0
op295.group.iteration = (2, 1024)
op295.sizes = ([2], [1024])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[2, 1024], stride=[1024, 1])
buf295_layout = FixedLayout('cuda', torch.int64, size=[2], stride=[1])
class op295_loop_body:
    var_ranges = {z0: 2, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        constant = ops.constant(-100, torch.int64)
        eq = ops.eq(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg0_1', get_index_1)
        constant_1 = ops.constant(1, torch.int64)
        where = ops.where(eq, constant_1, load_1)
        constant_2 = ops.constant(1, torch.int64)
        ne = ops.ne(where, constant_2)
        to_dtype = ops.to_dtype(ne, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf295', get_index_2, reduction)
        return store_reduction
op295 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.full([1], -100, tl.int64)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 1, tl.int64)
        tmp4 = tl.where(tmp2, tmp3, tmp0)
        tmp5 = tmp4 != tmp3
        tmp6 = tmp5.to(tl.int64)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tl.store(out_ptr0 + (x0), tmp9, None)


op296_op297_op298_op300_op301_op302_op304: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op296_op297_op298_op300_op301_op302_op304.writes = 
    [   MemoryDep('buf296', c0, {c0: 2097152}, None),
        MemoryDep('buf297', c0, {c0: 2048}, None),
        MemoryDep('buf298', c0, {c0: 2048}, None),
        MemoryDep('buf300', c0, {c0: 2097152}, None),
        MemoryDep('buf301', c0, {c0: 2048}, None),
        MemoryDep('buf302', c0, {c0: 2048}, None),
        MemoryDep('buf304', c0, {c0: 2097152}, None)]
op296_op297_op298_op300_op301_op302_op304.unmet_dependencies = [MemoryDep('buf295', c0, {c0: 2}, None)]
op296_op297_op298_op300_op301_op302_op304.met_dependencies = 
    [   MemoryDep('arg0_1', 1024*c0 + tmp5, {c0: 2}, None),
        MemoryDep('arg0_1', c0 - 1, {c0: 2048}, None),
        MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg200_1', c1 + 2048, {c0: 2, c1: 1048576}, None),
        MemoryDep('arg201_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg202_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg203_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg204_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg2_1', c1 + 1024*tmp29, {c0: 2048, c1: 1024}, None)]
op296_op297_op298_op300_op301_op302_op304.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf296.users = [
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=True, is_weak=False),
    ]
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf297.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf298.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf300.users = [
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
    ]
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf301.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf302.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf304.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False),
    ]
]
op296_op297_op298_op300_op301_op302_op304.snodes[0] =
op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 2097152}, None)]
op296.unmet_dependencies = [MemoryDep('buf295', c0, {c0: 2}, None)]
op296.met_dependencies = 
    [   MemoryDep('arg0_1', 1024*c0 + tmp5, {c0: 2}, None),
        MemoryDep('arg0_1', c0 - 1, {c0: 2048}, None),
        MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg200_1', c1 + 2048, {c0: 2, c1: 1048576}, None),
        MemoryDep('arg2_1', c1 + 1024*tmp29, {c0: 2048, c1: 1024}, None)]
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf296.users = [
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=True, is_weak=False),
    ]
]
op296.group.device = cuda:0
op296.group.iteration = (2097152, 1)
op296.sizes = ([2, 1024, 1024], [])
buf295_layout = FixedLayout('cuda', torch.int64, size=[2], stride=[1])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[2, 1024], stride=[1024, 1])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[2, 1024], stride=[1024, 1])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[2, 1024], stride=[1024, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 1024], stride=[1024, 1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[1026, 1024], stride=[1024, 1])
buf296_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op296_loop_body:
    var_ranges = {z0: 2, z1: 1024, z2: 1024}
    index0 = z1
    index1 = z0
    index2 = indirect0 + 1024*z0
    index3 = 1024*z0 + z1 - 1
    index4 = 1024*z0 + z1
    index5 = 1024*indirect1 + z2
    index6 = z1 + 2
    index7 = 1026
    index8 = 1024*z1 + z2 + 2048
    index9 = 1048576*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf295', get_index_1)
        constant_1 = ops.constant(1, torch.int64)
        sub = ops.sub(load, constant_1)
        set_indirect0 = self.set_indirect0(sub)
        get_index_2 = self.get_index('index2')
        load_1 = ops.load('arg0_1', get_index_2)
        constant_2 = ops.constant(-100, torch.int64)
        eq_1 = ops.eq(load_1, constant_2)
        get_index_3 = self.get_index('index2')
        load_2 = ops.load('arg0_1', get_index_3)
        constant_3 = ops.constant(1, torch.int64)
        where = ops.where(eq_1, constant_3, load_2)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_1, constant_4)
        masked_subblock2 = self.masked_subblock2(ge, 0)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('arg0_1', get_index_5)
        constant_5 = ops.constant(-100, torch.int64)
        eq_2 = ops.eq(load_3, constant_5)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('arg0_1', get_index_6)
        constant_6 = ops.constant(1, torch.int64)
        where_1 = ops.where(eq_2, constant_6, load_4)
        where_2 = ops.where(ge, masked_subblock2, where_1)
        where_3 = ops.where(eq, where, where_2)
        set_indirect1 = self.set_indirect1(where_3)
        get_index_7 = self.get_index('index5')
        load_5 = ops.load('arg2_1', get_index_7)
        constant_7 = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_5, constant_7)
        get_index_8 = self.get_index('index6')
        get_index_9 = self.get_index('index7')
        check_bounds = ops.check_bounds(get_index_8, get_index_9, False, False)
        get_index_10 = self.get_index('index8')
        load_6 = ops.load('arg200_1', get_index_10)
        add = ops.add(mul, load_6)
        get_index_11 = self.get_index('index9')
        store = ops.store('buf296', get_index_11, add, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('arg0_1', get_index)
        constant = ops.constant(-100, torch.int64)
        eq = ops.eq(load, constant)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg0_1', get_index_1)
        constant_1 = ops.constant(1, torch.int64)
        where = ops.where(eq, constant_1, load_1)
        return where
op296 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 1024) % 1024
        x2 = (xindex // 1048576)
        x4 = (xindex // 1024)
        x0 = xindex % 1024
        x3 = xindex % 1048576
        x5 = xindex
        tmp3 = tl.load(in_ptr0 + (x2), None, eviction_policy='evict_last')
        tmp21 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp34 = tl.load(in_ptr3 + (2048 + x3), None, eviction_policy='evict_last')
        tmp0 = x1
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp4 = tl.full([1], 1, tl.int64)
        tmp5 = tmp3 - tmp4
        tmp6 = tl.full([XBLOCK], 1024, tl.int32)
        tmp7 = tmp5 + tmp6
        tmp8 = tmp5 < 0
        tmp9 = tl.where(tmp8, tmp7, tmp5)
        tl.device_assert((0 <= tmp9) & (tmp9 < 1024), "index out of bounds: 0 <= tmp9 < 1024")
        tmp11 = tl.load(in_ptr1 + (tmp9 + (1024*x2)), None, eviction_policy='evict_last')
        tmp12 = tl.full([1], -100, tl.int64)
        tmp13 = tmp11 == tmp12
        tmp14 = tl.where(tmp13, tmp4, tmp11)
        tmp15 = tmp0 >= tmp4
        tmp16 = tl.load(in_ptr1 + ((-1) + x4), tmp15, eviction_policy='evict_last', other=0.0)
        tmp17 = tmp16 == tmp12
        tmp18 = tl.where(tmp17, tmp4, tmp16)
        tmp19 = tl.full(tmp18.shape, 0, tmp18.dtype)
        tmp20 = tl.where(tmp15, tmp18, tmp19)
        tmp22 = tmp21 == tmp12
        tmp23 = tl.where(tmp22, tmp4, tmp21)
        tmp24 = tl.where(tmp15, tmp20, tmp23)
        tmp25 = tl.where(tmp2, tmp14, tmp24)
        tmp26 = tl.full([XBLOCK], 50265, tl.int32)
        tmp27 = tmp25 + tmp26
        tmp28 = tmp25 < 0
        tmp29 = tl.where(tmp28, tmp27, tmp25)
        tl.device_assert((0 <= tmp29) & (tmp29 < 50265), "index out of bounds: 0 <= tmp29 < 50265")
        tmp31 = tl.load(in_ptr2 + (x0 + (1024*tmp29)), None)
        tmp32 = 1.0
        tmp33 = tmp31 * tmp32
        tmp35 = tmp33 + tmp34
        tl.store(out_ptr0 + (x5), tmp35, None)
op296_op297_op298_op300_op301_op302_op304.snodes[1] =
op297: SchedulerNode(ComputedBuffer)
op297.writes = [MemoryDep('buf297', c0, {c0: 2048}, None)]
op297.unmet_dependencies = [MemoryDep('buf296', c0, {c0: 2097152}, None)]
op297.met_dependencies = []
op297.outputs = [
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf297.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op297.group.device = cuda:0
op297.group.iteration = (2048, 1024)
op297.sizes = ([2048], [1024])
buf296_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op297_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf297', get_index_1, getitem)
        return store_reduction
op297 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op296_op297_op298_op300_op301_op302_op304.snodes[2] =
op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 2048}, None)]
op298.unmet_dependencies = [MemoryDep('buf296', c0, {c0: 2097152}, None)]
op298.met_dependencies = []
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf298.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op298.group.device = cuda:0
op298.group.iteration = (2048, 1024)
op298.sizes = ([2048], [1024])
buf296_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op298_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf298', get_index_1, getitem_1)
        return store_reduction
op298 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op296_op297_op298_op300_op301_op302_op304.snodes[3] =
op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 2097152}, None)]
op300.unmet_dependencies = 
    [   MemoryDep('buf296', c0, {c0: 2097152}, None),
        MemoryDep('buf297', c0, {c0: 2048}, None),
        MemoryDep('buf298', c0, {c0: 2048}, None)]
op300.met_dependencies = 
    [   MemoryDep('arg201_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg202_1', c1, {c0: 2048, c1: 1024}, None)]
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf300.users = [
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
    ]
]
op300.group.device = cuda:0
op300.group.iteration = (2097152, 1)
op300.sizes = ([2048, 1024], [])
buf296_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf298_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op300_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf297', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf298', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg201_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg202_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf300', get_index_5, add_1, None)
        return store
op300 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op296_op297_op298_op300_op301_op302_op304.snodes[4] =
op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 2048}, None)]
op301.unmet_dependencies = [MemoryDep('buf300', c0, {c0: 2097152}, None)]
op301.met_dependencies = []
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf301.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (2048, 1024)
op301.sizes = ([2048], [1024])
buf300_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op301_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf301', get_index_1, getitem)
        return store_reduction
op301 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op296_op297_op298_op300_op301_op302_op304.snodes[5] =
op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 2048}, None)]
op302.unmet_dependencies = [MemoryDep('buf300', c0, {c0: 2097152}, None)]
op302.met_dependencies = []
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf302.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op302.group.device = cuda:0
op302.group.iteration = (2048, 1024)
op302.sizes = ([2048], [1024])
buf300_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op302_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf302', get_index_1, getitem_1)
        return store_reduction
op302 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op296_op297_op298_op300_op301_op302_op304.snodes[6] =
op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 2097152}, None)]
op304.unmet_dependencies = 
    [   MemoryDep('buf300', c0, {c0: 2097152}, None),
        MemoryDep('buf301', c0, {c0: 2048}, None),
        MemoryDep('buf302', c0, {c0: 2048}, None)]
op304.met_dependencies = 
    [   MemoryDep('arg203_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg204_1', c1, {c0: 2048, c1: 1024}, None)]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf304.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False),
    ]
]
op304.group.device = cuda:0
op304.group.iteration = (2097152, 1)
op304.sizes = ([2048, 1024], [])
buf300_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf302_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op304_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf301', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf302', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg203_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg204_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf304', get_index_5, add_1, None)
        return store
op304 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op296_op297_op298_op300_op301_op302_op304 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: 'i32', 12: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, out_ptr0, out_ptr3, out_ptr6, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 2048
        rnumel = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp3 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last')
        x3 = xindex
        tmp21 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp37_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp37_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp37_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp34 = tl.load(in_ptr3 + (2048 + r2 + (1024*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp0 = x0
            tmp1 = tl.full([1, 1], 0, tl.int32)
            tmp2 = tmp0 == tmp1
            tmp4 = tl.full([1, 1], 1, tl.int64)
            tmp5 = tmp3 - tmp4
            tmp6 = tl.full([XBLOCK, RBLOCK], 1024, tl.int32)
            tmp7 = tmp5 + tmp6
            tmp8 = tmp5 < 0
            tmp9 = tl.where(tmp8, tmp7, tmp5)
            tl.device_assert((0 <= tmp9) & (tmp9 < 1024), "index out of bounds: 0 <= tmp9 < 1024")
            tmp11 = tl.load(in_ptr1 + (tmp9 + (1024*x1)), None, eviction_policy='evict_last')
            tmp12 = tl.full([1, 1], -100, tl.int64)
            tmp13 = tmp11 == tmp12
            tmp14 = tl.where(tmp13, tmp4, tmp11)
            tmp15 = tmp0 >= tmp4
            tmp16 = tl.load(in_ptr1 + (tl.broadcast_to((-1) + x3, [XBLOCK, RBLOCK])), rmask & tmp15, eviction_policy='evict_last', other=0.0)
            tmp17 = tmp16 == tmp12
            tmp18 = tl.where(tmp17, tmp4, tmp16)
            tmp19 = tl.full(tmp18.shape, 0, tmp18.dtype)
            tmp20 = tl.where(tmp15, tmp18, tmp19)
            tmp22 = tmp21 == tmp12
            tmp23 = tl.where(tmp22, tmp4, tmp21)
            tmp24 = tl.where(tmp15, tmp20, tmp23)
            tmp25 = tl.where(tmp2, tmp14, tmp24)
            tmp26 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp27 = tmp25 + tmp26
            tmp28 = tmp25 < 0
            tmp29 = tl.where(tmp28, tmp27, tmp25)
            tl.device_assert(((0 <= tmp29) & (tmp29 < 50265)) | ~(rmask), "index out of bounds: 0 <= tmp29 < 50265")
            tmp31 = tl.load(in_ptr2 + (r2 + (1024*tmp29)), rmask, eviction_policy='evict_last', other=0.0)
            tmp32 = 1.0
            tmp33 = tmp31 * tmp32
            tmp35 = tmp33 + tmp34
            tmp36 = tl.broadcast_to(tmp35, [XBLOCK, RBLOCK])
            tmp37_mean_next, tmp37_m2_next, tmp37_weight_next = triton_helpers.welford_reduce(
                tmp36, tmp37_mean, tmp37_m2, tmp37_weight, roffset == 0
            )
            tmp37_mean = tl.where(rmask, tmp37_mean_next, tmp37_mean)
            tmp37_m2 = tl.where(rmask, tmp37_m2_next, tmp37_m2)
            tmp37_weight = tl.where(rmask, tmp37_weight_next, tmp37_weight)
            tl.store(out_ptr0 + (r2 + (1024*x3)), tmp35, rmask)
        tmp37_tmp, tmp38_tmp, tmp39_tmp = triton_helpers.welford(
            tmp37_mean, tmp37_m2, tmp37_weight, 1
        )
        tmp37 = tmp37_tmp[:, None]
        tmp38 = tmp38_tmp[:, None]
        tmp39 = tmp39_tmp[:, None]
        tmp53_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp53_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp53_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp40 = tl.load(out_ptr0 + (r2 + (1024*x3)), rmask, eviction_policy='evict_last', other=0.0)
            tmp48 = tl.load(in_ptr4 + (r2), rmask, eviction_policy='evict_last', other=0.0)
            tmp50 = tl.load(in_ptr5 + (r2), rmask, eviction_policy='evict_last', other=0.0)
            tmp41 = tmp40 - tmp37
            tmp42 = 1024.0
            tmp43 = tmp38 / tmp42
            tmp44 = 1e-05
            tmp45 = tmp43 + tmp44
            tmp46 = libdevice.rsqrt(tmp45)
            tmp47 = tmp41 * tmp46
            tmp49 = tmp47 * tmp48
            tmp51 = tmp49 + tmp50
            tmp52 = tl.broadcast_to(tmp51, [XBLOCK, RBLOCK])
            tmp53_mean_next, tmp53_m2_next, tmp53_weight_next = triton_helpers.welford_reduce(
                tmp52, tmp53_mean, tmp53_m2, tmp53_weight, roffset == 0
            )
            tmp53_mean = tl.where(rmask, tmp53_mean_next, tmp53_mean)
            tmp53_m2 = tl.where(rmask, tmp53_m2_next, tmp53_m2)
            tmp53_weight = tl.where(rmask, tmp53_weight_next, tmp53_weight)
            tl.store(out_ptr3 + (r2 + (1024*x3)), tmp51, rmask)
        tmp53_tmp, tmp54_tmp, tmp55_tmp = triton_helpers.welford(
            tmp53_mean, tmp53_m2, tmp53_weight, 1
        )
        tmp53 = tmp53_tmp[:, None]
        tmp54 = tmp54_tmp[:, None]
        tmp55 = tmp55_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp56 = tl.load(out_ptr3 + (r2 + (1024*x3)), rmask, eviction_policy='evict_last', other=0.0)
            tmp64 = tl.load(in_ptr6 + (r2), rmask, eviction_policy='evict_last', other=0.0)
            tmp66 = tl.load(in_ptr7 + (r2), rmask, eviction_policy='evict_last', other=0.0)
            tmp57 = tmp56 - tmp53
            tmp58 = 1024.0
            tmp59 = tmp54 / tmp58
            tmp60 = 1e-05
            tmp61 = tmp59 + tmp60
            tmp62 = libdevice.rsqrt(tmp61)
            tmp63 = tmp57 * tmp62
            tmp65 = tmp63 * tmp64
            tmp67 = tmp65 + tmp66
            tl.store(out_ptr6 + (r2 + (1024*x3)), tmp67, rmask)


op305: ExternKernelSchedulerNode(ExternKernelOut)
op305.writes = [StarDep(name='buf305', mode=None)]
op305.unmet_dependencies = [StarDep(name='buf304', mode=None)]
op305.met_dependencies = [StarDep(name='arg205_1', mode=None)]
op305.outputs = [
    buf305: ExternKernelOut
    buf305.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf305.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op305.node.kernel = extern_kernels.mm


op306: ExternKernelSchedulerNode(ExternKernelOut)
op306.writes = [StarDep(name='buf306', mode=None)]
op306.unmet_dependencies = [StarDep(name='buf304', mode=None)]
op306.met_dependencies = [StarDep(name='arg207_1', mode=None)]
op306.outputs = [
    buf306: ExternKernelOut
    buf306.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf306.users = [NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False)]
]
op306.node.kernel = extern_kernels.mm


op307: ExternKernelSchedulerNode(ExternKernelOut)
op307.writes = [StarDep(name='buf307', mode=None)]
op307.unmet_dependencies = [StarDep(name='buf304', mode=None)]
op307.met_dependencies = [StarDep(name='arg209_1', mode=None)]
op307.outputs = [
    buf307: ExternKernelOut
    buf307.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf307.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
]
op307.node.kernel = extern_kernels.mm


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 2097152}, None)]
op308.unmet_dependencies = [   MemoryDep('buf305', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op308.met_dependencies = [MemoryDep('arg206_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf308.users = [NodeUser(node=ExternKernelSchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op308.group.device = cuda:0
op308.group.iteration = (2097152, 1)
op308.sizes = ([2, 16, 1024, 64], [])
buf305_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op308_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf308', get_index_2, add, None)
        return store
op308 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 2097152}, None)]
op309.unmet_dependencies = [   MemoryDep('buf306', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op309.met_dependencies = [MemoryDep('arg208_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf309.users = [NodeUser(node=ExternKernelSchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op309.group.device = cuda:0
op309.group.iteration = (2097152, 1)
op309.sizes = ([2, 16, 1024, 64], [])
buf306_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op309_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg208_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf309', get_index_2, add, None)
        return store
op309 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 2097152}, None)]
op310.unmet_dependencies = [   MemoryDep('buf307', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op310.met_dependencies = [MemoryDep('arg210_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf310.users = [NodeUser(node=ExternKernelSchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op310.group.device = cuda:0
op310.group.iteration = (2097152, 1)
op310.sizes = ([2, 16, 1024, 64], [])
buf307_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op310_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg210_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf310', get_index_2, add, None)
        return store
op310 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', c0, {c0: 33554432}, None)]
op311.unmet_dependencies = []
op311.met_dependencies = []
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
    buf311.users = [NodeUser(node=ExternKernelSchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op311.group.device = cuda:0
op311.group.iteration = (33554432, 1)
op311.sizes = ([32, 1024, 1024], [])
buf311_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
class op311_loop_body:
    var_ranges = {z0: 32, z1: 1024, z2: 1024}
    index0 = z2
    index1 = z1 + 1
    index2 = 1048576*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf311', get_index_2, where, None)
        return store
op311 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op312: ExternKernelSchedulerNode(FallbackKernel)
op312.writes = [StarDep(name='buf312', mode=None)]
op312.unmet_dependencies = 
    [   StarDep(name='buf308', mode=None),
        StarDep(name='buf309', mode=None),
        StarDep(name='buf310', mode=None),
        StarDep(name='buf311', mode=None)]
op312.met_dependencies = []
op312.outputs = [
    buf312: FallbackKernel
    buf312.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf312.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op316'), can_inplace=False, is_weak=False),
    ]
]
op312.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op313: ExternKernelSchedulerNode(MultiOutput)
op313.writes = [StarDep(name='buf313', mode=None)]
op313.unmet_dependencies = [StarDep(name='buf312', mode=None)]
op313.met_dependencies = []
op313.outputs = [
    buf313: MultiOutput
    buf313.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf313.users = [NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op313.node.kernel = None


op317: ExternKernelSchedulerNode(ExternKernelOut)
op317.writes = [StarDep(name='buf317', mode=None)]
op317.unmet_dependencies = [StarDep(name='buf313', mode=None)]
op317.met_dependencies = [StarDep(name='arg211_1', mode=None)]
op317.outputs = [
    buf317: ExternKernelOut
    buf317.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf317.users = [
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
    ]
]
op317.node.kernel = extern_kernels.mm


op318_op319_op321: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op318_op319_op321.writes = 
    [   MemoryDep('buf318', c0, {c0: 2048}, None),
        MemoryDep('buf319', c0, {c0: 2048}, None),
        MemoryDep('buf321', c0, {c0: 2097152}, None)]
op318_op319_op321.unmet_dependencies = 
    [   MemoryDep('buf300', c0, {c0: 2097152}, None),
        MemoryDep('buf317', c0, {c0: 2097152}, None)]
op318_op319_op321.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg213_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg214_1', c1, {c0: 2048, c1: 1024}, None)]
op318_op319_op321.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf318.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf319.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf321.users = [NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op318_op319_op321.snodes[0] =
op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 2048}, None)]
op318.unmet_dependencies = 
    [   MemoryDep('buf300', c0, {c0: 2097152}, None),
        MemoryDep('buf317', c0, {c0: 2097152}, None)]
op318.met_dependencies = [MemoryDep('arg212_1', c1, {c0: 2048, c1: 1024}, None)]
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf318.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
]
op318.group.device = cuda:0
op318.group.iteration = (2048, 1024)
op318.sizes = ([2048], [1024])
buf300_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op318_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf317', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg212_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf318', get_index_3, getitem)
        return store_reduction
op318 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op318_op319_op321.snodes[1] =
op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 2048}, None)]
op319.unmet_dependencies = 
    [   MemoryDep('buf300', c0, {c0: 2097152}, None),
        MemoryDep('buf317', c0, {c0: 2097152}, None)]
op319.met_dependencies = [MemoryDep('arg212_1', c1, {c0: 2048, c1: 1024}, None)]
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf319.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
]
op319.group.device = cuda:0
op319.group.iteration = (2048, 1024)
op319.sizes = ([2048], [1024])
buf300_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op319_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf317', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg212_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf319', get_index_3, getitem_1)
        return store_reduction
op319 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op318_op319_op321.snodes[2] =
op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', c0, {c0: 2097152}, None)]
op321.unmet_dependencies = 
    [   MemoryDep('buf300', c0, {c0: 2097152}, None),
        MemoryDep('buf317', c0, {c0: 2097152}, None),
        MemoryDep('buf318', c0, {c0: 2048}, None),
        MemoryDep('buf319', c0, {c0: 2048}, None)]
op321.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg213_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg214_1', c1, {c0: 2048, c1: 1024}, None)]
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf321.users = [NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op321.group.device = cuda:0
op321.group.iteration = (2097152, 1)
op321.sizes = ([2048, 1024], [])
buf300_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf319_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op321_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf317', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg212_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf318', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf319', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg213_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg214_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf321', get_index_7, add_3, None)
        return store
op321 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op318_op319_op321 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op322: ExternKernelSchedulerNode(ExternKernelOut)
op322.writes = [StarDep(name='buf322', mode=None)]
op322.unmet_dependencies = [StarDep(name='buf321', mode=None)]
op322.met_dependencies = [StarDep(name='arg215_1', mode=None)]
op322.outputs = [
    buf322: ExternKernelOut
    buf322.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf322.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op322.node.kernel = extern_kernels.mm


op324: ExternKernelSchedulerNode(ExternKernelOut)
op324.writes = [StarDep(name='buf324', mode=None)]
op324.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op324.met_dependencies = [StarDep(name='arg217_1', mode=None)]
op324.outputs = [
    buf324: ExternKernelOut
    buf324.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf324.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op324.node.kernel = extern_kernels.mm


op325: ExternKernelSchedulerNode(ExternKernelOut)
op325.writes = [StarDep(name='buf325', mode=None)]
op325.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op325.met_dependencies = [StarDep(name='arg219_1', mode=None)]
op325.outputs = [
    buf325: ExternKernelOut
    buf325.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf325.users = [NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op325.node.kernel = extern_kernels.mm


op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', c0, {c0: 2097152}, None)]
op326.unmet_dependencies = [   MemoryDep('buf322', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op326.met_dependencies = [MemoryDep('arg216_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf326.users = [NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False)]
]
op326.group.device = cuda:0
op326.group.iteration = (2097152, 1)
op326.sizes = ([2, 16, 1024, 64], [])
buf322_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op326_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg216_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf326', get_index_2, add, None)
        return store
op326 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', c0, {c0: 2097152}, None)]
op327.unmet_dependencies = [   MemoryDep('buf324', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op327.met_dependencies = [MemoryDep('arg218_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf327.users = [NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False)]
]
op327.group.device = cuda:0
op327.group.iteration = (2097152, 1)
op327.sizes = ([2, 16, 1024, 64], [])
buf324_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op327_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf324', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg218_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf327', get_index_2, add, None)
        return store
op327 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', c0, {c0: 2097152}, None)]
op328.unmet_dependencies = [   MemoryDep('buf325', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op328.met_dependencies = [MemoryDep('arg220_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf328.users = [NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False)]
]
op328.group.device = cuda:0
op328.group.iteration = (2097152, 1)
op328.sizes = ([2, 16, 1024, 64], [])
buf325_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op328_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf325', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg220_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf328', get_index_2, add, None)
        return store
op328 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op329: ExternKernelSchedulerNode(FallbackKernel)
op329.writes = [StarDep(name='buf329', mode=None)]
op329.unmet_dependencies = 
    [   StarDep(name='buf326', mode=None),
        StarDep(name='buf327', mode=None),
        StarDep(name='buf328', mode=None)]
op329.met_dependencies = []
op329.outputs = [
    buf329: FallbackKernel
    buf329.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf329.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op333'), can_inplace=False, is_weak=False),
    ]
]
op329.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op330: ExternKernelSchedulerNode(MultiOutput)
op330.writes = [StarDep(name='buf330', mode=None)]
op330.unmet_dependencies = [StarDep(name='buf329', mode=None)]
op330.met_dependencies = []
op330.outputs = [
    buf330: MultiOutput
    buf330.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf330.users = [NodeUser(node=ExternKernelSchedulerNode(name='op334'), can_inplace=False, is_weak=False)]
]
op330.node.kernel = None


op334: ExternKernelSchedulerNode(ExternKernelOut)
op334.writes = [StarDep(name='buf334', mode=None)]
op334.unmet_dependencies = [StarDep(name='buf330', mode=None)]
op334.met_dependencies = [StarDep(name='arg221_1', mode=None)]
op334.outputs = [
    buf334: ExternKernelOut
    buf334.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf334.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False)]
]
op334.node.kernel = extern_kernels.mm


op335_op336_op337_op339: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op335_op336_op337_op339.writes = 
    [   MemoryDep('buf335', c0, {c0: 2097152}, None),
        MemoryDep('buf336', c0, {c0: 2048}, None),
        MemoryDep('buf337', c0, {c0: 2048}, None),
        MemoryDep('buf339', c0, {c0: 2097152}, None)]
op335_op336_op337_op339.unmet_dependencies = 
    [   MemoryDep('buf300', c0, {c0: 2097152}, None),
        MemoryDep('buf317', c0, {c0: 2097152}, None),
        MemoryDep('buf334', c0, {c0: 2097152}, None)]
op335_op336_op337_op339.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg222_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg223_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg224_1', c1, {c0: 2048, c1: 1024}, None)]
op335_op336_op337_op339.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf335.users = [
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=True, is_weak=False),
    ]
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf336.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf337.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf339.users = [NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
]
op335_op336_op337_op339.snodes[0] =
op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 2097152}, None)]
op335.unmet_dependencies = 
    [   MemoryDep('buf300', c0, {c0: 2097152}, None),
        MemoryDep('buf317', c0, {c0: 2097152}, None),
        MemoryDep('buf334', c0, {c0: 2097152}, None)]
op335.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg222_1', c1, {c0: 2048, c1: 1024}, None)]
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf335.users = [
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=True, is_weak=False),
    ]
]
op335.group.device = cuda:0
op335.group.iteration = (2097152, 1)
op335.sizes = ([2048, 1024], [])
buf300_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op335_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf317', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg212_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf334', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg222_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf335', get_index_5, add_3, None)
        return store
op335 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op335_op336_op337_op339.snodes[1] =
op336: SchedulerNode(ComputedBuffer)
op336.writes = [MemoryDep('buf336', c0, {c0: 2048}, None)]
op336.unmet_dependencies = [MemoryDep('buf335', c0, {c0: 2097152}, None)]
op336.met_dependencies = []
op336.outputs = [
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf336.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op336.group.device = cuda:0
op336.group.iteration = (2048, 1024)
op336.sizes = ([2048], [1024])
buf335_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op336_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf335', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf336', get_index_1, getitem)
        return store_reduction
op336 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op335_op336_op337_op339.snodes[2] =
op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 2048}, None)]
op337.unmet_dependencies = [MemoryDep('buf335', c0, {c0: 2097152}, None)]
op337.met_dependencies = []
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf337.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op337.group.device = cuda:0
op337.group.iteration = (2048, 1024)
op337.sizes = ([2048], [1024])
buf335_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op337_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf335', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf337', get_index_1, getitem_1)
        return store_reduction
op337 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op335_op336_op337_op339.snodes[3] =
op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 2097152}, None)]
op339.unmet_dependencies = 
    [   MemoryDep('buf335', c0, {c0: 2097152}, None),
        MemoryDep('buf336', c0, {c0: 2048}, None),
        MemoryDep('buf337', c0, {c0: 2048}, None)]
op339.met_dependencies = 
    [   MemoryDep('arg223_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg224_1', c1, {c0: 2048, c1: 1024}, None)]
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf339.users = [NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
]
op339.group.device = cuda:0
op339.group.iteration = (2097152, 1)
op339.sizes = ([2048, 1024], [])
buf335_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf337_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op339_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf335', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf336', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf337', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg223_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg224_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf339', get_index_5, add_1, None)
        return store
op339 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op335_op336_op337_op339 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op340: ExternKernelSchedulerNode(ExternKernelOut)
op340.writes = [StarDep(name='buf340', mode=None)]
op340.unmet_dependencies = [StarDep(name='buf339', mode=None)]
op340.met_dependencies = [StarDep(name='arg225_1', mode=None)]
op340.outputs = [
    buf340: ExternKernelOut
    buf340.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf340.users = [NodeUser(node=SchedulerNode(name='op341'), can_inplace=True, is_weak=False)]
]
op340.node.kernel = extern_kernels.mm


op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 8388608}, None)]
op341.unmet_dependencies = [MemoryDep('buf340', c0, {c0: 8388608}, None)]
op341.met_dependencies = [MemoryDep('arg226_1', c1, {c0: 2048, c1: 4096}, None)]
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf341.users = [NodeUser(node=ExternKernelSchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
]
op341.group.device = cuda:0
op341.group.iteration = (8388608, 1)
op341.sizes = ([2048, 4096], [])
buf340_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op341_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg226_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf340', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg226_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf341', get_index_4, mul_2, None)
        return store
op341 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op342: ExternKernelSchedulerNode(ExternKernelOut)
op342.writes = [StarDep(name='buf342', mode=None)]
op342.unmet_dependencies = [StarDep(name='buf341', mode=None)]
op342.met_dependencies = [StarDep(name='arg227_1', mode=None)]
op342.outputs = [
    buf342: ExternKernelOut
    buf342.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf342.users = [
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=True, is_weak=False),
    ]
]
op342.node.kernel = extern_kernels.mm


op343_op344_op346: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op343_op344_op346.writes = 
    [   MemoryDep('buf343', c0, {c0: 2048}, None),
        MemoryDep('buf344', c0, {c0: 2048}, None),
        MemoryDep('buf346', c0, {c0: 2097152}, None)]
op343_op344_op346.unmet_dependencies = 
    [   MemoryDep('buf335', c0, {c0: 2097152}, None),
        MemoryDep('buf342', c0, {c0: 2097152}, None)]
op343_op344_op346.met_dependencies = 
    [   MemoryDep('arg228_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg229_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg230_1', c1, {c0: 2048, c1: 1024}, None)]
op343_op344_op346.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf343.users = [NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf344.users = [NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf346.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op349'), can_inplace=False, is_weak=False),
    ]
]
op343_op344_op346.snodes[0] =
op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 2048}, None)]
op343.unmet_dependencies = 
    [   MemoryDep('buf335', c0, {c0: 2097152}, None),
        MemoryDep('buf342', c0, {c0: 2097152}, None)]
op343.met_dependencies = [MemoryDep('arg228_1', c1, {c0: 2048, c1: 1024}, None)]
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf343.users = [NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op343.group.device = cuda:0
op343.group.iteration = (2048, 1024)
op343.sizes = ([2048], [1024])
buf335_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf342_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op343_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf335', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf342', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg228_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf343', get_index_3, getitem)
        return store_reduction
op343 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op343_op344_op346.snodes[1] =
op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 2048}, None)]
op344.unmet_dependencies = 
    [   MemoryDep('buf335', c0, {c0: 2097152}, None),
        MemoryDep('buf342', c0, {c0: 2097152}, None)]
op344.met_dependencies = [MemoryDep('arg228_1', c1, {c0: 2048, c1: 1024}, None)]
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf344.users = [NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op344.group.device = cuda:0
op344.group.iteration = (2048, 1024)
op344.sizes = ([2048], [1024])
buf335_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf342_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf344_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op344_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf335', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf342', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg228_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf344', get_index_3, getitem_1)
        return store_reduction
op344 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op343_op344_op346.snodes[2] =
op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', c0, {c0: 2097152}, None)]
op346.unmet_dependencies = 
    [   MemoryDep('buf335', c0, {c0: 2097152}, None),
        MemoryDep('buf342', c0, {c0: 2097152}, None),
        MemoryDep('buf343', c0, {c0: 2048}, None),
        MemoryDep('buf344', c0, {c0: 2048}, None)]
op346.met_dependencies = 
    [   MemoryDep('arg228_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg229_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg230_1', c1, {c0: 2048, c1: 1024}, None)]
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf346.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op349'), can_inplace=False, is_weak=False),
    ]
]
op346.group.device = cuda:0
op346.group.iteration = (2097152, 1)
op346.sizes = ([2048, 1024], [])
buf335_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf342_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf344_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf346_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op346_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf335', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf342', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg228_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf343', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf344', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg229_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg230_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf346', get_index_7, add_3, None)
        return store
op346 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op343_op344_op346 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op347: ExternKernelSchedulerNode(ExternKernelOut)
op347.writes = [StarDep(name='buf347', mode=None)]
op347.unmet_dependencies = [StarDep(name='buf346', mode=None)]
op347.met_dependencies = [StarDep(name='arg231_1', mode=None)]
op347.outputs = [
    buf347: ExternKernelOut
    buf347.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf347.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op347.node.kernel = extern_kernels.mm


op348: ExternKernelSchedulerNode(ExternKernelOut)
op348.writes = [StarDep(name='buf348', mode=None)]
op348.unmet_dependencies = [StarDep(name='buf346', mode=None)]
op348.met_dependencies = [StarDep(name='arg233_1', mode=None)]
op348.outputs = [
    buf348: ExternKernelOut
    buf348.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf348.users = [NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op348.node.kernel = extern_kernels.mm


op349: ExternKernelSchedulerNode(ExternKernelOut)
op349.writes = [StarDep(name='buf349', mode=None)]
op349.unmet_dependencies = [StarDep(name='buf346', mode=None)]
op349.met_dependencies = [StarDep(name='arg235_1', mode=None)]
op349.outputs = [
    buf349: ExternKernelOut
    buf349.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf349.users = [NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
]
op349.node.kernel = extern_kernels.mm


op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', c0, {c0: 2097152}, None)]
op350.unmet_dependencies = [   MemoryDep('buf347', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op350.met_dependencies = [MemoryDep('arg232_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf350.users = [NodeUser(node=ExternKernelSchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op350.group.device = cuda:0
op350.group.iteration = (2097152, 1)
op350.sizes = ([2, 16, 1024, 64], [])
buf347_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op350_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg232_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf350', get_index_2, add, None)
        return store
op350 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op351: SchedulerNode(ComputedBuffer)
op351.writes = [MemoryDep('buf351', c0, {c0: 2097152}, None)]
op351.unmet_dependencies = [   MemoryDep('buf348', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op351.met_dependencies = [MemoryDep('arg234_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf351.users = [NodeUser(node=ExternKernelSchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op351.group.device = cuda:0
op351.group.iteration = (2097152, 1)
op351.sizes = ([2, 16, 1024, 64], [])
buf348_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op351_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg234_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf351', get_index_2, add, None)
        return store
op351 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', c0, {c0: 2097152}, None)]
op352.unmet_dependencies = [   MemoryDep('buf349', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op352.met_dependencies = [MemoryDep('arg236_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf352.users = [NodeUser(node=ExternKernelSchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op352.group.device = cuda:0
op352.group.iteration = (2097152, 1)
op352.sizes = ([2, 16, 1024, 64], [])
buf349_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf352_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op352_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf349', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg236_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf352', get_index_2, add, None)
        return store
op352 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', c0, {c0: 33554432}, None)]
op353.unmet_dependencies = []
op353.met_dependencies = []
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
    buf353.users = [NodeUser(node=ExternKernelSchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op353.group.device = cuda:0
op353.group.iteration = (33554432, 1)
op353.sizes = ([32, 1024, 1024], [])
buf353_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
class op353_loop_body:
    var_ranges = {z0: 32, z1: 1024, z2: 1024}
    index0 = z2
    index1 = z1 + 1
    index2 = 1048576*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf353', get_index_2, where, None)
        return store
op353 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op354: ExternKernelSchedulerNode(FallbackKernel)
op354.writes = [StarDep(name='buf354', mode=None)]
op354.unmet_dependencies = 
    [   StarDep(name='buf350', mode=None),
        StarDep(name='buf351', mode=None),
        StarDep(name='buf352', mode=None),
        StarDep(name='buf353', mode=None)]
op354.met_dependencies = []
op354.outputs = [
    buf354: FallbackKernel
    buf354.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf354.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False),
    ]
]
op354.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op355: ExternKernelSchedulerNode(MultiOutput)
op355.writes = [StarDep(name='buf355', mode=None)]
op355.unmet_dependencies = [StarDep(name='buf354', mode=None)]
op355.met_dependencies = []
op355.outputs = [
    buf355: MultiOutput
    buf355.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf355.users = [NodeUser(node=ExternKernelSchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
]
op355.node.kernel = None


op359: ExternKernelSchedulerNode(ExternKernelOut)
op359.writes = [StarDep(name='buf359', mode=None)]
op359.unmet_dependencies = [StarDep(name='buf355', mode=None)]
op359.met_dependencies = [StarDep(name='arg237_1', mode=None)]
op359.outputs = [
    buf359: ExternKernelOut
    buf359.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf359.users = [NodeUser(node=SchedulerNode(name='op360'), can_inplace=True, is_weak=False)]
]
op359.node.kernel = extern_kernels.mm


op360_op361_op362_op364: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op360_op361_op362_op364.writes = 
    [   MemoryDep('buf360', c0, {c0: 2097152}, None),
        MemoryDep('buf361', c0, {c0: 2048}, None),
        MemoryDep('buf362', c0, {c0: 2048}, None),
        MemoryDep('buf364', c0, {c0: 2097152}, None)]
op360_op361_op362_op364.unmet_dependencies = 
    [   MemoryDep('buf335', c0, {c0: 2097152}, None),
        MemoryDep('buf342', c0, {c0: 2097152}, None),
        MemoryDep('buf359', c0, {c0: 2097152}, None)]
op360_op361_op362_op364.met_dependencies = 
    [   MemoryDep('arg228_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg238_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg239_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg240_1', c1, {c0: 2048, c1: 1024}, None)]
op360_op361_op362_op364.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf360.users = [
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=True, is_weak=False),
    ]
    buf361: ComputedBuffer
    buf361.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf361.users = [NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf362.users = [NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf364.users = [NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
]
op360_op361_op362_op364.snodes[0] =
op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', c0, {c0: 2097152}, None)]
op360.unmet_dependencies = 
    [   MemoryDep('buf335', c0, {c0: 2097152}, None),
        MemoryDep('buf342', c0, {c0: 2097152}, None),
        MemoryDep('buf359', c0, {c0: 2097152}, None)]
op360.met_dependencies = 
    [   MemoryDep('arg228_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg238_1', c1, {c0: 2048, c1: 1024}, None)]
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf360.users = [
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=True, is_weak=False),
    ]
]
op360.group.device = cuda:0
op360.group.iteration = (2097152, 1)
op360.sizes = ([2048, 1024], [])
buf335_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf342_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op360_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf335', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf342', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg228_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf359', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg238_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf360', get_index_5, add_3, None)
        return store
op360 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op360_op361_op362_op364.snodes[1] =
op361: SchedulerNode(ComputedBuffer)
op361.writes = [MemoryDep('buf361', c0, {c0: 2048}, None)]
op361.unmet_dependencies = [MemoryDep('buf360', c0, {c0: 2097152}, None)]
op361.met_dependencies = []
op361.outputs = [
    buf361: ComputedBuffer
    buf361.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf361.users = [NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
]
op361.group.device = cuda:0
op361.group.iteration = (2048, 1024)
op361.sizes = ([2048], [1024])
buf360_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf361_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op361_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf360', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf361', get_index_1, getitem)
        return store_reduction
op361 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op360_op361_op362_op364.snodes[2] =
op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', c0, {c0: 2048}, None)]
op362.unmet_dependencies = [MemoryDep('buf360', c0, {c0: 2097152}, None)]
op362.met_dependencies = []
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf362.users = [NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
]
op362.group.device = cuda:0
op362.group.iteration = (2048, 1024)
op362.sizes = ([2048], [1024])
buf360_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op362_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf360', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf362', get_index_1, getitem_1)
        return store_reduction
op362 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op360_op361_op362_op364.snodes[3] =
op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 2097152}, None)]
op364.unmet_dependencies = 
    [   MemoryDep('buf360', c0, {c0: 2097152}, None),
        MemoryDep('buf361', c0, {c0: 2048}, None),
        MemoryDep('buf362', c0, {c0: 2048}, None)]
op364.met_dependencies = 
    [   MemoryDep('arg239_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg240_1', c1, {c0: 2048, c1: 1024}, None)]
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf364.users = [NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
]
op364.group.device = cuda:0
op364.group.iteration = (2097152, 1)
op364.sizes = ([2048, 1024], [])
buf360_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf361_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf362_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op364_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf360', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf361', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf362', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg239_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg240_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf364', get_index_5, add_1, None)
        return store
op364 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op360_op361_op362_op364 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op365: ExternKernelSchedulerNode(ExternKernelOut)
op365.writes = [StarDep(name='buf365', mode=None)]
op365.unmet_dependencies = [StarDep(name='buf364', mode=None)]
op365.met_dependencies = [StarDep(name='arg241_1', mode=None)]
op365.outputs = [
    buf365: ExternKernelOut
    buf365.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf365.users = [NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False)]
]
op365.node.kernel = extern_kernels.mm


op366: ExternKernelSchedulerNode(ExternKernelOut)
op366.writes = [StarDep(name='buf366', mode=None)]
op366.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op366.met_dependencies = [StarDep(name='arg243_1', mode=None)]
op366.outputs = [
    buf366: ExternKernelOut
    buf366.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf366.users = [NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False)]
]
op366.node.kernel = extern_kernels.mm


op367: ExternKernelSchedulerNode(ExternKernelOut)
op367.writes = [StarDep(name='buf367', mode=None)]
op367.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op367.met_dependencies = [StarDep(name='arg245_1', mode=None)]
op367.outputs = [
    buf367: ExternKernelOut
    buf367.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf367.users = [NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False)]
]
op367.node.kernel = extern_kernels.mm


op368: SchedulerNode(ComputedBuffer)
op368.writes = [MemoryDep('buf368', c0, {c0: 2097152}, None)]
op368.unmet_dependencies = [   MemoryDep('buf365', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op368.met_dependencies = [MemoryDep('arg242_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op368.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf368.users = [NodeUser(node=ExternKernelSchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op368.group.device = cuda:0
op368.group.iteration = (2097152, 1)
op368.sizes = ([2, 16, 1024, 64], [])
buf365_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op368_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf365', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg242_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf368', get_index_2, add, None)
        return store
op368 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', c0, {c0: 2097152}, None)]
op369.unmet_dependencies = [   MemoryDep('buf366', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op369.met_dependencies = [MemoryDep('arg244_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf369.users = [NodeUser(node=ExternKernelSchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op369.group.device = cuda:0
op369.group.iteration = (2097152, 1)
op369.sizes = ([2, 16, 1024, 64], [])
buf366_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op369_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf366', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg244_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf369', get_index_2, add, None)
        return store
op369 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op370: SchedulerNode(ComputedBuffer)
op370.writes = [MemoryDep('buf370', c0, {c0: 2097152}, None)]
op370.unmet_dependencies = [   MemoryDep('buf367', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op370.met_dependencies = [MemoryDep('arg246_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf370.users = [NodeUser(node=ExternKernelSchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op370.group.device = cuda:0
op370.group.iteration = (2097152, 1)
op370.sizes = ([2, 16, 1024, 64], [])
buf367_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op370_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg246_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf370', get_index_2, add, None)
        return store
op370 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op371: ExternKernelSchedulerNode(FallbackKernel)
op371.writes = [StarDep(name='buf371', mode=None)]
op371.unmet_dependencies = 
    [   StarDep(name='buf368', mode=None),
        StarDep(name='buf369', mode=None),
        StarDep(name='buf370', mode=None)]
op371.met_dependencies = []
op371.outputs = [
    buf371: FallbackKernel
    buf371.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf371.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op373'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op375'), can_inplace=False, is_weak=False),
    ]
]
op371.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op372: ExternKernelSchedulerNode(MultiOutput)
op372.writes = [StarDep(name='buf372', mode=None)]
op372.unmet_dependencies = [StarDep(name='buf371', mode=None)]
op372.met_dependencies = []
op372.outputs = [
    buf372: MultiOutput
    buf372.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf372.users = [NodeUser(node=ExternKernelSchedulerNode(name='op376'), can_inplace=False, is_weak=False)]
]
op372.node.kernel = None


op376: ExternKernelSchedulerNode(ExternKernelOut)
op376.writes = [StarDep(name='buf376', mode=None)]
op376.unmet_dependencies = [StarDep(name='buf372', mode=None)]
op376.met_dependencies = [StarDep(name='arg247_1', mode=None)]
op376.outputs = [
    buf376: ExternKernelOut
    buf376.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf376.users = [
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=True, is_weak=False),
    ]
]
op376.node.kernel = extern_kernels.mm


op377_op378_op380: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op377_op378_op380.writes = 
    [   MemoryDep('buf377', c0, {c0: 2048}, None),
        MemoryDep('buf378', c0, {c0: 2048}, None),
        MemoryDep('buf380', c0, {c0: 2097152}, None)]
op377_op378_op380.unmet_dependencies = 
    [   MemoryDep('buf360', c0, {c0: 2097152}, None),
        MemoryDep('buf376', c0, {c0: 2097152}, None)]
op377_op378_op380.met_dependencies = 
    [   MemoryDep('arg248_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg249_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg250_1', c1, {c0: 2048, c1: 1024}, None)]
op377_op378_op380.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf377.users = [NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf378.users = [NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf380.users = [NodeUser(node=ExternKernelSchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
]
op377_op378_op380.snodes[0] =
op377: SchedulerNode(ComputedBuffer)
op377.writes = [MemoryDep('buf377', c0, {c0: 2048}, None)]
op377.unmet_dependencies = 
    [   MemoryDep('buf360', c0, {c0: 2097152}, None),
        MemoryDep('buf376', c0, {c0: 2097152}, None)]
op377.met_dependencies = [MemoryDep('arg248_1', c1, {c0: 2048, c1: 1024}, None)]
op377.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf377.users = [NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
]
op377.group.device = cuda:0
op377.group.iteration = (2048, 1024)
op377.sizes = ([2048], [1024])
buf360_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op377_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf360', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf376', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg248_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf377', get_index_3, getitem)
        return store_reduction
op377 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op377_op378_op380.snodes[1] =
op378: SchedulerNode(ComputedBuffer)
op378.writes = [MemoryDep('buf378', c0, {c0: 2048}, None)]
op378.unmet_dependencies = 
    [   MemoryDep('buf360', c0, {c0: 2097152}, None),
        MemoryDep('buf376', c0, {c0: 2097152}, None)]
op378.met_dependencies = [MemoryDep('arg248_1', c1, {c0: 2048, c1: 1024}, None)]
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf378.users = [NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
]
op378.group.device = cuda:0
op378.group.iteration = (2048, 1024)
op378.sizes = ([2048], [1024])
buf360_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf378_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op378_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf360', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf376', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg248_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf378', get_index_3, getitem_1)
        return store_reduction
op378 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op377_op378_op380.snodes[2] =
op380: SchedulerNode(ComputedBuffer)
op380.writes = [MemoryDep('buf380', c0, {c0: 2097152}, None)]
op380.unmet_dependencies = 
    [   MemoryDep('buf360', c0, {c0: 2097152}, None),
        MemoryDep('buf376', c0, {c0: 2097152}, None),
        MemoryDep('buf377', c0, {c0: 2048}, None),
        MemoryDep('buf378', c0, {c0: 2048}, None)]
op380.met_dependencies = 
    [   MemoryDep('arg248_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg249_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg250_1', c1, {c0: 2048, c1: 1024}, None)]
op380.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf380.users = [NodeUser(node=ExternKernelSchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
]
op380.group.device = cuda:0
op380.group.iteration = (2097152, 1)
op380.sizes = ([2048, 1024], [])
buf360_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf378_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf380_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op380_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf360', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf376', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg248_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf377', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf378', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg249_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg250_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf380', get_index_7, add_3, None)
        return store
op380 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op377_op378_op380 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op381: ExternKernelSchedulerNode(ExternKernelOut)
op381.writes = [StarDep(name='buf381', mode=None)]
op381.unmet_dependencies = [StarDep(name='buf380', mode=None)]
op381.met_dependencies = [StarDep(name='arg251_1', mode=None)]
op381.outputs = [
    buf381: ExternKernelOut
    buf381.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf381.users = [NodeUser(node=SchedulerNode(name='op382'), can_inplace=True, is_weak=False)]
]
op381.node.kernel = extern_kernels.mm


op382: SchedulerNode(ComputedBuffer)
op382.writes = [MemoryDep('buf382', c0, {c0: 8388608}, None)]
op382.unmet_dependencies = [MemoryDep('buf381', c0, {c0: 8388608}, None)]
op382.met_dependencies = [MemoryDep('arg252_1', c1, {c0: 2048, c1: 4096}, None)]
op382.outputs = [
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf382.users = [NodeUser(node=ExternKernelSchedulerNode(name='op383'), can_inplace=False, is_weak=False)]
]
op382.group.device = cuda:0
op382.group.iteration = (8388608, 1)
op382.sizes = ([2048, 4096], [])
buf381_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf382_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op382_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf381', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg252_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf381', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg252_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf382', get_index_4, mul_2, None)
        return store
op382 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op383: ExternKernelSchedulerNode(ExternKernelOut)
op383.writes = [StarDep(name='buf383', mode=None)]
op383.unmet_dependencies = [StarDep(name='buf382', mode=None)]
op383.met_dependencies = [StarDep(name='arg253_1', mode=None)]
op383.outputs = [
    buf383: ExternKernelOut
    buf383.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf383.users = [NodeUser(node=SchedulerNode(name='op384'), can_inplace=True, is_weak=False)]
]
op383.node.kernel = extern_kernels.mm


op384_op385_op386_op388: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op384_op385_op386_op388.writes = 
    [   MemoryDep('buf384', c0, {c0: 2097152}, None),
        MemoryDep('buf385', c0, {c0: 2048}, None),
        MemoryDep('buf386', c0, {c0: 2048}, None),
        MemoryDep('buf388', c0, {c0: 2097152}, None)]
op384_op385_op386_op388.unmet_dependencies = 
    [   MemoryDep('buf360', c0, {c0: 2097152}, None),
        MemoryDep('buf376', c0, {c0: 2097152}, None),
        MemoryDep('buf383', c0, {c0: 2097152}, None)]
op384_op385_op386_op388.met_dependencies = 
    [   MemoryDep('arg248_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg254_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg255_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg256_1', c1, {c0: 2048, c1: 1024}, None)]
op384_op385_op386_op388.outputs = [
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf384.users = [
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=True, is_weak=False),
    ]
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf385.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
    buf386: ComputedBuffer
    buf386.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf386.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf388.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op391'), can_inplace=False, is_weak=False),
    ]
]
op384_op385_op386_op388.snodes[0] =
op384: SchedulerNode(ComputedBuffer)
op384.writes = [MemoryDep('buf384', c0, {c0: 2097152}, None)]
op384.unmet_dependencies = 
    [   MemoryDep('buf360', c0, {c0: 2097152}, None),
        MemoryDep('buf376', c0, {c0: 2097152}, None),
        MemoryDep('buf383', c0, {c0: 2097152}, None)]
op384.met_dependencies = 
    [   MemoryDep('arg248_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg254_1', c1, {c0: 2048, c1: 1024}, None)]
op384.outputs = [
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf384.users = [
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=True, is_weak=False),
    ]
]
op384.group.device = cuda:0
op384.group.iteration = (2097152, 1)
op384.sizes = ([2048, 1024], [])
buf360_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf383_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op384_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf360', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf376', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg248_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf383', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg254_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf384', get_index_5, add_3, None)
        return store
op384 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op384_op385_op386_op388.snodes[1] =
op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 2048}, None)]
op385.unmet_dependencies = [MemoryDep('buf384', c0, {c0: 2097152}, None)]
op385.met_dependencies = []
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf385.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (2048, 1024)
op385.sizes = ([2048], [1024])
buf384_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op385_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf385', get_index_1, getitem)
        return store_reduction
op385 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op384_op385_op386_op388.snodes[2] =
op386: SchedulerNode(ComputedBuffer)
op386.writes = [MemoryDep('buf386', c0, {c0: 2048}, None)]
op386.unmet_dependencies = [MemoryDep('buf384', c0, {c0: 2097152}, None)]
op386.met_dependencies = []
op386.outputs = [
    buf386: ComputedBuffer
    buf386.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf386.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
]
op386.group.device = cuda:0
op386.group.iteration = (2048, 1024)
op386.sizes = ([2048], [1024])
buf384_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf386_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op386_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf386', get_index_1, getitem_1)
        return store_reduction
op386 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op384_op385_op386_op388.snodes[3] =
op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 2097152}, None)]
op388.unmet_dependencies = 
    [   MemoryDep('buf384', c0, {c0: 2097152}, None),
        MemoryDep('buf385', c0, {c0: 2048}, None),
        MemoryDep('buf386', c0, {c0: 2048}, None)]
op388.met_dependencies = 
    [   MemoryDep('arg255_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg256_1', c1, {c0: 2048, c1: 1024}, None)]
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf388.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op391'), can_inplace=False, is_weak=False),
    ]
]
op388.group.device = cuda:0
op388.group.iteration = (2097152, 1)
op388.sizes = ([2048, 1024], [])
buf384_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf386_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op388_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf385', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf386', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg255_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg256_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf388', get_index_5, add_1, None)
        return store
op388 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op384_op385_op386_op388 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op389: ExternKernelSchedulerNode(ExternKernelOut)
op389.writes = [StarDep(name='buf389', mode=None)]
op389.unmet_dependencies = [StarDep(name='buf388', mode=None)]
op389.met_dependencies = [StarDep(name='arg257_1', mode=None)]
op389.outputs = [
    buf389: ExternKernelOut
    buf389.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf389.users = [NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
]
op389.node.kernel = extern_kernels.mm


op390: ExternKernelSchedulerNode(ExternKernelOut)
op390.writes = [StarDep(name='buf390', mode=None)]
op390.unmet_dependencies = [StarDep(name='buf388', mode=None)]
op390.met_dependencies = [StarDep(name='arg259_1', mode=None)]
op390.outputs = [
    buf390: ExternKernelOut
    buf390.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf390.users = [NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False)]
]
op390.node.kernel = extern_kernels.mm


op391: ExternKernelSchedulerNode(ExternKernelOut)
op391.writes = [StarDep(name='buf391', mode=None)]
op391.unmet_dependencies = [StarDep(name='buf388', mode=None)]
op391.met_dependencies = [StarDep(name='arg261_1', mode=None)]
op391.outputs = [
    buf391: ExternKernelOut
    buf391.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf391.users = [NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False)]
]
op391.node.kernel = extern_kernels.mm


op392: SchedulerNode(ComputedBuffer)
op392.writes = [MemoryDep('buf392', c0, {c0: 2097152}, None)]
op392.unmet_dependencies = [   MemoryDep('buf389', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op392.met_dependencies = [MemoryDep('arg258_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op392.outputs = [
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf392.users = [NodeUser(node=ExternKernelSchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
]
op392.group.device = cuda:0
op392.group.iteration = (2097152, 1)
op392.sizes = ([2, 16, 1024, 64], [])
buf389_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op392_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf389', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg258_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf392', get_index_2, add, None)
        return store
op392 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op393: SchedulerNode(ComputedBuffer)
op393.writes = [MemoryDep('buf393', c0, {c0: 2097152}, None)]
op393.unmet_dependencies = [   MemoryDep('buf390', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op393.met_dependencies = [MemoryDep('arg260_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op393.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf393.users = [NodeUser(node=ExternKernelSchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
]
op393.group.device = cuda:0
op393.group.iteration = (2097152, 1)
op393.sizes = ([2, 16, 1024, 64], [])
buf390_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf393_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op393_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf390', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg260_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf393', get_index_2, add, None)
        return store
op393 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op394: SchedulerNode(ComputedBuffer)
op394.writes = [MemoryDep('buf394', c0, {c0: 2097152}, None)]
op394.unmet_dependencies = [   MemoryDep('buf391', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op394.met_dependencies = [MemoryDep('arg262_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op394.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf394.users = [NodeUser(node=ExternKernelSchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
]
op394.group.device = cuda:0
op394.group.iteration = (2097152, 1)
op394.sizes = ([2, 16, 1024, 64], [])
buf391_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf394_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op394_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg262_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf394', get_index_2, add, None)
        return store
op394 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op395: SchedulerNode(ComputedBuffer)
op395.writes = [MemoryDep('buf395', c0, {c0: 33554432}, None)]
op395.unmet_dependencies = []
op395.met_dependencies = []
op395.outputs = [
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
    buf395.users = [NodeUser(node=ExternKernelSchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
]
op395.group.device = cuda:0
op395.group.iteration = (33554432, 1)
op395.sizes = ([32, 1024, 1024], [])
buf395_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
class op395_loop_body:
    var_ranges = {z0: 32, z1: 1024, z2: 1024}
    index0 = z2
    index1 = z1 + 1
    index2 = 1048576*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf395', get_index_2, where, None)
        return store
op395 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op396: ExternKernelSchedulerNode(FallbackKernel)
op396.writes = [StarDep(name='buf396', mode=None)]
op396.unmet_dependencies = 
    [   StarDep(name='buf392', mode=None),
        StarDep(name='buf393', mode=None),
        StarDep(name='buf394', mode=None),
        StarDep(name='buf395', mode=None)]
op396.met_dependencies = []
op396.outputs = [
    buf396: FallbackKernel
    buf396.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf396.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op399'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False),
    ]
]
op396.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op397: ExternKernelSchedulerNode(MultiOutput)
op397.writes = [StarDep(name='buf397', mode=None)]
op397.unmet_dependencies = [StarDep(name='buf396', mode=None)]
op397.met_dependencies = []
op397.outputs = [
    buf397: MultiOutput
    buf397.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf397.users = [NodeUser(node=ExternKernelSchedulerNode(name='op401'), can_inplace=False, is_weak=False)]
]
op397.node.kernel = None


op401: ExternKernelSchedulerNode(ExternKernelOut)
op401.writes = [StarDep(name='buf401', mode=None)]
op401.unmet_dependencies = [StarDep(name='buf397', mode=None)]
op401.met_dependencies = [StarDep(name='arg263_1', mode=None)]
op401.outputs = [
    buf401: ExternKernelOut
    buf401.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf401.users = [
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=True, is_weak=False),
    ]
]
op401.node.kernel = extern_kernels.mm


op402_op403_op405: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op402_op403_op405.writes = 
    [   MemoryDep('buf402', c0, {c0: 2048}, None),
        MemoryDep('buf403', c0, {c0: 2048}, None),
        MemoryDep('buf405', c0, {c0: 2097152}, None)]
op402_op403_op405.unmet_dependencies = 
    [   MemoryDep('buf384', c0, {c0: 2097152}, None),
        MemoryDep('buf401', c0, {c0: 2097152}, None)]
op402_op403_op405.met_dependencies = 
    [   MemoryDep('arg264_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg265_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg266_1', c1, {c0: 2048, c1: 1024}, None)]
op402_op403_op405.outputs = [
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf402.users = [NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False)]
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf403.users = [NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False)]
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf405.users = [NodeUser(node=ExternKernelSchedulerNode(name='op406'), can_inplace=False, is_weak=False)]
]
op402_op403_op405.snodes[0] =
op402: SchedulerNode(ComputedBuffer)
op402.writes = [MemoryDep('buf402', c0, {c0: 2048}, None)]
op402.unmet_dependencies = 
    [   MemoryDep('buf384', c0, {c0: 2097152}, None),
        MemoryDep('buf401', c0, {c0: 2097152}, None)]
op402.met_dependencies = [MemoryDep('arg264_1', c1, {c0: 2048, c1: 1024}, None)]
op402.outputs = [
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf402.users = [NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False)]
]
op402.group.device = cuda:0
op402.group.iteration = (2048, 1024)
op402.sizes = ([2048], [1024])
buf384_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op402_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf401', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg264_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf402', get_index_3, getitem)
        return store_reduction
op402 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op402_op403_op405.snodes[1] =
op403: SchedulerNode(ComputedBuffer)
op403.writes = [MemoryDep('buf403', c0, {c0: 2048}, None)]
op403.unmet_dependencies = 
    [   MemoryDep('buf384', c0, {c0: 2097152}, None),
        MemoryDep('buf401', c0, {c0: 2097152}, None)]
op403.met_dependencies = [MemoryDep('arg264_1', c1, {c0: 2048, c1: 1024}, None)]
op403.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf403.users = [NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False)]
]
op403.group.device = cuda:0
op403.group.iteration = (2048, 1024)
op403.sizes = ([2048], [1024])
buf384_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op403_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf401', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg264_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf403', get_index_3, getitem_1)
        return store_reduction
op403 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op402_op403_op405.snodes[2] =
op405: SchedulerNode(ComputedBuffer)
op405.writes = [MemoryDep('buf405', c0, {c0: 2097152}, None)]
op405.unmet_dependencies = 
    [   MemoryDep('buf384', c0, {c0: 2097152}, None),
        MemoryDep('buf401', c0, {c0: 2097152}, None),
        MemoryDep('buf402', c0, {c0: 2048}, None),
        MemoryDep('buf403', c0, {c0: 2048}, None)]
op405.met_dependencies = 
    [   MemoryDep('arg264_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg265_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg266_1', c1, {c0: 2048, c1: 1024}, None)]
op405.outputs = [
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf405.users = [NodeUser(node=ExternKernelSchedulerNode(name='op406'), can_inplace=False, is_weak=False)]
]
op405.group.device = cuda:0
op405.group.iteration = (2097152, 1)
op405.sizes = ([2048, 1024], [])
buf384_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf403_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf405_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op405_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf401', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg264_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf402', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf403', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg265_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg266_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf405', get_index_7, add_3, None)
        return store
op405 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op402_op403_op405 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op406: ExternKernelSchedulerNode(ExternKernelOut)
op406.writes = [StarDep(name='buf406', mode=None)]
op406.unmet_dependencies = [StarDep(name='buf405', mode=None)]
op406.met_dependencies = [StarDep(name='arg267_1', mode=None)]
op406.outputs = [
    buf406: ExternKernelOut
    buf406.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf406.users = [NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False)]
]
op406.node.kernel = extern_kernels.mm


op407: ExternKernelSchedulerNode(ExternKernelOut)
op407.writes = [StarDep(name='buf407', mode=None)]
op407.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op407.met_dependencies = [StarDep(name='arg269_1', mode=None)]
op407.outputs = [
    buf407: ExternKernelOut
    buf407.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf407.users = [NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False)]
]
op407.node.kernel = extern_kernels.mm


op408: ExternKernelSchedulerNode(ExternKernelOut)
op408.writes = [StarDep(name='buf408', mode=None)]
op408.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op408.met_dependencies = [StarDep(name='arg271_1', mode=None)]
op408.outputs = [
    buf408: ExternKernelOut
    buf408.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf408.users = [NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False)]
]
op408.node.kernel = extern_kernels.mm


op409: SchedulerNode(ComputedBuffer)
op409.writes = [MemoryDep('buf409', c0, {c0: 2097152}, None)]
op409.unmet_dependencies = [   MemoryDep('buf406', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op409.met_dependencies = [MemoryDep('arg268_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op409.outputs = [
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf409.users = [NodeUser(node=ExternKernelSchedulerNode(name='op412'), can_inplace=False, is_weak=False)]
]
op409.group.device = cuda:0
op409.group.iteration = (2097152, 1)
op409.sizes = ([2, 16, 1024, 64], [])
buf406_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op409_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg268_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf409', get_index_2, add, None)
        return store
op409 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op410: SchedulerNode(ComputedBuffer)
op410.writes = [MemoryDep('buf410', c0, {c0: 2097152}, None)]
op410.unmet_dependencies = [   MemoryDep('buf407', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op410.met_dependencies = [MemoryDep('arg270_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op410.outputs = [
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf410.users = [NodeUser(node=ExternKernelSchedulerNode(name='op412'), can_inplace=False, is_weak=False)]
]
op410.group.device = cuda:0
op410.group.iteration = (2097152, 1)
op410.sizes = ([2, 16, 1024, 64], [])
buf407_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op410_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf407', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg270_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf410', get_index_2, add, None)
        return store
op410 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op411: SchedulerNode(ComputedBuffer)
op411.writes = [MemoryDep('buf411', c0, {c0: 2097152}, None)]
op411.unmet_dependencies = [   MemoryDep('buf408', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op411.met_dependencies = [MemoryDep('arg272_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op411.outputs = [
    buf411: ComputedBuffer
    buf411.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf411.users = [NodeUser(node=ExternKernelSchedulerNode(name='op412'), can_inplace=False, is_weak=False)]
]
op411.group.device = cuda:0
op411.group.iteration = (2097152, 1)
op411.sizes = ([2, 16, 1024, 64], [])
buf408_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf411_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op411_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg272_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf411', get_index_2, add, None)
        return store
op411 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op412: ExternKernelSchedulerNode(FallbackKernel)
op412.writes = [StarDep(name='buf412', mode=None)]
op412.unmet_dependencies = 
    [   StarDep(name='buf409', mode=None),
        StarDep(name='buf410', mode=None),
        StarDep(name='buf411', mode=None)]
op412.met_dependencies = []
op412.outputs = [
    buf412: FallbackKernel
    buf412.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf412.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op416'), can_inplace=False, is_weak=False),
    ]
]
op412.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op413: ExternKernelSchedulerNode(MultiOutput)
op413.writes = [StarDep(name='buf413', mode=None)]
op413.unmet_dependencies = [StarDep(name='buf412', mode=None)]
op413.met_dependencies = []
op413.outputs = [
    buf413: MultiOutput
    buf413.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf413.users = [NodeUser(node=ExternKernelSchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
]
op413.node.kernel = None


op417: ExternKernelSchedulerNode(ExternKernelOut)
op417.writes = [StarDep(name='buf417', mode=None)]
op417.unmet_dependencies = [StarDep(name='buf413', mode=None)]
op417.met_dependencies = [StarDep(name='arg273_1', mode=None)]
op417.outputs = [
    buf417: ExternKernelOut
    buf417.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf417.users = [NodeUser(node=SchedulerNode(name='op418'), can_inplace=True, is_weak=False)]
]
op417.node.kernel = extern_kernels.mm


op418_op419_op420_op422: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op418_op419_op420_op422.writes = 
    [   MemoryDep('buf418', c0, {c0: 2097152}, None),
        MemoryDep('buf419', c0, {c0: 2048}, None),
        MemoryDep('buf420', c0, {c0: 2048}, None),
        MemoryDep('buf422', c0, {c0: 2097152}, None)]
op418_op419_op420_op422.unmet_dependencies = 
    [   MemoryDep('buf384', c0, {c0: 2097152}, None),
        MemoryDep('buf401', c0, {c0: 2097152}, None),
        MemoryDep('buf417', c0, {c0: 2097152}, None)]
op418_op419_op420_op422.met_dependencies = 
    [   MemoryDep('arg264_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg274_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg275_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg276_1', c1, {c0: 2048, c1: 1024}, None)]
op418_op419_op420_op422.outputs = [
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf418.users = [
        NodeUser(node=SchedulerNode(name='op419'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op429'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=True, is_weak=False),
    ]
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf419.users = [NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False)]
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf420.users = [NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False)]
    buf422: ComputedBuffer
    buf422.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf422.users = [NodeUser(node=ExternKernelSchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
]
op418_op419_op420_op422.snodes[0] =
op418: SchedulerNode(ComputedBuffer)
op418.writes = [MemoryDep('buf418', c0, {c0: 2097152}, None)]
op418.unmet_dependencies = 
    [   MemoryDep('buf384', c0, {c0: 2097152}, None),
        MemoryDep('buf401', c0, {c0: 2097152}, None),
        MemoryDep('buf417', c0, {c0: 2097152}, None)]
op418.met_dependencies = 
    [   MemoryDep('arg264_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg274_1', c1, {c0: 2048, c1: 1024}, None)]
op418.outputs = [
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf418.users = [
        NodeUser(node=SchedulerNode(name='op419'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op429'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=True, is_weak=False),
    ]
]
op418.group.device = cuda:0
op418.group.iteration = (2097152, 1)
op418.sizes = ([2048, 1024], [])
buf384_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf418_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op418_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf401', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg264_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf417', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg274_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf418', get_index_5, add_3, None)
        return store
op418 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op418_op419_op420_op422.snodes[1] =
op419: SchedulerNode(ComputedBuffer)
op419.writes = [MemoryDep('buf419', c0, {c0: 2048}, None)]
op419.unmet_dependencies = [MemoryDep('buf418', c0, {c0: 2097152}, None)]
op419.met_dependencies = []
op419.outputs = [
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf419.users = [NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False)]
]
op419.group.device = cuda:0
op419.group.iteration = (2048, 1024)
op419.sizes = ([2048], [1024])
buf418_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op419_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf418', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf419', get_index_1, getitem)
        return store_reduction
op419 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op418_op419_op420_op422.snodes[2] =
op420: SchedulerNode(ComputedBuffer)
op420.writes = [MemoryDep('buf420', c0, {c0: 2048}, None)]
op420.unmet_dependencies = [MemoryDep('buf418', c0, {c0: 2097152}, None)]
op420.met_dependencies = []
op420.outputs = [
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf420.users = [NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False)]
]
op420.group.device = cuda:0
op420.group.iteration = (2048, 1024)
op420.sizes = ([2048], [1024])
buf418_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf420_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op420_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf418', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf420', get_index_1, getitem_1)
        return store_reduction
op420 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op418_op419_op420_op422.snodes[3] =
op422: SchedulerNode(ComputedBuffer)
op422.writes = [MemoryDep('buf422', c0, {c0: 2097152}, None)]
op422.unmet_dependencies = 
    [   MemoryDep('buf418', c0, {c0: 2097152}, None),
        MemoryDep('buf419', c0, {c0: 2048}, None),
        MemoryDep('buf420', c0, {c0: 2048}, None)]
op422.met_dependencies = 
    [   MemoryDep('arg275_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg276_1', c1, {c0: 2048, c1: 1024}, None)]
op422.outputs = [
    buf422: ComputedBuffer
    buf422.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf422.users = [NodeUser(node=ExternKernelSchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
]
op422.group.device = cuda:0
op422.group.iteration = (2097152, 1)
op422.sizes = ([2048, 1024], [])
buf418_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf420_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf422_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op422_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf418', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf419', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf420', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg275_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg276_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf422', get_index_5, add_1, None)
        return store
op422 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op418_op419_op420_op422 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op423: ExternKernelSchedulerNode(ExternKernelOut)
op423.writes = [StarDep(name='buf423', mode=None)]
op423.unmet_dependencies = [StarDep(name='buf422', mode=None)]
op423.met_dependencies = [StarDep(name='arg277_1', mode=None)]
op423.outputs = [
    buf423: ExternKernelOut
    buf423.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf423.users = [NodeUser(node=SchedulerNode(name='op424'), can_inplace=True, is_weak=False)]
]
op423.node.kernel = extern_kernels.mm


op424: SchedulerNode(ComputedBuffer)
op424.writes = [MemoryDep('buf424', c0, {c0: 8388608}, None)]
op424.unmet_dependencies = [MemoryDep('buf423', c0, {c0: 8388608}, None)]
op424.met_dependencies = [MemoryDep('arg278_1', c1, {c0: 2048, c1: 4096}, None)]
op424.outputs = [
    buf424: ComputedBuffer
    buf424.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf424.users = [NodeUser(node=ExternKernelSchedulerNode(name='op425'), can_inplace=False, is_weak=False)]
]
op424.group.device = cuda:0
op424.group.iteration = (8388608, 1)
op424.sizes = ([2048, 4096], [])
buf423_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf424_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op424_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf423', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg278_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf423', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg278_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf424', get_index_4, mul_2, None)
        return store
op424 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op425: ExternKernelSchedulerNode(ExternKernelOut)
op425.writes = [StarDep(name='buf425', mode=None)]
op425.unmet_dependencies = [StarDep(name='buf424', mode=None)]
op425.met_dependencies = [StarDep(name='arg279_1', mode=None)]
op425.outputs = [
    buf425: ExternKernelOut
    buf425.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf425.users = [
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op429'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=True, is_weak=False),
    ]
]
op425.node.kernel = extern_kernels.mm


op426_op427_op429: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op426_op427_op429.writes = 
    [   MemoryDep('buf426', c0, {c0: 2048}, None),
        MemoryDep('buf427', c0, {c0: 2048}, None),
        MemoryDep('buf429', c0, {c0: 2097152}, None)]
op426_op427_op429.unmet_dependencies = 
    [   MemoryDep('buf418', c0, {c0: 2097152}, None),
        MemoryDep('buf425', c0, {c0: 2097152}, None)]
op426_op427_op429.met_dependencies = 
    [   MemoryDep('arg280_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg281_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg282_1', c1, {c0: 2048, c1: 1024}, None)]
op426_op427_op429.outputs = [
    buf426: ComputedBuffer
    buf426.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf426.users = [NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False)]
    buf427: ComputedBuffer
    buf427.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf427.users = [NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False)]
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf429.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]
op426_op427_op429.snodes[0] =
op426: SchedulerNode(ComputedBuffer)
op426.writes = [MemoryDep('buf426', c0, {c0: 2048}, None)]
op426.unmet_dependencies = 
    [   MemoryDep('buf418', c0, {c0: 2097152}, None),
        MemoryDep('buf425', c0, {c0: 2097152}, None)]
op426.met_dependencies = [MemoryDep('arg280_1', c1, {c0: 2048, c1: 1024}, None)]
op426.outputs = [
    buf426: ComputedBuffer
    buf426.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf426.users = [NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False)]
]
op426.group.device = cuda:0
op426.group.iteration = (2048, 1024)
op426.sizes = ([2048], [1024])
buf418_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf426_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op426_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf418', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf425', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg280_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf426', get_index_3, getitem)
        return store_reduction
op426 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op426_op427_op429.snodes[1] =
op427: SchedulerNode(ComputedBuffer)
op427.writes = [MemoryDep('buf427', c0, {c0: 2048}, None)]
op427.unmet_dependencies = 
    [   MemoryDep('buf418', c0, {c0: 2097152}, None),
        MemoryDep('buf425', c0, {c0: 2097152}, None)]
op427.met_dependencies = [MemoryDep('arg280_1', c1, {c0: 2048, c1: 1024}, None)]
op427.outputs = [
    buf427: ComputedBuffer
    buf427.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf427.users = [NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False)]
]
op427.group.device = cuda:0
op427.group.iteration = (2048, 1024)
op427.sizes = ([2048], [1024])
buf418_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf427_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op427_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf418', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf425', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg280_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf427', get_index_3, getitem_1)
        return store_reduction
op427 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op426_op427_op429.snodes[2] =
op429: SchedulerNode(ComputedBuffer)
op429.writes = [MemoryDep('buf429', c0, {c0: 2097152}, None)]
op429.unmet_dependencies = 
    [   MemoryDep('buf418', c0, {c0: 2097152}, None),
        MemoryDep('buf425', c0, {c0: 2097152}, None),
        MemoryDep('buf426', c0, {c0: 2048}, None),
        MemoryDep('buf427', c0, {c0: 2048}, None)]
op429.met_dependencies = 
    [   MemoryDep('arg280_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg281_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg282_1', c1, {c0: 2048, c1: 1024}, None)]
op429.outputs = [
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf429.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]
op429.group.device = cuda:0
op429.group.iteration = (2097152, 1)
op429.sizes = ([2048, 1024], [])
buf418_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf426_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf427_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg281_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op429_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf418', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf425', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg280_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf426', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf427', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg281_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg282_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf429', get_index_7, add_3, None)
        return store
op429 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op426_op427_op429 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op430: ExternKernelSchedulerNode(ExternKernelOut)
op430.writes = [StarDep(name='buf430', mode=None)]
op430.unmet_dependencies = [StarDep(name='buf429', mode=None)]
op430.met_dependencies = [StarDep(name='arg283_1', mode=None)]
op430.outputs = [
    buf430: ExternKernelOut
    buf430.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf430.users = [NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False)]
]
op430.node.kernel = extern_kernels.mm


op431: ExternKernelSchedulerNode(ExternKernelOut)
op431.writes = [StarDep(name='buf431', mode=None)]
op431.unmet_dependencies = [StarDep(name='buf429', mode=None)]
op431.met_dependencies = [StarDep(name='arg285_1', mode=None)]
op431.outputs = [
    buf431: ExternKernelOut
    buf431.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf431.users = [NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False)]
]
op431.node.kernel = extern_kernels.mm


op432: ExternKernelSchedulerNode(ExternKernelOut)
op432.writes = [StarDep(name='buf432', mode=None)]
op432.unmet_dependencies = [StarDep(name='buf429', mode=None)]
op432.met_dependencies = [StarDep(name='arg287_1', mode=None)]
op432.outputs = [
    buf432: ExternKernelOut
    buf432.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf432.users = [NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False)]
]
op432.node.kernel = extern_kernels.mm


op433: SchedulerNode(ComputedBuffer)
op433.writes = [MemoryDep('buf433', c0, {c0: 2097152}, None)]
op433.unmet_dependencies = [   MemoryDep('buf430', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op433.met_dependencies = [MemoryDep('arg284_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op433.outputs = [
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf433.users = [NodeUser(node=ExternKernelSchedulerNode(name='op437'), can_inplace=False, is_weak=False)]
]
op433.group.device = cuda:0
op433.group.iteration = (2097152, 1)
op433.sizes = ([2, 16, 1024, 64], [])
buf430_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf433_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op433_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf430', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg284_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf433', get_index_2, add, None)
        return store
op433 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op434: SchedulerNode(ComputedBuffer)
op434.writes = [MemoryDep('buf434', c0, {c0: 2097152}, None)]
op434.unmet_dependencies = [   MemoryDep('buf431', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op434.met_dependencies = [MemoryDep('arg286_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op434.outputs = [
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf434.users = [NodeUser(node=ExternKernelSchedulerNode(name='op437'), can_inplace=False, is_weak=False)]
]
op434.group.device = cuda:0
op434.group.iteration = (2097152, 1)
op434.sizes = ([2, 16, 1024, 64], [])
buf431_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf434_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op434_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg286_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf434', get_index_2, add, None)
        return store
op434 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op435: SchedulerNode(ComputedBuffer)
op435.writes = [MemoryDep('buf435', c0, {c0: 2097152}, None)]
op435.unmet_dependencies = [   MemoryDep('buf432', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op435.met_dependencies = [MemoryDep('arg288_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op435.outputs = [
    buf435: ComputedBuffer
    buf435.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf435.users = [NodeUser(node=ExternKernelSchedulerNode(name='op437'), can_inplace=False, is_weak=False)]
]
op435.group.device = cuda:0
op435.group.iteration = (2097152, 1)
op435.sizes = ([2, 16, 1024, 64], [])
buf432_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf435_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op435_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf432', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg288_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf435', get_index_2, add, None)
        return store
op435 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op436: SchedulerNode(ComputedBuffer)
op436.writes = [MemoryDep('buf436', c0, {c0: 33554432}, None)]
op436.unmet_dependencies = []
op436.met_dependencies = []
op436.outputs = [
    buf436: ComputedBuffer
    buf436.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
    buf436.users = [NodeUser(node=ExternKernelSchedulerNode(name='op437'), can_inplace=False, is_weak=False)]
]
op436.group.device = cuda:0
op436.group.iteration = (33554432, 1)
op436.sizes = ([32, 1024, 1024], [])
buf436_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
class op436_loop_body:
    var_ranges = {z0: 32, z1: 1024, z2: 1024}
    index0 = z2
    index1 = z1 + 1
    index2 = 1048576*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf436', get_index_2, where, None)
        return store
op436 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op437: ExternKernelSchedulerNode(FallbackKernel)
op437.writes = [StarDep(name='buf437', mode=None)]
op437.unmet_dependencies = 
    [   StarDep(name='buf433', mode=None),
        StarDep(name='buf434', mode=None),
        StarDep(name='buf435', mode=None),
        StarDep(name='buf436', mode=None)]
op437.met_dependencies = []
op437.outputs = [
    buf437: FallbackKernel
    buf437.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf437.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op439'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op441'), can_inplace=False, is_weak=False),
    ]
]
op437.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op438: ExternKernelSchedulerNode(MultiOutput)
op438.writes = [StarDep(name='buf438', mode=None)]
op438.unmet_dependencies = [StarDep(name='buf437', mode=None)]
op438.met_dependencies = []
op438.outputs = [
    buf438: MultiOutput
    buf438.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf438.users = [NodeUser(node=ExternKernelSchedulerNode(name='op442'), can_inplace=False, is_weak=False)]
]
op438.node.kernel = None


op442: ExternKernelSchedulerNode(ExternKernelOut)
op442.writes = [StarDep(name='buf442', mode=None)]
op442.unmet_dependencies = [StarDep(name='buf438', mode=None)]
op442.met_dependencies = [StarDep(name='arg289_1', mode=None)]
op442.outputs = [
    buf442: ExternKernelOut
    buf442.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf442.users = [NodeUser(node=SchedulerNode(name='op443'), can_inplace=True, is_weak=False)]
]
op442.node.kernel = extern_kernels.mm


op443_op444_op445_op447: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op443_op444_op445_op447.writes = 
    [   MemoryDep('buf443', c0, {c0: 2097152}, None),
        MemoryDep('buf444', c0, {c0: 2048}, None),
        MemoryDep('buf445', c0, {c0: 2048}, None),
        MemoryDep('buf447', c0, {c0: 2097152}, None)]
op443_op444_op445_op447.unmet_dependencies = 
    [   MemoryDep('buf418', c0, {c0: 2097152}, None),
        MemoryDep('buf425', c0, {c0: 2097152}, None),
        MemoryDep('buf442', c0, {c0: 2097152}, None)]
op443_op444_op445_op447.met_dependencies = 
    [   MemoryDep('arg280_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg290_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg291_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg292_1', c1, {c0: 2048, c1: 1024}, None)]
op443_op444_op445_op447.outputs = [
    buf443: ComputedBuffer
    buf443.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf443.users = [
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op461'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False),
    ]
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf444.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf445.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf447.users = [NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False)]
]
op443_op444_op445_op447.snodes[0] =
op443: SchedulerNode(ComputedBuffer)
op443.writes = [MemoryDep('buf443', c0, {c0: 2097152}, None)]
op443.unmet_dependencies = 
    [   MemoryDep('buf418', c0, {c0: 2097152}, None),
        MemoryDep('buf425', c0, {c0: 2097152}, None),
        MemoryDep('buf442', c0, {c0: 2097152}, None)]
op443.met_dependencies = 
    [   MemoryDep('arg280_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg290_1', c1, {c0: 2048, c1: 1024}, None)]
op443.outputs = [
    buf443: ComputedBuffer
    buf443.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf443.users = [
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op461'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False),
    ]
]
op443.group.device = cuda:0
op443.group.iteration = (2097152, 1)
op443.sizes = ([2048, 1024], [])
buf418_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf442_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf443_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op443_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf418', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf425', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg280_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf442', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg290_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf443', get_index_5, add_3, None)
        return store
op443 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op443_op444_op445_op447.snodes[1] =
op444: SchedulerNode(ComputedBuffer)
op444.writes = [MemoryDep('buf444', c0, {c0: 2048}, None)]
op444.unmet_dependencies = [MemoryDep('buf443', c0, {c0: 2097152}, None)]
op444.met_dependencies = []
op444.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf444.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
]
op444.group.device = cuda:0
op444.group.iteration = (2048, 1024)
op444.sizes = ([2048], [1024])
buf443_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf444_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op444_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf444', get_index_1, getitem)
        return store_reduction
op444 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op443_op444_op445_op447.snodes[2] =
op445: SchedulerNode(ComputedBuffer)
op445.writes = [MemoryDep('buf445', c0, {c0: 2048}, None)]
op445.unmet_dependencies = [MemoryDep('buf443', c0, {c0: 2097152}, None)]
op445.met_dependencies = []
op445.outputs = [
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf445.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
]
op445.group.device = cuda:0
op445.group.iteration = (2048, 1024)
op445.sizes = ([2048], [1024])
buf443_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op445_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf445', get_index_1, getitem_1)
        return store_reduction
op445 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op443_op444_op445_op447.snodes[3] =
op447: SchedulerNode(ComputedBuffer)
op447.writes = [MemoryDep('buf447', c0, {c0: 2097152}, None)]
op447.unmet_dependencies = 
    [   MemoryDep('buf443', c0, {c0: 2097152}, None),
        MemoryDep('buf444', c0, {c0: 2048}, None),
        MemoryDep('buf445', c0, {c0: 2048}, None)]
op447.met_dependencies = 
    [   MemoryDep('arg291_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg292_1', c1, {c0: 2048, c1: 1024}, None)]
op447.outputs = [
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf447.users = [NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False)]
]
op447.group.device = cuda:0
op447.group.iteration = (2097152, 1)
op447.sizes = ([2048, 1024], [])
buf443_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf444_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf445_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf447_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op447_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf444', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf445', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg291_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg292_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf447', get_index_5, add_1, None)
        return store
op447 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op443_op444_op445_op447 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op448: ExternKernelSchedulerNode(ExternKernelOut)
op448.writes = [StarDep(name='buf448', mode=None)]
op448.unmet_dependencies = [StarDep(name='buf447', mode=None)]
op448.met_dependencies = [StarDep(name='arg293_1', mode=None)]
op448.outputs = [
    buf448: ExternKernelOut
    buf448.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf448.users = [NodeUser(node=SchedulerNode(name='op451'), can_inplace=False, is_weak=False)]
]
op448.node.kernel = extern_kernels.mm


op449: ExternKernelSchedulerNode(ExternKernelOut)
op449.writes = [StarDep(name='buf449', mode=None)]
op449.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op449.met_dependencies = [StarDep(name='arg295_1', mode=None)]
op449.outputs = [
    buf449: ExternKernelOut
    buf449.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf449.users = [NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False)]
]
op449.node.kernel = extern_kernels.mm


op450: ExternKernelSchedulerNode(ExternKernelOut)
op450.writes = [StarDep(name='buf450', mode=None)]
op450.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op450.met_dependencies = [StarDep(name='arg297_1', mode=None)]
op450.outputs = [
    buf450: ExternKernelOut
    buf450.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf450.users = [NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False)]
]
op450.node.kernel = extern_kernels.mm


op451: SchedulerNode(ComputedBuffer)
op451.writes = [MemoryDep('buf451', c0, {c0: 2097152}, None)]
op451.unmet_dependencies = [   MemoryDep('buf448', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op451.met_dependencies = [MemoryDep('arg294_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op451.outputs = [
    buf451: ComputedBuffer
    buf451.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf451.users = [NodeUser(node=ExternKernelSchedulerNode(name='op454'), can_inplace=False, is_weak=False)]
]
op451.group.device = cuda:0
op451.group.iteration = (2097152, 1)
op451.sizes = ([2, 16, 1024, 64], [])
buf448_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg294_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf451_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op451_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf448', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg294_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf451', get_index_2, add, None)
        return store
op451 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op452: SchedulerNode(ComputedBuffer)
op452.writes = [MemoryDep('buf452', c0, {c0: 2097152}, None)]
op452.unmet_dependencies = [   MemoryDep('buf449', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op452.met_dependencies = [MemoryDep('arg296_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op452.outputs = [
    buf452: ComputedBuffer
    buf452.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf452.users = [NodeUser(node=ExternKernelSchedulerNode(name='op454'), can_inplace=False, is_weak=False)]
]
op452.group.device = cuda:0
op452.group.iteration = (2097152, 1)
op452.sizes = ([2, 16, 1024, 64], [])
buf449_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op452_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf449', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg296_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf452', get_index_2, add, None)
        return store
op452 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op453: SchedulerNode(ComputedBuffer)
op453.writes = [MemoryDep('buf453', c0, {c0: 2097152}, None)]
op453.unmet_dependencies = [   MemoryDep('buf450', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op453.met_dependencies = [MemoryDep('arg298_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op453.outputs = [
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf453.users = [NodeUser(node=ExternKernelSchedulerNode(name='op454'), can_inplace=False, is_weak=False)]
]
op453.group.device = cuda:0
op453.group.iteration = (2097152, 1)
op453.sizes = ([2, 16, 1024, 64], [])
buf450_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op453_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf450', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg298_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf453', get_index_2, add, None)
        return store
op453 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op454: ExternKernelSchedulerNode(FallbackKernel)
op454.writes = [StarDep(name='buf454', mode=None)]
op454.unmet_dependencies = 
    [   StarDep(name='buf451', mode=None),
        StarDep(name='buf452', mode=None),
        StarDep(name='buf453', mode=None)]
op454.met_dependencies = []
op454.outputs = [
    buf454: FallbackKernel
    buf454.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf454.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op457'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op458'), can_inplace=False, is_weak=False),
    ]
]
op454.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op455: ExternKernelSchedulerNode(MultiOutput)
op455.writes = [StarDep(name='buf455', mode=None)]
op455.unmet_dependencies = [StarDep(name='buf454', mode=None)]
op455.met_dependencies = []
op455.outputs = [
    buf455: MultiOutput
    buf455.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf455.users = [NodeUser(node=ExternKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False)]
]
op455.node.kernel = None


op459: ExternKernelSchedulerNode(ExternKernelOut)
op459.writes = [StarDep(name='buf459', mode=None)]
op459.unmet_dependencies = [StarDep(name='buf455', mode=None)]
op459.met_dependencies = [StarDep(name='arg299_1', mode=None)]
op459.outputs = [
    buf459: ExternKernelOut
    buf459.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf459.users = [
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op461'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False),
    ]
]
op459.node.kernel = extern_kernels.mm


op460_op461_op463: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op460_op461_op463.writes = 
    [   MemoryDep('buf460', c0, {c0: 2048}, None),
        MemoryDep('buf461', c0, {c0: 2048}, None),
        MemoryDep('buf463', c0, {c0: 2097152}, None)]
op460_op461_op463.unmet_dependencies = 
    [   MemoryDep('buf443', c0, {c0: 2097152}, None),
        MemoryDep('buf459', c0, {c0: 2097152}, None)]
op460_op461_op463.met_dependencies = 
    [   MemoryDep('arg300_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg301_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg302_1', c1, {c0: 2048, c1: 1024}, None)]
op460_op461_op463.outputs = [
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf460.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False)]
    buf461: ComputedBuffer
    buf461.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf461.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False)]
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf463.users = [NodeUser(node=ExternKernelSchedulerNode(name='op464'), can_inplace=False, is_weak=False)]
]
op460_op461_op463.snodes[0] =
op460: SchedulerNode(ComputedBuffer)
op460.writes = [MemoryDep('buf460', c0, {c0: 2048}, None)]
op460.unmet_dependencies = 
    [   MemoryDep('buf443', c0, {c0: 2097152}, None),
        MemoryDep('buf459', c0, {c0: 2097152}, None)]
op460.met_dependencies = [MemoryDep('arg300_1', c1, {c0: 2048, c1: 1024}, None)]
op460.outputs = [
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf460.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False)]
]
op460.group.device = cuda:0
op460.group.iteration = (2048, 1024)
op460.sizes = ([2048], [1024])
buf443_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf460_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op460_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf459', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg300_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf460', get_index_3, getitem)
        return store_reduction
op460 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op460_op461_op463.snodes[1] =
op461: SchedulerNode(ComputedBuffer)
op461.writes = [MemoryDep('buf461', c0, {c0: 2048}, None)]
op461.unmet_dependencies = 
    [   MemoryDep('buf443', c0, {c0: 2097152}, None),
        MemoryDep('buf459', c0, {c0: 2097152}, None)]
op461.met_dependencies = [MemoryDep('arg300_1', c1, {c0: 2048, c1: 1024}, None)]
op461.outputs = [
    buf461: ComputedBuffer
    buf461.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf461.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False)]
]
op461.group.device = cuda:0
op461.group.iteration = (2048, 1024)
op461.sizes = ([2048], [1024])
buf443_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf461_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op461_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf459', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg300_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf461', get_index_3, getitem_1)
        return store_reduction
op461 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op460_op461_op463.snodes[2] =
op463: SchedulerNode(ComputedBuffer)
op463.writes = [MemoryDep('buf463', c0, {c0: 2097152}, None)]
op463.unmet_dependencies = 
    [   MemoryDep('buf443', c0, {c0: 2097152}, None),
        MemoryDep('buf459', c0, {c0: 2097152}, None),
        MemoryDep('buf460', c0, {c0: 2048}, None),
        MemoryDep('buf461', c0, {c0: 2048}, None)]
op463.met_dependencies = 
    [   MemoryDep('arg300_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg301_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg302_1', c1, {c0: 2048, c1: 1024}, None)]
op463.outputs = [
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf463.users = [NodeUser(node=ExternKernelSchedulerNode(name='op464'), can_inplace=False, is_weak=False)]
]
op463.group.device = cuda:0
op463.group.iteration = (2097152, 1)
op463.sizes = ([2048, 1024], [])
buf443_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf460_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf461_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op463_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf459', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg300_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf460', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf461', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg301_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg302_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf463', get_index_7, add_3, None)
        return store
op463 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op460_op461_op463 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op464: ExternKernelSchedulerNode(ExternKernelOut)
op464.writes = [StarDep(name='buf464', mode=None)]
op464.unmet_dependencies = [StarDep(name='buf463', mode=None)]
op464.met_dependencies = [StarDep(name='arg303_1', mode=None)]
op464.outputs = [
    buf464: ExternKernelOut
    buf464.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf464.users = [NodeUser(node=SchedulerNode(name='op465'), can_inplace=True, is_weak=False)]
]
op464.node.kernel = extern_kernels.mm


op465: SchedulerNode(ComputedBuffer)
op465.writes = [MemoryDep('buf465', c0, {c0: 8388608}, None)]
op465.unmet_dependencies = [MemoryDep('buf464', c0, {c0: 8388608}, None)]
op465.met_dependencies = [MemoryDep('arg304_1', c1, {c0: 2048, c1: 4096}, None)]
op465.outputs = [
    buf465: ComputedBuffer
    buf465.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf465.users = [NodeUser(node=ExternKernelSchedulerNode(name='op466'), can_inplace=False, is_weak=False)]
]
op465.group.device = cuda:0
op465.group.iteration = (8388608, 1)
op465.sizes = ([2048, 4096], [])
buf464_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg304_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf465_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op465_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf464', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg304_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf464', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg304_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf465', get_index_4, mul_2, None)
        return store
op465 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op466: ExternKernelSchedulerNode(ExternKernelOut)
op466.writes = [StarDep(name='buf466', mode=None)]
op466.unmet_dependencies = [StarDep(name='buf465', mode=None)]
op466.met_dependencies = [StarDep(name='arg305_1', mode=None)]
op466.outputs = [
    buf466: ExternKernelOut
    buf466.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf466.users = [NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False)]
]
op466.node.kernel = extern_kernels.mm


op467_op468_op469_op471: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op467_op468_op469_op471.writes = 
    [   MemoryDep('buf467', c0, {c0: 2097152}, None),
        MemoryDep('buf468', c0, {c0: 2048}, None),
        MemoryDep('buf469', c0, {c0: 2048}, None),
        MemoryDep('buf471', c0, {c0: 2097152}, None)]
op467_op468_op469_op471.unmet_dependencies = 
    [   MemoryDep('buf443', c0, {c0: 2097152}, None),
        MemoryDep('buf459', c0, {c0: 2097152}, None),
        MemoryDep('buf466', c0, {c0: 2097152}, None)]
op467_op468_op469_op471.met_dependencies = 
    [   MemoryDep('arg300_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg306_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg307_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg308_1', c1, {c0: 2048, c1: 1024}, None)]
op467_op468_op469_op471.outputs = [
    buf467: ComputedBuffer
    buf467.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf467.users = [
        NodeUser(node=SchedulerNode(name='op468'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op471'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=True, is_weak=False),
    ]
    buf468: ComputedBuffer
    buf468.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf468.users = [NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf469.users = [NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
    buf471: ComputedBuffer
    buf471.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf471.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op472'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op474'), can_inplace=False, is_weak=False),
    ]
]
op467_op468_op469_op471.snodes[0] =
op467: SchedulerNode(ComputedBuffer)
op467.writes = [MemoryDep('buf467', c0, {c0: 2097152}, None)]
op467.unmet_dependencies = 
    [   MemoryDep('buf443', c0, {c0: 2097152}, None),
        MemoryDep('buf459', c0, {c0: 2097152}, None),
        MemoryDep('buf466', c0, {c0: 2097152}, None)]
op467.met_dependencies = 
    [   MemoryDep('arg300_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg306_1', c1, {c0: 2048, c1: 1024}, None)]
op467.outputs = [
    buf467: ComputedBuffer
    buf467.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf467.users = [
        NodeUser(node=SchedulerNode(name='op468'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op471'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=True, is_weak=False),
    ]
]
op467.group.device = cuda:0
op467.group.iteration = (2097152, 1)
op467.sizes = ([2048, 1024], [])
buf443_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf466_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf467_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op467_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf459', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg300_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf466', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg306_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf467', get_index_5, add_3, None)
        return store
op467 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op467_op468_op469_op471.snodes[1] =
op468: SchedulerNode(ComputedBuffer)
op468.writes = [MemoryDep('buf468', c0, {c0: 2048}, None)]
op468.unmet_dependencies = [MemoryDep('buf467', c0, {c0: 2097152}, None)]
op468.met_dependencies = []
op468.outputs = [
    buf468: ComputedBuffer
    buf468.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf468.users = [NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
]
op468.group.device = cuda:0
op468.group.iteration = (2048, 1024)
op468.sizes = ([2048], [1024])
buf467_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf468_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op468_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf468', get_index_1, getitem)
        return store_reduction
op468 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op467_op468_op469_op471.snodes[2] =
op469: SchedulerNode(ComputedBuffer)
op469.writes = [MemoryDep('buf469', c0, {c0: 2048}, None)]
op469.unmet_dependencies = [MemoryDep('buf467', c0, {c0: 2097152}, None)]
op469.met_dependencies = []
op469.outputs = [
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf469.users = [NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
]
op469.group.device = cuda:0
op469.group.iteration = (2048, 1024)
op469.sizes = ([2048], [1024])
buf467_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf469_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op469_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf469', get_index_1, getitem_1)
        return store_reduction
op469 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op467_op468_op469_op471.snodes[3] =
op471: SchedulerNode(ComputedBuffer)
op471.writes = [MemoryDep('buf471', c0, {c0: 2097152}, None)]
op471.unmet_dependencies = 
    [   MemoryDep('buf467', c0, {c0: 2097152}, None),
        MemoryDep('buf468', c0, {c0: 2048}, None),
        MemoryDep('buf469', c0, {c0: 2048}, None)]
op471.met_dependencies = 
    [   MemoryDep('arg307_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg308_1', c1, {c0: 2048, c1: 1024}, None)]
op471.outputs = [
    buf471: ComputedBuffer
    buf471.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf471.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op472'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op474'), can_inplace=False, is_weak=False),
    ]
]
op471.group.device = cuda:0
op471.group.iteration = (2097152, 1)
op471.sizes = ([2048, 1024], [])
buf467_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf468_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf469_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf471_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op471_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf468', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf469', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg307_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg308_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf471', get_index_5, add_1, None)
        return store
op471 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op467_op468_op469_op471 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op472: ExternKernelSchedulerNode(ExternKernelOut)
op472.writes = [StarDep(name='buf472', mode=None)]
op472.unmet_dependencies = [StarDep(name='buf471', mode=None)]
op472.met_dependencies = [StarDep(name='arg309_1', mode=None)]
op472.outputs = [
    buf472: ExternKernelOut
    buf472.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf472.users = [NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False)]
]
op472.node.kernel = extern_kernels.mm


op473: ExternKernelSchedulerNode(ExternKernelOut)
op473.writes = [StarDep(name='buf473', mode=None)]
op473.unmet_dependencies = [StarDep(name='buf471', mode=None)]
op473.met_dependencies = [StarDep(name='arg311_1', mode=None)]
op473.outputs = [
    buf473: ExternKernelOut
    buf473.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf473.users = [NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False)]
]
op473.node.kernel = extern_kernels.mm


op474: ExternKernelSchedulerNode(ExternKernelOut)
op474.writes = [StarDep(name='buf474', mode=None)]
op474.unmet_dependencies = [StarDep(name='buf471', mode=None)]
op474.met_dependencies = [StarDep(name='arg313_1', mode=None)]
op474.outputs = [
    buf474: ExternKernelOut
    buf474.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf474.users = [NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False)]
]
op474.node.kernel = extern_kernels.mm


op475: SchedulerNode(ComputedBuffer)
op475.writes = [MemoryDep('buf475', c0, {c0: 2097152}, None)]
op475.unmet_dependencies = [   MemoryDep('buf472', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op475.met_dependencies = [MemoryDep('arg310_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op475.outputs = [
    buf475: ComputedBuffer
    buf475.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf475.users = [NodeUser(node=ExternKernelSchedulerNode(name='op479'), can_inplace=False, is_weak=False)]
]
op475.group.device = cuda:0
op475.group.iteration = (2097152, 1)
op475.sizes = ([2, 16, 1024, 64], [])
buf472_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg310_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf475_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op475_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf472', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg310_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf475', get_index_2, add, None)
        return store
op475 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op476: SchedulerNode(ComputedBuffer)
op476.writes = [MemoryDep('buf476', c0, {c0: 2097152}, None)]
op476.unmet_dependencies = [   MemoryDep('buf473', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op476.met_dependencies = [MemoryDep('arg312_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op476.outputs = [
    buf476: ComputedBuffer
    buf476.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf476.users = [NodeUser(node=ExternKernelSchedulerNode(name='op479'), can_inplace=False, is_weak=False)]
]
op476.group.device = cuda:0
op476.group.iteration = (2097152, 1)
op476.sizes = ([2, 16, 1024, 64], [])
buf473_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf476_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op476_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf473', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg312_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf476', get_index_2, add, None)
        return store
op476 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op477: SchedulerNode(ComputedBuffer)
op477.writes = [MemoryDep('buf477', c0, {c0: 2097152}, None)]
op477.unmet_dependencies = [   MemoryDep('buf474', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op477.met_dependencies = [MemoryDep('arg314_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op477.outputs = [
    buf477: ComputedBuffer
    buf477.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf477.users = [NodeUser(node=ExternKernelSchedulerNode(name='op479'), can_inplace=False, is_weak=False)]
]
op477.group.device = cuda:0
op477.group.iteration = (2097152, 1)
op477.sizes = ([2, 16, 1024, 64], [])
buf474_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg314_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf477_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op477_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf474', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg314_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf477', get_index_2, add, None)
        return store
op477 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op478: SchedulerNode(ComputedBuffer)
op478.writes = [MemoryDep('buf478', c0, {c0: 33554432}, None)]
op478.unmet_dependencies = []
op478.met_dependencies = []
op478.outputs = [
    buf478: ComputedBuffer
    buf478.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
    buf478.users = [NodeUser(node=ExternKernelSchedulerNode(name='op479'), can_inplace=False, is_weak=False)]
]
op478.group.device = cuda:0
op478.group.iteration = (33554432, 1)
op478.sizes = ([32, 1024, 1024], [])
buf478_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
class op478_loop_body:
    var_ranges = {z0: 32, z1: 1024, z2: 1024}
    index0 = z2
    index1 = z1 + 1
    index2 = 1048576*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf478', get_index_2, where, None)
        return store
op478 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op479: ExternKernelSchedulerNode(FallbackKernel)
op479.writes = [StarDep(name='buf479', mode=None)]
op479.unmet_dependencies = 
    [   StarDep(name='buf475', mode=None),
        StarDep(name='buf476', mode=None),
        StarDep(name='buf477', mode=None),
        StarDep(name='buf478', mode=None)]
op479.met_dependencies = []
op479.outputs = [
    buf479: FallbackKernel
    buf479.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf479.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op481'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op482'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op483'), can_inplace=False, is_weak=False),
    ]
]
op479.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op480: ExternKernelSchedulerNode(MultiOutput)
op480.writes = [StarDep(name='buf480', mode=None)]
op480.unmet_dependencies = [StarDep(name='buf479', mode=None)]
op480.met_dependencies = []
op480.outputs = [
    buf480: MultiOutput
    buf480.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf480.users = [NodeUser(node=ExternKernelSchedulerNode(name='op484'), can_inplace=False, is_weak=False)]
]
op480.node.kernel = None


op484: ExternKernelSchedulerNode(ExternKernelOut)
op484.writes = [StarDep(name='buf484', mode=None)]
op484.unmet_dependencies = [StarDep(name='buf480', mode=None)]
op484.met_dependencies = [StarDep(name='arg315_1', mode=None)]
op484.outputs = [
    buf484: ExternKernelOut
    buf484.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf484.users = [
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=True, is_weak=False),
    ]
]
op484.node.kernel = extern_kernels.mm


op485_op486_op488: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op485_op486_op488.writes = 
    [   MemoryDep('buf485', c0, {c0: 2048}, None),
        MemoryDep('buf486', c0, {c0: 2048}, None),
        MemoryDep('buf488', c0, {c0: 2097152}, None)]
op485_op486_op488.unmet_dependencies = 
    [   MemoryDep('buf467', c0, {c0: 2097152}, None),
        MemoryDep('buf484', c0, {c0: 2097152}, None)]
op485_op486_op488.met_dependencies = 
    [   MemoryDep('arg316_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg317_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg318_1', c1, {c0: 2048, c1: 1024}, None)]
op485_op486_op488.outputs = [
    buf485: ComputedBuffer
    buf485.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf485.users = [NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
    buf486: ComputedBuffer
    buf486.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf486.users = [NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
    buf488: ComputedBuffer
    buf488.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf488.users = [NodeUser(node=ExternKernelSchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
]
op485_op486_op488.snodes[0] =
op485: SchedulerNode(ComputedBuffer)
op485.writes = [MemoryDep('buf485', c0, {c0: 2048}, None)]
op485.unmet_dependencies = 
    [   MemoryDep('buf467', c0, {c0: 2097152}, None),
        MemoryDep('buf484', c0, {c0: 2097152}, None)]
op485.met_dependencies = [MemoryDep('arg316_1', c1, {c0: 2048, c1: 1024}, None)]
op485.outputs = [
    buf485: ComputedBuffer
    buf485.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf485.users = [NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
]
op485.group.device = cuda:0
op485.group.iteration = (2048, 1024)
op485.sizes = ([2048], [1024])
buf467_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf485_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op485_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf484', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg316_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf485', get_index_3, getitem)
        return store_reduction
op485 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op485_op486_op488.snodes[1] =
op486: SchedulerNode(ComputedBuffer)
op486.writes = [MemoryDep('buf486', c0, {c0: 2048}, None)]
op486.unmet_dependencies = 
    [   MemoryDep('buf467', c0, {c0: 2097152}, None),
        MemoryDep('buf484', c0, {c0: 2097152}, None)]
op486.met_dependencies = [MemoryDep('arg316_1', c1, {c0: 2048, c1: 1024}, None)]
op486.outputs = [
    buf486: ComputedBuffer
    buf486.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf486.users = [NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
]
op486.group.device = cuda:0
op486.group.iteration = (2048, 1024)
op486.sizes = ([2048], [1024])
buf467_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf486_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op486_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf484', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg316_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf486', get_index_3, getitem_1)
        return store_reduction
op486 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op485_op486_op488.snodes[2] =
op488: SchedulerNode(ComputedBuffer)
op488.writes = [MemoryDep('buf488', c0, {c0: 2097152}, None)]
op488.unmet_dependencies = 
    [   MemoryDep('buf467', c0, {c0: 2097152}, None),
        MemoryDep('buf484', c0, {c0: 2097152}, None),
        MemoryDep('buf485', c0, {c0: 2048}, None),
        MemoryDep('buf486', c0, {c0: 2048}, None)]
op488.met_dependencies = 
    [   MemoryDep('arg316_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg317_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg318_1', c1, {c0: 2048, c1: 1024}, None)]
op488.outputs = [
    buf488: ComputedBuffer
    buf488.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf488.users = [NodeUser(node=ExternKernelSchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
]
op488.group.device = cuda:0
op488.group.iteration = (2097152, 1)
op488.sizes = ([2048, 1024], [])
buf467_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf485_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf486_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf488_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op488_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf484', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg316_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf485', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf486', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg317_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg318_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf488', get_index_7, add_3, None)
        return store
op488 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op485_op486_op488 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op489: ExternKernelSchedulerNode(ExternKernelOut)
op489.writes = [StarDep(name='buf489', mode=None)]
op489.unmet_dependencies = [StarDep(name='buf488', mode=None)]
op489.met_dependencies = [StarDep(name='arg319_1', mode=None)]
op489.outputs = [
    buf489: ExternKernelOut
    buf489.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf489.users = [NodeUser(node=SchedulerNode(name='op492'), can_inplace=False, is_weak=False)]
]
op489.node.kernel = extern_kernels.mm


op490: ExternKernelSchedulerNode(ExternKernelOut)
op490.writes = [StarDep(name='buf490', mode=None)]
op490.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op490.met_dependencies = [StarDep(name='arg321_1', mode=None)]
op490.outputs = [
    buf490: ExternKernelOut
    buf490.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf490.users = [NodeUser(node=SchedulerNode(name='op493'), can_inplace=False, is_weak=False)]
]
op490.node.kernel = extern_kernels.mm


op491: ExternKernelSchedulerNode(ExternKernelOut)
op491.writes = [StarDep(name='buf491', mode=None)]
op491.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op491.met_dependencies = [StarDep(name='arg323_1', mode=None)]
op491.outputs = [
    buf491: ExternKernelOut
    buf491.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf491.users = [NodeUser(node=SchedulerNode(name='op494'), can_inplace=False, is_weak=False)]
]
op491.node.kernel = extern_kernels.mm


op492: SchedulerNode(ComputedBuffer)
op492.writes = [MemoryDep('buf492', c0, {c0: 2097152}, None)]
op492.unmet_dependencies = [   MemoryDep('buf489', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op492.met_dependencies = [MemoryDep('arg320_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op492.outputs = [
    buf492: ComputedBuffer
    buf492.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf492.users = [NodeUser(node=ExternKernelSchedulerNode(name='op495'), can_inplace=False, is_weak=False)]
]
op492.group.device = cuda:0
op492.group.iteration = (2097152, 1)
op492.sizes = ([2, 16, 1024, 64], [])
buf489_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op492_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf489', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg320_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf492', get_index_2, add, None)
        return store
op492 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op493: SchedulerNode(ComputedBuffer)
op493.writes = [MemoryDep('buf493', c0, {c0: 2097152}, None)]
op493.unmet_dependencies = [   MemoryDep('buf490', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op493.met_dependencies = [MemoryDep('arg322_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op493.outputs = [
    buf493: ComputedBuffer
    buf493.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf493.users = [NodeUser(node=ExternKernelSchedulerNode(name='op495'), can_inplace=False, is_weak=False)]
]
op493.group.device = cuda:0
op493.group.iteration = (2097152, 1)
op493.sizes = ([2, 16, 1024, 64], [])
buf490_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf493_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op493_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf490', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg322_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf493', get_index_2, add, None)
        return store
op493 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op494: SchedulerNode(ComputedBuffer)
op494.writes = [MemoryDep('buf494', c0, {c0: 2097152}, None)]
op494.unmet_dependencies = [   MemoryDep('buf491', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op494.met_dependencies = [MemoryDep('arg324_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op494.outputs = [
    buf494: ComputedBuffer
    buf494.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf494.users = [NodeUser(node=ExternKernelSchedulerNode(name='op495'), can_inplace=False, is_weak=False)]
]
op494.group.device = cuda:0
op494.group.iteration = (2097152, 1)
op494.sizes = ([2, 16, 1024, 64], [])
buf491_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf494_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op494_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg324_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf494', get_index_2, add, None)
        return store
op494 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op495: ExternKernelSchedulerNode(FallbackKernel)
op495.writes = [StarDep(name='buf495', mode=None)]
op495.unmet_dependencies = 
    [   StarDep(name='buf492', mode=None),
        StarDep(name='buf493', mode=None),
        StarDep(name='buf494', mode=None)]
op495.met_dependencies = []
op495.outputs = [
    buf495: FallbackKernel
    buf495.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf495.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op498'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op499'), can_inplace=False, is_weak=False),
    ]
]
op495.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op496: ExternKernelSchedulerNode(MultiOutput)
op496.writes = [StarDep(name='buf496', mode=None)]
op496.unmet_dependencies = [StarDep(name='buf495', mode=None)]
op496.met_dependencies = []
op496.outputs = [
    buf496: MultiOutput
    buf496.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf496.users = [NodeUser(node=ExternKernelSchedulerNode(name='op500'), can_inplace=False, is_weak=False)]
]
op496.node.kernel = None


op500: ExternKernelSchedulerNode(ExternKernelOut)
op500.writes = [StarDep(name='buf500', mode=None)]
op500.unmet_dependencies = [StarDep(name='buf496', mode=None)]
op500.met_dependencies = [StarDep(name='arg325_1', mode=None)]
op500.outputs = [
    buf500: ExternKernelOut
    buf500.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf500.users = [NodeUser(node=SchedulerNode(name='op501'), can_inplace=True, is_weak=False)]
]
op500.node.kernel = extern_kernels.mm


op501_op502_op503_op505: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op501_op502_op503_op505.writes = 
    [   MemoryDep('buf501', c0, {c0: 2097152}, None),
        MemoryDep('buf502', c0, {c0: 2048}, None),
        MemoryDep('buf503', c0, {c0: 2048}, None),
        MemoryDep('buf505', c0, {c0: 2097152}, None)]
op501_op502_op503_op505.unmet_dependencies = 
    [   MemoryDep('buf467', c0, {c0: 2097152}, None),
        MemoryDep('buf484', c0, {c0: 2097152}, None),
        MemoryDep('buf500', c0, {c0: 2097152}, None)]
op501_op502_op503_op505.met_dependencies = 
    [   MemoryDep('arg316_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg326_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg327_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg328_1', c1, {c0: 2048, c1: 1024}, None)]
op501_op502_op503_op505.outputs = [
    buf501: ComputedBuffer
    buf501.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf501.users = [
        NodeUser(node=SchedulerNode(name='op502'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op503'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op505'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=True, is_weak=False),
    ]
    buf502: ComputedBuffer
    buf502.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf502.users = [NodeUser(node=SchedulerNode(name='op505'), can_inplace=False, is_weak=False)]
    buf503: ComputedBuffer
    buf503.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf503.users = [NodeUser(node=SchedulerNode(name='op505'), can_inplace=False, is_weak=False)]
    buf505: ComputedBuffer
    buf505.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf505.users = [NodeUser(node=ExternKernelSchedulerNode(name='op506'), can_inplace=False, is_weak=False)]
]
op501_op502_op503_op505.snodes[0] =
op501: SchedulerNode(ComputedBuffer)
op501.writes = [MemoryDep('buf501', c0, {c0: 2097152}, None)]
op501.unmet_dependencies = 
    [   MemoryDep('buf467', c0, {c0: 2097152}, None),
        MemoryDep('buf484', c0, {c0: 2097152}, None),
        MemoryDep('buf500', c0, {c0: 2097152}, None)]
op501.met_dependencies = 
    [   MemoryDep('arg316_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg326_1', c1, {c0: 2048, c1: 1024}, None)]
op501.outputs = [
    buf501: ComputedBuffer
    buf501.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf501.users = [
        NodeUser(node=SchedulerNode(name='op502'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op503'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op505'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=True, is_weak=False),
    ]
]
op501.group.device = cuda:0
op501.group.iteration = (2097152, 1)
op501.sizes = ([2048, 1024], [])
buf467_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg326_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf501_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op501_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf484', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg316_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf500', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg326_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf501', get_index_5, add_3, None)
        return store
op501 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op501_op502_op503_op505.snodes[1] =
op502: SchedulerNode(ComputedBuffer)
op502.writes = [MemoryDep('buf502', c0, {c0: 2048}, None)]
op502.unmet_dependencies = [MemoryDep('buf501', c0, {c0: 2097152}, None)]
op502.met_dependencies = []
op502.outputs = [
    buf502: ComputedBuffer
    buf502.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf502.users = [NodeUser(node=SchedulerNode(name='op505'), can_inplace=False, is_weak=False)]
]
op502.group.device = cuda:0
op502.group.iteration = (2048, 1024)
op502.sizes = ([2048], [1024])
buf501_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op502_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf501', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf502', get_index_1, getitem)
        return store_reduction
op502 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op501_op502_op503_op505.snodes[2] =
op503: SchedulerNode(ComputedBuffer)
op503.writes = [MemoryDep('buf503', c0, {c0: 2048}, None)]
op503.unmet_dependencies = [MemoryDep('buf501', c0, {c0: 2097152}, None)]
op503.met_dependencies = []
op503.outputs = [
    buf503: ComputedBuffer
    buf503.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf503.users = [NodeUser(node=SchedulerNode(name='op505'), can_inplace=False, is_weak=False)]
]
op503.group.device = cuda:0
op503.group.iteration = (2048, 1024)
op503.sizes = ([2048], [1024])
buf501_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf503_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op503_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf501', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf503', get_index_1, getitem_1)
        return store_reduction
op503 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op501_op502_op503_op505.snodes[3] =
op505: SchedulerNode(ComputedBuffer)
op505.writes = [MemoryDep('buf505', c0, {c0: 2097152}, None)]
op505.unmet_dependencies = 
    [   MemoryDep('buf501', c0, {c0: 2097152}, None),
        MemoryDep('buf502', c0, {c0: 2048}, None),
        MemoryDep('buf503', c0, {c0: 2048}, None)]
op505.met_dependencies = 
    [   MemoryDep('arg327_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg328_1', c1, {c0: 2048, c1: 1024}, None)]
op505.outputs = [
    buf505: ComputedBuffer
    buf505.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf505.users = [NodeUser(node=ExternKernelSchedulerNode(name='op506'), can_inplace=False, is_weak=False)]
]
op505.group.device = cuda:0
op505.group.iteration = (2097152, 1)
op505.sizes = ([2048, 1024], [])
buf501_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf503_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf505_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op505_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf501', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf502', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf503', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg327_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg328_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf505', get_index_5, add_1, None)
        return store
op505 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op501_op502_op503_op505 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op506: ExternKernelSchedulerNode(ExternKernelOut)
op506.writes = [StarDep(name='buf506', mode=None)]
op506.unmet_dependencies = [StarDep(name='buf505', mode=None)]
op506.met_dependencies = [StarDep(name='arg329_1', mode=None)]
op506.outputs = [
    buf506: ExternKernelOut
    buf506.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf506.users = [NodeUser(node=SchedulerNode(name='op507'), can_inplace=True, is_weak=False)]
]
op506.node.kernel = extern_kernels.mm


op507: SchedulerNode(ComputedBuffer)
op507.writes = [MemoryDep('buf507', c0, {c0: 8388608}, None)]
op507.unmet_dependencies = [MemoryDep('buf506', c0, {c0: 8388608}, None)]
op507.met_dependencies = [MemoryDep('arg330_1', c1, {c0: 2048, c1: 4096}, None)]
op507.outputs = [
    buf507: ComputedBuffer
    buf507.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf507.users = [NodeUser(node=ExternKernelSchedulerNode(name='op508'), can_inplace=False, is_weak=False)]
]
op507.group.device = cuda:0
op507.group.iteration = (8388608, 1)
op507.sizes = ([2048, 4096], [])
buf506_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg330_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf507_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op507_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf506', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg330_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf506', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg330_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf507', get_index_4, mul_2, None)
        return store
op507 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op508: ExternKernelSchedulerNode(ExternKernelOut)
op508.writes = [StarDep(name='buf508', mode=None)]
op508.unmet_dependencies = [StarDep(name='buf507', mode=None)]
op508.met_dependencies = [StarDep(name='arg331_1', mode=None)]
op508.outputs = [
    buf508: ExternKernelOut
    buf508.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf508.users = [
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=True, is_weak=False),
    ]
]
op508.node.kernel = extern_kernels.mm


op509_op510_op512: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op509_op510_op512.writes = 
    [   MemoryDep('buf509', c0, {c0: 2048}, None),
        MemoryDep('buf510', c0, {c0: 2048}, None),
        MemoryDep('buf512', c0, {c0: 2097152}, None)]
op509_op510_op512.unmet_dependencies = 
    [   MemoryDep('buf501', c0, {c0: 2097152}, None),
        MemoryDep('buf508', c0, {c0: 2097152}, None)]
op509_op510_op512.met_dependencies = 
    [   MemoryDep('arg332_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg333_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg334_1', c1, {c0: 2048, c1: 1024}, None)]
op509_op510_op512.outputs = [
    buf509: ComputedBuffer
    buf509.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf509.users = [NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False)]
    buf510: ComputedBuffer
    buf510.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf510.users = [NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False)]
    buf512: ComputedBuffer
    buf512.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf512.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op513'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op514'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op515'), can_inplace=False, is_weak=False),
    ]
]
op509_op510_op512.snodes[0] =
op509: SchedulerNode(ComputedBuffer)
op509.writes = [MemoryDep('buf509', c0, {c0: 2048}, None)]
op509.unmet_dependencies = 
    [   MemoryDep('buf501', c0, {c0: 2097152}, None),
        MemoryDep('buf508', c0, {c0: 2097152}, None)]
op509.met_dependencies = [MemoryDep('arg332_1', c1, {c0: 2048, c1: 1024}, None)]
op509.outputs = [
    buf509: ComputedBuffer
    buf509.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf509.users = [NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False)]
]
op509.group.device = cuda:0
op509.group.iteration = (2048, 1024)
op509.sizes = ([2048], [1024])
buf501_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf508_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf509_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op509_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf501', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf508', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg332_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf509', get_index_3, getitem)
        return store_reduction
op509 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op509_op510_op512.snodes[1] =
op510: SchedulerNode(ComputedBuffer)
op510.writes = [MemoryDep('buf510', c0, {c0: 2048}, None)]
op510.unmet_dependencies = 
    [   MemoryDep('buf501', c0, {c0: 2097152}, None),
        MemoryDep('buf508', c0, {c0: 2097152}, None)]
op510.met_dependencies = [MemoryDep('arg332_1', c1, {c0: 2048, c1: 1024}, None)]
op510.outputs = [
    buf510: ComputedBuffer
    buf510.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf510.users = [NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False)]
]
op510.group.device = cuda:0
op510.group.iteration = (2048, 1024)
op510.sizes = ([2048], [1024])
buf501_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf508_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf510_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op510_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf501', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf508', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg332_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf510', get_index_3, getitem_1)
        return store_reduction
op510 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op509_op510_op512.snodes[2] =
op512: SchedulerNode(ComputedBuffer)
op512.writes = [MemoryDep('buf512', c0, {c0: 2097152}, None)]
op512.unmet_dependencies = 
    [   MemoryDep('buf501', c0, {c0: 2097152}, None),
        MemoryDep('buf508', c0, {c0: 2097152}, None),
        MemoryDep('buf509', c0, {c0: 2048}, None),
        MemoryDep('buf510', c0, {c0: 2048}, None)]
op512.met_dependencies = 
    [   MemoryDep('arg332_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg333_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg334_1', c1, {c0: 2048, c1: 1024}, None)]
op512.outputs = [
    buf512: ComputedBuffer
    buf512.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf512.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op513'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op514'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op515'), can_inplace=False, is_weak=False),
    ]
]
op512.group.device = cuda:0
op512.group.iteration = (2097152, 1)
op512.sizes = ([2048, 1024], [])
buf501_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf508_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf509_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf510_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg334_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf512_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op512_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf501', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf508', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg332_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf509', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf510', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg333_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg334_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf512', get_index_7, add_3, None)
        return store
op512 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op509_op510_op512 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op513: ExternKernelSchedulerNode(ExternKernelOut)
op513.writes = [StarDep(name='buf513', mode=None)]
op513.unmet_dependencies = [StarDep(name='buf512', mode=None)]
op513.met_dependencies = [StarDep(name='arg335_1', mode=None)]
op513.outputs = [
    buf513: ExternKernelOut
    buf513.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf513.users = [NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False)]
]
op513.node.kernel = extern_kernels.mm


op514: ExternKernelSchedulerNode(ExternKernelOut)
op514.writes = [StarDep(name='buf514', mode=None)]
op514.unmet_dependencies = [StarDep(name='buf512', mode=None)]
op514.met_dependencies = [StarDep(name='arg337_1', mode=None)]
op514.outputs = [
    buf514: ExternKernelOut
    buf514.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf514.users = [NodeUser(node=SchedulerNode(name='op517'), can_inplace=False, is_weak=False)]
]
op514.node.kernel = extern_kernels.mm


op515: ExternKernelSchedulerNode(ExternKernelOut)
op515.writes = [StarDep(name='buf515', mode=None)]
op515.unmet_dependencies = [StarDep(name='buf512', mode=None)]
op515.met_dependencies = [StarDep(name='arg339_1', mode=None)]
op515.outputs = [
    buf515: ExternKernelOut
    buf515.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf515.users = [NodeUser(node=SchedulerNode(name='op518'), can_inplace=False, is_weak=False)]
]
op515.node.kernel = extern_kernels.mm


op516: SchedulerNode(ComputedBuffer)
op516.writes = [MemoryDep('buf516', c0, {c0: 2097152}, None)]
op516.unmet_dependencies = [   MemoryDep('buf513', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op516.met_dependencies = [MemoryDep('arg336_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op516.outputs = [
    buf516: ComputedBuffer
    buf516.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf516.users = [NodeUser(node=ExternKernelSchedulerNode(name='op520'), can_inplace=False, is_weak=False)]
]
op516.group.device = cuda:0
op516.group.iteration = (2097152, 1)
op516.sizes = ([2, 16, 1024, 64], [])
buf513_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg336_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf516_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op516_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf513', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg336_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf516', get_index_2, add, None)
        return store
op516 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op517: SchedulerNode(ComputedBuffer)
op517.writes = [MemoryDep('buf517', c0, {c0: 2097152}, None)]
op517.unmet_dependencies = [   MemoryDep('buf514', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op517.met_dependencies = [MemoryDep('arg338_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op517.outputs = [
    buf517: ComputedBuffer
    buf517.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf517.users = [NodeUser(node=ExternKernelSchedulerNode(name='op520'), can_inplace=False, is_weak=False)]
]
op517.group.device = cuda:0
op517.group.iteration = (2097152, 1)
op517.sizes = ([2, 16, 1024, 64], [])
buf514_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op517_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf514', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg338_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf517', get_index_2, add, None)
        return store
op517 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op518: SchedulerNode(ComputedBuffer)
op518.writes = [MemoryDep('buf518', c0, {c0: 2097152}, None)]
op518.unmet_dependencies = [   MemoryDep('buf515', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op518.met_dependencies = [MemoryDep('arg340_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op518.outputs = [
    buf518: ComputedBuffer
    buf518.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf518.users = [NodeUser(node=ExternKernelSchedulerNode(name='op520'), can_inplace=False, is_weak=False)]
]
op518.group.device = cuda:0
op518.group.iteration = (2097152, 1)
op518.sizes = ([2, 16, 1024, 64], [])
buf515_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg340_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op518_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf515', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg340_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf518', get_index_2, add, None)
        return store
op518 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op519: SchedulerNode(ComputedBuffer)
op519.writes = [MemoryDep('buf519', c0, {c0: 33554432}, None)]
op519.unmet_dependencies = []
op519.met_dependencies = []
op519.outputs = [
    buf519: ComputedBuffer
    buf519.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
    buf519.users = [NodeUser(node=ExternKernelSchedulerNode(name='op520'), can_inplace=False, is_weak=False)]
]
op519.group.device = cuda:0
op519.group.iteration = (33554432, 1)
op519.sizes = ([32, 1024, 1024], [])
buf519_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
class op519_loop_body:
    var_ranges = {z0: 32, z1: 1024, z2: 1024}
    index0 = z2
    index1 = z1 + 1
    index2 = 1048576*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf519', get_index_2, where, None)
        return store
op519 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op520: ExternKernelSchedulerNode(FallbackKernel)
op520.writes = [StarDep(name='buf520', mode=None)]
op520.unmet_dependencies = 
    [   StarDep(name='buf516', mode=None),
        StarDep(name='buf517', mode=None),
        StarDep(name='buf518', mode=None),
        StarDep(name='buf519', mode=None)]
op520.met_dependencies = []
op520.outputs = [
    buf520: FallbackKernel
    buf520.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf520.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op521'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op522'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op523'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op524'), can_inplace=False, is_weak=False),
    ]
]
op520.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op521: ExternKernelSchedulerNode(MultiOutput)
op521.writes = [StarDep(name='buf521', mode=None)]
op521.unmet_dependencies = [StarDep(name='buf520', mode=None)]
op521.met_dependencies = []
op521.outputs = [
    buf521: MultiOutput
    buf521.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf521.users = [NodeUser(node=ExternKernelSchedulerNode(name='op525'), can_inplace=False, is_weak=False)]
]
op521.node.kernel = None


op525: ExternKernelSchedulerNode(ExternKernelOut)
op525.writes = [StarDep(name='buf525', mode=None)]
op525.unmet_dependencies = [StarDep(name='buf521', mode=None)]
op525.met_dependencies = [StarDep(name='arg341_1', mode=None)]
op525.outputs = [
    buf525: ExternKernelOut
    buf525.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf525.users = [NodeUser(node=SchedulerNode(name='op526'), can_inplace=True, is_weak=False)]
]
op525.node.kernel = extern_kernels.mm


op526_op527_op528_op530: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op526_op527_op528_op530.writes = 
    [   MemoryDep('buf526', c0, {c0: 2097152}, None),
        MemoryDep('buf527', c0, {c0: 2048}, None),
        MemoryDep('buf528', c0, {c0: 2048}, None),
        MemoryDep('buf530', c0, {c0: 2097152}, None)]
op526_op527_op528_op530.unmet_dependencies = 
    [   MemoryDep('buf501', c0, {c0: 2097152}, None),
        MemoryDep('buf508', c0, {c0: 2097152}, None),
        MemoryDep('buf525', c0, {c0: 2097152}, None)]
op526_op527_op528_op530.met_dependencies = 
    [   MemoryDep('arg332_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg342_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg343_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg344_1', c1, {c0: 2048, c1: 1024}, None)]
op526_op527_op528_op530.outputs = [
    buf526: ComputedBuffer
    buf526.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf526.users = [
        NodeUser(node=SchedulerNode(name='op527'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op528'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op550'), can_inplace=True, is_weak=False),
    ]
    buf527: ComputedBuffer
    buf527.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf527.users = [NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False)]
    buf528: ComputedBuffer
    buf528.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf528.users = [NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False)]
    buf530: ComputedBuffer
    buf530.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf530.users = [NodeUser(node=ExternKernelSchedulerNode(name='op531'), can_inplace=False, is_weak=False)]
]
op526_op527_op528_op530.snodes[0] =
op526: SchedulerNode(ComputedBuffer)
op526.writes = [MemoryDep('buf526', c0, {c0: 2097152}, None)]
op526.unmet_dependencies = 
    [   MemoryDep('buf501', c0, {c0: 2097152}, None),
        MemoryDep('buf508', c0, {c0: 2097152}, None),
        MemoryDep('buf525', c0, {c0: 2097152}, None)]
op526.met_dependencies = 
    [   MemoryDep('arg332_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg342_1', c1, {c0: 2048, c1: 1024}, None)]
op526.outputs = [
    buf526: ComputedBuffer
    buf526.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf526.users = [
        NodeUser(node=SchedulerNode(name='op527'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op528'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op550'), can_inplace=True, is_weak=False),
    ]
]
op526.group.device = cuda:0
op526.group.iteration = (2097152, 1)
op526.sizes = ([2048, 1024], [])
buf501_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf508_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf525_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf526_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op526_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf501', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf508', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg332_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf525', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg342_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf526', get_index_5, add_3, None)
        return store
op526 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op526_op527_op528_op530.snodes[1] =
op527: SchedulerNode(ComputedBuffer)
op527.writes = [MemoryDep('buf527', c0, {c0: 2048}, None)]
op527.unmet_dependencies = [MemoryDep('buf526', c0, {c0: 2097152}, None)]
op527.met_dependencies = []
op527.outputs = [
    buf527: ComputedBuffer
    buf527.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf527.users = [NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False)]
]
op527.group.device = cuda:0
op527.group.iteration = (2048, 1024)
op527.sizes = ([2048], [1024])
buf526_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf527_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op527_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf527', get_index_1, getitem)
        return store_reduction
op527 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op526_op527_op528_op530.snodes[2] =
op528: SchedulerNode(ComputedBuffer)
op528.writes = [MemoryDep('buf528', c0, {c0: 2048}, None)]
op528.unmet_dependencies = [MemoryDep('buf526', c0, {c0: 2097152}, None)]
op528.met_dependencies = []
op528.outputs = [
    buf528: ComputedBuffer
    buf528.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf528.users = [NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False)]
]
op528.group.device = cuda:0
op528.group.iteration = (2048, 1024)
op528.sizes = ([2048], [1024])
buf526_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf528_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op528_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf528', get_index_1, getitem_1)
        return store_reduction
op528 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op526_op527_op528_op530.snodes[3] =
op530: SchedulerNode(ComputedBuffer)
op530.writes = [MemoryDep('buf530', c0, {c0: 2097152}, None)]
op530.unmet_dependencies = 
    [   MemoryDep('buf526', c0, {c0: 2097152}, None),
        MemoryDep('buf527', c0, {c0: 2048}, None),
        MemoryDep('buf528', c0, {c0: 2048}, None)]
op530.met_dependencies = 
    [   MemoryDep('arg343_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg344_1', c1, {c0: 2048, c1: 1024}, None)]
op530.outputs = [
    buf530: ComputedBuffer
    buf530.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf530.users = [NodeUser(node=ExternKernelSchedulerNode(name='op531'), can_inplace=False, is_weak=False)]
]
op530.group.device = cuda:0
op530.group.iteration = (2097152, 1)
op530.sizes = ([2048, 1024], [])
buf526_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf527_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf528_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg343_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg344_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf530_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op530_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf527', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf528', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg343_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg344_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf530', get_index_5, add_1, None)
        return store
op530 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op526_op527_op528_op530 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op531: ExternKernelSchedulerNode(ExternKernelOut)
op531.writes = [StarDep(name='buf531', mode=None)]
op531.unmet_dependencies = [StarDep(name='buf530', mode=None)]
op531.met_dependencies = [StarDep(name='arg345_1', mode=None)]
op531.outputs = [
    buf531: ExternKernelOut
    buf531.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf531.users = [NodeUser(node=SchedulerNode(name='op534'), can_inplace=False, is_weak=False)]
]
op531.node.kernel = extern_kernels.mm


op532: ExternKernelSchedulerNode(ExternKernelOut)
op532.writes = [StarDep(name='buf532', mode=None)]
op532.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op532.met_dependencies = [StarDep(name='arg347_1', mode=None)]
op532.outputs = [
    buf532: ExternKernelOut
    buf532.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf532.users = [NodeUser(node=SchedulerNode(name='op535'), can_inplace=False, is_weak=False)]
]
op532.node.kernel = extern_kernels.mm


op533: ExternKernelSchedulerNode(ExternKernelOut)
op533.writes = [StarDep(name='buf533', mode=None)]
op533.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op533.met_dependencies = [StarDep(name='arg349_1', mode=None)]
op533.outputs = [
    buf533: ExternKernelOut
    buf533.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf533.users = [NodeUser(node=SchedulerNode(name='op536'), can_inplace=False, is_weak=False)]
]
op533.node.kernel = extern_kernels.mm


op534: SchedulerNode(ComputedBuffer)
op534.writes = [MemoryDep('buf534', c0, {c0: 2097152}, None)]
op534.unmet_dependencies = [   MemoryDep('buf531', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op534.met_dependencies = [MemoryDep('arg346_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op534.outputs = [
    buf534: ComputedBuffer
    buf534.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf534.users = [NodeUser(node=ExternKernelSchedulerNode(name='op537'), can_inplace=False, is_weak=False)]
]
op534.group.device = cuda:0
op534.group.iteration = (2097152, 1)
op534.sizes = ([2, 16, 1024, 64], [])
buf531_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg346_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf534_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op534_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf531', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg346_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf534', get_index_2, add, None)
        return store
op534 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op535: SchedulerNode(ComputedBuffer)
op535.writes = [MemoryDep('buf535', c0, {c0: 2097152}, None)]
op535.unmet_dependencies = [   MemoryDep('buf532', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op535.met_dependencies = [MemoryDep('arg348_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op535.outputs = [
    buf535: ComputedBuffer
    buf535.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf535.users = [NodeUser(node=ExternKernelSchedulerNode(name='op537'), can_inplace=False, is_weak=False)]
]
op535.group.device = cuda:0
op535.group.iteration = (2097152, 1)
op535.sizes = ([2, 16, 1024, 64], [])
buf532_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf535_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op535_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf532', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg348_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf535', get_index_2, add, None)
        return store
op535 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op536: SchedulerNode(ComputedBuffer)
op536.writes = [MemoryDep('buf536', c0, {c0: 2097152}, None)]
op536.unmet_dependencies = [   MemoryDep('buf533', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op536.met_dependencies = [MemoryDep('arg350_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op536.outputs = [
    buf536: ComputedBuffer
    buf536.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf536.users = [NodeUser(node=ExternKernelSchedulerNode(name='op537'), can_inplace=False, is_weak=False)]
]
op536.group.device = cuda:0
op536.group.iteration = (2097152, 1)
op536.sizes = ([2, 16, 1024, 64], [])
buf533_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf536_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op536_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf533', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg350_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf536', get_index_2, add, None)
        return store
op536 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op537: ExternKernelSchedulerNode(FallbackKernel)
op537.writes = [StarDep(name='buf537', mode=None)]
op537.unmet_dependencies = 
    [   StarDep(name='buf534', mode=None),
        StarDep(name='buf535', mode=None),
        StarDep(name='buf536', mode=None)]
op537.met_dependencies = []
op537.outputs = [
    buf537: FallbackKernel
    buf537.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf537.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op538'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op539'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op540'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op541'), can_inplace=False, is_weak=False),
    ]
]
op537.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op538: ExternKernelSchedulerNode(MultiOutput)
op538.writes = [StarDep(name='buf538', mode=None)]
op538.unmet_dependencies = [StarDep(name='buf537', mode=None)]
op538.met_dependencies = []
op538.outputs = [
    buf538: MultiOutput
    buf538.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf538.users = [NodeUser(node=ExternKernelSchedulerNode(name='op542'), can_inplace=False, is_weak=False)]
]
op538.node.kernel = None


op542: ExternKernelSchedulerNode(ExternKernelOut)
op542.writes = [StarDep(name='buf542', mode=None)]
op542.unmet_dependencies = [StarDep(name='buf538', mode=None)]
op542.met_dependencies = [StarDep(name='arg351_1', mode=None)]
op542.outputs = [
    buf542: ExternKernelOut
    buf542.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf542.users = [
        NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op550'), can_inplace=True, is_weak=False),
    ]
]
op542.node.kernel = extern_kernels.mm


op543_op544_op546: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op543_op544_op546.writes = 
    [   MemoryDep('buf543', c0, {c0: 2048}, None),
        MemoryDep('buf544', c0, {c0: 2048}, None),
        MemoryDep('buf546', c0, {c0: 2097152}, None)]
op543_op544_op546.unmet_dependencies = 
    [   MemoryDep('buf526', c0, {c0: 2097152}, None),
        MemoryDep('buf542', c0, {c0: 2097152}, None)]
op543_op544_op546.met_dependencies = 
    [   MemoryDep('arg352_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg353_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg354_1', c1, {c0: 2048, c1: 1024}, None)]
op543_op544_op546.outputs = [
    buf543: ComputedBuffer
    buf543.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf543.users = [NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False)]
    buf544: ComputedBuffer
    buf544.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf544.users = [NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False)]
    buf546: ComputedBuffer
    buf546.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf546.users = [NodeUser(node=ExternKernelSchedulerNode(name='op547'), can_inplace=False, is_weak=False)]
]
op543_op544_op546.snodes[0] =
op543: SchedulerNode(ComputedBuffer)
op543.writes = [MemoryDep('buf543', c0, {c0: 2048}, None)]
op543.unmet_dependencies = 
    [   MemoryDep('buf526', c0, {c0: 2097152}, None),
        MemoryDep('buf542', c0, {c0: 2097152}, None)]
op543.met_dependencies = [MemoryDep('arg352_1', c1, {c0: 2048, c1: 1024}, None)]
op543.outputs = [
    buf543: ComputedBuffer
    buf543.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf543.users = [NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False)]
]
op543.group.device = cuda:0
op543.group.iteration = (2048, 1024)
op543.sizes = ([2048], [1024])
buf526_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf542_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf543_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op543_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf542', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg352_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf543', get_index_3, getitem)
        return store_reduction
op543 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op543_op544_op546.snodes[1] =
op544: SchedulerNode(ComputedBuffer)
op544.writes = [MemoryDep('buf544', c0, {c0: 2048}, None)]
op544.unmet_dependencies = 
    [   MemoryDep('buf526', c0, {c0: 2097152}, None),
        MemoryDep('buf542', c0, {c0: 2097152}, None)]
op544.met_dependencies = [MemoryDep('arg352_1', c1, {c0: 2048, c1: 1024}, None)]
op544.outputs = [
    buf544: ComputedBuffer
    buf544.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf544.users = [NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False)]
]
op544.group.device = cuda:0
op544.group.iteration = (2048, 1024)
op544.sizes = ([2048], [1024])
buf526_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf542_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op544_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf542', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg352_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf544', get_index_3, getitem_1)
        return store_reduction
op544 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op543_op544_op546.snodes[2] =
op546: SchedulerNode(ComputedBuffer)
op546.writes = [MemoryDep('buf546', c0, {c0: 2097152}, None)]
op546.unmet_dependencies = 
    [   MemoryDep('buf526', c0, {c0: 2097152}, None),
        MemoryDep('buf542', c0, {c0: 2097152}, None),
        MemoryDep('buf543', c0, {c0: 2048}, None),
        MemoryDep('buf544', c0, {c0: 2048}, None)]
op546.met_dependencies = 
    [   MemoryDep('arg352_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg353_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg354_1', c1, {c0: 2048, c1: 1024}, None)]
op546.outputs = [
    buf546: ComputedBuffer
    buf546.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf546.users = [NodeUser(node=ExternKernelSchedulerNode(name='op547'), can_inplace=False, is_weak=False)]
]
op546.group.device = cuda:0
op546.group.iteration = (2097152, 1)
op546.sizes = ([2048, 1024], [])
buf526_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf542_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf543_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf544_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg353_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op546_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf542', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg352_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf543', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf544', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg353_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg354_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf546', get_index_7, add_3, None)
        return store
op546 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op543_op544_op546 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op547: ExternKernelSchedulerNode(ExternKernelOut)
op547.writes = [StarDep(name='buf547', mode=None)]
op547.unmet_dependencies = [StarDep(name='buf546', mode=None)]
op547.met_dependencies = [StarDep(name='arg355_1', mode=None)]
op547.outputs = [
    buf547: ExternKernelOut
    buf547.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf547.users = [NodeUser(node=SchedulerNode(name='op548'), can_inplace=True, is_weak=False)]
]
op547.node.kernel = extern_kernels.mm


op548: SchedulerNode(ComputedBuffer)
op548.writes = [MemoryDep('buf548', c0, {c0: 8388608}, None)]
op548.unmet_dependencies = [MemoryDep('buf547', c0, {c0: 8388608}, None)]
op548.met_dependencies = [MemoryDep('arg356_1', c1, {c0: 2048, c1: 4096}, None)]
op548.outputs = [
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf548.users = [NodeUser(node=ExternKernelSchedulerNode(name='op549'), can_inplace=False, is_weak=False)]
]
op548.group.device = cuda:0
op548.group.iteration = (8388608, 1)
op548.sizes = ([2048, 4096], [])
buf547_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg356_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf548_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op548_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf547', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg356_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf547', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg356_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf548', get_index_4, mul_2, None)
        return store
op548 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op549: ExternKernelSchedulerNode(ExternKernelOut)
op549.writes = [StarDep(name='buf549', mode=None)]
op549.unmet_dependencies = [StarDep(name='buf548', mode=None)]
op549.met_dependencies = [StarDep(name='arg357_1', mode=None)]
op549.outputs = [
    buf549: ExternKernelOut
    buf549.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf549.users = [NodeUser(node=SchedulerNode(name='op550'), can_inplace=True, is_weak=False)]
]
op549.node.kernel = extern_kernels.mm


op550_op551_op552_op554: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op550_op551_op552_op554.writes = 
    [   MemoryDep('buf550', c0, {c0: 2097152}, None),
        MemoryDep('buf551', c0, {c0: 2048}, None),
        MemoryDep('buf552', c0, {c0: 2048}, None),
        MemoryDep('buf554', c0, {c0: 2097152}, None)]
op550_op551_op552_op554.unmet_dependencies = 
    [   MemoryDep('buf526', c0, {c0: 2097152}, None),
        MemoryDep('buf542', c0, {c0: 2097152}, None),
        MemoryDep('buf549', c0, {c0: 2097152}, None)]
op550_op551_op552_op554.met_dependencies = 
    [   MemoryDep('arg352_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg358_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg359_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg360_1', c1, {c0: 2048, c1: 1024}, None)]
op550_op551_op552_op554.outputs = [
    buf550: ComputedBuffer
    buf550.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf550.users = [
        NodeUser(node=SchedulerNode(name='op551'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op554'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op569'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op570'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op584'), can_inplace=True, is_weak=False),
    ]
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf551.users = [NodeUser(node=SchedulerNode(name='op554'), can_inplace=False, is_weak=False)]
    buf552: ComputedBuffer
    buf552.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf552.users = [NodeUser(node=SchedulerNode(name='op554'), can_inplace=False, is_weak=False)]
    buf554: ComputedBuffer
    buf554.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf554.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op555'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op556'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op557'), can_inplace=False, is_weak=False),
    ]
]
op550_op551_op552_op554.snodes[0] =
op550: SchedulerNode(ComputedBuffer)
op550.writes = [MemoryDep('buf550', c0, {c0: 2097152}, None)]
op550.unmet_dependencies = 
    [   MemoryDep('buf526', c0, {c0: 2097152}, None),
        MemoryDep('buf542', c0, {c0: 2097152}, None),
        MemoryDep('buf549', c0, {c0: 2097152}, None)]
op550.met_dependencies = 
    [   MemoryDep('arg352_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg358_1', c1, {c0: 2048, c1: 1024}, None)]
op550.outputs = [
    buf550: ComputedBuffer
    buf550.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf550.users = [
        NodeUser(node=SchedulerNode(name='op551'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op554'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op569'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op570'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op584'), can_inplace=True, is_weak=False),
    ]
]
op550.group.device = cuda:0
op550.group.iteration = (2097152, 1)
op550.sizes = ([2048, 1024], [])
buf526_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf542_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf549_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf550_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op550_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf542', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg352_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf549', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg358_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf550', get_index_5, add_3, None)
        return store
op550 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op550_op551_op552_op554.snodes[1] =
op551: SchedulerNode(ComputedBuffer)
op551.writes = [MemoryDep('buf551', c0, {c0: 2048}, None)]
op551.unmet_dependencies = [MemoryDep('buf550', c0, {c0: 2097152}, None)]
op551.met_dependencies = []
op551.outputs = [
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf551.users = [NodeUser(node=SchedulerNode(name='op554'), can_inplace=False, is_weak=False)]
]
op551.group.device = cuda:0
op551.group.iteration = (2048, 1024)
op551.sizes = ([2048], [1024])
buf550_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf551_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op551_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf550', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf551', get_index_1, getitem)
        return store_reduction
op551 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op550_op551_op552_op554.snodes[2] =
op552: SchedulerNode(ComputedBuffer)
op552.writes = [MemoryDep('buf552', c0, {c0: 2048}, None)]
op552.unmet_dependencies = [MemoryDep('buf550', c0, {c0: 2097152}, None)]
op552.met_dependencies = []
op552.outputs = [
    buf552: ComputedBuffer
    buf552.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf552.users = [NodeUser(node=SchedulerNode(name='op554'), can_inplace=False, is_weak=False)]
]
op552.group.device = cuda:0
op552.group.iteration = (2048, 1024)
op552.sizes = ([2048], [1024])
buf550_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf552_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op552_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf550', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf552', get_index_1, getitem_1)
        return store_reduction
op552 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op550_op551_op552_op554.snodes[3] =
op554: SchedulerNode(ComputedBuffer)
op554.writes = [MemoryDep('buf554', c0, {c0: 2097152}, None)]
op554.unmet_dependencies = 
    [   MemoryDep('buf550', c0, {c0: 2097152}, None),
        MemoryDep('buf551', c0, {c0: 2048}, None),
        MemoryDep('buf552', c0, {c0: 2048}, None)]
op554.met_dependencies = 
    [   MemoryDep('arg359_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg360_1', c1, {c0: 2048, c1: 1024}, None)]
op554.outputs = [
    buf554: ComputedBuffer
    buf554.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf554.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op555'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op556'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op557'), can_inplace=False, is_weak=False),
    ]
]
op554.group.device = cuda:0
op554.group.iteration = (2097152, 1)
op554.sizes = ([2048, 1024], [])
buf550_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf551_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf552_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg359_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg360_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf554_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op554_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf550', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf551', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf552', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg359_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg360_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf554', get_index_5, add_1, None)
        return store
op554 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op550_op551_op552_op554 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op555: ExternKernelSchedulerNode(ExternKernelOut)
op555.writes = [StarDep(name='buf555', mode=None)]
op555.unmet_dependencies = [StarDep(name='buf554', mode=None)]
op555.met_dependencies = [StarDep(name='arg361_1', mode=None)]
op555.outputs = [
    buf555: ExternKernelOut
    buf555.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf555.users = [NodeUser(node=SchedulerNode(name='op558'), can_inplace=False, is_weak=False)]
]
op555.node.kernel = extern_kernels.mm


op556: ExternKernelSchedulerNode(ExternKernelOut)
op556.writes = [StarDep(name='buf556', mode=None)]
op556.unmet_dependencies = [StarDep(name='buf554', mode=None)]
op556.met_dependencies = [StarDep(name='arg363_1', mode=None)]
op556.outputs = [
    buf556: ExternKernelOut
    buf556.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf556.users = [NodeUser(node=SchedulerNode(name='op559'), can_inplace=False, is_weak=False)]
]
op556.node.kernel = extern_kernels.mm


op557: ExternKernelSchedulerNode(ExternKernelOut)
op557.writes = [StarDep(name='buf557', mode=None)]
op557.unmet_dependencies = [StarDep(name='buf554', mode=None)]
op557.met_dependencies = [StarDep(name='arg365_1', mode=None)]
op557.outputs = [
    buf557: ExternKernelOut
    buf557.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf557.users = [NodeUser(node=SchedulerNode(name='op560'), can_inplace=False, is_weak=False)]
]
op557.node.kernel = extern_kernels.mm


op558: SchedulerNode(ComputedBuffer)
op558.writes = [MemoryDep('buf558', c0, {c0: 2097152}, None)]
op558.unmet_dependencies = [   MemoryDep('buf555', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op558.met_dependencies = [MemoryDep('arg362_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op558.outputs = [
    buf558: ComputedBuffer
    buf558.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf558.users = [NodeUser(node=ExternKernelSchedulerNode(name='op562'), can_inplace=False, is_weak=False)]
]
op558.group.device = cuda:0
op558.group.iteration = (2097152, 1)
op558.sizes = ([2, 16, 1024, 64], [])
buf555_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg362_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf558_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op558_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf555', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg362_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf558', get_index_2, add, None)
        return store
op558 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op559: SchedulerNode(ComputedBuffer)
op559.writes = [MemoryDep('buf559', c0, {c0: 2097152}, None)]
op559.unmet_dependencies = [   MemoryDep('buf556', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op559.met_dependencies = [MemoryDep('arg364_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op559.outputs = [
    buf559: ComputedBuffer
    buf559.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf559.users = [NodeUser(node=ExternKernelSchedulerNode(name='op562'), can_inplace=False, is_weak=False)]
]
op559.group.device = cuda:0
op559.group.iteration = (2097152, 1)
op559.sizes = ([2, 16, 1024, 64], [])
buf556_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg364_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf559_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op559_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf556', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg364_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf559', get_index_2, add, None)
        return store
op559 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op560: SchedulerNode(ComputedBuffer)
op560.writes = [MemoryDep('buf560', c0, {c0: 2097152}, None)]
op560.unmet_dependencies = [   MemoryDep('buf557', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op560.met_dependencies = [MemoryDep('arg366_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op560.outputs = [
    buf560: ComputedBuffer
    buf560.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf560.users = [NodeUser(node=ExternKernelSchedulerNode(name='op562'), can_inplace=False, is_weak=False)]
]
op560.group.device = cuda:0
op560.group.iteration = (2097152, 1)
op560.sizes = ([2, 16, 1024, 64], [])
buf557_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg366_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf560_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op560_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf557', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg366_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf560', get_index_2, add, None)
        return store
op560 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op561: SchedulerNode(ComputedBuffer)
op561.writes = [MemoryDep('buf561', c0, {c0: 33554432}, None)]
op561.unmet_dependencies = []
op561.met_dependencies = []
op561.outputs = [
    buf561: ComputedBuffer
    buf561.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
    buf561.users = [NodeUser(node=ExternKernelSchedulerNode(name='op562'), can_inplace=False, is_weak=False)]
]
op561.group.device = cuda:0
op561.group.iteration = (33554432, 1)
op561.sizes = ([32, 1024, 1024], [])
buf561_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
class op561_loop_body:
    var_ranges = {z0: 32, z1: 1024, z2: 1024}
    index0 = z2
    index1 = z1 + 1
    index2 = 1048576*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf561', get_index_2, where, None)
        return store
op561 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op562: ExternKernelSchedulerNode(FallbackKernel)
op562.writes = [StarDep(name='buf562', mode=None)]
op562.unmet_dependencies = 
    [   StarDep(name='buf558', mode=None),
        StarDep(name='buf559', mode=None),
        StarDep(name='buf560', mode=None),
        StarDep(name='buf561', mode=None)]
op562.met_dependencies = []
op562.outputs = [
    buf562: FallbackKernel
    buf562.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf562.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op563'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op564'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op565'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op566'), can_inplace=False, is_weak=False),
    ]
]
op562.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op563: ExternKernelSchedulerNode(MultiOutput)
op563.writes = [StarDep(name='buf563', mode=None)]
op563.unmet_dependencies = [StarDep(name='buf562', mode=None)]
op563.met_dependencies = []
op563.outputs = [
    buf563: MultiOutput
    buf563.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf563.users = [NodeUser(node=ExternKernelSchedulerNode(name='op567'), can_inplace=False, is_weak=False)]
]
op563.node.kernel = None


op567: ExternKernelSchedulerNode(ExternKernelOut)
op567.writes = [StarDep(name='buf567', mode=None)]
op567.unmet_dependencies = [StarDep(name='buf563', mode=None)]
op567.met_dependencies = [StarDep(name='arg367_1', mode=None)]
op567.outputs = [
    buf567: ExternKernelOut
    buf567.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf567.users = [
        NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op569'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op570'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op584'), can_inplace=True, is_weak=False),
    ]
]
op567.node.kernel = extern_kernels.mm


op568_op569_op571: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op568_op569_op571.writes = 
    [   MemoryDep('buf568', c0, {c0: 2048}, None),
        MemoryDep('buf569', c0, {c0: 2048}, None),
        MemoryDep('buf571', c0, {c0: 2097152}, None)]
op568_op569_op571.unmet_dependencies = 
    [   MemoryDep('buf550', c0, {c0: 2097152}, None),
        MemoryDep('buf567', c0, {c0: 2097152}, None)]
op568_op569_op571.met_dependencies = 
    [   MemoryDep('arg368_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg369_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg370_1', c1, {c0: 2048, c1: 1024}, None)]
op568_op569_op571.outputs = [
    buf568: ComputedBuffer
    buf568.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf568.users = [NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
    buf569: ComputedBuffer
    buf569.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf569.users = [NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
    buf571: ComputedBuffer
    buf571.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf571.users = [NodeUser(node=ExternKernelSchedulerNode(name='op572'), can_inplace=False, is_weak=False)]
]
op568_op569_op571.snodes[0] =
op568: SchedulerNode(ComputedBuffer)
op568.writes = [MemoryDep('buf568', c0, {c0: 2048}, None)]
op568.unmet_dependencies = 
    [   MemoryDep('buf550', c0, {c0: 2097152}, None),
        MemoryDep('buf567', c0, {c0: 2097152}, None)]
op568.met_dependencies = [MemoryDep('arg368_1', c1, {c0: 2048, c1: 1024}, None)]
op568.outputs = [
    buf568: ComputedBuffer
    buf568.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf568.users = [NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
]
op568.group.device = cuda:0
op568.group.iteration = (2048, 1024)
op568.sizes = ([2048], [1024])
buf550_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf567_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op568_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf550', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf567', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg368_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf568', get_index_3, getitem)
        return store_reduction
op568 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op568_op569_op571.snodes[1] =
op569: SchedulerNode(ComputedBuffer)
op569.writes = [MemoryDep('buf569', c0, {c0: 2048}, None)]
op569.unmet_dependencies = 
    [   MemoryDep('buf550', c0, {c0: 2097152}, None),
        MemoryDep('buf567', c0, {c0: 2097152}, None)]
op569.met_dependencies = [MemoryDep('arg368_1', c1, {c0: 2048, c1: 1024}, None)]
op569.outputs = [
    buf569: ComputedBuffer
    buf569.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf569.users = [NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
]
op569.group.device = cuda:0
op569.group.iteration = (2048, 1024)
op569.sizes = ([2048], [1024])
buf550_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf567_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf569_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op569_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf550', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf567', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg368_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf569', get_index_3, getitem_1)
        return store_reduction
op569 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op568_op569_op571.snodes[2] =
op571: SchedulerNode(ComputedBuffer)
op571.writes = [MemoryDep('buf571', c0, {c0: 2097152}, None)]
op571.unmet_dependencies = 
    [   MemoryDep('buf550', c0, {c0: 2097152}, None),
        MemoryDep('buf567', c0, {c0: 2097152}, None),
        MemoryDep('buf568', c0, {c0: 2048}, None),
        MemoryDep('buf569', c0, {c0: 2048}, None)]
op571.met_dependencies = 
    [   MemoryDep('arg368_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg369_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg370_1', c1, {c0: 2048, c1: 1024}, None)]
op571.outputs = [
    buf571: ComputedBuffer
    buf571.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf571.users = [NodeUser(node=ExternKernelSchedulerNode(name='op572'), can_inplace=False, is_weak=False)]
]
op571.group.device = cuda:0
op571.group.iteration = (2097152, 1)
op571.sizes = ([2048, 1024], [])
buf550_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf567_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf569_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg369_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op571_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf550', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf567', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg368_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf568', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf569', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg369_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg370_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf571', get_index_7, add_3, None)
        return store
op571 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op568_op569_op571 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op572: ExternKernelSchedulerNode(ExternKernelOut)
op572.writes = [StarDep(name='buf572', mode=None)]
op572.unmet_dependencies = [StarDep(name='buf571', mode=None)]
op572.met_dependencies = [StarDep(name='arg371_1', mode=None)]
op572.outputs = [
    buf572: ExternKernelOut
    buf572.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf572.users = [NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False)]
]
op572.node.kernel = extern_kernels.mm


op573: ExternKernelSchedulerNode(ExternKernelOut)
op573.writes = [StarDep(name='buf573', mode=None)]
op573.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op573.met_dependencies = [StarDep(name='arg373_1', mode=None)]
op573.outputs = [
    buf573: ExternKernelOut
    buf573.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf573.users = [NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False)]
]
op573.node.kernel = extern_kernels.mm


op574: ExternKernelSchedulerNode(ExternKernelOut)
op574.writes = [StarDep(name='buf574', mode=None)]
op574.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op574.met_dependencies = [StarDep(name='arg375_1', mode=None)]
op574.outputs = [
    buf574: ExternKernelOut
    buf574.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf574.users = [NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False)]
]
op574.node.kernel = extern_kernels.mm


op575: SchedulerNode(ComputedBuffer)
op575.writes = [MemoryDep('buf575', c0, {c0: 2097152}, None)]
op575.unmet_dependencies = [   MemoryDep('buf572', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op575.met_dependencies = [MemoryDep('arg372_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op575.outputs = [
    buf575: ComputedBuffer
    buf575.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf575.users = [NodeUser(node=ExternKernelSchedulerNode(name='op578'), can_inplace=False, is_weak=False)]
]
op575.group.device = cuda:0
op575.group.iteration = (2097152, 1)
op575.sizes = ([2, 16, 1024, 64], [])
buf572_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg372_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf575_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op575_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf572', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg372_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf575', get_index_2, add, None)
        return store
op575 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op576: SchedulerNode(ComputedBuffer)
op576.writes = [MemoryDep('buf576', c0, {c0: 2097152}, None)]
op576.unmet_dependencies = [   MemoryDep('buf573', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op576.met_dependencies = [MemoryDep('arg374_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op576.outputs = [
    buf576: ComputedBuffer
    buf576.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf576.users = [NodeUser(node=ExternKernelSchedulerNode(name='op578'), can_inplace=False, is_weak=False)]
]
op576.group.device = cuda:0
op576.group.iteration = (2097152, 1)
op576.sizes = ([2, 16, 1024, 64], [])
buf573_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg374_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf576_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op576_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf573', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg374_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf576', get_index_2, add, None)
        return store
op576 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op577: SchedulerNode(ComputedBuffer)
op577.writes = [MemoryDep('buf577', c0, {c0: 2097152}, None)]
op577.unmet_dependencies = [   MemoryDep('buf574', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op577.met_dependencies = [MemoryDep('arg376_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op577.outputs = [
    buf577: ComputedBuffer
    buf577.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf577.users = [NodeUser(node=ExternKernelSchedulerNode(name='op578'), can_inplace=False, is_weak=False)]
]
op577.group.device = cuda:0
op577.group.iteration = (2097152, 1)
op577.sizes = ([2, 16, 1024, 64], [])
buf574_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg376_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf577_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op577_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf574', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg376_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf577', get_index_2, add, None)
        return store
op577 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op578: ExternKernelSchedulerNode(FallbackKernel)
op578.writes = [StarDep(name='buf578', mode=None)]
op578.unmet_dependencies = 
    [   StarDep(name='buf575', mode=None),
        StarDep(name='buf576', mode=None),
        StarDep(name='buf577', mode=None)]
op578.met_dependencies = []
op578.outputs = [
    buf578: FallbackKernel
    buf578.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf578.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op579'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op580'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op581'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op582'), can_inplace=False, is_weak=False),
    ]
]
op578.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op579: ExternKernelSchedulerNode(MultiOutput)
op579.writes = [StarDep(name='buf579', mode=None)]
op579.unmet_dependencies = [StarDep(name='buf578', mode=None)]
op579.met_dependencies = []
op579.outputs = [
    buf579: MultiOutput
    buf579.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf579.users = [NodeUser(node=ExternKernelSchedulerNode(name='op583'), can_inplace=False, is_weak=False)]
]
op579.node.kernel = None


op583: ExternKernelSchedulerNode(ExternKernelOut)
op583.writes = [StarDep(name='buf583', mode=None)]
op583.unmet_dependencies = [StarDep(name='buf579', mode=None)]
op583.met_dependencies = [StarDep(name='arg377_1', mode=None)]
op583.outputs = [
    buf583: ExternKernelOut
    buf583.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf583.users = [NodeUser(node=SchedulerNode(name='op584'), can_inplace=True, is_weak=False)]
]
op583.node.kernel = extern_kernels.mm


op584_op585_op586_op588: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op584_op585_op586_op588.writes = 
    [   MemoryDep('buf584', c0, {c0: 2097152}, None),
        MemoryDep('buf585', c0, {c0: 2048}, None),
        MemoryDep('buf586', c0, {c0: 2048}, None),
        MemoryDep('buf588', c0, {c0: 2097152}, None)]
op584_op585_op586_op588.unmet_dependencies = 
    [   MemoryDep('buf550', c0, {c0: 2097152}, None),
        MemoryDep('buf567', c0, {c0: 2097152}, None),
        MemoryDep('buf583', c0, {c0: 2097152}, None)]
op584_op585_op586_op588.met_dependencies = 
    [   MemoryDep('arg368_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg378_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg379_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg380_1', c1, {c0: 2048, c1: 1024}, None)]
op584_op585_op586_op588.outputs = [
    buf584: ComputedBuffer
    buf584.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf584.users = [
        NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op586'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op593'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op595'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op609'), can_inplace=True, is_weak=False),
    ]
    buf585: ComputedBuffer
    buf585.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf585.users = [NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False)]
    buf586: ComputedBuffer
    buf586.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf586.users = [NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False)]
    buf588: ComputedBuffer
    buf588.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf588.users = [NodeUser(node=ExternKernelSchedulerNode(name='op589'), can_inplace=False, is_weak=False)]
]
op584_op585_op586_op588.snodes[0] =
op584: SchedulerNode(ComputedBuffer)
op584.writes = [MemoryDep('buf584', c0, {c0: 2097152}, None)]
op584.unmet_dependencies = 
    [   MemoryDep('buf550', c0, {c0: 2097152}, None),
        MemoryDep('buf567', c0, {c0: 2097152}, None),
        MemoryDep('buf583', c0, {c0: 2097152}, None)]
op584.met_dependencies = 
    [   MemoryDep('arg368_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg378_1', c1, {c0: 2048, c1: 1024}, None)]
op584.outputs = [
    buf584: ComputedBuffer
    buf584.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf584.users = [
        NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op586'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op593'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op595'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op609'), can_inplace=True, is_weak=False),
    ]
]
op584.group.device = cuda:0
op584.group.iteration = (2097152, 1)
op584.sizes = ([2048, 1024], [])
buf550_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf567_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf583_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg378_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf584_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op584_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf550', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf567', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg368_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf583', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg378_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf584', get_index_5, add_3, None)
        return store
op584 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op584_op585_op586_op588.snodes[1] =
op585: SchedulerNode(ComputedBuffer)
op585.writes = [MemoryDep('buf585', c0, {c0: 2048}, None)]
op585.unmet_dependencies = [MemoryDep('buf584', c0, {c0: 2097152}, None)]
op585.met_dependencies = []
op585.outputs = [
    buf585: ComputedBuffer
    buf585.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf585.users = [NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False)]
]
op585.group.device = cuda:0
op585.group.iteration = (2048, 1024)
op585.sizes = ([2048], [1024])
buf584_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op585_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf584', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf585', get_index_1, getitem)
        return store_reduction
op585 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op584_op585_op586_op588.snodes[2] =
op586: SchedulerNode(ComputedBuffer)
op586.writes = [MemoryDep('buf586', c0, {c0: 2048}, None)]
op586.unmet_dependencies = [MemoryDep('buf584', c0, {c0: 2097152}, None)]
op586.met_dependencies = []
op586.outputs = [
    buf586: ComputedBuffer
    buf586.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf586.users = [NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False)]
]
op586.group.device = cuda:0
op586.group.iteration = (2048, 1024)
op586.sizes = ([2048], [1024])
buf584_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf586_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op586_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf584', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf586', get_index_1, getitem_1)
        return store_reduction
op586 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op584_op585_op586_op588.snodes[3] =
op588: SchedulerNode(ComputedBuffer)
op588.writes = [MemoryDep('buf588', c0, {c0: 2097152}, None)]
op588.unmet_dependencies = 
    [   MemoryDep('buf584', c0, {c0: 2097152}, None),
        MemoryDep('buf585', c0, {c0: 2048}, None),
        MemoryDep('buf586', c0, {c0: 2048}, None)]
op588.met_dependencies = 
    [   MemoryDep('arg379_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg380_1', c1, {c0: 2048, c1: 1024}, None)]
op588.outputs = [
    buf588: ComputedBuffer
    buf588.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf588.users = [NodeUser(node=ExternKernelSchedulerNode(name='op589'), can_inplace=False, is_weak=False)]
]
op588.group.device = cuda:0
op588.group.iteration = (2097152, 1)
op588.sizes = ([2048, 1024], [])
buf584_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf586_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg379_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg380_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf588_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op588_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf584', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf585', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf586', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg379_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg380_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf588', get_index_5, add_1, None)
        return store
op588 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op584_op585_op586_op588 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op589: ExternKernelSchedulerNode(ExternKernelOut)
op589.writes = [StarDep(name='buf589', mode=None)]
op589.unmet_dependencies = [StarDep(name='buf588', mode=None)]
op589.met_dependencies = [StarDep(name='arg381_1', mode=None)]
op589.outputs = [
    buf589: ExternKernelOut
    buf589.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf589.users = [NodeUser(node=SchedulerNode(name='op590'), can_inplace=True, is_weak=False)]
]
op589.node.kernel = extern_kernels.mm


op590: SchedulerNode(ComputedBuffer)
op590.writes = [MemoryDep('buf590', c0, {c0: 8388608}, None)]
op590.unmet_dependencies = [MemoryDep('buf589', c0, {c0: 8388608}, None)]
op590.met_dependencies = [MemoryDep('arg382_1', c1, {c0: 2048, c1: 4096}, None)]
op590.outputs = [
    buf590: ComputedBuffer
    buf590.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf590.users = [NodeUser(node=ExternKernelSchedulerNode(name='op591'), can_inplace=False, is_weak=False)]
]
op590.group.device = cuda:0
op590.group.iteration = (8388608, 1)
op590.sizes = ([2048, 4096], [])
buf589_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg382_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf590_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op590_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf589', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg382_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf589', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg382_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf590', get_index_4, mul_2, None)
        return store
op590 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op591: ExternKernelSchedulerNode(ExternKernelOut)
op591.writes = [StarDep(name='buf591', mode=None)]
op591.unmet_dependencies = [StarDep(name='buf590', mode=None)]
op591.met_dependencies = [StarDep(name='arg383_1', mode=None)]
op591.outputs = [
    buf591: ExternKernelOut
    buf591.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf591.users = [
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op593'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op595'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op609'), can_inplace=True, is_weak=False),
    ]
]
op591.node.kernel = extern_kernels.mm


op592_op593_op595: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op592_op593_op595.writes = 
    [   MemoryDep('buf592', c0, {c0: 2048}, None),
        MemoryDep('buf593', c0, {c0: 2048}, None),
        MemoryDep('buf595', c0, {c0: 2097152}, None)]
op592_op593_op595.unmet_dependencies = 
    [   MemoryDep('buf584', c0, {c0: 2097152}, None),
        MemoryDep('buf591', c0, {c0: 2097152}, None)]
op592_op593_op595.met_dependencies = 
    [   MemoryDep('arg384_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg385_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg386_1', c1, {c0: 2048, c1: 1024}, None)]
op592_op593_op595.outputs = [
    buf592: ComputedBuffer
    buf592.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf592.users = [NodeUser(node=SchedulerNode(name='op595'), can_inplace=False, is_weak=False)]
    buf593: ComputedBuffer
    buf593.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf593.users = [NodeUser(node=SchedulerNode(name='op595'), can_inplace=False, is_weak=False)]
    buf595: ComputedBuffer
    buf595.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf595.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op598'), can_inplace=False, is_weak=False),
    ]
]
op592_op593_op595.snodes[0] =
op592: SchedulerNode(ComputedBuffer)
op592.writes = [MemoryDep('buf592', c0, {c0: 2048}, None)]
op592.unmet_dependencies = 
    [   MemoryDep('buf584', c0, {c0: 2097152}, None),
        MemoryDep('buf591', c0, {c0: 2097152}, None)]
op592.met_dependencies = [MemoryDep('arg384_1', c1, {c0: 2048, c1: 1024}, None)]
op592.outputs = [
    buf592: ComputedBuffer
    buf592.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf592.users = [NodeUser(node=SchedulerNode(name='op595'), can_inplace=False, is_weak=False)]
]
op592.group.device = cuda:0
op592.group.iteration = (2048, 1024)
op592.sizes = ([2048], [1024])
buf584_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf591_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg384_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf592_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op592_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf584', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf591', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg384_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf592', get_index_3, getitem)
        return store_reduction
op592 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op592_op593_op595.snodes[1] =
op593: SchedulerNode(ComputedBuffer)
op593.writes = [MemoryDep('buf593', c0, {c0: 2048}, None)]
op593.unmet_dependencies = 
    [   MemoryDep('buf584', c0, {c0: 2097152}, None),
        MemoryDep('buf591', c0, {c0: 2097152}, None)]
op593.met_dependencies = [MemoryDep('arg384_1', c1, {c0: 2048, c1: 1024}, None)]
op593.outputs = [
    buf593: ComputedBuffer
    buf593.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf593.users = [NodeUser(node=SchedulerNode(name='op595'), can_inplace=False, is_weak=False)]
]
op593.group.device = cuda:0
op593.group.iteration = (2048, 1024)
op593.sizes = ([2048], [1024])
buf584_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf591_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg384_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf593_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op593_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf584', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf591', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg384_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf593', get_index_3, getitem_1)
        return store_reduction
op593 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op592_op593_op595.snodes[2] =
op595: SchedulerNode(ComputedBuffer)
op595.writes = [MemoryDep('buf595', c0, {c0: 2097152}, None)]
op595.unmet_dependencies = 
    [   MemoryDep('buf584', c0, {c0: 2097152}, None),
        MemoryDep('buf591', c0, {c0: 2097152}, None),
        MemoryDep('buf592', c0, {c0: 2048}, None),
        MemoryDep('buf593', c0, {c0: 2048}, None)]
op595.met_dependencies = 
    [   MemoryDep('arg384_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg385_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg386_1', c1, {c0: 2048, c1: 1024}, None)]
op595.outputs = [
    buf595: ComputedBuffer
    buf595.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf595.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op598'), can_inplace=False, is_weak=False),
    ]
]
op595.group.device = cuda:0
op595.group.iteration = (2097152, 1)
op595.sizes = ([2048, 1024], [])
buf584_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf591_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg384_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf592_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf593_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg385_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg386_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf595_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op595_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf584', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf591', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg384_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf592', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf593', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg385_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg386_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf595', get_index_7, add_3, None)
        return store
op595 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op592_op593_op595 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op596: ExternKernelSchedulerNode(ExternKernelOut)
op596.writes = [StarDep(name='buf596', mode=None)]
op596.unmet_dependencies = [StarDep(name='buf595', mode=None)]
op596.met_dependencies = [StarDep(name='arg387_1', mode=None)]
op596.outputs = [
    buf596: ExternKernelOut
    buf596.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf596.users = [NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False)]
]
op596.node.kernel = extern_kernels.mm


op597: ExternKernelSchedulerNode(ExternKernelOut)
op597.writes = [StarDep(name='buf597', mode=None)]
op597.unmet_dependencies = [StarDep(name='buf595', mode=None)]
op597.met_dependencies = [StarDep(name='arg389_1', mode=None)]
op597.outputs = [
    buf597: ExternKernelOut
    buf597.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf597.users = [NodeUser(node=SchedulerNode(name='op600'), can_inplace=False, is_weak=False)]
]
op597.node.kernel = extern_kernels.mm


op598: ExternKernelSchedulerNode(ExternKernelOut)
op598.writes = [StarDep(name='buf598', mode=None)]
op598.unmet_dependencies = [StarDep(name='buf595', mode=None)]
op598.met_dependencies = [StarDep(name='arg391_1', mode=None)]
op598.outputs = [
    buf598: ExternKernelOut
    buf598.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf598.users = [NodeUser(node=SchedulerNode(name='op601'), can_inplace=False, is_weak=False)]
]
op598.node.kernel = extern_kernels.mm


op599: SchedulerNode(ComputedBuffer)
op599.writes = [MemoryDep('buf599', c0, {c0: 2097152}, None)]
op599.unmet_dependencies = [   MemoryDep('buf596', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op599.met_dependencies = [MemoryDep('arg388_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op599.outputs = [
    buf599: ComputedBuffer
    buf599.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf599.users = [NodeUser(node=ExternKernelSchedulerNode(name='op603'), can_inplace=False, is_weak=False)]
]
op599.group.device = cuda:0
op599.group.iteration = (2097152, 1)
op599.sizes = ([2, 16, 1024, 64], [])
buf596_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg388_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf599_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op599_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf596', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg388_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf599', get_index_2, add, None)
        return store
op599 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op600: SchedulerNode(ComputedBuffer)
op600.writes = [MemoryDep('buf600', c0, {c0: 2097152}, None)]
op600.unmet_dependencies = [   MemoryDep('buf597', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op600.met_dependencies = [MemoryDep('arg390_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op600.outputs = [
    buf600: ComputedBuffer
    buf600.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf600.users = [NodeUser(node=ExternKernelSchedulerNode(name='op603'), can_inplace=False, is_weak=False)]
]
op600.group.device = cuda:0
op600.group.iteration = (2097152, 1)
op600.sizes = ([2, 16, 1024, 64], [])
buf597_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg390_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf600_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op600_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf597', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg390_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf600', get_index_2, add, None)
        return store
op600 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op601: SchedulerNode(ComputedBuffer)
op601.writes = [MemoryDep('buf601', c0, {c0: 2097152}, None)]
op601.unmet_dependencies = [   MemoryDep('buf598', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op601.met_dependencies = [MemoryDep('arg392_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op601.outputs = [
    buf601: ComputedBuffer
    buf601.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf601.users = [NodeUser(node=ExternKernelSchedulerNode(name='op603'), can_inplace=False, is_weak=False)]
]
op601.group.device = cuda:0
op601.group.iteration = (2097152, 1)
op601.sizes = ([2, 16, 1024, 64], [])
buf598_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg392_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf601_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op601_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf598', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg392_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf601', get_index_2, add, None)
        return store
op601 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op602: SchedulerNode(ComputedBuffer)
op602.writes = [MemoryDep('buf602', c0, {c0: 33554432}, None)]
op602.unmet_dependencies = []
op602.met_dependencies = []
op602.outputs = [
    buf602: ComputedBuffer
    buf602.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
    buf602.users = [NodeUser(node=ExternKernelSchedulerNode(name='op603'), can_inplace=False, is_weak=False)]
]
op602.group.device = cuda:0
op602.group.iteration = (33554432, 1)
op602.sizes = ([32, 1024, 1024], [])
buf602_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
class op602_loop_body:
    var_ranges = {z0: 32, z1: 1024, z2: 1024}
    index0 = z2
    index1 = z1 + 1
    index2 = 1048576*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf602', get_index_2, where, None)
        return store
op602 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op603: ExternKernelSchedulerNode(FallbackKernel)
op603.writes = [StarDep(name='buf603', mode=None)]
op603.unmet_dependencies = 
    [   StarDep(name='buf599', mode=None),
        StarDep(name='buf600', mode=None),
        StarDep(name='buf601', mode=None),
        StarDep(name='buf602', mode=None)]
op603.met_dependencies = []
op603.outputs = [
    buf603: FallbackKernel
    buf603.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf603.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op604'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op605'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op606'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op607'), can_inplace=False, is_weak=False),
    ]
]
op603.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op604: ExternKernelSchedulerNode(MultiOutput)
op604.writes = [StarDep(name='buf604', mode=None)]
op604.unmet_dependencies = [StarDep(name='buf603', mode=None)]
op604.met_dependencies = []
op604.outputs = [
    buf604: MultiOutput
    buf604.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf604.users = [NodeUser(node=ExternKernelSchedulerNode(name='op608'), can_inplace=False, is_weak=False)]
]
op604.node.kernel = None


op608: ExternKernelSchedulerNode(ExternKernelOut)
op608.writes = [StarDep(name='buf608', mode=None)]
op608.unmet_dependencies = [StarDep(name='buf604', mode=None)]
op608.met_dependencies = [StarDep(name='arg393_1', mode=None)]
op608.outputs = [
    buf608: ExternKernelOut
    buf608.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf608.users = [NodeUser(node=SchedulerNode(name='op609'), can_inplace=True, is_weak=False)]
]
op608.node.kernel = extern_kernels.mm


op609_op610_op611_op613: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op609_op610_op611_op613.writes = 
    [   MemoryDep('buf609', c0, {c0: 2097152}, None),
        MemoryDep('buf610', c0, {c0: 2048}, None),
        MemoryDep('buf611', c0, {c0: 2048}, None),
        MemoryDep('buf613', c0, {c0: 2097152}, None)]
op609_op610_op611_op613.unmet_dependencies = 
    [   MemoryDep('buf584', c0, {c0: 2097152}, None),
        MemoryDep('buf591', c0, {c0: 2097152}, None),
        MemoryDep('buf608', c0, {c0: 2097152}, None)]
op609_op610_op611_op613.met_dependencies = 
    [   MemoryDep('arg384_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg394_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg395_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg396_1', c1, {c0: 2048, c1: 1024}, None)]
op609_op610_op611_op613.outputs = [
    buf609: ComputedBuffer
    buf609.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf609.users = [
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op611'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op612'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op613'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op626'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op627'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op629'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op633'), can_inplace=True, is_weak=False),
    ]
    buf610: ComputedBuffer
    buf610.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf610.users = [NodeUser(node=SchedulerNode(name='op613'), can_inplace=False, is_weak=False)]
    buf611: ComputedBuffer
    buf611.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf611.users = [NodeUser(node=SchedulerNode(name='op613'), can_inplace=False, is_weak=False)]
    buf613: ComputedBuffer
    buf613.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf613.users = [NodeUser(node=ExternKernelSchedulerNode(name='op614'), can_inplace=False, is_weak=False)]
]
op609_op610_op611_op613.snodes[0] =
op609: SchedulerNode(ComputedBuffer)
op609.writes = [MemoryDep('buf609', c0, {c0: 2097152}, None)]
op609.unmet_dependencies = 
    [   MemoryDep('buf584', c0, {c0: 2097152}, None),
        MemoryDep('buf591', c0, {c0: 2097152}, None),
        MemoryDep('buf608', c0, {c0: 2097152}, None)]
op609.met_dependencies = 
    [   MemoryDep('arg384_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg394_1', c1, {c0: 2048, c1: 1024}, None)]
op609.outputs = [
    buf609: ComputedBuffer
    buf609.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf609.users = [
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op611'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op612'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op613'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op626'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op627'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op629'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op633'), can_inplace=True, is_weak=False),
    ]
]
op609.group.device = cuda:0
op609.group.iteration = (2097152, 1)
op609.sizes = ([2048, 1024], [])
buf584_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf591_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg384_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf608_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg394_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf609_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op609_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf584', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf591', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg384_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf608', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg394_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf609', get_index_5, add_3, None)
        return store
op609 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op609_op610_op611_op613.snodes[1] =
op610: SchedulerNode(ComputedBuffer)
op610.writes = [MemoryDep('buf610', c0, {c0: 2048}, None)]
op610.unmet_dependencies = [MemoryDep('buf609', c0, {c0: 2097152}, None)]
op610.met_dependencies = []
op610.outputs = [
    buf610: ComputedBuffer
    buf610.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf610.users = [NodeUser(node=SchedulerNode(name='op613'), can_inplace=False, is_weak=False)]
]
op610.group.device = cuda:0
op610.group.iteration = (2048, 1024)
op610.sizes = ([2048], [1024])
buf609_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf610_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op610_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf609', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf610', get_index_1, getitem)
        return store_reduction
op610 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op609_op610_op611_op613.snodes[2] =
op611: SchedulerNode(ComputedBuffer)
op611.writes = [MemoryDep('buf611', c0, {c0: 2048}, None)]
op611.unmet_dependencies = [MemoryDep('buf609', c0, {c0: 2097152}, None)]
op611.met_dependencies = []
op611.outputs = [
    buf611: ComputedBuffer
    buf611.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf611.users = [NodeUser(node=SchedulerNode(name='op613'), can_inplace=False, is_weak=False)]
]
op611.group.device = cuda:0
op611.group.iteration = (2048, 1024)
op611.sizes = ([2048], [1024])
buf609_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf611_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op611_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf609', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf611', get_index_1, getitem_1)
        return store_reduction
op611 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op609_op610_op611_op613.snodes[3] =
op613: SchedulerNode(ComputedBuffer)
op613.writes = [MemoryDep('buf613', c0, {c0: 2097152}, None)]
op613.unmet_dependencies = 
    [   MemoryDep('buf609', c0, {c0: 2097152}, None),
        MemoryDep('buf610', c0, {c0: 2048}, None),
        MemoryDep('buf611', c0, {c0: 2048}, None)]
op613.met_dependencies = 
    [   MemoryDep('arg395_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg396_1', c1, {c0: 2048, c1: 1024}, None)]
op613.outputs = [
    buf613: ComputedBuffer
    buf613.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf613.users = [NodeUser(node=ExternKernelSchedulerNode(name='op614'), can_inplace=False, is_weak=False)]
]
op613.group.device = cuda:0
op613.group.iteration = (2097152, 1)
op613.sizes = ([2048, 1024], [])
buf609_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf610_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf611_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg395_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg396_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf613_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op613_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf609', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf610', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf611', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg395_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg396_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf613', get_index_5, add_1, None)
        return store
op613 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op609_op610_op611_op613 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op614: ExternKernelSchedulerNode(ExternKernelOut)
op614.writes = [StarDep(name='buf614', mode=None)]
op614.unmet_dependencies = [StarDep(name='buf613', mode=None)]
op614.met_dependencies = [StarDep(name='arg397_1', mode=None)]
op614.outputs = [
    buf614: ExternKernelOut
    buf614.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf614.users = [NodeUser(node=SchedulerNode(name='op617'), can_inplace=False, is_weak=False)]
]
op614.node.kernel = extern_kernels.mm


op615: ExternKernelSchedulerNode(ExternKernelOut)
op615.writes = [StarDep(name='buf615', mode=None)]
op615.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op615.met_dependencies = [StarDep(name='arg399_1', mode=None)]
op615.outputs = [
    buf615: ExternKernelOut
    buf615.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf615.users = [NodeUser(node=SchedulerNode(name='op618'), can_inplace=False, is_weak=False)]
]
op615.node.kernel = extern_kernels.mm


op616: ExternKernelSchedulerNode(ExternKernelOut)
op616.writes = [StarDep(name='buf616', mode=None)]
op616.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op616.met_dependencies = [StarDep(name='arg401_1', mode=None)]
op616.outputs = [
    buf616: ExternKernelOut
    buf616.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf616.users = [NodeUser(node=SchedulerNode(name='op619'), can_inplace=False, is_weak=False)]
]
op616.node.kernel = extern_kernels.mm


op617: SchedulerNode(ComputedBuffer)
op617.writes = [MemoryDep('buf617', c0, {c0: 2097152}, None)]
op617.unmet_dependencies = [   MemoryDep('buf614', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op617.met_dependencies = [MemoryDep('arg398_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op617.outputs = [
    buf617: ComputedBuffer
    buf617.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf617.users = [NodeUser(node=ExternKernelSchedulerNode(name='op620'), can_inplace=False, is_weak=False)]
]
op617.group.device = cuda:0
op617.group.iteration = (2097152, 1)
op617.sizes = ([2, 16, 1024, 64], [])
buf614_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg398_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf617_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op617_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf614', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg398_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf617', get_index_2, add, None)
        return store
op617 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op618: SchedulerNode(ComputedBuffer)
op618.writes = [MemoryDep('buf618', c0, {c0: 2097152}, None)]
op618.unmet_dependencies = [   MemoryDep('buf615', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op618.met_dependencies = [MemoryDep('arg400_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op618.outputs = [
    buf618: ComputedBuffer
    buf618.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf618.users = [NodeUser(node=ExternKernelSchedulerNode(name='op620'), can_inplace=False, is_weak=False)]
]
op618.group.device = cuda:0
op618.group.iteration = (2097152, 1)
op618.sizes = ([2, 16, 1024, 64], [])
buf615_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg400_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf618_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op618_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf615', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg400_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf618', get_index_2, add, None)
        return store
op618 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op619: SchedulerNode(ComputedBuffer)
op619.writes = [MemoryDep('buf619', c0, {c0: 2097152}, None)]
op619.unmet_dependencies = [   MemoryDep('buf616', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op619.met_dependencies = [MemoryDep('arg402_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op619.outputs = [
    buf619: ComputedBuffer
    buf619.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf619.users = [NodeUser(node=ExternKernelSchedulerNode(name='op620'), can_inplace=False, is_weak=False)]
]
op619.group.device = cuda:0
op619.group.iteration = (2097152, 1)
op619.sizes = ([2, 16, 1024, 64], [])
buf616_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg402_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf619_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op619_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf616', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg402_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf619', get_index_2, add, None)
        return store
op619 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op620: ExternKernelSchedulerNode(FallbackKernel)
op620.writes = [StarDep(name='buf620', mode=None)]
op620.unmet_dependencies = 
    [   StarDep(name='buf617', mode=None),
        StarDep(name='buf618', mode=None),
        StarDep(name='buf619', mode=None)]
op620.met_dependencies = []
op620.outputs = [
    buf620: FallbackKernel
    buf620.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf620.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op621'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op622'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op623'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op624'), can_inplace=False, is_weak=False),
    ]
]
op620.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op621: ExternKernelSchedulerNode(MultiOutput)
op621.writes = [StarDep(name='buf621', mode=None)]
op621.unmet_dependencies = [StarDep(name='buf620', mode=None)]
op621.met_dependencies = []
op621.outputs = [
    buf621: MultiOutput
    buf621.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf621.users = [NodeUser(node=ExternKernelSchedulerNode(name='op625'), can_inplace=False, is_weak=False)]
]
op621.node.kernel = None


op625: ExternKernelSchedulerNode(ExternKernelOut)
op625.writes = [StarDep(name='buf625', mode=None)]
op625.unmet_dependencies = [StarDep(name='buf621', mode=None)]
op625.met_dependencies = [StarDep(name='arg403_1', mode=None)]
op625.outputs = [
    buf625: ExternKernelOut
    buf625.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf625.users = [
        NodeUser(node=SchedulerNode(name='op626'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op627'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op629'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op633'), can_inplace=True, is_weak=False),
    ]
]
op625.node.kernel = extern_kernels.mm


op626_op627_op629: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op626_op627_op629.writes = 
    [   MemoryDep('buf626', c0, {c0: 2048}, None),
        MemoryDep('buf627', c0, {c0: 2048}, None),
        MemoryDep('buf629', c0, {c0: 2097152}, None)]
op626_op627_op629.unmet_dependencies = 
    [   MemoryDep('buf609', c0, {c0: 2097152}, None),
        MemoryDep('buf625', c0, {c0: 2097152}, None)]
op626_op627_op629.met_dependencies = 
    [   MemoryDep('arg404_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg405_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg406_1', c1, {c0: 2048, c1: 1024}, None)]
op626_op627_op629.outputs = [
    buf626: ComputedBuffer
    buf626.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf626.users = [NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False)]
    buf627: ComputedBuffer
    buf627.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf627.users = [NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False)]
    buf629: ComputedBuffer
    buf629.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf629.users = [NodeUser(node=ExternKernelSchedulerNode(name='op630'), can_inplace=False, is_weak=False)]
]
op626_op627_op629.snodes[0] =
op626: SchedulerNode(ComputedBuffer)
op626.writes = [MemoryDep('buf626', c0, {c0: 2048}, None)]
op626.unmet_dependencies = 
    [   MemoryDep('buf609', c0, {c0: 2097152}, None),
        MemoryDep('buf625', c0, {c0: 2097152}, None)]
op626.met_dependencies = [MemoryDep('arg404_1', c1, {c0: 2048, c1: 1024}, None)]
op626.outputs = [
    buf626: ComputedBuffer
    buf626.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf626.users = [NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False)]
]
op626.group.device = cuda:0
op626.group.iteration = (2048, 1024)
op626.sizes = ([2048], [1024])
buf609_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf625_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg404_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf626_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op626_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf609', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf625', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg404_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf626', get_index_3, getitem)
        return store_reduction
op626 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op626_op627_op629.snodes[1] =
op627: SchedulerNode(ComputedBuffer)
op627.writes = [MemoryDep('buf627', c0, {c0: 2048}, None)]
op627.unmet_dependencies = 
    [   MemoryDep('buf609', c0, {c0: 2097152}, None),
        MemoryDep('buf625', c0, {c0: 2097152}, None)]
op627.met_dependencies = [MemoryDep('arg404_1', c1, {c0: 2048, c1: 1024}, None)]
op627.outputs = [
    buf627: ComputedBuffer
    buf627.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf627.users = [NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False)]
]
op627.group.device = cuda:0
op627.group.iteration = (2048, 1024)
op627.sizes = ([2048], [1024])
buf609_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf625_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg404_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf627_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op627_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf609', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf625', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg404_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf627', get_index_3, getitem_1)
        return store_reduction
op627 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op626_op627_op629.snodes[2] =
op629: SchedulerNode(ComputedBuffer)
op629.writes = [MemoryDep('buf629', c0, {c0: 2097152}, None)]
op629.unmet_dependencies = 
    [   MemoryDep('buf609', c0, {c0: 2097152}, None),
        MemoryDep('buf625', c0, {c0: 2097152}, None),
        MemoryDep('buf626', c0, {c0: 2048}, None),
        MemoryDep('buf627', c0, {c0: 2048}, None)]
op629.met_dependencies = 
    [   MemoryDep('arg404_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg405_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg406_1', c1, {c0: 2048, c1: 1024}, None)]
op629.outputs = [
    buf629: ComputedBuffer
    buf629.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf629.users = [NodeUser(node=ExternKernelSchedulerNode(name='op630'), can_inplace=False, is_weak=False)]
]
op629.group.device = cuda:0
op629.group.iteration = (2097152, 1)
op629.sizes = ([2048, 1024], [])
buf609_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf625_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg404_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf626_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf627_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg405_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg406_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf629_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op629_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf609', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf625', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg404_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf626', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf627', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg405_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg406_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf629', get_index_7, add_3, None)
        return store
op629 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op626_op627_op629 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op630: ExternKernelSchedulerNode(ExternKernelOut)
op630.writes = [StarDep(name='buf630', mode=None)]
op630.unmet_dependencies = [StarDep(name='buf629', mode=None)]
op630.met_dependencies = [StarDep(name='arg407_1', mode=None)]
op630.outputs = [
    buf630: ExternKernelOut
    buf630.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf630.users = [NodeUser(node=SchedulerNode(name='op631'), can_inplace=True, is_weak=False)]
]
op630.node.kernel = extern_kernels.mm


op631: SchedulerNode(ComputedBuffer)
op631.writes = [MemoryDep('buf631', c0, {c0: 8388608}, None)]
op631.unmet_dependencies = [MemoryDep('buf630', c0, {c0: 8388608}, None)]
op631.met_dependencies = [MemoryDep('arg408_1', c1, {c0: 2048, c1: 4096}, None)]
op631.outputs = [
    buf631: ComputedBuffer
    buf631.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf631.users = [NodeUser(node=ExternKernelSchedulerNode(name='op632'), can_inplace=False, is_weak=False)]
]
op631.group.device = cuda:0
op631.group.iteration = (8388608, 1)
op631.sizes = ([2048, 4096], [])
buf630_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg408_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf631_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op631_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf630', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg408_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf630', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg408_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf631', get_index_4, mul_2, None)
        return store
op631 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op632: ExternKernelSchedulerNode(ExternKernelOut)
op632.writes = [StarDep(name='buf632', mode=None)]
op632.unmet_dependencies = [StarDep(name='buf631', mode=None)]
op632.met_dependencies = [StarDep(name='arg409_1', mode=None)]
op632.outputs = [
    buf632: ExternKernelOut
    buf632.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf632.users = [NodeUser(node=SchedulerNode(name='op633'), can_inplace=True, is_weak=False)]
]
op632.node.kernel = extern_kernels.mm


op633_op634_op635_op637: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op633_op634_op635_op637.writes = 
    [   MemoryDep('buf633', c0, {c0: 2097152}, None),
        MemoryDep('buf634', c0, {c0: 2048}, None),
        MemoryDep('buf635', c0, {c0: 2048}, None),
        MemoryDep('buf637', c0, {c0: 2097152}, None)]
op633_op634_op635_op637.unmet_dependencies = 
    [   MemoryDep('buf609', c0, {c0: 2097152}, None),
        MemoryDep('buf625', c0, {c0: 2097152}, None),
        MemoryDep('buf632', c0, {c0: 2097152}, None)]
op633_op634_op635_op637.met_dependencies = 
    [   MemoryDep('arg404_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg410_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg411_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg412_1', c1, {c0: 2048, c1: 1024}, None)]
op633_op634_op635_op637.outputs = [
    buf633: ComputedBuffer
    buf633.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf633.users = [
        NodeUser(node=SchedulerNode(name='op634'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op635'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op636'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op637'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op651'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op652'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op667'), can_inplace=True, is_weak=False),
    ]
    buf634: ComputedBuffer
    buf634.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf634.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False)]
    buf635: ComputedBuffer
    buf635.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf635.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False)]
    buf637: ComputedBuffer
    buf637.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf637.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op638'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op639'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op640'), can_inplace=False, is_weak=False),
    ]
]
op633_op634_op635_op637.snodes[0] =
op633: SchedulerNode(ComputedBuffer)
op633.writes = [MemoryDep('buf633', c0, {c0: 2097152}, None)]
op633.unmet_dependencies = 
    [   MemoryDep('buf609', c0, {c0: 2097152}, None),
        MemoryDep('buf625', c0, {c0: 2097152}, None),
        MemoryDep('buf632', c0, {c0: 2097152}, None)]
op633.met_dependencies = 
    [   MemoryDep('arg404_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg410_1', c1, {c0: 2048, c1: 1024}, None)]
op633.outputs = [
    buf633: ComputedBuffer
    buf633.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf633.users = [
        NodeUser(node=SchedulerNode(name='op634'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op635'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op636'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op637'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op651'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op652'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op667'), can_inplace=True, is_weak=False),
    ]
]
op633.group.device = cuda:0
op633.group.iteration = (2097152, 1)
op633.sizes = ([2048, 1024], [])
buf609_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf625_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg404_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf632_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg410_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf633_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op633_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf609', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf625', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg404_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf632', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg410_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf633', get_index_5, add_3, None)
        return store
op633 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op633_op634_op635_op637.snodes[1] =
op634: SchedulerNode(ComputedBuffer)
op634.writes = [MemoryDep('buf634', c0, {c0: 2048}, None)]
op634.unmet_dependencies = [MemoryDep('buf633', c0, {c0: 2097152}, None)]
op634.met_dependencies = []
op634.outputs = [
    buf634: ComputedBuffer
    buf634.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf634.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False)]
]
op634.group.device = cuda:0
op634.group.iteration = (2048, 1024)
op634.sizes = ([2048], [1024])
buf633_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf634_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op634_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf633', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf634', get_index_1, getitem)
        return store_reduction
op634 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op633_op634_op635_op637.snodes[2] =
op635: SchedulerNode(ComputedBuffer)
op635.writes = [MemoryDep('buf635', c0, {c0: 2048}, None)]
op635.unmet_dependencies = [MemoryDep('buf633', c0, {c0: 2097152}, None)]
op635.met_dependencies = []
op635.outputs = [
    buf635: ComputedBuffer
    buf635.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf635.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False)]
]
op635.group.device = cuda:0
op635.group.iteration = (2048, 1024)
op635.sizes = ([2048], [1024])
buf633_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf635_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op635_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf633', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf635', get_index_1, getitem_1)
        return store_reduction
op635 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op633_op634_op635_op637.snodes[3] =
op637: SchedulerNode(ComputedBuffer)
op637.writes = [MemoryDep('buf637', c0, {c0: 2097152}, None)]
op637.unmet_dependencies = 
    [   MemoryDep('buf633', c0, {c0: 2097152}, None),
        MemoryDep('buf634', c0, {c0: 2048}, None),
        MemoryDep('buf635', c0, {c0: 2048}, None)]
op637.met_dependencies = 
    [   MemoryDep('arg411_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg412_1', c1, {c0: 2048, c1: 1024}, None)]
op637.outputs = [
    buf637: ComputedBuffer
    buf637.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf637.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op638'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op639'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op640'), can_inplace=False, is_weak=False),
    ]
]
op637.group.device = cuda:0
op637.group.iteration = (2097152, 1)
op637.sizes = ([2048, 1024], [])
buf633_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf634_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf635_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg411_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg412_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf637_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op637_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf633', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf634', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf635', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg411_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg412_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf637', get_index_5, add_1, None)
        return store
op637 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op633_op634_op635_op637 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op638: ExternKernelSchedulerNode(ExternKernelOut)
op638.writes = [StarDep(name='buf638', mode=None)]
op638.unmet_dependencies = [StarDep(name='buf637', mode=None)]
op638.met_dependencies = [StarDep(name='arg413_1', mode=None)]
op638.outputs = [
    buf638: ExternKernelOut
    buf638.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf638.users = [NodeUser(node=SchedulerNode(name='op641'), can_inplace=False, is_weak=False)]
]
op638.node.kernel = extern_kernels.mm


op639: ExternKernelSchedulerNode(ExternKernelOut)
op639.writes = [StarDep(name='buf639', mode=None)]
op639.unmet_dependencies = [StarDep(name='buf637', mode=None)]
op639.met_dependencies = [StarDep(name='arg415_1', mode=None)]
op639.outputs = [
    buf639: ExternKernelOut
    buf639.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf639.users = [NodeUser(node=SchedulerNode(name='op642'), can_inplace=False, is_weak=False)]
]
op639.node.kernel = extern_kernels.mm


op640: ExternKernelSchedulerNode(ExternKernelOut)
op640.writes = [StarDep(name='buf640', mode=None)]
op640.unmet_dependencies = [StarDep(name='buf637', mode=None)]
op640.met_dependencies = [StarDep(name='arg417_1', mode=None)]
op640.outputs = [
    buf640: ExternKernelOut
    buf640.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf640.users = [NodeUser(node=SchedulerNode(name='op643'), can_inplace=False, is_weak=False)]
]
op640.node.kernel = extern_kernels.mm


op641: SchedulerNode(ComputedBuffer)
op641.writes = [MemoryDep('buf641', c0, {c0: 2097152}, None)]
op641.unmet_dependencies = [   MemoryDep('buf638', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op641.met_dependencies = [MemoryDep('arg414_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op641.outputs = [
    buf641: ComputedBuffer
    buf641.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf641.users = [NodeUser(node=ExternKernelSchedulerNode(name='op645'), can_inplace=False, is_weak=False)]
]
op641.group.device = cuda:0
op641.group.iteration = (2097152, 1)
op641.sizes = ([2, 16, 1024, 64], [])
buf638_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg414_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf641_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op641_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf638', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg414_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf641', get_index_2, add, None)
        return store
op641 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op642: SchedulerNode(ComputedBuffer)
op642.writes = [MemoryDep('buf642', c0, {c0: 2097152}, None)]
op642.unmet_dependencies = [   MemoryDep('buf639', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op642.met_dependencies = [MemoryDep('arg416_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op642.outputs = [
    buf642: ComputedBuffer
    buf642.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf642.users = [NodeUser(node=ExternKernelSchedulerNode(name='op645'), can_inplace=False, is_weak=False)]
]
op642.group.device = cuda:0
op642.group.iteration = (2097152, 1)
op642.sizes = ([2, 16, 1024, 64], [])
buf639_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg416_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf642_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op642_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf639', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg416_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf642', get_index_2, add, None)
        return store
op642 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op643: SchedulerNode(ComputedBuffer)
op643.writes = [MemoryDep('buf643', c0, {c0: 2097152}, None)]
op643.unmet_dependencies = [   MemoryDep('buf640', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op643.met_dependencies = [MemoryDep('arg418_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op643.outputs = [
    buf643: ComputedBuffer
    buf643.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf643.users = [NodeUser(node=ExternKernelSchedulerNode(name='op645'), can_inplace=False, is_weak=False)]
]
op643.group.device = cuda:0
op643.group.iteration = (2097152, 1)
op643.sizes = ([2, 16, 1024, 64], [])
buf640_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg418_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf643_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op643_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf640', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg418_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf643', get_index_2, add, None)
        return store
op643 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op644: SchedulerNode(ComputedBuffer)
op644.writes = [MemoryDep('buf644', c0, {c0: 33554432}, None)]
op644.unmet_dependencies = []
op644.met_dependencies = []
op644.outputs = [
    buf644: ComputedBuffer
    buf644.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
    buf644.users = [NodeUser(node=ExternKernelSchedulerNode(name='op645'), can_inplace=False, is_weak=False)]
]
op644.group.device = cuda:0
op644.group.iteration = (33554432, 1)
op644.sizes = ([32, 1024, 1024], [])
buf644_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
class op644_loop_body:
    var_ranges = {z0: 32, z1: 1024, z2: 1024}
    index0 = z2
    index1 = z1 + 1
    index2 = 1048576*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf644', get_index_2, where, None)
        return store
op644 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op645: ExternKernelSchedulerNode(FallbackKernel)
op645.writes = [StarDep(name='buf645', mode=None)]
op645.unmet_dependencies = 
    [   StarDep(name='buf641', mode=None),
        StarDep(name='buf642', mode=None),
        StarDep(name='buf643', mode=None),
        StarDep(name='buf644', mode=None)]
op645.met_dependencies = []
op645.outputs = [
    buf645: FallbackKernel
    buf645.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf645.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op646'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op647'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op648'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op649'), can_inplace=False, is_weak=False),
    ]
]
op645.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op646: ExternKernelSchedulerNode(MultiOutput)
op646.writes = [StarDep(name='buf646', mode=None)]
op646.unmet_dependencies = [StarDep(name='buf645', mode=None)]
op646.met_dependencies = []
op646.outputs = [
    buf646: MultiOutput
    buf646.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf646.users = [NodeUser(node=ExternKernelSchedulerNode(name='op650'), can_inplace=False, is_weak=False)]
]
op646.node.kernel = None


op650: ExternKernelSchedulerNode(ExternKernelOut)
op650.writes = [StarDep(name='buf650', mode=None)]
op650.unmet_dependencies = [StarDep(name='buf646', mode=None)]
op650.met_dependencies = [StarDep(name='arg419_1', mode=None)]
op650.outputs = [
    buf650: ExternKernelOut
    buf650.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf650.users = [
        NodeUser(node=SchedulerNode(name='op651'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op652'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op667'), can_inplace=True, is_weak=False),
    ]
]
op650.node.kernel = extern_kernels.mm


op651_op652_op654: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op651_op652_op654.writes = 
    [   MemoryDep('buf651', c0, {c0: 2048}, None),
        MemoryDep('buf652', c0, {c0: 2048}, None),
        MemoryDep('buf654', c0, {c0: 2097152}, None)]
op651_op652_op654.unmet_dependencies = 
    [   MemoryDep('buf633', c0, {c0: 2097152}, None),
        MemoryDep('buf650', c0, {c0: 2097152}, None)]
op651_op652_op654.met_dependencies = 
    [   MemoryDep('arg420_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg421_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg422_1', c1, {c0: 2048, c1: 1024}, None)]
op651_op652_op654.outputs = [
    buf651: ComputedBuffer
    buf651.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf651.users = [NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False)]
    buf652: ComputedBuffer
    buf652.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf652.users = [NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False)]
    buf654: ComputedBuffer
    buf654.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf654.users = [NodeUser(node=ExternKernelSchedulerNode(name='op655'), can_inplace=False, is_weak=False)]
]
op651_op652_op654.snodes[0] =
op651: SchedulerNode(ComputedBuffer)
op651.writes = [MemoryDep('buf651', c0, {c0: 2048}, None)]
op651.unmet_dependencies = 
    [   MemoryDep('buf633', c0, {c0: 2097152}, None),
        MemoryDep('buf650', c0, {c0: 2097152}, None)]
op651.met_dependencies = [MemoryDep('arg420_1', c1, {c0: 2048, c1: 1024}, None)]
op651.outputs = [
    buf651: ComputedBuffer
    buf651.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf651.users = [NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False)]
]
op651.group.device = cuda:0
op651.group.iteration = (2048, 1024)
op651.sizes = ([2048], [1024])
buf633_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf650_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg420_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf651_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op651_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf633', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf650', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg420_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf651', get_index_3, getitem)
        return store_reduction
op651 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op651_op652_op654.snodes[1] =
op652: SchedulerNode(ComputedBuffer)
op652.writes = [MemoryDep('buf652', c0, {c0: 2048}, None)]
op652.unmet_dependencies = 
    [   MemoryDep('buf633', c0, {c0: 2097152}, None),
        MemoryDep('buf650', c0, {c0: 2097152}, None)]
op652.met_dependencies = [MemoryDep('arg420_1', c1, {c0: 2048, c1: 1024}, None)]
op652.outputs = [
    buf652: ComputedBuffer
    buf652.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf652.users = [NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False)]
]
op652.group.device = cuda:0
op652.group.iteration = (2048, 1024)
op652.sizes = ([2048], [1024])
buf633_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf650_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg420_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf652_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op652_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf633', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf650', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg420_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf652', get_index_3, getitem_1)
        return store_reduction
op652 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op651_op652_op654.snodes[2] =
op654: SchedulerNode(ComputedBuffer)
op654.writes = [MemoryDep('buf654', c0, {c0: 2097152}, None)]
op654.unmet_dependencies = 
    [   MemoryDep('buf633', c0, {c0: 2097152}, None),
        MemoryDep('buf650', c0, {c0: 2097152}, None),
        MemoryDep('buf651', c0, {c0: 2048}, None),
        MemoryDep('buf652', c0, {c0: 2048}, None)]
op654.met_dependencies = 
    [   MemoryDep('arg420_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg421_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg422_1', c1, {c0: 2048, c1: 1024}, None)]
op654.outputs = [
    buf654: ComputedBuffer
    buf654.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf654.users = [NodeUser(node=ExternKernelSchedulerNode(name='op655'), can_inplace=False, is_weak=False)]
]
op654.group.device = cuda:0
op654.group.iteration = (2097152, 1)
op654.sizes = ([2048, 1024], [])
buf633_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf650_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg420_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf651_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf652_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg421_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg422_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf654_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op654_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf633', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf650', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg420_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf651', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf652', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg421_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg422_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf654', get_index_7, add_3, None)
        return store
op654 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op651_op652_op654 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op655: ExternKernelSchedulerNode(ExternKernelOut)
op655.writes = [StarDep(name='buf655', mode=None)]
op655.unmet_dependencies = [StarDep(name='buf654', mode=None)]
op655.met_dependencies = [StarDep(name='arg423_1', mode=None)]
op655.outputs = [
    buf655: ExternKernelOut
    buf655.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf655.users = [NodeUser(node=SchedulerNode(name='op658'), can_inplace=False, is_weak=False)]
]
op655.node.kernel = extern_kernels.mm


op656: ExternKernelSchedulerNode(ExternKernelOut)
op656.writes = [StarDep(name='buf656', mode=None)]
op656.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op656.met_dependencies = [StarDep(name='arg425_1', mode=None)]
op656.outputs = [
    buf656: ExternKernelOut
    buf656.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf656.users = [NodeUser(node=SchedulerNode(name='op659'), can_inplace=False, is_weak=False)]
]
op656.node.kernel = extern_kernels.mm


op657: ExternKernelSchedulerNode(ExternKernelOut)
op657.writes = [StarDep(name='buf657', mode=None)]
op657.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op657.met_dependencies = [StarDep(name='arg427_1', mode=None)]
op657.outputs = [
    buf657: ExternKernelOut
    buf657.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf657.users = [NodeUser(node=SchedulerNode(name='op660'), can_inplace=False, is_weak=False)]
]
op657.node.kernel = extern_kernels.mm


op658: SchedulerNode(ComputedBuffer)
op658.writes = [MemoryDep('buf658', c0, {c0: 2097152}, None)]
op658.unmet_dependencies = [   MemoryDep('buf655', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op658.met_dependencies = [MemoryDep('arg424_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op658.outputs = [
    buf658: ComputedBuffer
    buf658.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf658.users = [NodeUser(node=ExternKernelSchedulerNode(name='op661'), can_inplace=False, is_weak=False)]
]
op658.group.device = cuda:0
op658.group.iteration = (2097152, 1)
op658.sizes = ([2, 16, 1024, 64], [])
buf655_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg424_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf658_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op658_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf655', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg424_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf658', get_index_2, add, None)
        return store
op658 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op659: SchedulerNode(ComputedBuffer)
op659.writes = [MemoryDep('buf659', c0, {c0: 2097152}, None)]
op659.unmet_dependencies = [   MemoryDep('buf656', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op659.met_dependencies = [MemoryDep('arg426_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op659.outputs = [
    buf659: ComputedBuffer
    buf659.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf659.users = [NodeUser(node=ExternKernelSchedulerNode(name='op661'), can_inplace=False, is_weak=False)]
]
op659.group.device = cuda:0
op659.group.iteration = (2097152, 1)
op659.sizes = ([2, 16, 1024, 64], [])
buf656_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg426_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf659_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op659_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf656', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg426_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf659', get_index_2, add, None)
        return store
op659 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op660: SchedulerNode(ComputedBuffer)
op660.writes = [MemoryDep('buf660', c0, {c0: 2097152}, None)]
op660.unmet_dependencies = [   MemoryDep('buf657', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op660.met_dependencies = [MemoryDep('arg428_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op660.outputs = [
    buf660: ComputedBuffer
    buf660.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf660.users = [NodeUser(node=ExternKernelSchedulerNode(name='op661'), can_inplace=False, is_weak=False)]
]
op660.group.device = cuda:0
op660.group.iteration = (2097152, 1)
op660.sizes = ([2, 16, 1024, 64], [])
buf657_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg428_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf660_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op660_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf657', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg428_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf660', get_index_2, add, None)
        return store
op660 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op661: ExternKernelSchedulerNode(FallbackKernel)
op661.writes = [StarDep(name='buf661', mode=None)]
op661.unmet_dependencies = 
    [   StarDep(name='buf658', mode=None),
        StarDep(name='buf659', mode=None),
        StarDep(name='buf660', mode=None)]
op661.met_dependencies = []
op661.outputs = [
    buf661: FallbackKernel
    buf661.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf661.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op662'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op663'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op664'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op665'), can_inplace=False, is_weak=False),
    ]
]
op661.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op662: ExternKernelSchedulerNode(MultiOutput)
op662.writes = [StarDep(name='buf662', mode=None)]
op662.unmet_dependencies = [StarDep(name='buf661', mode=None)]
op662.met_dependencies = []
op662.outputs = [
    buf662: MultiOutput
    buf662.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf662.users = [NodeUser(node=ExternKernelSchedulerNode(name='op666'), can_inplace=False, is_weak=False)]
]
op662.node.kernel = None


op666: ExternKernelSchedulerNode(ExternKernelOut)
op666.writes = [StarDep(name='buf666', mode=None)]
op666.unmet_dependencies = [StarDep(name='buf662', mode=None)]
op666.met_dependencies = [StarDep(name='arg429_1', mode=None)]
op666.outputs = [
    buf666: ExternKernelOut
    buf666.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf666.users = [NodeUser(node=SchedulerNode(name='op667'), can_inplace=True, is_weak=False)]
]
op666.node.kernel = extern_kernels.mm


op667_op668_op669_op671: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op667_op668_op669_op671.writes = 
    [   MemoryDep('buf667', c0, {c0: 2097152}, None),
        MemoryDep('buf668', c0, {c0: 2048}, None),
        MemoryDep('buf669', c0, {c0: 2048}, None),
        MemoryDep('buf671', c0, {c0: 2097152}, None)]
op667_op668_op669_op671.unmet_dependencies = 
    [   MemoryDep('buf633', c0, {c0: 2097152}, None),
        MemoryDep('buf650', c0, {c0: 2097152}, None),
        MemoryDep('buf666', c0, {c0: 2097152}, None)]
op667_op668_op669_op671.met_dependencies = 
    [   MemoryDep('arg420_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg430_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg431_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg432_1', c1, {c0: 2048, c1: 1024}, None)]
op667_op668_op669_op671.outputs = [
    buf667: ComputedBuffer
    buf667.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf667.users = [
        NodeUser(node=SchedulerNode(name='op668'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op669'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op670'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op671'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op675'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op676'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op677'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op678'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op692'), can_inplace=True, is_weak=False),
    ]
    buf668: ComputedBuffer
    buf668.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf668.users = [NodeUser(node=SchedulerNode(name='op671'), can_inplace=False, is_weak=False)]
    buf669: ComputedBuffer
    buf669.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf669.users = [NodeUser(node=SchedulerNode(name='op671'), can_inplace=False, is_weak=False)]
    buf671: ComputedBuffer
    buf671.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf671.users = [NodeUser(node=ExternKernelSchedulerNode(name='op672'), can_inplace=False, is_weak=False)]
]
op667_op668_op669_op671.snodes[0] =
op667: SchedulerNode(ComputedBuffer)
op667.writes = [MemoryDep('buf667', c0, {c0: 2097152}, None)]
op667.unmet_dependencies = 
    [   MemoryDep('buf633', c0, {c0: 2097152}, None),
        MemoryDep('buf650', c0, {c0: 2097152}, None),
        MemoryDep('buf666', c0, {c0: 2097152}, None)]
op667.met_dependencies = 
    [   MemoryDep('arg420_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg430_1', c1, {c0: 2048, c1: 1024}, None)]
op667.outputs = [
    buf667: ComputedBuffer
    buf667.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf667.users = [
        NodeUser(node=SchedulerNode(name='op668'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op669'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op670'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op671'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op675'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op676'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op677'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op678'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op692'), can_inplace=True, is_weak=False),
    ]
]
op667.group.device = cuda:0
op667.group.iteration = (2097152, 1)
op667.sizes = ([2048, 1024], [])
buf633_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf650_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg420_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf666_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg430_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf667_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op667_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf633', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf650', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg420_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf666', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg430_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf667', get_index_5, add_3, None)
        return store
op667 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op667_op668_op669_op671.snodes[1] =
op668: SchedulerNode(ComputedBuffer)
op668.writes = [MemoryDep('buf668', c0, {c0: 2048}, None)]
op668.unmet_dependencies = [MemoryDep('buf667', c0, {c0: 2097152}, None)]
op668.met_dependencies = []
op668.outputs = [
    buf668: ComputedBuffer
    buf668.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf668.users = [NodeUser(node=SchedulerNode(name='op671'), can_inplace=False, is_weak=False)]
]
op668.group.device = cuda:0
op668.group.iteration = (2048, 1024)
op668.sizes = ([2048], [1024])
buf667_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf668_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op668_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf667', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf668', get_index_1, getitem)
        return store_reduction
op668 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op667_op668_op669_op671.snodes[2] =
op669: SchedulerNode(ComputedBuffer)
op669.writes = [MemoryDep('buf669', c0, {c0: 2048}, None)]
op669.unmet_dependencies = [MemoryDep('buf667', c0, {c0: 2097152}, None)]
op669.met_dependencies = []
op669.outputs = [
    buf669: ComputedBuffer
    buf669.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf669.users = [NodeUser(node=SchedulerNode(name='op671'), can_inplace=False, is_weak=False)]
]
op669.group.device = cuda:0
op669.group.iteration = (2048, 1024)
op669.sizes = ([2048], [1024])
buf667_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf669_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op669_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf667', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf669', get_index_1, getitem_1)
        return store_reduction
op669 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op667_op668_op669_op671.snodes[3] =
op671: SchedulerNode(ComputedBuffer)
op671.writes = [MemoryDep('buf671', c0, {c0: 2097152}, None)]
op671.unmet_dependencies = 
    [   MemoryDep('buf667', c0, {c0: 2097152}, None),
        MemoryDep('buf668', c0, {c0: 2048}, None),
        MemoryDep('buf669', c0, {c0: 2048}, None)]
op671.met_dependencies = 
    [   MemoryDep('arg431_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg432_1', c1, {c0: 2048, c1: 1024}, None)]
op671.outputs = [
    buf671: ComputedBuffer
    buf671.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf671.users = [NodeUser(node=ExternKernelSchedulerNode(name='op672'), can_inplace=False, is_weak=False)]
]
op671.group.device = cuda:0
op671.group.iteration = (2097152, 1)
op671.sizes = ([2048, 1024], [])
buf667_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf668_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf669_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg431_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg432_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf671_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op671_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf667', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf668', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf669', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg431_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg432_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf671', get_index_5, add_1, None)
        return store
op671 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op667_op668_op669_op671 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op672: ExternKernelSchedulerNode(ExternKernelOut)
op672.writes = [StarDep(name='buf672', mode=None)]
op672.unmet_dependencies = [StarDep(name='buf671', mode=None)]
op672.met_dependencies = [StarDep(name='arg433_1', mode=None)]
op672.outputs = [
    buf672: ExternKernelOut
    buf672.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf672.users = [NodeUser(node=SchedulerNode(name='op673'), can_inplace=True, is_weak=False)]
]
op672.node.kernel = extern_kernels.mm


op673: SchedulerNode(ComputedBuffer)
op673.writes = [MemoryDep('buf673', c0, {c0: 8388608}, None)]
op673.unmet_dependencies = [MemoryDep('buf672', c0, {c0: 8388608}, None)]
op673.met_dependencies = [MemoryDep('arg434_1', c1, {c0: 2048, c1: 4096}, None)]
op673.outputs = [
    buf673: ComputedBuffer
    buf673.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf673.users = [NodeUser(node=ExternKernelSchedulerNode(name='op674'), can_inplace=False, is_weak=False)]
]
op673.group.device = cuda:0
op673.group.iteration = (8388608, 1)
op673.sizes = ([2048, 4096], [])
buf672_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg434_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf673_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op673_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf672', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg434_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf672', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg434_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf673', get_index_4, mul_2, None)
        return store
op673 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op674: ExternKernelSchedulerNode(ExternKernelOut)
op674.writes = [StarDep(name='buf674', mode=None)]
op674.unmet_dependencies = [StarDep(name='buf673', mode=None)]
op674.met_dependencies = [StarDep(name='arg435_1', mode=None)]
op674.outputs = [
    buf674: ExternKernelOut
    buf674.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf674.users = [
        NodeUser(node=SchedulerNode(name='op675'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op676'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op677'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op678'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op692'), can_inplace=True, is_weak=False),
    ]
]
op674.node.kernel = extern_kernels.mm


op675_op676_op678: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op675_op676_op678.writes = 
    [   MemoryDep('buf675', c0, {c0: 2048}, None),
        MemoryDep('buf676', c0, {c0: 2048}, None),
        MemoryDep('buf678', c0, {c0: 2097152}, None)]
op675_op676_op678.unmet_dependencies = 
    [   MemoryDep('buf667', c0, {c0: 2097152}, None),
        MemoryDep('buf674', c0, {c0: 2097152}, None)]
op675_op676_op678.met_dependencies = 
    [   MemoryDep('arg436_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg437_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg438_1', c1, {c0: 2048, c1: 1024}, None)]
op675_op676_op678.outputs = [
    buf675: ComputedBuffer
    buf675.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf675.users = [NodeUser(node=SchedulerNode(name='op678'), can_inplace=False, is_weak=False)]
    buf676: ComputedBuffer
    buf676.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf676.users = [NodeUser(node=SchedulerNode(name='op678'), can_inplace=False, is_weak=False)]
    buf678: ComputedBuffer
    buf678.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf678.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op679'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op680'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op681'), can_inplace=False, is_weak=False),
    ]
]
op675_op676_op678.snodes[0] =
op675: SchedulerNode(ComputedBuffer)
op675.writes = [MemoryDep('buf675', c0, {c0: 2048}, None)]
op675.unmet_dependencies = 
    [   MemoryDep('buf667', c0, {c0: 2097152}, None),
        MemoryDep('buf674', c0, {c0: 2097152}, None)]
op675.met_dependencies = [MemoryDep('arg436_1', c1, {c0: 2048, c1: 1024}, None)]
op675.outputs = [
    buf675: ComputedBuffer
    buf675.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf675.users = [NodeUser(node=SchedulerNode(name='op678'), can_inplace=False, is_weak=False)]
]
op675.group.device = cuda:0
op675.group.iteration = (2048, 1024)
op675.sizes = ([2048], [1024])
buf667_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf674_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg436_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf675_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op675_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf667', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf674', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg436_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf675', get_index_3, getitem)
        return store_reduction
op675 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op675_op676_op678.snodes[1] =
op676: SchedulerNode(ComputedBuffer)
op676.writes = [MemoryDep('buf676', c0, {c0: 2048}, None)]
op676.unmet_dependencies = 
    [   MemoryDep('buf667', c0, {c0: 2097152}, None),
        MemoryDep('buf674', c0, {c0: 2097152}, None)]
op676.met_dependencies = [MemoryDep('arg436_1', c1, {c0: 2048, c1: 1024}, None)]
op676.outputs = [
    buf676: ComputedBuffer
    buf676.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf676.users = [NodeUser(node=SchedulerNode(name='op678'), can_inplace=False, is_weak=False)]
]
op676.group.device = cuda:0
op676.group.iteration = (2048, 1024)
op676.sizes = ([2048], [1024])
buf667_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf674_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg436_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf676_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op676_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf667', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf674', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg436_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf676', get_index_3, getitem_1)
        return store_reduction
op676 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op675_op676_op678.snodes[2] =
op678: SchedulerNode(ComputedBuffer)
op678.writes = [MemoryDep('buf678', c0, {c0: 2097152}, None)]
op678.unmet_dependencies = 
    [   MemoryDep('buf667', c0, {c0: 2097152}, None),
        MemoryDep('buf674', c0, {c0: 2097152}, None),
        MemoryDep('buf675', c0, {c0: 2048}, None),
        MemoryDep('buf676', c0, {c0: 2048}, None)]
op678.met_dependencies = 
    [   MemoryDep('arg436_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg437_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg438_1', c1, {c0: 2048, c1: 1024}, None)]
op678.outputs = [
    buf678: ComputedBuffer
    buf678.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf678.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op679'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op680'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op681'), can_inplace=False, is_weak=False),
    ]
]
op678.group.device = cuda:0
op678.group.iteration = (2097152, 1)
op678.sizes = ([2048, 1024], [])
buf667_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf674_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg436_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf675_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf676_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg437_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg438_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf678_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op678_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf667', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf674', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg436_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf675', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf676', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg437_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg438_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf678', get_index_7, add_3, None)
        return store
op678 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op675_op676_op678 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op679: ExternKernelSchedulerNode(ExternKernelOut)
op679.writes = [StarDep(name='buf679', mode=None)]
op679.unmet_dependencies = [StarDep(name='buf678', mode=None)]
op679.met_dependencies = [StarDep(name='arg439_1', mode=None)]
op679.outputs = [
    buf679: ExternKernelOut
    buf679.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf679.users = [NodeUser(node=SchedulerNode(name='op682'), can_inplace=False, is_weak=False)]
]
op679.node.kernel = extern_kernels.mm


op680: ExternKernelSchedulerNode(ExternKernelOut)
op680.writes = [StarDep(name='buf680', mode=None)]
op680.unmet_dependencies = [StarDep(name='buf678', mode=None)]
op680.met_dependencies = [StarDep(name='arg441_1', mode=None)]
op680.outputs = [
    buf680: ExternKernelOut
    buf680.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf680.users = [NodeUser(node=SchedulerNode(name='op683'), can_inplace=False, is_weak=False)]
]
op680.node.kernel = extern_kernels.mm


op681: ExternKernelSchedulerNode(ExternKernelOut)
op681.writes = [StarDep(name='buf681', mode=None)]
op681.unmet_dependencies = [StarDep(name='buf678', mode=None)]
op681.met_dependencies = [StarDep(name='arg443_1', mode=None)]
op681.outputs = [
    buf681: ExternKernelOut
    buf681.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf681.users = [NodeUser(node=SchedulerNode(name='op684'), can_inplace=False, is_weak=False)]
]
op681.node.kernel = extern_kernels.mm


op682: SchedulerNode(ComputedBuffer)
op682.writes = [MemoryDep('buf682', c0, {c0: 2097152}, None)]
op682.unmet_dependencies = [   MemoryDep('buf679', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op682.met_dependencies = [MemoryDep('arg440_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op682.outputs = [
    buf682: ComputedBuffer
    buf682.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf682.users = [NodeUser(node=ExternKernelSchedulerNode(name='op686'), can_inplace=False, is_weak=False)]
]
op682.group.device = cuda:0
op682.group.iteration = (2097152, 1)
op682.sizes = ([2, 16, 1024, 64], [])
buf679_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg440_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf682_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op682_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf679', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg440_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf682', get_index_2, add, None)
        return store
op682 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op683: SchedulerNode(ComputedBuffer)
op683.writes = [MemoryDep('buf683', c0, {c0: 2097152}, None)]
op683.unmet_dependencies = [   MemoryDep('buf680', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op683.met_dependencies = [MemoryDep('arg442_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op683.outputs = [
    buf683: ComputedBuffer
    buf683.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf683.users = [NodeUser(node=ExternKernelSchedulerNode(name='op686'), can_inplace=False, is_weak=False)]
]
op683.group.device = cuda:0
op683.group.iteration = (2097152, 1)
op683.sizes = ([2, 16, 1024, 64], [])
buf680_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg442_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf683_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op683_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf680', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg442_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf683', get_index_2, add, None)
        return store
op683 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op684: SchedulerNode(ComputedBuffer)
op684.writes = [MemoryDep('buf684', c0, {c0: 2097152}, None)]
op684.unmet_dependencies = [   MemoryDep('buf681', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op684.met_dependencies = [MemoryDep('arg444_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op684.outputs = [
    buf684: ComputedBuffer
    buf684.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf684.users = [NodeUser(node=ExternKernelSchedulerNode(name='op686'), can_inplace=False, is_weak=False)]
]
op684.group.device = cuda:0
op684.group.iteration = (2097152, 1)
op684.sizes = ([2, 16, 1024, 64], [])
buf681_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg444_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf684_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op684_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf681', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg444_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf684', get_index_2, add, None)
        return store
op684 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op685: SchedulerNode(ComputedBuffer)
op685.writes = [MemoryDep('buf685', c0, {c0: 33554432}, None)]
op685.unmet_dependencies = []
op685.met_dependencies = []
op685.outputs = [
    buf685: ComputedBuffer
    buf685.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
    buf685.users = [NodeUser(node=ExternKernelSchedulerNode(name='op686'), can_inplace=False, is_weak=False)]
]
op685.group.device = cuda:0
op685.group.iteration = (33554432, 1)
op685.sizes = ([32, 1024, 1024], [])
buf685_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
class op685_loop_body:
    var_ranges = {z0: 32, z1: 1024, z2: 1024}
    index0 = z2
    index1 = z1 + 1
    index2 = 1048576*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf685', get_index_2, where, None)
        return store
op685 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op686: ExternKernelSchedulerNode(FallbackKernel)
op686.writes = [StarDep(name='buf686', mode=None)]
op686.unmet_dependencies = 
    [   StarDep(name='buf682', mode=None),
        StarDep(name='buf683', mode=None),
        StarDep(name='buf684', mode=None),
        StarDep(name='buf685', mode=None)]
op686.met_dependencies = []
op686.outputs = [
    buf686: FallbackKernel
    buf686.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf686.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op687'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op688'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op689'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op690'), can_inplace=False, is_weak=False),
    ]
]
op686.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op687: ExternKernelSchedulerNode(MultiOutput)
op687.writes = [StarDep(name='buf687', mode=None)]
op687.unmet_dependencies = [StarDep(name='buf686', mode=None)]
op687.met_dependencies = []
op687.outputs = [
    buf687: MultiOutput
    buf687.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf687.users = [NodeUser(node=ExternKernelSchedulerNode(name='op691'), can_inplace=False, is_weak=False)]
]
op687.node.kernel = None


op691: ExternKernelSchedulerNode(ExternKernelOut)
op691.writes = [StarDep(name='buf691', mode=None)]
op691.unmet_dependencies = [StarDep(name='buf687', mode=None)]
op691.met_dependencies = [StarDep(name='arg445_1', mode=None)]
op691.outputs = [
    buf691: ExternKernelOut
    buf691.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf691.users = [NodeUser(node=SchedulerNode(name='op692'), can_inplace=True, is_weak=False)]
]
op691.node.kernel = extern_kernels.mm


op692_op693_op694_op696: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op692_op693_op694_op696.writes = 
    [   MemoryDep('buf692', c0, {c0: 2097152}, None),
        MemoryDep('buf693', c0, {c0: 2048}, None),
        MemoryDep('buf694', c0, {c0: 2048}, None),
        MemoryDep('buf696', c0, {c0: 2097152}, None)]
op692_op693_op694_op696.unmet_dependencies = 
    [   MemoryDep('buf667', c0, {c0: 2097152}, None),
        MemoryDep('buf674', c0, {c0: 2097152}, None),
        MemoryDep('buf691', c0, {c0: 2097152}, None)]
op692_op693_op694_op696.met_dependencies = 
    [   MemoryDep('arg436_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg446_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg447_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg448_1', c1, {c0: 2048, c1: 1024}, None)]
op692_op693_op694_op696.outputs = [
    buf692: ComputedBuffer
    buf692.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf692.users = [
        NodeUser(node=SchedulerNode(name='op693'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op694'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op695'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op696'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op709'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op710'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op711'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op712'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op716'), can_inplace=True, is_weak=False),
    ]
    buf693: ComputedBuffer
    buf693.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf693.users = [NodeUser(node=SchedulerNode(name='op696'), can_inplace=False, is_weak=False)]
    buf694: ComputedBuffer
    buf694.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf694.users = [NodeUser(node=SchedulerNode(name='op696'), can_inplace=False, is_weak=False)]
    buf696: ComputedBuffer
    buf696.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf696.users = [NodeUser(node=ExternKernelSchedulerNode(name='op697'), can_inplace=False, is_weak=False)]
]
op692_op693_op694_op696.snodes[0] =
op692: SchedulerNode(ComputedBuffer)
op692.writes = [MemoryDep('buf692', c0, {c0: 2097152}, None)]
op692.unmet_dependencies = 
    [   MemoryDep('buf667', c0, {c0: 2097152}, None),
        MemoryDep('buf674', c0, {c0: 2097152}, None),
        MemoryDep('buf691', c0, {c0: 2097152}, None)]
op692.met_dependencies = 
    [   MemoryDep('arg436_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg446_1', c1, {c0: 2048, c1: 1024}, None)]
op692.outputs = [
    buf692: ComputedBuffer
    buf692.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf692.users = [
        NodeUser(node=SchedulerNode(name='op693'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op694'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op695'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op696'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op709'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op710'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op711'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op712'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op716'), can_inplace=True, is_weak=False),
    ]
]
op692.group.device = cuda:0
op692.group.iteration = (2097152, 1)
op692.sizes = ([2048, 1024], [])
buf667_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf674_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg436_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf691_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg446_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf692_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op692_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf667', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf674', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg436_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf691', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg446_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf692', get_index_5, add_3, None)
        return store
op692 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op692_op693_op694_op696.snodes[1] =
op693: SchedulerNode(ComputedBuffer)
op693.writes = [MemoryDep('buf693', c0, {c0: 2048}, None)]
op693.unmet_dependencies = [MemoryDep('buf692', c0, {c0: 2097152}, None)]
op693.met_dependencies = []
op693.outputs = [
    buf693: ComputedBuffer
    buf693.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf693.users = [NodeUser(node=SchedulerNode(name='op696'), can_inplace=False, is_weak=False)]
]
op693.group.device = cuda:0
op693.group.iteration = (2048, 1024)
op693.sizes = ([2048], [1024])
buf692_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf693_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op693_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf692', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf693', get_index_1, getitem)
        return store_reduction
op693 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op692_op693_op694_op696.snodes[2] =
op694: SchedulerNode(ComputedBuffer)
op694.writes = [MemoryDep('buf694', c0, {c0: 2048}, None)]
op694.unmet_dependencies = [MemoryDep('buf692', c0, {c0: 2097152}, None)]
op694.met_dependencies = []
op694.outputs = [
    buf694: ComputedBuffer
    buf694.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf694.users = [NodeUser(node=SchedulerNode(name='op696'), can_inplace=False, is_weak=False)]
]
op694.group.device = cuda:0
op694.group.iteration = (2048, 1024)
op694.sizes = ([2048], [1024])
buf692_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf694_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op694_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf692', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf694', get_index_1, getitem_1)
        return store_reduction
op694 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op692_op693_op694_op696.snodes[3] =
op696: SchedulerNode(ComputedBuffer)
op696.writes = [MemoryDep('buf696', c0, {c0: 2097152}, None)]
op696.unmet_dependencies = 
    [   MemoryDep('buf692', c0, {c0: 2097152}, None),
        MemoryDep('buf693', c0, {c0: 2048}, None),
        MemoryDep('buf694', c0, {c0: 2048}, None)]
op696.met_dependencies = 
    [   MemoryDep('arg447_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg448_1', c1, {c0: 2048, c1: 1024}, None)]
op696.outputs = [
    buf696: ComputedBuffer
    buf696.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf696.users = [NodeUser(node=ExternKernelSchedulerNode(name='op697'), can_inplace=False, is_weak=False)]
]
op696.group.device = cuda:0
op696.group.iteration = (2097152, 1)
op696.sizes = ([2048, 1024], [])
buf692_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf693_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf694_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg447_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg448_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf696_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op696_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf692', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf693', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf694', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg447_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg448_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf696', get_index_5, add_1, None)
        return store
op696 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op692_op693_op694_op696 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op697: ExternKernelSchedulerNode(ExternKernelOut)
op697.writes = [StarDep(name='buf697', mode=None)]
op697.unmet_dependencies = [StarDep(name='buf696', mode=None)]
op697.met_dependencies = [StarDep(name='arg449_1', mode=None)]
op697.outputs = [
    buf697: ExternKernelOut
    buf697.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf697.users = [NodeUser(node=SchedulerNode(name='op700'), can_inplace=False, is_weak=False)]
]
op697.node.kernel = extern_kernels.mm


op698: ExternKernelSchedulerNode(ExternKernelOut)
op698.writes = [StarDep(name='buf698', mode=None)]
op698.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op698.met_dependencies = [StarDep(name='arg451_1', mode=None)]
op698.outputs = [
    buf698: ExternKernelOut
    buf698.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf698.users = [NodeUser(node=SchedulerNode(name='op701'), can_inplace=False, is_weak=False)]
]
op698.node.kernel = extern_kernels.mm


op699: ExternKernelSchedulerNode(ExternKernelOut)
op699.writes = [StarDep(name='buf699', mode=None)]
op699.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op699.met_dependencies = [StarDep(name='arg453_1', mode=None)]
op699.outputs = [
    buf699: ExternKernelOut
    buf699.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf699.users = [NodeUser(node=SchedulerNode(name='op702'), can_inplace=False, is_weak=False)]
]
op699.node.kernel = extern_kernels.mm


op700: SchedulerNode(ComputedBuffer)
op700.writes = [MemoryDep('buf700', c0, {c0: 2097152}, None)]
op700.unmet_dependencies = [   MemoryDep('buf697', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op700.met_dependencies = [MemoryDep('arg450_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op700.outputs = [
    buf700: ComputedBuffer
    buf700.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf700.users = [NodeUser(node=ExternKernelSchedulerNode(name='op703'), can_inplace=False, is_weak=False)]
]
op700.group.device = cuda:0
op700.group.iteration = (2097152, 1)
op700.sizes = ([2, 16, 1024, 64], [])
buf697_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg450_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf700_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op700_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf697', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg450_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf700', get_index_2, add, None)
        return store
op700 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op701: SchedulerNode(ComputedBuffer)
op701.writes = [MemoryDep('buf701', c0, {c0: 2097152}, None)]
op701.unmet_dependencies = [   MemoryDep('buf698', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op701.met_dependencies = [MemoryDep('arg452_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op701.outputs = [
    buf701: ComputedBuffer
    buf701.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf701.users = [NodeUser(node=ExternKernelSchedulerNode(name='op703'), can_inplace=False, is_weak=False)]
]
op701.group.device = cuda:0
op701.group.iteration = (2097152, 1)
op701.sizes = ([2, 16, 1024, 64], [])
buf698_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg452_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf701_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op701_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf698', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg452_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf701', get_index_2, add, None)
        return store
op701 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op702: SchedulerNode(ComputedBuffer)
op702.writes = [MemoryDep('buf702', c0, {c0: 2097152}, None)]
op702.unmet_dependencies = [   MemoryDep('buf699', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op702.met_dependencies = [MemoryDep('arg454_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op702.outputs = [
    buf702: ComputedBuffer
    buf702.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf702.users = [NodeUser(node=ExternKernelSchedulerNode(name='op703'), can_inplace=False, is_weak=False)]
]
op702.group.device = cuda:0
op702.group.iteration = (2097152, 1)
op702.sizes = ([2, 16, 1024, 64], [])
buf699_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg454_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf702_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op702_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf699', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg454_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf702', get_index_2, add, None)
        return store
op702 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op703: ExternKernelSchedulerNode(FallbackKernel)
op703.writes = [StarDep(name='buf703', mode=None)]
op703.unmet_dependencies = 
    [   StarDep(name='buf700', mode=None),
        StarDep(name='buf701', mode=None),
        StarDep(name='buf702', mode=None)]
op703.met_dependencies = []
op703.outputs = [
    buf703: FallbackKernel
    buf703.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf703.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op704'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op705'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op706'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op707'), can_inplace=False, is_weak=False),
    ]
]
op703.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op704: ExternKernelSchedulerNode(MultiOutput)
op704.writes = [StarDep(name='buf704', mode=None)]
op704.unmet_dependencies = [StarDep(name='buf703', mode=None)]
op704.met_dependencies = []
op704.outputs = [
    buf704: MultiOutput
    buf704.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf704.users = [NodeUser(node=ExternKernelSchedulerNode(name='op708'), can_inplace=False, is_weak=False)]
]
op704.node.kernel = None


op708: ExternKernelSchedulerNode(ExternKernelOut)
op708.writes = [StarDep(name='buf708', mode=None)]
op708.unmet_dependencies = [StarDep(name='buf704', mode=None)]
op708.met_dependencies = [StarDep(name='arg455_1', mode=None)]
op708.outputs = [
    buf708: ExternKernelOut
    buf708.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf708.users = [
        NodeUser(node=SchedulerNode(name='op709'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op710'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op711'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op712'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op716'), can_inplace=True, is_weak=False),
    ]
]
op708.node.kernel = extern_kernels.mm


op709_op710_op712: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op709_op710_op712.writes = 
    [   MemoryDep('buf709', c0, {c0: 2048}, None),
        MemoryDep('buf710', c0, {c0: 2048}, None),
        MemoryDep('buf712', c0, {c0: 2097152}, None)]
op709_op710_op712.unmet_dependencies = 
    [   MemoryDep('buf692', c0, {c0: 2097152}, None),
        MemoryDep('buf708', c0, {c0: 2097152}, None)]
op709_op710_op712.met_dependencies = 
    [   MemoryDep('arg456_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg457_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg458_1', c1, {c0: 2048, c1: 1024}, None)]
op709_op710_op712.outputs = [
    buf709: ComputedBuffer
    buf709.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf709.users = [NodeUser(node=SchedulerNode(name='op712'), can_inplace=False, is_weak=False)]
    buf710: ComputedBuffer
    buf710.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf710.users = [NodeUser(node=SchedulerNode(name='op712'), can_inplace=False, is_weak=False)]
    buf712: ComputedBuffer
    buf712.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf712.users = [NodeUser(node=ExternKernelSchedulerNode(name='op713'), can_inplace=False, is_weak=False)]
]
op709_op710_op712.snodes[0] =
op709: SchedulerNode(ComputedBuffer)
op709.writes = [MemoryDep('buf709', c0, {c0: 2048}, None)]
op709.unmet_dependencies = 
    [   MemoryDep('buf692', c0, {c0: 2097152}, None),
        MemoryDep('buf708', c0, {c0: 2097152}, None)]
op709.met_dependencies = [MemoryDep('arg456_1', c1, {c0: 2048, c1: 1024}, None)]
op709.outputs = [
    buf709: ComputedBuffer
    buf709.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf709.users = [NodeUser(node=SchedulerNode(name='op712'), can_inplace=False, is_weak=False)]
]
op709.group.device = cuda:0
op709.group.iteration = (2048, 1024)
op709.sizes = ([2048], [1024])
buf692_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf708_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg456_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf709_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op709_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf692', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf708', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg456_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf709', get_index_3, getitem)
        return store_reduction
op709 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op709_op710_op712.snodes[1] =
op710: SchedulerNode(ComputedBuffer)
op710.writes = [MemoryDep('buf710', c0, {c0: 2048}, None)]
op710.unmet_dependencies = 
    [   MemoryDep('buf692', c0, {c0: 2097152}, None),
        MemoryDep('buf708', c0, {c0: 2097152}, None)]
op710.met_dependencies = [MemoryDep('arg456_1', c1, {c0: 2048, c1: 1024}, None)]
op710.outputs = [
    buf710: ComputedBuffer
    buf710.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf710.users = [NodeUser(node=SchedulerNode(name='op712'), can_inplace=False, is_weak=False)]
]
op710.group.device = cuda:0
op710.group.iteration = (2048, 1024)
op710.sizes = ([2048], [1024])
buf692_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf708_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg456_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf710_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op710_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf692', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf708', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg456_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf710', get_index_3, getitem_1)
        return store_reduction
op710 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op709_op710_op712.snodes[2] =
op712: SchedulerNode(ComputedBuffer)
op712.writes = [MemoryDep('buf712', c0, {c0: 2097152}, None)]
op712.unmet_dependencies = 
    [   MemoryDep('buf692', c0, {c0: 2097152}, None),
        MemoryDep('buf708', c0, {c0: 2097152}, None),
        MemoryDep('buf709', c0, {c0: 2048}, None),
        MemoryDep('buf710', c0, {c0: 2048}, None)]
op712.met_dependencies = 
    [   MemoryDep('arg456_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg457_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg458_1', c1, {c0: 2048, c1: 1024}, None)]
op712.outputs = [
    buf712: ComputedBuffer
    buf712.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf712.users = [NodeUser(node=ExternKernelSchedulerNode(name='op713'), can_inplace=False, is_weak=False)]
]
op712.group.device = cuda:0
op712.group.iteration = (2097152, 1)
op712.sizes = ([2048, 1024], [])
buf692_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf708_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg456_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf709_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf710_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg457_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg458_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf712_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op712_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf692', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf708', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg456_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf709', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf710', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg457_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg458_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf712', get_index_7, add_3, None)
        return store
op712 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op709_op710_op712 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op713: ExternKernelSchedulerNode(ExternKernelOut)
op713.writes = [StarDep(name='buf713', mode=None)]
op713.unmet_dependencies = [StarDep(name='buf712', mode=None)]
op713.met_dependencies = [StarDep(name='arg459_1', mode=None)]
op713.outputs = [
    buf713: ExternKernelOut
    buf713.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf713.users = [NodeUser(node=SchedulerNode(name='op714'), can_inplace=True, is_weak=False)]
]
op713.node.kernel = extern_kernels.mm


op714: SchedulerNode(ComputedBuffer)
op714.writes = [MemoryDep('buf714', c0, {c0: 8388608}, None)]
op714.unmet_dependencies = [MemoryDep('buf713', c0, {c0: 8388608}, None)]
op714.met_dependencies = [MemoryDep('arg460_1', c1, {c0: 2048, c1: 4096}, None)]
op714.outputs = [
    buf714: ComputedBuffer
    buf714.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf714.users = [NodeUser(node=ExternKernelSchedulerNode(name='op715'), can_inplace=False, is_weak=False)]
]
op714.group.device = cuda:0
op714.group.iteration = (8388608, 1)
op714.sizes = ([2048, 4096], [])
buf713_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg460_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf714_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op714_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf713', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg460_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf713', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg460_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf714', get_index_4, mul_2, None)
        return store
op714 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op715: ExternKernelSchedulerNode(ExternKernelOut)
op715.writes = [StarDep(name='buf715', mode=None)]
op715.unmet_dependencies = [StarDep(name='buf714', mode=None)]
op715.met_dependencies = [StarDep(name='arg461_1', mode=None)]
op715.outputs = [
    buf715: ExternKernelOut
    buf715.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf715.users = [NodeUser(node=SchedulerNode(name='op716'), can_inplace=True, is_weak=False)]
]
op715.node.kernel = extern_kernels.mm


op716_op717_op718_op720: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op716_op717_op718_op720.writes = 
    [   MemoryDep('buf716', c0, {c0: 2097152}, None),
        MemoryDep('buf717', c0, {c0: 2048}, None),
        MemoryDep('buf718', c0, {c0: 2048}, None),
        MemoryDep('buf720', c0, {c0: 2097152}, None)]
op716_op717_op718_op720.unmet_dependencies = 
    [   MemoryDep('buf692', c0, {c0: 2097152}, None),
        MemoryDep('buf708', c0, {c0: 2097152}, None),
        MemoryDep('buf715', c0, {c0: 2097152}, None)]
op716_op717_op718_op720.met_dependencies = 
    [   MemoryDep('arg456_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg462_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg463_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg464_1', c1, {c0: 2048, c1: 1024}, None)]
op716_op717_op718_op720.outputs = [
    buf716: ComputedBuffer
    buf716.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf716.users = [
        NodeUser(node=SchedulerNode(name='op717'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op718'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op719'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op720'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op734'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op735'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op736'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op737'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op750'), can_inplace=True, is_weak=False),
    ]
    buf717: ComputedBuffer
    buf717.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf717.users = [NodeUser(node=SchedulerNode(name='op720'), can_inplace=False, is_weak=False)]
    buf718: ComputedBuffer
    buf718.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf718.users = [NodeUser(node=SchedulerNode(name='op720'), can_inplace=False, is_weak=False)]
    buf720: ComputedBuffer
    buf720.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf720.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op721'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op722'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op723'), can_inplace=False, is_weak=False),
    ]
]
op716_op717_op718_op720.snodes[0] =
op716: SchedulerNode(ComputedBuffer)
op716.writes = [MemoryDep('buf716', c0, {c0: 2097152}, None)]
op716.unmet_dependencies = 
    [   MemoryDep('buf692', c0, {c0: 2097152}, None),
        MemoryDep('buf708', c0, {c0: 2097152}, None),
        MemoryDep('buf715', c0, {c0: 2097152}, None)]
op716.met_dependencies = 
    [   MemoryDep('arg456_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg462_1', c1, {c0: 2048, c1: 1024}, None)]
op716.outputs = [
    buf716: ComputedBuffer
    buf716.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf716.users = [
        NodeUser(node=SchedulerNode(name='op717'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op718'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op719'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op720'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op734'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op735'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op736'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op737'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op750'), can_inplace=True, is_weak=False),
    ]
]
op716.group.device = cuda:0
op716.group.iteration = (2097152, 1)
op716.sizes = ([2048, 1024], [])
buf692_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf708_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg456_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf715_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg462_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf716_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op716_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf692', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf708', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg456_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf715', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg462_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf716', get_index_5, add_3, None)
        return store
op716 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op716_op717_op718_op720.snodes[1] =
op717: SchedulerNode(ComputedBuffer)
op717.writes = [MemoryDep('buf717', c0, {c0: 2048}, None)]
op717.unmet_dependencies = [MemoryDep('buf716', c0, {c0: 2097152}, None)]
op717.met_dependencies = []
op717.outputs = [
    buf717: ComputedBuffer
    buf717.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf717.users = [NodeUser(node=SchedulerNode(name='op720'), can_inplace=False, is_weak=False)]
]
op717.group.device = cuda:0
op717.group.iteration = (2048, 1024)
op717.sizes = ([2048], [1024])
buf716_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf717_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op717_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf716', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf717', get_index_1, getitem)
        return store_reduction
op717 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op716_op717_op718_op720.snodes[2] =
op718: SchedulerNode(ComputedBuffer)
op718.writes = [MemoryDep('buf718', c0, {c0: 2048}, None)]
op718.unmet_dependencies = [MemoryDep('buf716', c0, {c0: 2097152}, None)]
op718.met_dependencies = []
op718.outputs = [
    buf718: ComputedBuffer
    buf718.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf718.users = [NodeUser(node=SchedulerNode(name='op720'), can_inplace=False, is_weak=False)]
]
op718.group.device = cuda:0
op718.group.iteration = (2048, 1024)
op718.sizes = ([2048], [1024])
buf716_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf718_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op718_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf716', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf718', get_index_1, getitem_1)
        return store_reduction
op718 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op716_op717_op718_op720.snodes[3] =
op720: SchedulerNode(ComputedBuffer)
op720.writes = [MemoryDep('buf720', c0, {c0: 2097152}, None)]
op720.unmet_dependencies = 
    [   MemoryDep('buf716', c0, {c0: 2097152}, None),
        MemoryDep('buf717', c0, {c0: 2048}, None),
        MemoryDep('buf718', c0, {c0: 2048}, None)]
op720.met_dependencies = 
    [   MemoryDep('arg463_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg464_1', c1, {c0: 2048, c1: 1024}, None)]
op720.outputs = [
    buf720: ComputedBuffer
    buf720.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf720.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op721'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op722'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op723'), can_inplace=False, is_weak=False),
    ]
]
op720.group.device = cuda:0
op720.group.iteration = (2097152, 1)
op720.sizes = ([2048, 1024], [])
buf716_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf717_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf718_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg463_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg464_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf720_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op720_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf716', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf717', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf718', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg463_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg464_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf720', get_index_5, add_1, None)
        return store
op720 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op716_op717_op718_op720 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op721: ExternKernelSchedulerNode(ExternKernelOut)
op721.writes = [StarDep(name='buf721', mode=None)]
op721.unmet_dependencies = [StarDep(name='buf720', mode=None)]
op721.met_dependencies = [StarDep(name='arg465_1', mode=None)]
op721.outputs = [
    buf721: ExternKernelOut
    buf721.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf721.users = [NodeUser(node=SchedulerNode(name='op724'), can_inplace=False, is_weak=False)]
]
op721.node.kernel = extern_kernels.mm


op722: ExternKernelSchedulerNode(ExternKernelOut)
op722.writes = [StarDep(name='buf722', mode=None)]
op722.unmet_dependencies = [StarDep(name='buf720', mode=None)]
op722.met_dependencies = [StarDep(name='arg467_1', mode=None)]
op722.outputs = [
    buf722: ExternKernelOut
    buf722.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf722.users = [NodeUser(node=SchedulerNode(name='op725'), can_inplace=False, is_weak=False)]
]
op722.node.kernel = extern_kernels.mm


op723: ExternKernelSchedulerNode(ExternKernelOut)
op723.writes = [StarDep(name='buf723', mode=None)]
op723.unmet_dependencies = [StarDep(name='buf720', mode=None)]
op723.met_dependencies = [StarDep(name='arg469_1', mode=None)]
op723.outputs = [
    buf723: ExternKernelOut
    buf723.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf723.users = [NodeUser(node=SchedulerNode(name='op726'), can_inplace=False, is_weak=False)]
]
op723.node.kernel = extern_kernels.mm


op724: SchedulerNode(ComputedBuffer)
op724.writes = [MemoryDep('buf724', c0, {c0: 2097152}, None)]
op724.unmet_dependencies = [   MemoryDep('buf721', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op724.met_dependencies = [MemoryDep('arg466_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op724.outputs = [
    buf724: ComputedBuffer
    buf724.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf724.users = [NodeUser(node=ExternKernelSchedulerNode(name='op728'), can_inplace=False, is_weak=False)]
]
op724.group.device = cuda:0
op724.group.iteration = (2097152, 1)
op724.sizes = ([2, 16, 1024, 64], [])
buf721_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg466_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf724_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op724_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf721', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg466_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf724', get_index_2, add, None)
        return store
op724 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op725: SchedulerNode(ComputedBuffer)
op725.writes = [MemoryDep('buf725', c0, {c0: 2097152}, None)]
op725.unmet_dependencies = [   MemoryDep('buf722', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op725.met_dependencies = [MemoryDep('arg468_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op725.outputs = [
    buf725: ComputedBuffer
    buf725.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf725.users = [NodeUser(node=ExternKernelSchedulerNode(name='op728'), can_inplace=False, is_weak=False)]
]
op725.group.device = cuda:0
op725.group.iteration = (2097152, 1)
op725.sizes = ([2, 16, 1024, 64], [])
buf722_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg468_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf725_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op725_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf722', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg468_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf725', get_index_2, add, None)
        return store
op725 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op726: SchedulerNode(ComputedBuffer)
op726.writes = [MemoryDep('buf726', c0, {c0: 2097152}, None)]
op726.unmet_dependencies = [   MemoryDep('buf723', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op726.met_dependencies = [MemoryDep('arg470_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op726.outputs = [
    buf726: ComputedBuffer
    buf726.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf726.users = [NodeUser(node=ExternKernelSchedulerNode(name='op728'), can_inplace=False, is_weak=False)]
]
op726.group.device = cuda:0
op726.group.iteration = (2097152, 1)
op726.sizes = ([2, 16, 1024, 64], [])
buf723_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg470_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf726_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op726_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf723', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg470_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf726', get_index_2, add, None)
        return store
op726 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op727: SchedulerNode(ComputedBuffer)
op727.writes = [MemoryDep('buf727', c0, {c0: 33554432}, None)]
op727.unmet_dependencies = []
op727.met_dependencies = []
op727.outputs = [
    buf727: ComputedBuffer
    buf727.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
    buf727.users = [NodeUser(node=ExternKernelSchedulerNode(name='op728'), can_inplace=False, is_weak=False)]
]
op727.group.device = cuda:0
op727.group.iteration = (33554432, 1)
op727.sizes = ([32, 1024, 1024], [])
buf727_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
class op727_loop_body:
    var_ranges = {z0: 32, z1: 1024, z2: 1024}
    index0 = z2
    index1 = z1 + 1
    index2 = 1048576*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf727', get_index_2, where, None)
        return store
op727 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op728: ExternKernelSchedulerNode(FallbackKernel)
op728.writes = [StarDep(name='buf728', mode=None)]
op728.unmet_dependencies = 
    [   StarDep(name='buf724', mode=None),
        StarDep(name='buf725', mode=None),
        StarDep(name='buf726', mode=None),
        StarDep(name='buf727', mode=None)]
op728.met_dependencies = []
op728.outputs = [
    buf728: FallbackKernel
    buf728.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf728.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op729'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op730'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op731'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op732'), can_inplace=False, is_weak=False),
    ]
]
op728.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op729: ExternKernelSchedulerNode(MultiOutput)
op729.writes = [StarDep(name='buf729', mode=None)]
op729.unmet_dependencies = [StarDep(name='buf728', mode=None)]
op729.met_dependencies = []
op729.outputs = [
    buf729: MultiOutput
    buf729.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf729.users = [NodeUser(node=ExternKernelSchedulerNode(name='op733'), can_inplace=False, is_weak=False)]
]
op729.node.kernel = None


op733: ExternKernelSchedulerNode(ExternKernelOut)
op733.writes = [StarDep(name='buf733', mode=None)]
op733.unmet_dependencies = [StarDep(name='buf729', mode=None)]
op733.met_dependencies = [StarDep(name='arg471_1', mode=None)]
op733.outputs = [
    buf733: ExternKernelOut
    buf733.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf733.users = [
        NodeUser(node=SchedulerNode(name='op734'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op735'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op736'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op737'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op750'), can_inplace=True, is_weak=False),
    ]
]
op733.node.kernel = extern_kernels.mm


op734_op735_op737: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op734_op735_op737.writes = 
    [   MemoryDep('buf734', c0, {c0: 2048}, None),
        MemoryDep('buf735', c0, {c0: 2048}, None),
        MemoryDep('buf737', c0, {c0: 2097152}, None)]
op734_op735_op737.unmet_dependencies = 
    [   MemoryDep('buf716', c0, {c0: 2097152}, None),
        MemoryDep('buf733', c0, {c0: 2097152}, None)]
op734_op735_op737.met_dependencies = 
    [   MemoryDep('arg472_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg473_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg474_1', c1, {c0: 2048, c1: 1024}, None)]
op734_op735_op737.outputs = [
    buf734: ComputedBuffer
    buf734.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf734.users = [NodeUser(node=SchedulerNode(name='op737'), can_inplace=False, is_weak=False)]
    buf735: ComputedBuffer
    buf735.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf735.users = [NodeUser(node=SchedulerNode(name='op737'), can_inplace=False, is_weak=False)]
    buf737: ComputedBuffer
    buf737.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf737.users = [NodeUser(node=ExternKernelSchedulerNode(name='op738'), can_inplace=False, is_weak=False)]
]
op734_op735_op737.snodes[0] =
op734: SchedulerNode(ComputedBuffer)
op734.writes = [MemoryDep('buf734', c0, {c0: 2048}, None)]
op734.unmet_dependencies = 
    [   MemoryDep('buf716', c0, {c0: 2097152}, None),
        MemoryDep('buf733', c0, {c0: 2097152}, None)]
op734.met_dependencies = [MemoryDep('arg472_1', c1, {c0: 2048, c1: 1024}, None)]
op734.outputs = [
    buf734: ComputedBuffer
    buf734.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf734.users = [NodeUser(node=SchedulerNode(name='op737'), can_inplace=False, is_weak=False)]
]
op734.group.device = cuda:0
op734.group.iteration = (2048, 1024)
op734.sizes = ([2048], [1024])
buf716_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf733_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg472_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf734_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op734_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf716', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf733', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg472_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf734', get_index_3, getitem)
        return store_reduction
op734 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op734_op735_op737.snodes[1] =
op735: SchedulerNode(ComputedBuffer)
op735.writes = [MemoryDep('buf735', c0, {c0: 2048}, None)]
op735.unmet_dependencies = 
    [   MemoryDep('buf716', c0, {c0: 2097152}, None),
        MemoryDep('buf733', c0, {c0: 2097152}, None)]
op735.met_dependencies = [MemoryDep('arg472_1', c1, {c0: 2048, c1: 1024}, None)]
op735.outputs = [
    buf735: ComputedBuffer
    buf735.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf735.users = [NodeUser(node=SchedulerNode(name='op737'), can_inplace=False, is_weak=False)]
]
op735.group.device = cuda:0
op735.group.iteration = (2048, 1024)
op735.sizes = ([2048], [1024])
buf716_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf733_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg472_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf735_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op735_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf716', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf733', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg472_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf735', get_index_3, getitem_1)
        return store_reduction
op735 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op734_op735_op737.snodes[2] =
op737: SchedulerNode(ComputedBuffer)
op737.writes = [MemoryDep('buf737', c0, {c0: 2097152}, None)]
op737.unmet_dependencies = 
    [   MemoryDep('buf716', c0, {c0: 2097152}, None),
        MemoryDep('buf733', c0, {c0: 2097152}, None),
        MemoryDep('buf734', c0, {c0: 2048}, None),
        MemoryDep('buf735', c0, {c0: 2048}, None)]
op737.met_dependencies = 
    [   MemoryDep('arg472_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg473_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg474_1', c1, {c0: 2048, c1: 1024}, None)]
op737.outputs = [
    buf737: ComputedBuffer
    buf737.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf737.users = [NodeUser(node=ExternKernelSchedulerNode(name='op738'), can_inplace=False, is_weak=False)]
]
op737.group.device = cuda:0
op737.group.iteration = (2097152, 1)
op737.sizes = ([2048, 1024], [])
buf716_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf733_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg472_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf734_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf735_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg473_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg474_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf737_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op737_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf716', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf733', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg472_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf734', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf735', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg473_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg474_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf737', get_index_7, add_3, None)
        return store
op737 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op734_op735_op737 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op738: ExternKernelSchedulerNode(ExternKernelOut)
op738.writes = [StarDep(name='buf738', mode=None)]
op738.unmet_dependencies = [StarDep(name='buf737', mode=None)]
op738.met_dependencies = [StarDep(name='arg475_1', mode=None)]
op738.outputs = [
    buf738: ExternKernelOut
    buf738.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf738.users = [NodeUser(node=SchedulerNode(name='op741'), can_inplace=False, is_weak=False)]
]
op738.node.kernel = extern_kernels.mm


op739: ExternKernelSchedulerNode(ExternKernelOut)
op739.writes = [StarDep(name='buf739', mode=None)]
op739.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op739.met_dependencies = [StarDep(name='arg477_1', mode=None)]
op739.outputs = [
    buf739: ExternKernelOut
    buf739.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf739.users = [NodeUser(node=SchedulerNode(name='op742'), can_inplace=False, is_weak=False)]
]
op739.node.kernel = extern_kernels.mm


op740: ExternKernelSchedulerNode(ExternKernelOut)
op740.writes = [StarDep(name='buf740', mode=None)]
op740.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op740.met_dependencies = [StarDep(name='arg479_1', mode=None)]
op740.outputs = [
    buf740: ExternKernelOut
    buf740.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf740.users = [NodeUser(node=SchedulerNode(name='op743'), can_inplace=False, is_weak=False)]
]
op740.node.kernel = extern_kernels.mm


op741: SchedulerNode(ComputedBuffer)
op741.writes = [MemoryDep('buf741', c0, {c0: 2097152}, None)]
op741.unmet_dependencies = [   MemoryDep('buf738', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op741.met_dependencies = [MemoryDep('arg476_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op741.outputs = [
    buf741: ComputedBuffer
    buf741.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf741.users = [NodeUser(node=ExternKernelSchedulerNode(name='op744'), can_inplace=False, is_weak=False)]
]
op741.group.device = cuda:0
op741.group.iteration = (2097152, 1)
op741.sizes = ([2, 16, 1024, 64], [])
buf738_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg476_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf741_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op741_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf738', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg476_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf741', get_index_2, add, None)
        return store
op741 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op742: SchedulerNode(ComputedBuffer)
op742.writes = [MemoryDep('buf742', c0, {c0: 2097152}, None)]
op742.unmet_dependencies = [   MemoryDep('buf739', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op742.met_dependencies = [MemoryDep('arg478_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op742.outputs = [
    buf742: ComputedBuffer
    buf742.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf742.users = [NodeUser(node=ExternKernelSchedulerNode(name='op744'), can_inplace=False, is_weak=False)]
]
op742.group.device = cuda:0
op742.group.iteration = (2097152, 1)
op742.sizes = ([2, 16, 1024, 64], [])
buf739_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg478_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf742_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op742_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf739', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg478_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf742', get_index_2, add, None)
        return store
op742 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op743: SchedulerNode(ComputedBuffer)
op743.writes = [MemoryDep('buf743', c0, {c0: 2097152}, None)]
op743.unmet_dependencies = [   MemoryDep('buf740', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op743.met_dependencies = [MemoryDep('arg480_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op743.outputs = [
    buf743: ComputedBuffer
    buf743.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf743.users = [NodeUser(node=ExternKernelSchedulerNode(name='op744'), can_inplace=False, is_weak=False)]
]
op743.group.device = cuda:0
op743.group.iteration = (2097152, 1)
op743.sizes = ([2, 16, 1024, 64], [])
buf740_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg480_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf743_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op743_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf740', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg480_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf743', get_index_2, add, None)
        return store
op743 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op744: ExternKernelSchedulerNode(FallbackKernel)
op744.writes = [StarDep(name='buf744', mode=None)]
op744.unmet_dependencies = 
    [   StarDep(name='buf741', mode=None),
        StarDep(name='buf742', mode=None),
        StarDep(name='buf743', mode=None)]
op744.met_dependencies = []
op744.outputs = [
    buf744: FallbackKernel
    buf744.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf744.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op745'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op746'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op747'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op748'), can_inplace=False, is_weak=False),
    ]
]
op744.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op745: ExternKernelSchedulerNode(MultiOutput)
op745.writes = [StarDep(name='buf745', mode=None)]
op745.unmet_dependencies = [StarDep(name='buf744', mode=None)]
op745.met_dependencies = []
op745.outputs = [
    buf745: MultiOutput
    buf745.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf745.users = [NodeUser(node=ExternKernelSchedulerNode(name='op749'), can_inplace=False, is_weak=False)]
]
op745.node.kernel = None


op749: ExternKernelSchedulerNode(ExternKernelOut)
op749.writes = [StarDep(name='buf749', mode=None)]
op749.unmet_dependencies = [StarDep(name='buf745', mode=None)]
op749.met_dependencies = [StarDep(name='arg481_1', mode=None)]
op749.outputs = [
    buf749: ExternKernelOut
    buf749.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf749.users = [NodeUser(node=SchedulerNode(name='op750'), can_inplace=True, is_weak=False)]
]
op749.node.kernel = extern_kernels.mm


op750_op751_op752_op754: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op750_op751_op752_op754.writes = 
    [   MemoryDep('buf750', c0, {c0: 2097152}, None),
        MemoryDep('buf751', c0, {c0: 2048}, None),
        MemoryDep('buf752', c0, {c0: 2048}, None),
        MemoryDep('buf754', c0, {c0: 2097152}, None)]
op750_op751_op752_op754.unmet_dependencies = 
    [   MemoryDep('buf716', c0, {c0: 2097152}, None),
        MemoryDep('buf733', c0, {c0: 2097152}, None),
        MemoryDep('buf749', c0, {c0: 2097152}, None)]
op750_op751_op752_op754.met_dependencies = 
    [   MemoryDep('arg472_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg482_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg483_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg484_1', c1, {c0: 2048, c1: 1024}, None)]
op750_op751_op752_op754.outputs = [
    buf750: ComputedBuffer
    buf750.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf750.users = [
        NodeUser(node=SchedulerNode(name='op751'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op752'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op754'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op758'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op759'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op760'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op761'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op775'), can_inplace=True, is_weak=False),
    ]
    buf751: ComputedBuffer
    buf751.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf751.users = [NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False)]
    buf752: ComputedBuffer
    buf752.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf752.users = [NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False)]
    buf754: ComputedBuffer
    buf754.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf754.users = [NodeUser(node=ExternKernelSchedulerNode(name='op755'), can_inplace=False, is_weak=False)]
]
op750_op751_op752_op754.snodes[0] =
op750: SchedulerNode(ComputedBuffer)
op750.writes = [MemoryDep('buf750', c0, {c0: 2097152}, None)]
op750.unmet_dependencies = 
    [   MemoryDep('buf716', c0, {c0: 2097152}, None),
        MemoryDep('buf733', c0, {c0: 2097152}, None),
        MemoryDep('buf749', c0, {c0: 2097152}, None)]
op750.met_dependencies = 
    [   MemoryDep('arg472_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg482_1', c1, {c0: 2048, c1: 1024}, None)]
op750.outputs = [
    buf750: ComputedBuffer
    buf750.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf750.users = [
        NodeUser(node=SchedulerNode(name='op751'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op752'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op754'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op758'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op759'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op760'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op761'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op775'), can_inplace=True, is_weak=False),
    ]
]
op750.group.device = cuda:0
op750.group.iteration = (2097152, 1)
op750.sizes = ([2048, 1024], [])
buf716_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf733_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg472_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf749_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg482_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf750_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op750_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf716', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf733', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg472_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf749', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg482_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf750', get_index_5, add_3, None)
        return store
op750 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op750_op751_op752_op754.snodes[1] =
op751: SchedulerNode(ComputedBuffer)
op751.writes = [MemoryDep('buf751', c0, {c0: 2048}, None)]
op751.unmet_dependencies = [MemoryDep('buf750', c0, {c0: 2097152}, None)]
op751.met_dependencies = []
op751.outputs = [
    buf751: ComputedBuffer
    buf751.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf751.users = [NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False)]
]
op751.group.device = cuda:0
op751.group.iteration = (2048, 1024)
op751.sizes = ([2048], [1024])
buf750_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf751_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op751_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf750', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf751', get_index_1, getitem)
        return store_reduction
op751 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op750_op751_op752_op754.snodes[2] =
op752: SchedulerNode(ComputedBuffer)
op752.writes = [MemoryDep('buf752', c0, {c0: 2048}, None)]
op752.unmet_dependencies = [MemoryDep('buf750', c0, {c0: 2097152}, None)]
op752.met_dependencies = []
op752.outputs = [
    buf752: ComputedBuffer
    buf752.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf752.users = [NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False)]
]
op752.group.device = cuda:0
op752.group.iteration = (2048, 1024)
op752.sizes = ([2048], [1024])
buf750_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf752_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op752_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf750', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf752', get_index_1, getitem_1)
        return store_reduction
op752 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op750_op751_op752_op754.snodes[3] =
op754: SchedulerNode(ComputedBuffer)
op754.writes = [MemoryDep('buf754', c0, {c0: 2097152}, None)]
op754.unmet_dependencies = 
    [   MemoryDep('buf750', c0, {c0: 2097152}, None),
        MemoryDep('buf751', c0, {c0: 2048}, None),
        MemoryDep('buf752', c0, {c0: 2048}, None)]
op754.met_dependencies = 
    [   MemoryDep('arg483_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg484_1', c1, {c0: 2048, c1: 1024}, None)]
op754.outputs = [
    buf754: ComputedBuffer
    buf754.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf754.users = [NodeUser(node=ExternKernelSchedulerNode(name='op755'), can_inplace=False, is_weak=False)]
]
op754.group.device = cuda:0
op754.group.iteration = (2097152, 1)
op754.sizes = ([2048, 1024], [])
buf750_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf751_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf752_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg483_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg484_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf754_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op754_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf750', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf751', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf752', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg483_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg484_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf754', get_index_5, add_1, None)
        return store
op754 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op750_op751_op752_op754 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op755: ExternKernelSchedulerNode(ExternKernelOut)
op755.writes = [StarDep(name='buf755', mode=None)]
op755.unmet_dependencies = [StarDep(name='buf754', mode=None)]
op755.met_dependencies = [StarDep(name='arg485_1', mode=None)]
op755.outputs = [
    buf755: ExternKernelOut
    buf755.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf755.users = [NodeUser(node=SchedulerNode(name='op756'), can_inplace=True, is_weak=False)]
]
op755.node.kernel = extern_kernels.mm


op756: SchedulerNode(ComputedBuffer)
op756.writes = [MemoryDep('buf756', c0, {c0: 8388608}, None)]
op756.unmet_dependencies = [MemoryDep('buf755', c0, {c0: 8388608}, None)]
op756.met_dependencies = [MemoryDep('arg486_1', c1, {c0: 2048, c1: 4096}, None)]
op756.outputs = [
    buf756: ComputedBuffer
    buf756.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf756.users = [NodeUser(node=ExternKernelSchedulerNode(name='op757'), can_inplace=False, is_weak=False)]
]
op756.group.device = cuda:0
op756.group.iteration = (8388608, 1)
op756.sizes = ([2048, 4096], [])
buf755_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg486_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf756_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op756_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf755', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg486_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf755', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg486_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf756', get_index_4, mul_2, None)
        return store
op756 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op757: ExternKernelSchedulerNode(ExternKernelOut)
op757.writes = [StarDep(name='buf757', mode=None)]
op757.unmet_dependencies = [StarDep(name='buf756', mode=None)]
op757.met_dependencies = [StarDep(name='arg487_1', mode=None)]
op757.outputs = [
    buf757: ExternKernelOut
    buf757.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf757.users = [
        NodeUser(node=SchedulerNode(name='op758'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op759'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op760'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op761'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op775'), can_inplace=True, is_weak=False),
    ]
]
op757.node.kernel = extern_kernels.mm


op758_op759_op761: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op758_op759_op761.writes = 
    [   MemoryDep('buf758', c0, {c0: 2048}, None),
        MemoryDep('buf759', c0, {c0: 2048}, None),
        MemoryDep('buf761', c0, {c0: 2097152}, None)]
op758_op759_op761.unmet_dependencies = 
    [   MemoryDep('buf750', c0, {c0: 2097152}, None),
        MemoryDep('buf757', c0, {c0: 2097152}, None)]
op758_op759_op761.met_dependencies = 
    [   MemoryDep('arg488_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg489_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg490_1', c1, {c0: 2048, c1: 1024}, None)]
op758_op759_op761.outputs = [
    buf758: ComputedBuffer
    buf758.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf758.users = [NodeUser(node=SchedulerNode(name='op761'), can_inplace=False, is_weak=False)]
    buf759: ComputedBuffer
    buf759.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf759.users = [NodeUser(node=SchedulerNode(name='op761'), can_inplace=False, is_weak=False)]
    buf761: ComputedBuffer
    buf761.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf761.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op762'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op763'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op764'), can_inplace=False, is_weak=False),
    ]
]
op758_op759_op761.snodes[0] =
op758: SchedulerNode(ComputedBuffer)
op758.writes = [MemoryDep('buf758', c0, {c0: 2048}, None)]
op758.unmet_dependencies = 
    [   MemoryDep('buf750', c0, {c0: 2097152}, None),
        MemoryDep('buf757', c0, {c0: 2097152}, None)]
op758.met_dependencies = [MemoryDep('arg488_1', c1, {c0: 2048, c1: 1024}, None)]
op758.outputs = [
    buf758: ComputedBuffer
    buf758.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf758.users = [NodeUser(node=SchedulerNode(name='op761'), can_inplace=False, is_weak=False)]
]
op758.group.device = cuda:0
op758.group.iteration = (2048, 1024)
op758.sizes = ([2048], [1024])
buf750_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf757_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg488_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf758_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op758_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf750', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf757', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg488_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf758', get_index_3, getitem)
        return store_reduction
op758 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op758_op759_op761.snodes[1] =
op759: SchedulerNode(ComputedBuffer)
op759.writes = [MemoryDep('buf759', c0, {c0: 2048}, None)]
op759.unmet_dependencies = 
    [   MemoryDep('buf750', c0, {c0: 2097152}, None),
        MemoryDep('buf757', c0, {c0: 2097152}, None)]
op759.met_dependencies = [MemoryDep('arg488_1', c1, {c0: 2048, c1: 1024}, None)]
op759.outputs = [
    buf759: ComputedBuffer
    buf759.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf759.users = [NodeUser(node=SchedulerNode(name='op761'), can_inplace=False, is_weak=False)]
]
op759.group.device = cuda:0
op759.group.iteration = (2048, 1024)
op759.sizes = ([2048], [1024])
buf750_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf757_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg488_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf759_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op759_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf750', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf757', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg488_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf759', get_index_3, getitem_1)
        return store_reduction
op759 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op758_op759_op761.snodes[2] =
op761: SchedulerNode(ComputedBuffer)
op761.writes = [MemoryDep('buf761', c0, {c0: 2097152}, None)]
op761.unmet_dependencies = 
    [   MemoryDep('buf750', c0, {c0: 2097152}, None),
        MemoryDep('buf757', c0, {c0: 2097152}, None),
        MemoryDep('buf758', c0, {c0: 2048}, None),
        MemoryDep('buf759', c0, {c0: 2048}, None)]
op761.met_dependencies = 
    [   MemoryDep('arg488_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg489_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg490_1', c1, {c0: 2048, c1: 1024}, None)]
op761.outputs = [
    buf761: ComputedBuffer
    buf761.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf761.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op762'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op763'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op764'), can_inplace=False, is_weak=False),
    ]
]
op761.group.device = cuda:0
op761.group.iteration = (2097152, 1)
op761.sizes = ([2048, 1024], [])
buf750_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf757_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg488_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf758_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf759_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg489_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg490_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf761_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op761_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf750', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf757', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg488_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf758', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf759', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg489_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg490_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf761', get_index_7, add_3, None)
        return store
op761 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op758_op759_op761 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op762: ExternKernelSchedulerNode(ExternKernelOut)
op762.writes = [StarDep(name='buf762', mode=None)]
op762.unmet_dependencies = [StarDep(name='buf761', mode=None)]
op762.met_dependencies = [StarDep(name='arg491_1', mode=None)]
op762.outputs = [
    buf762: ExternKernelOut
    buf762.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf762.users = [NodeUser(node=SchedulerNode(name='op765'), can_inplace=False, is_weak=False)]
]
op762.node.kernel = extern_kernels.mm


op763: ExternKernelSchedulerNode(ExternKernelOut)
op763.writes = [StarDep(name='buf763', mode=None)]
op763.unmet_dependencies = [StarDep(name='buf761', mode=None)]
op763.met_dependencies = [StarDep(name='arg493_1', mode=None)]
op763.outputs = [
    buf763: ExternKernelOut
    buf763.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf763.users = [NodeUser(node=SchedulerNode(name='op766'), can_inplace=False, is_weak=False)]
]
op763.node.kernel = extern_kernels.mm


op764: ExternKernelSchedulerNode(ExternKernelOut)
op764.writes = [StarDep(name='buf764', mode=None)]
op764.unmet_dependencies = [StarDep(name='buf761', mode=None)]
op764.met_dependencies = [StarDep(name='arg495_1', mode=None)]
op764.outputs = [
    buf764: ExternKernelOut
    buf764.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf764.users = [NodeUser(node=SchedulerNode(name='op767'), can_inplace=False, is_weak=False)]
]
op764.node.kernel = extern_kernels.mm


op765: SchedulerNode(ComputedBuffer)
op765.writes = [MemoryDep('buf765', c0, {c0: 2097152}, None)]
op765.unmet_dependencies = [   MemoryDep('buf762', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op765.met_dependencies = [MemoryDep('arg492_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op765.outputs = [
    buf765: ComputedBuffer
    buf765.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf765.users = [NodeUser(node=ExternKernelSchedulerNode(name='op769'), can_inplace=False, is_weak=False)]
]
op765.group.device = cuda:0
op765.group.iteration = (2097152, 1)
op765.sizes = ([2, 16, 1024, 64], [])
buf762_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg492_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf765_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op765_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf762', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg492_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf765', get_index_2, add, None)
        return store
op765 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op766: SchedulerNode(ComputedBuffer)
op766.writes = [MemoryDep('buf766', c0, {c0: 2097152}, None)]
op766.unmet_dependencies = [   MemoryDep('buf763', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op766.met_dependencies = [MemoryDep('arg494_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op766.outputs = [
    buf766: ComputedBuffer
    buf766.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf766.users = [NodeUser(node=ExternKernelSchedulerNode(name='op769'), can_inplace=False, is_weak=False)]
]
op766.group.device = cuda:0
op766.group.iteration = (2097152, 1)
op766.sizes = ([2, 16, 1024, 64], [])
buf763_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg494_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf766_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op766_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf763', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg494_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf766', get_index_2, add, None)
        return store
op766 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op767: SchedulerNode(ComputedBuffer)
op767.writes = [MemoryDep('buf767', c0, {c0: 2097152}, None)]
op767.unmet_dependencies = [   MemoryDep('buf764', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op767.met_dependencies = [MemoryDep('arg496_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op767.outputs = [
    buf767: ComputedBuffer
    buf767.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf767.users = [NodeUser(node=ExternKernelSchedulerNode(name='op769'), can_inplace=False, is_weak=False)]
]
op767.group.device = cuda:0
op767.group.iteration = (2097152, 1)
op767.sizes = ([2, 16, 1024, 64], [])
buf764_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg496_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf767_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op767_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf764', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg496_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf767', get_index_2, add, None)
        return store
op767 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op768: SchedulerNode(ComputedBuffer)
op768.writes = [MemoryDep('buf768', c0, {c0: 33554432}, None)]
op768.unmet_dependencies = []
op768.met_dependencies = []
op768.outputs = [
    buf768: ComputedBuffer
    buf768.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
    buf768.users = [NodeUser(node=ExternKernelSchedulerNode(name='op769'), can_inplace=False, is_weak=False)]
]
op768.group.device = cuda:0
op768.group.iteration = (33554432, 1)
op768.sizes = ([32, 1024, 1024], [])
buf768_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 1024], stride=[16777216, 1048576, 1024, 1])
class op768_loop_body:
    var_ranges = {z0: 32, z1: 1024, z2: 1024}
    index0 = z2
    index1 = z1 + 1
    index2 = 1048576*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf768', get_index_2, where, None)
        return store
op768 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 1024
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op769: ExternKernelSchedulerNode(FallbackKernel)
op769.writes = [StarDep(name='buf769', mode=None)]
op769.unmet_dependencies = 
    [   StarDep(name='buf765', mode=None),
        StarDep(name='buf766', mode=None),
        StarDep(name='buf767', mode=None),
        StarDep(name='buf768', mode=None)]
op769.met_dependencies = []
op769.outputs = [
    buf769: FallbackKernel
    buf769.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf769.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op770'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op771'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op772'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op773'), can_inplace=False, is_weak=False),
    ]
]
op769.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op770: ExternKernelSchedulerNode(MultiOutput)
op770.writes = [StarDep(name='buf770', mode=None)]
op770.unmet_dependencies = [StarDep(name='buf769', mode=None)]
op770.met_dependencies = []
op770.outputs = [
    buf770: MultiOutput
    buf770.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf770.users = [NodeUser(node=ExternKernelSchedulerNode(name='op774'), can_inplace=False, is_weak=False)]
]
op770.node.kernel = None


op774: ExternKernelSchedulerNode(ExternKernelOut)
op774.writes = [StarDep(name='buf774', mode=None)]
op774.unmet_dependencies = [StarDep(name='buf770', mode=None)]
op774.met_dependencies = [StarDep(name='arg497_1', mode=None)]
op774.outputs = [
    buf774: ExternKernelOut
    buf774.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf774.users = [NodeUser(node=SchedulerNode(name='op775'), can_inplace=True, is_weak=False)]
]
op774.node.kernel = extern_kernels.mm


op775_op776_op777_op779: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op775_op776_op777_op779.writes = 
    [   MemoryDep('buf775', c0, {c0: 2097152}, None),
        MemoryDep('buf776', c0, {c0: 2048}, None),
        MemoryDep('buf777', c0, {c0: 2048}, None),
        MemoryDep('buf779', c0, {c0: 2097152}, None)]
op775_op776_op777_op779.unmet_dependencies = 
    [   MemoryDep('buf750', c0, {c0: 2097152}, None),
        MemoryDep('buf757', c0, {c0: 2097152}, None),
        MemoryDep('buf774', c0, {c0: 2097152}, None)]
op775_op776_op777_op779.met_dependencies = 
    [   MemoryDep('arg488_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg498_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg499_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg500_1', c1, {c0: 2048, c1: 1024}, None)]
op775_op776_op777_op779.outputs = [
    buf775: ComputedBuffer
    buf775.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf775.users = [
        NodeUser(node=SchedulerNode(name='op776'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op777'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op778'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op779'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op792'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op793'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op794'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op795'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op799'), can_inplace=True, is_weak=False),
    ]
    buf776: ComputedBuffer
    buf776.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf776.users = [NodeUser(node=SchedulerNode(name='op779'), can_inplace=False, is_weak=False)]
    buf777: ComputedBuffer
    buf777.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf777.users = [NodeUser(node=SchedulerNode(name='op779'), can_inplace=False, is_weak=False)]
    buf779: ComputedBuffer
    buf779.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf779.users = [NodeUser(node=ExternKernelSchedulerNode(name='op780'), can_inplace=False, is_weak=False)]
]
op775_op776_op777_op779.snodes[0] =
op775: SchedulerNode(ComputedBuffer)
op775.writes = [MemoryDep('buf775', c0, {c0: 2097152}, None)]
op775.unmet_dependencies = 
    [   MemoryDep('buf750', c0, {c0: 2097152}, None),
        MemoryDep('buf757', c0, {c0: 2097152}, None),
        MemoryDep('buf774', c0, {c0: 2097152}, None)]
op775.met_dependencies = 
    [   MemoryDep('arg488_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg498_1', c1, {c0: 2048, c1: 1024}, None)]
op775.outputs = [
    buf775: ComputedBuffer
    buf775.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf775.users = [
        NodeUser(node=SchedulerNode(name='op776'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op777'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op778'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op779'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op792'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op793'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op794'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op795'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op799'), can_inplace=True, is_weak=False),
    ]
]
op775.group.device = cuda:0
op775.group.iteration = (2097152, 1)
op775.sizes = ([2048, 1024], [])
buf750_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf757_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg488_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf774_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg498_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf775_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op775_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf750', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf757', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg488_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf774', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg498_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf775', get_index_5, add_3, None)
        return store
op775 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op775_op776_op777_op779.snodes[1] =
op776: SchedulerNode(ComputedBuffer)
op776.writes = [MemoryDep('buf776', c0, {c0: 2048}, None)]
op776.unmet_dependencies = [MemoryDep('buf775', c0, {c0: 2097152}, None)]
op776.met_dependencies = []
op776.outputs = [
    buf776: ComputedBuffer
    buf776.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf776.users = [NodeUser(node=SchedulerNode(name='op779'), can_inplace=False, is_weak=False)]
]
op776.group.device = cuda:0
op776.group.iteration = (2048, 1024)
op776.sizes = ([2048], [1024])
buf775_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf776_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op776_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf775', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf776', get_index_1, getitem)
        return store_reduction
op776 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op775_op776_op777_op779.snodes[2] =
op777: SchedulerNode(ComputedBuffer)
op777.writes = [MemoryDep('buf777', c0, {c0: 2048}, None)]
op777.unmet_dependencies = [MemoryDep('buf775', c0, {c0: 2097152}, None)]
op777.met_dependencies = []
op777.outputs = [
    buf777: ComputedBuffer
    buf777.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf777.users = [NodeUser(node=SchedulerNode(name='op779'), can_inplace=False, is_weak=False)]
]
op777.group.device = cuda:0
op777.group.iteration = (2048, 1024)
op777.sizes = ([2048], [1024])
buf775_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf777_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op777_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf775', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf777', get_index_1, getitem_1)
        return store_reduction
op777 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op775_op776_op777_op779.snodes[3] =
op779: SchedulerNode(ComputedBuffer)
op779.writes = [MemoryDep('buf779', c0, {c0: 2097152}, None)]
op779.unmet_dependencies = 
    [   MemoryDep('buf775', c0, {c0: 2097152}, None),
        MemoryDep('buf776', c0, {c0: 2048}, None),
        MemoryDep('buf777', c0, {c0: 2048}, None)]
op779.met_dependencies = 
    [   MemoryDep('arg499_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg500_1', c1, {c0: 2048, c1: 1024}, None)]
op779.outputs = [
    buf779: ComputedBuffer
    buf779.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf779.users = [NodeUser(node=ExternKernelSchedulerNode(name='op780'), can_inplace=False, is_weak=False)]
]
op779.group.device = cuda:0
op779.group.iteration = (2097152, 1)
op779.sizes = ([2048, 1024], [])
buf775_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf776_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf777_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg499_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg500_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf779_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op779_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf775', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf776', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf777', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg499_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg500_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf779', get_index_5, add_1, None)
        return store
op779 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op775_op776_op777_op779 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op780: ExternKernelSchedulerNode(ExternKernelOut)
op780.writes = [StarDep(name='buf780', mode=None)]
op780.unmet_dependencies = [StarDep(name='buf779', mode=None)]
op780.met_dependencies = [StarDep(name='arg501_1', mode=None)]
op780.outputs = [
    buf780: ExternKernelOut
    buf780.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf780.users = [NodeUser(node=SchedulerNode(name='op783'), can_inplace=False, is_weak=False)]
]
op780.node.kernel = extern_kernels.mm


op781: ExternKernelSchedulerNode(ExternKernelOut)
op781.writes = [StarDep(name='buf781', mode=None)]
op781.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op781.met_dependencies = [StarDep(name='arg503_1', mode=None)]
op781.outputs = [
    buf781: ExternKernelOut
    buf781.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf781.users = [NodeUser(node=SchedulerNode(name='op784'), can_inplace=False, is_weak=False)]
]
op781.node.kernel = extern_kernels.mm


op782: ExternKernelSchedulerNode(ExternKernelOut)
op782.writes = [StarDep(name='buf782', mode=None)]
op782.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op782.met_dependencies = [StarDep(name='arg505_1', mode=None)]
op782.outputs = [
    buf782: ExternKernelOut
    buf782.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf782.users = [NodeUser(node=SchedulerNode(name='op785'), can_inplace=False, is_weak=False)]
]
op782.node.kernel = extern_kernels.mm


op783: SchedulerNode(ComputedBuffer)
op783.writes = [MemoryDep('buf783', c0, {c0: 2097152}, None)]
op783.unmet_dependencies = [   MemoryDep('buf780', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op783.met_dependencies = [MemoryDep('arg502_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op783.outputs = [
    buf783: ComputedBuffer
    buf783.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf783.users = [NodeUser(node=ExternKernelSchedulerNode(name='op786'), can_inplace=False, is_weak=False)]
]
op783.group.device = cuda:0
op783.group.iteration = (2097152, 1)
op783.sizes = ([2, 16, 1024, 64], [])
buf780_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg502_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf783_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op783_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf780', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg502_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf783', get_index_2, add, None)
        return store
op783 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op784: SchedulerNode(ComputedBuffer)
op784.writes = [MemoryDep('buf784', c0, {c0: 2097152}, None)]
op784.unmet_dependencies = [   MemoryDep('buf781', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op784.met_dependencies = [MemoryDep('arg504_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op784.outputs = [
    buf784: ComputedBuffer
    buf784.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf784.users = [NodeUser(node=ExternKernelSchedulerNode(name='op786'), can_inplace=False, is_weak=False)]
]
op784.group.device = cuda:0
op784.group.iteration = (2097152, 1)
op784.sizes = ([2, 16, 1024, 64], [])
buf781_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg504_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf784_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op784_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf781', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg504_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf784', get_index_2, add, None)
        return store
op784 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op785: SchedulerNode(ComputedBuffer)
op785.writes = [MemoryDep('buf785', c0, {c0: 2097152}, None)]
op785.unmet_dependencies = [   MemoryDep('buf782', 1048576*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op785.met_dependencies = [MemoryDep('arg506_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 1024, c3: 64}, None)]
op785.outputs = [
    buf785: ComputedBuffer
    buf785.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
    buf785.users = [NodeUser(node=ExternKernelSchedulerNode(name='op786'), can_inplace=False, is_weak=False)]
]
op785.group.device = cuda:0
op785.group.iteration = (2097152, 1)
op785.sizes = ([2, 16, 1024, 64], [])
buf782_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg506_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf785_layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 65536, 64, 1])
class op785_loop_body:
    var_ranges = {z0: 2, z1: 16, z2: 1024, z3: 64}
    index0 = 1048576*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 1048576*z0 + 65536*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf782', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg506_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf785', get_index_2, add, None)
        return store
op785 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 1024
        x2 = (xindex // 65536) % 16
        x3 = (xindex // 1048576)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (1048576*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op786: ExternKernelSchedulerNode(FallbackKernel)
op786.writes = [StarDep(name='buf786', mode=None)]
op786.unmet_dependencies = 
    [   StarDep(name='buf783', mode=None),
        StarDep(name='buf784', mode=None),
        StarDep(name='buf785', mode=None)]
op786.met_dependencies = []
op786.outputs = [
    buf786: FallbackKernel
    buf786.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf786.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op787'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op788'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op789'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op790'), can_inplace=False, is_weak=False),
    ]
]
op786.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op787: ExternKernelSchedulerNode(MultiOutput)
op787.writes = [StarDep(name='buf787', mode=None)]
op787.unmet_dependencies = [StarDep(name='buf786', mode=None)]
op787.met_dependencies = []
op787.outputs = [
    buf787: MultiOutput
    buf787.layout = FixedLayout('cuda', torch.float32, size=[2, 16, 1024, 64], stride=[1048576, 64, 1024, 1])
    buf787.users = [NodeUser(node=ExternKernelSchedulerNode(name='op791'), can_inplace=False, is_weak=False)]
]
op787.node.kernel = None


op791: ExternKernelSchedulerNode(ExternKernelOut)
op791.writes = [StarDep(name='buf791', mode=None)]
op791.unmet_dependencies = [StarDep(name='buf787', mode=None)]
op791.met_dependencies = [StarDep(name='arg507_1', mode=None)]
op791.outputs = [
    buf791: ExternKernelOut
    buf791.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf791.users = [
        NodeUser(node=SchedulerNode(name='op792'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op793'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op794'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op795'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op799'), can_inplace=True, is_weak=False),
    ]
]
op791.node.kernel = extern_kernels.mm


op792_op793_op795: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op792_op793_op795.writes = 
    [   MemoryDep('buf792', c0, {c0: 2048}, None),
        MemoryDep('buf793', c0, {c0: 2048}, None),
        MemoryDep('buf795', c0, {c0: 2097152}, None)]
op792_op793_op795.unmet_dependencies = 
    [   MemoryDep('buf775', c0, {c0: 2097152}, None),
        MemoryDep('buf791', c0, {c0: 2097152}, None)]
op792_op793_op795.met_dependencies = 
    [   MemoryDep('arg508_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg509_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg510_1', c1, {c0: 2048, c1: 1024}, None)]
op792_op793_op795.outputs = [
    buf792: ComputedBuffer
    buf792.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf792.users = [NodeUser(node=SchedulerNode(name='op795'), can_inplace=False, is_weak=False)]
    buf793: ComputedBuffer
    buf793.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf793.users = [NodeUser(node=SchedulerNode(name='op795'), can_inplace=False, is_weak=False)]
    buf795: ComputedBuffer
    buf795.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf795.users = [NodeUser(node=ExternKernelSchedulerNode(name='op796'), can_inplace=False, is_weak=False)]
]
op792_op793_op795.snodes[0] =
op792: SchedulerNode(ComputedBuffer)
op792.writes = [MemoryDep('buf792', c0, {c0: 2048}, None)]
op792.unmet_dependencies = 
    [   MemoryDep('buf775', c0, {c0: 2097152}, None),
        MemoryDep('buf791', c0, {c0: 2097152}, None)]
op792.met_dependencies = [MemoryDep('arg508_1', c1, {c0: 2048, c1: 1024}, None)]
op792.outputs = [
    buf792: ComputedBuffer
    buf792.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf792.users = [NodeUser(node=SchedulerNode(name='op795'), can_inplace=False, is_weak=False)]
]
op792.group.device = cuda:0
op792.group.iteration = (2048, 1024)
op792.sizes = ([2048], [1024])
buf775_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf791_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg508_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf792_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op792_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf775', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf791', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg508_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf792', get_index_3, getitem)
        return store_reduction
op792 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op792_op793_op795.snodes[1] =
op793: SchedulerNode(ComputedBuffer)
op793.writes = [MemoryDep('buf793', c0, {c0: 2048}, None)]
op793.unmet_dependencies = 
    [   MemoryDep('buf775', c0, {c0: 2097152}, None),
        MemoryDep('buf791', c0, {c0: 2097152}, None)]
op793.met_dependencies = [MemoryDep('arg508_1', c1, {c0: 2048, c1: 1024}, None)]
op793.outputs = [
    buf793: ComputedBuffer
    buf793.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf793.users = [NodeUser(node=SchedulerNode(name='op795'), can_inplace=False, is_weak=False)]
]
op793.group.device = cuda:0
op793.group.iteration = (2048, 1024)
op793.sizes = ([2048], [1024])
buf775_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf791_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg508_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf793_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op793_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf775', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf791', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg508_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf793', get_index_3, getitem_1)
        return store_reduction
op793 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op792_op793_op795.snodes[2] =
op795: SchedulerNode(ComputedBuffer)
op795.writes = [MemoryDep('buf795', c0, {c0: 2097152}, None)]
op795.unmet_dependencies = 
    [   MemoryDep('buf775', c0, {c0: 2097152}, None),
        MemoryDep('buf791', c0, {c0: 2097152}, None),
        MemoryDep('buf792', c0, {c0: 2048}, None),
        MemoryDep('buf793', c0, {c0: 2048}, None)]
op795.met_dependencies = 
    [   MemoryDep('arg508_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg509_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg510_1', c1, {c0: 2048, c1: 1024}, None)]
op795.outputs = [
    buf795: ComputedBuffer
    buf795.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf795.users = [NodeUser(node=ExternKernelSchedulerNode(name='op796'), can_inplace=False, is_weak=False)]
]
op795.group.device = cuda:0
op795.group.iteration = (2097152, 1)
op795.sizes = ([2048, 1024], [])
buf775_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf791_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg508_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf792_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf793_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg509_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg510_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf795_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op795_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf775', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf791', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg508_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf792', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf793', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg509_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg510_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf795', get_index_7, add_3, None)
        return store
op795 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op792_op793_op795 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op796: ExternKernelSchedulerNode(ExternKernelOut)
op796.writes = [StarDep(name='buf796', mode=None)]
op796.unmet_dependencies = [StarDep(name='buf795', mode=None)]
op796.met_dependencies = [StarDep(name='arg511_1', mode=None)]
op796.outputs = [
    buf796: ExternKernelOut
    buf796.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf796.users = [NodeUser(node=SchedulerNode(name='op797'), can_inplace=True, is_weak=False)]
]
op796.node.kernel = extern_kernels.mm


op797: SchedulerNode(ComputedBuffer)
op797.writes = [MemoryDep('buf797', c0, {c0: 8388608}, None)]
op797.unmet_dependencies = [MemoryDep('buf796', c0, {c0: 8388608}, None)]
op797.met_dependencies = [MemoryDep('arg512_1', c1, {c0: 2048, c1: 4096}, None)]
op797.outputs = [
    buf797: ComputedBuffer
    buf797.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
    buf797.users = [NodeUser(node=ExternKernelSchedulerNode(name='op798'), can_inplace=False, is_weak=False)]
]
op797.group.device = cuda:0
op797.group.iteration = (8388608, 1)
op797.sizes = ([2048, 4096], [])
buf796_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg512_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf797_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 4096], stride=[4194304, 4096, 1])
class op797_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf796', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg512_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf796', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg512_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf797', get_index_4, mul_2, None)
        return store
op797 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op798: ExternKernelSchedulerNode(ExternKernelOut)
op798.writes = [StarDep(name='buf798', mode=None)]
op798.unmet_dependencies = [StarDep(name='buf797', mode=None)]
op798.met_dependencies = [StarDep(name='arg513_1', mode=None)]
op798.outputs = [
    buf798: ExternKernelOut
    buf798.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf798.users = [NodeUser(node=SchedulerNode(name='op799'), can_inplace=True, is_weak=False)]
]
op798.node.kernel = extern_kernels.mm


op799_op800_op801_op803: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op799_op800_op801_op803.writes = 
    [   MemoryDep('buf799', c0, {c0: 2097152}, None),
        MemoryDep('buf800', c0, {c0: 2048}, None),
        MemoryDep('buf801', c0, {c0: 2048}, None),
        MemoryDep('buf803', c0, {c0: 2097152}, None)]
op799_op800_op801_op803.unmet_dependencies = 
    [   MemoryDep('buf775', c0, {c0: 2097152}, None),
        MemoryDep('buf791', c0, {c0: 2097152}, None),
        MemoryDep('buf798', c0, {c0: 2097152}, None)]
op799_op800_op801_op803.met_dependencies = 
    [   MemoryDep('arg508_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg514_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg515_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg516_1', c1, {c0: 2048, c1: 1024}, None)]
op799_op800_op801_op803.outputs = [
    buf799: ComputedBuffer
    buf799.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf799.users = [
        NodeUser(node=SchedulerNode(name='op800'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op801'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op802'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op803'), can_inplace=True, is_weak=False),
    ]
    buf800: ComputedBuffer
    buf800.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf800.users = [NodeUser(node=SchedulerNode(name='op803'), can_inplace=False, is_weak=False)]
    buf801: ComputedBuffer
    buf801.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf801.users = [NodeUser(node=SchedulerNode(name='op803'), can_inplace=False, is_weak=False)]
    buf803: ComputedBuffer
    buf803.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf803.users = [NodeUser(node=ExternKernelSchedulerNode(name='op805'), can_inplace=False, is_weak=False)]
]
op799_op800_op801_op803.snodes[0] =
op799: SchedulerNode(ComputedBuffer)
op799.writes = [MemoryDep('buf799', c0, {c0: 2097152}, None)]
op799.unmet_dependencies = 
    [   MemoryDep('buf775', c0, {c0: 2097152}, None),
        MemoryDep('buf791', c0, {c0: 2097152}, None),
        MemoryDep('buf798', c0, {c0: 2097152}, None)]
op799.met_dependencies = 
    [   MemoryDep('arg508_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg514_1', c1, {c0: 2048, c1: 1024}, None)]
op799.outputs = [
    buf799: ComputedBuffer
    buf799.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf799.users = [
        NodeUser(node=SchedulerNode(name='op800'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op801'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op802'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op803'), can_inplace=True, is_weak=False),
    ]
]
op799.group.device = cuda:0
op799.group.iteration = (2097152, 1)
op799.sizes = ([2048, 1024], [])
buf775_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf791_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg508_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf798_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg514_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf799_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op799_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf775', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf791', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg508_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf798', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg514_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf799', get_index_5, add_3, None)
        return store
op799 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op799_op800_op801_op803.snodes[1] =
op800: SchedulerNode(ComputedBuffer)
op800.writes = [MemoryDep('buf800', c0, {c0: 2048}, None)]
op800.unmet_dependencies = [MemoryDep('buf799', c0, {c0: 2097152}, None)]
op800.met_dependencies = []
op800.outputs = [
    buf800: ComputedBuffer
    buf800.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf800.users = [NodeUser(node=SchedulerNode(name='op803'), can_inplace=False, is_weak=False)]
]
op800.group.device = cuda:0
op800.group.iteration = (2048, 1024)
op800.sizes = ([2048], [1024])
buf799_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf800_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op800_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf799', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf800', get_index_1, getitem)
        return store_reduction
op800 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op799_op800_op801_op803.snodes[2] =
op801: SchedulerNode(ComputedBuffer)
op801.writes = [MemoryDep('buf801', c0, {c0: 2048}, None)]
op801.unmet_dependencies = [MemoryDep('buf799', c0, {c0: 2097152}, None)]
op801.met_dependencies = []
op801.outputs = [
    buf801: ComputedBuffer
    buf801.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
    buf801.users = [NodeUser(node=SchedulerNode(name='op803'), can_inplace=False, is_weak=False)]
]
op801.group.device = cuda:0
op801.group.iteration = (2048, 1024)
op801.sizes = ([2048], [1024])
buf799_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf801_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
class op801_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf799', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf801', get_index_1, getitem_1)
        return store_reduction
op801 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op799_op800_op801_op803.snodes[3] =
op803: SchedulerNode(ComputedBuffer)
op803.writes = [MemoryDep('buf803', c0, {c0: 2097152}, None)]
op803.unmet_dependencies = 
    [   MemoryDep('buf799', c0, {c0: 2097152}, None),
        MemoryDep('buf800', c0, {c0: 2048}, None),
        MemoryDep('buf801', c0, {c0: 2048}, None)]
op803.met_dependencies = 
    [   MemoryDep('arg515_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg516_1', c1, {c0: 2048, c1: 1024}, None)]
op803.outputs = [
    buf803: ComputedBuffer
    buf803.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
    buf803.users = [NodeUser(node=ExternKernelSchedulerNode(name='op805'), can_inplace=False, is_weak=False)]
]
op803.group.device = cuda:0
op803.group.iteration = (2097152, 1)
op803.sizes = ([2048, 1024], [])
buf799_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
buf800_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
buf801_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1], stride=[1024, 1, 2048])
arg515_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg516_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf803_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 1024], stride=[1048576, 1024, 1])
class op803_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf799', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf800', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf801', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg515_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg516_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf803', get_index_5, add_1, None)
        return store
op803 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op799_op800_op801_op803 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op804: SchedulerNode(ComputedBuffer)
op804.writes = [MemoryDep('buf804', 50272*c0 + c1, {c0: 1024, c1: 50268}, None)]
op804.unmet_dependencies = []
op804.met_dependencies = [MemoryDep('arg2_1', c0 + 1024*I, {c0: 1024, c1: 50268}, None)]
op804.outputs = [
    buf804: ComputedBuffer
    buf804.layout = FixedLayout('cuda', torch.float32, size=[1024, 50268], stride=[50272, 1])
    buf804.users = [NodeUser(node=ExternKernelSchedulerNode(name='op805'), can_inplace=False, is_weak=False)]
]
op804.group.device = cuda:0
op804.group.iteration = (51474432, 1)
op804.sizes = ([1024, 50268], [])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 1024], stride=[1024, 1])
buf804_layout = FixedLayout('cuda', torch.float32, size=[1024, 50268], stride=[50272, 1])
class op804_loop_body:
    var_ranges = {z0: 1024, z1: 50268}
    index0 = z1
    index1 = z0 + 1024*I
    index2 = 50272*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(50265, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(50265, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(50268, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf804', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg2_1', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
op804 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 51474432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 50268
        x1 = (xindex // 50268)
        tmp0 = x0
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 50265, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x1 + (1024*x0)), tmp4, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 50268, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = 0.0
        tmp10 = tl.full(tmp9.shape, 0.0, tmp9.dtype)
        tmp11 = tl.where(tmp6, tmp9, tmp10)
        tmp12 = tl.where(tmp4, tmp5, tmp11)
        tl.store(out_ptr0 + (x0 + (50272*x1)), tmp12, None)


op805: ExternKernelSchedulerNode(ExternKernelOut)
op805.writes = [StarDep(name='buf805', mode=None)]
op805.unmet_dependencies = [StarDep(name='buf803', mode=None), StarDep(name='buf804', mode=None)]
op805.met_dependencies = []
op805.outputs = [
    buf805: ExternKernelOut
    buf805.layout = FixedLayout('cuda', torch.float32, size=[2048, 50268], stride=[50272, 1])
    buf805.users = [NodeUser(node=SchedulerNode(name='op806'), can_inplace=False, is_weak=False)]
]
op805.node.kernel = extern_kernels.mm


op806_op807_op808: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op806_op807_op808.writes = 
    [   MemoryDep('buf806', c0, {c0: 102942720}, None),
        MemoryDep('buf807', c0, {c0: 2048}, None),
        MemoryDep('buf808', c0, {c0: 2048}, None)]
op806_op807_op808.unmet_dependencies = [MemoryDep('buf805', 50272*c0 + c1, {c0: 2048, c1: 50265}, None)]
op806_op807_op808.met_dependencies = [MemoryDep('arg517_1', c1, {c0: 2048, c1: 50265}, None)]
op806_op807_op808.outputs = [
    buf806: ComputedBuffer
    buf806.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 50265], stride=[51471360, 50265, 1])
    buf806.users = [
        NodeUser(node=SchedulerNode(name='op807'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op808'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op809'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf807: ComputedBuffer
    buf807.layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
    buf807.users = [
        NodeUser(node=SchedulerNode(name='op808'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op809'), can_inplace=False, is_weak=False),
    ]
    buf808: ComputedBuffer
    buf808.layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
    buf808.users = [NodeUser(node=SchedulerNode(name='op809'), can_inplace=False, is_weak=False)]
]
op806_op807_op808.snodes[0] =
op806: SchedulerNode(ComputedBuffer)
op806.writes = [MemoryDep('buf806', c0, {c0: 102942720}, None)]
op806.unmet_dependencies = [MemoryDep('buf805', 50272*c0 + c1, {c0: 2048, c1: 50265}, None)]
op806.met_dependencies = [MemoryDep('arg517_1', c1, {c0: 2048, c1: 50265}, None)]
op806.outputs = [
    buf806: ComputedBuffer
    buf806.layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 50265], stride=[51471360, 50265, 1])
    buf806.users = [
        NodeUser(node=SchedulerNode(name='op807'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op808'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op809'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op806.group.device = cuda:0
op806.group.iteration = (102942720, 1)
op806.sizes = ([2048, 50265], [])
buf805_layout = FixedLayout('cuda', torch.float32, size=[2048, 50268], stride=[50272, 1])
arg517_1_layout = FixedLayout('cuda', torch.float32, size=[1, 50265], stride=[50265, 1])
buf806_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 50265], stride=[51471360, 50265, 1])
class op806_loop_body:
    var_ranges = {z0: 2048, z1: 50265}
    index0 = 50272*z0 + z1
    index1 = z1
    index2 = 50265*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf805', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg517_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf806', get_index_2, add, None)
        return store
op806 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[134217728], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 102942720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 50265
        x1 = (xindex // 50265)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (50272*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)
op806_op807_op808.snodes[1] =
op807: SchedulerNode(ComputedBuffer)
op807.writes = [MemoryDep('buf807', c0, {c0: 2048}, None)]
op807.unmet_dependencies = [MemoryDep('buf806', c0, {c0: 102942720}, None)]
op807.met_dependencies = []
op807.outputs = [
    buf807: ComputedBuffer
    buf807.layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
    buf807.users = [
        NodeUser(node=SchedulerNode(name='op808'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op809'), can_inplace=False, is_weak=False),
    ]
]
op807.group.device = cuda:0
op807.group.iteration = (2048, 50265)
op807.sizes = ([2048], [50265])
buf806_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 50265], stride=[51471360, 50265, 1])
buf807_layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
class op807_loop_body:
    var_ranges = {z0: 2048, z1: 50265}
    index0 = 50265*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf806', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf807', get_index_1, reduction)
        return store_reduction
op807 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[2048, 65536],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 2048
        rnumel = 50265
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (50265*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp2, None)
op806_op807_op808.snodes[2] =
op808: SchedulerNode(ComputedBuffer)
op808.writes = [MemoryDep('buf808', c0, {c0: 2048}, None)]
op808.unmet_dependencies = 
    [   MemoryDep('buf806', c0, {c0: 102942720}, None),
        MemoryDep('buf807', c0, {c0: 2048}, None)]
op808.met_dependencies = []
op808.outputs = [
    buf808: ComputedBuffer
    buf808.layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
    buf808.users = [NodeUser(node=SchedulerNode(name='op809'), can_inplace=False, is_weak=False)]
]
op808.group.device = cuda:0
op808.group.iteration = (2048, 50265)
op808.sizes = ([2048], [50265])
buf806_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 50265], stride=[51471360, 50265, 1])
buf807_layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
buf808_layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
class op808_loop_body:
    var_ranges = {z0: 2048, z1: 50265}
    index0 = 50265*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf806', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf807', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf808', get_index_2, reduction)
        return store_reduction
op808 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[2048, 65536],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 2048
        rnumel = 50265
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (50265*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)
op806_op807_op808 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[2048, 65536],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 2048
        rnumel = 50265
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp4 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (50272*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
            tmp5 = triton_helpers.maximum(_tmp4, tmp3)
            _tmp4 = tl.where(rmask, tmp5, _tmp4)
            tl.store(out_ptr0 + (r1 + (50265*x0)), tmp2, rmask)
        tmp4 = triton_helpers.max2(_tmp4, 1)[:, None]
        tl.store(out_ptr1 + (x0), tmp4, None)
        _tmp10 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp6 = tl.load(out_ptr0 + (r1 + (50265*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp7 = tmp6 - tmp4
            tmp8 = tl_math.exp(tmp7)
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp11 = _tmp10 + tmp9
            _tmp10 = tl.where(rmask, tmp11, _tmp10)
        tmp10 = tl.sum(_tmp10, 1)[:, None]
        tl.store(out_ptr2 + (x0), tmp10, None)


op809_op810_op811: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op809_op810_op811.writes = 
    [   MemoryDep('buf809', 0, {}, None),
        MemoryDep('buf810', 0, {}, None),
        MemoryDep('buf811', 0, {}, None)]
op809_op810_op811.unmet_dependencies = 
    [   MemoryDep('buf806', 50265*c0 + tmp8, {c0: 2048}, None),
        MemoryDep('buf807', c0, {c0: 2048}, None),
        MemoryDep('buf808', c0, {c0: 2048}, None)]
op809_op810_op811.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 2048}, None)]
op809_op810_op811.outputs = [
    buf809: ComputedBuffer
    buf809.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf809.users = [NodeUser(node=SchedulerNode(name='op811'), can_inplace=True, is_weak=False)]
    buf810: ComputedBuffer
    buf810.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf810.users = [NodeUser(node=SchedulerNode(name='op811'), can_inplace=True, is_weak=False)]
    buf811: ComputedBuffer
    buf811.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf811.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op809_op810_op811.snodes[0] =
op809: SchedulerNode(ComputedBuffer)
op809.writes = [MemoryDep('buf809', 0, {}, None)]
op809.unmet_dependencies = 
    [   MemoryDep('buf806', 50265*c0 + tmp8, {c0: 2048}, None),
        MemoryDep('buf807', c0, {c0: 2048}, None),
        MemoryDep('buf808', c0, {c0: 2048}, None)]
op809.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 2048}, None)]
op809.outputs = [
    buf809: ComputedBuffer
    buf809.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf809.users = [NodeUser(node=SchedulerNode(name='op811'), can_inplace=True, is_weak=False)]
]
op809.group.device = cuda:0
op809.group.iteration = (1, 2048)
op809.sizes = ([], [2048])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[2, 1024], stride=[1024, 1])
buf806_layout = FixedLayout('cuda', torch.float32, size=[2, 1024, 50265], stride=[51471360, 50265, 1])
buf807_layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
buf808_layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
buf809_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op809_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    index1 = indirect0 + 50265*z0
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg0_1', get_index_1)
        constant_1 = ops.constant(-100, torch.int64)
        ne_1 = ops.ne(load_1, constant_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg0_1', get_index_2)
        constant_2 = ops.constant(0, torch.int64)
        where = ops.where(ne_1, load_2, constant_2)
        set_indirect0 = self.set_indirect0(where)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf806', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf807', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf808', get_index_5)
        log = ops.log(load_5)
        sub_1 = ops.sub(sub, log)
        neg = ops.neg(sub_1)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ne, neg, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', where_1)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf809', get_index_6, reduction)
        return store_reduction
op809 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 2048
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp13 = tl.load(in_ptr3 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tl.full([1, 1], 0, tl.int64)
            tmp4 = tl.where(tmp2, tmp0, tmp3)
            tmp5 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp6 = tmp4 + tmp5
            tmp7 = tmp4 < 0
            tmp8 = tl.where(tmp7, tmp6, tmp4)
            tl.device_assert(((0 <= tmp8) & (tmp8 < 50265)) | ~(rmask), "index out of bounds: 0 <= tmp8 < 50265")
            tmp10 = tl.load(in_ptr1 + (tmp8 + (50265*r0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 - tmp11
            tmp14 = tl_math.log(tmp13)
            tmp15 = tmp12 - tmp14
            tmp16 = -tmp15
            tmp17 = 0.0
            tmp18 = tl.where(tmp2, tmp16, tmp17)
            tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
            tmp21 = _tmp20 + tmp19
            _tmp20 = tl.where(rmask, tmp21, _tmp20)
        tmp20 = tl.sum(_tmp20, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp20, None)
op809_op810_op811.snodes[1] =
op810: SchedulerNode(ComputedBuffer)
op810.writes = [MemoryDep('buf810', 0, {}, None)]
op810.unmet_dependencies = []
op810.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 2048}, None)]
op810.outputs = [
    buf810: ComputedBuffer
    buf810.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf810.users = [NodeUser(node=SchedulerNode(name='op811'), can_inplace=True, is_weak=False)]
]
op810.group.device = cuda:0
op810.group.iteration = (1, 2048)
op810.sizes = ([], [2048])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[2, 1024], stride=[1024, 1])
buf810_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op810_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf810', get_index_1, reduction)
        return store_reduction
op810 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 3), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 2048
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tmp2.to(tl.int64)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp5, None)
op809_op810_op811.snodes[2] =
op811: SchedulerNode(ComputedBuffer)
op811.writes = [MemoryDep('buf811', 0, {}, None)]
op811.unmet_dependencies = [MemoryDep('buf809', 0, {}, None), MemoryDep('buf810', 0, {}, None)]
op811.met_dependencies = []
op811.outputs = [
    buf811: ComputedBuffer
    buf811.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf811.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op811.group.device = cuda:0
op811.group.iteration = (1, 1)
op811.sizes = ([], [])
buf809_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf810_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
buf811_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op811_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf809', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf810', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        truediv = ops.truediv(load, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf811', get_index_2, truediv, None)
        return store
op811 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp0 = tl.load(in_out_ptr0 + (0))
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
        tmp2 = tl.load(in_ptr0 + (0))
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK])
        tmp4 = tmp3.to(tl.float32)
        tmp5 = tmp1 / tmp4
        tl.store(in_out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp5, None)
op809_op810_op811 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 2048
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp13 = tl.load(in_ptr3 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tl.full([1, 1], 0, tl.int64)
            tmp4 = tl.where(tmp2, tmp0, tmp3)
            tmp5 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp6 = tmp4 + tmp5
            tmp7 = tmp4 < 0
            tmp8 = tl.where(tmp7, tmp6, tmp4)
            tl.device_assert(((0 <= tmp8) & (tmp8 < 50265)) | ~(rmask), "index out of bounds: 0 <= tmp8 < 50265")
            tmp10 = tl.load(in_ptr1 + (tmp8 + (50265*r0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 - tmp11
            tmp14 = tl_math.log(tmp13)
            tmp15 = tmp12 - tmp14
            tmp16 = -tmp15
            tmp17 = 0.0
            tmp18 = tl.where(tmp2, tmp16, tmp17)
            tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
            tmp21 = _tmp20 + tmp19
            _tmp20 = tl.where(rmask, tmp21, _tmp20)
            tmp22 = tmp2.to(tl.int64)
            tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
            tmp25 = _tmp24 + tmp23
            _tmp24 = tl.where(rmask, tmp25, _tmp24)
        tmp20 = tl.sum(_tmp20, 1)[:, None]
        tmp24 = tl.sum(_tmp24, 1)[:, None]
        tmp26 = tmp24.to(tl.float32)
        tmp27 = tmp20 / tmp26
        tl.debug_barrier()
        tl.store(in_out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp27, None)



op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 4096}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg1_1', c0, {c0: 4096}, None),
        MemoryDep('arg2_1', c1 + 1024*tmp0, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg3_1', c1, {c0: 32, c1: 131072}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf0.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (4096, 1024)
op0.sizes = ([32, 128], [1024])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[32, 128], stride=[128, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 1024], stride=[1024, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op0_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 128*z0 + z1
    index1 = 1024*indirect0 + z2
    index2 = z1
    index3 = 1024
    index4 = 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg3_1', get_index_4)
        add = ops.add(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf0', get_index_5, getitem)
        return store_reduction
op0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        x0 = xindex % 128
        tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp9 = tl.load(in_ptr2 + (r2 + (1024*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
            tmp6 = tl.load(in_ptr1 + (r2 + (1024*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp7 = 1.0
            tmp8 = tmp6 * tmp7
            tmp10 = tmp8 + tmp9
            tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
            tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
                tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
            )
            tmp12_mean = tl.where(rmask, tmp12_mean_next, tmp12_mean)
            tmp12_m2 = tl.where(rmask, tmp12_m2_next, tmp12_m2)
            tmp12_weight = tl.where(rmask, tmp12_weight_next, tmp12_weight)
        tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
            tmp12_mean, tmp12_m2, tmp12_weight, 1
        )
        tmp12 = tmp12_tmp[:, None]
        tmp13 = tmp13_tmp[:, None]
        tmp14 = tmp14_tmp[:, None]
        tl.store(out_ptr0 + (x3), tmp12, None)


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 4096}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = 
    [   MemoryDep('arg1_1', c0, {c0: 4096}, None),
        MemoryDep('arg2_1', c1 + 1024*tmp0, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg3_1', c1, {c0: 32, c1: 131072}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf1.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (4096, 1024)
op1.sizes = ([32, 128], [1024])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[32, 128], stride=[128, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 1024], stride=[1024, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op1_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 128*z0 + z1
    index1 = 1024*indirect0 + z2
    index2 = z1
    index3 = 1024
    index4 = 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg3_1', get_index_4)
        add = ops.add(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf1', get_index_5, getitem_1)
        return store_reduction
op1 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        x0 = xindex % 128
        tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp9 = tl.load(in_ptr2 + (r2 + (1024*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
            tmp6 = tl.load(in_ptr1 + (r2 + (1024*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp7 = 1.0
            tmp8 = tmp6 * tmp7
            tmp10 = tmp8 + tmp9
            tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
            tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
                tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
            )
            tmp12_mean = tl.where(rmask, tmp12_mean_next, tmp12_mean)
            tmp12_m2 = tl.where(rmask, tmp12_m2_next, tmp12_m2)
            tmp12_weight = tl.where(rmask, tmp12_weight_next, tmp12_weight)
        tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
            tmp12_mean, tmp12_m2, tmp12_weight, 1
        )
        tmp12 = tmp12_tmp[:, None]
        tmp13 = tmp13_tmp[:, None]
        tmp14 = tmp14_tmp[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 4194304}, None)]
op3.unmet_dependencies = 
    [   MemoryDep('buf0', c0, {c0: 4096}, None),
        MemoryDep('buf1', c0, {c0: 4096}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg1_1', c0, {c0: 4096}, None),
        MemoryDep('arg2_1', c1 + 1024*tmp0, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg3_1', c1, {c0: 32, c1: 131072}, None),
        MemoryDep('arg4_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg5_1', c1, {c0: 4096, c1: 1024}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf3.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (4194304, 1)
op3.sizes = ([32, 128, 1024], [])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[32, 128], stride=[128, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 1024], stride=[1024, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf1_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op3_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 128*z0 + z1
    index1 = 1024*indirect0 + z2
    index2 = z1
    index3 = 1024
    index4 = 1024*z1 + z2
    index5 = z2
    index6 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg3_1', get_index_4)
        add = ops.add(mul, load_2)
        get_index_5 = self.get_index('index0')
        load_3 = ops.load('buf0', get_index_5)
        sub = ops.sub(add, load_3)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_6)
        constant_1 = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_1)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_7 = self.get_index('index5')
        load_5 = ops.load('arg4_1', get_index_7)
        mul_2 = ops.mul(mul_1, load_5)
        get_index_8 = self.get_index('index5')
        load_6 = ops.load('arg5_1', get_index_8)
        add_2 = ops.add(mul_2, load_6)
        get_index_9 = self.get_index('index6')
        store = ops.store('buf3', get_index_9, add_2, None)
        return store
op3 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 1024)
        x0 = xindex % 1024
        x4 = xindex % 131072
        x5 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        tmp9 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr3 + (x3), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr4 + (x3), None, eviction_policy='evict_last')
        tmp20 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([XBLOCK], 50265, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
        tmp6 = tl.load(in_ptr1 + (x0 + (1024*tmp4)), None)
        tmp7 = 1.0
        tmp8 = tmp6 * tmp7
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 - tmp11
        tmp14 = 1024.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-05
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp21 = tmp19 * tmp20
        tmp23 = tmp21 + tmp22
        tl.store(out_ptr0 + (x5), tmp23, None)


op4: ExternKernelSchedulerNode(ExternKernelOut)
op4.writes = [StarDep(name='buf4', mode=None)]
op4.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op4.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op4.outputs = [
    buf4: ExternKernelOut
    buf4.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op4.node.kernel = extern_kernels.mm


op5: ExternKernelSchedulerNode(ExternKernelOut)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op5.met_dependencies = [StarDep(name='arg8_1', mode=None)]
op5.outputs = [
    buf5: ExternKernelOut
    buf5.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf5.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op5.node.kernel = extern_kernels.mm


op6: ExternKernelSchedulerNode(ExternKernelOut)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op6.met_dependencies = [StarDep(name='arg10_1', mode=None)]
op6.outputs = [
    buf6: ExternKernelOut
    buf6.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf6.users = [NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
]
op6.node.kernel = extern_kernels.mm


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 4194304}, None)]
op7.unmet_dependencies = [   MemoryDep('buf4', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op7.met_dependencies = [   MemoryDep('arg7_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (4194304, 1)
op7.sizes = ([512, 128, 64], [])
buf4_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op7_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf7', get_index_2, mul, None)
        return store
op7 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 4194304}, None)]
op8.unmet_dependencies = [   MemoryDep('buf5', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op8.met_dependencies = [   MemoryDep('arg9_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (4194304, 1)
op8.sizes = ([512, 128, 64], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op8_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg9_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf8', get_index_2, add, None)
        return store
op8 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 4194304}, None)]
op9.unmet_dependencies = [   MemoryDep('buf6', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op9.met_dependencies = [   MemoryDep('arg11_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (4194304, 1)
op9.sizes = ([512, 128, 64], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op9_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg11_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf9', get_index_2, add, None)
        return store
op9 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op10: ExternKernelSchedulerNode(FallbackKernel)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = 
    [   StarDep(name='buf7', mode=None),
        StarDep(name='buf8', mode=None),
        StarDep(name='buf9', mode=None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: FallbackKernel
    buf10.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf10.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
    ]
]
op10.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op11: ExternKernelSchedulerNode(MultiOutput)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf10', mode=None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: MultiOutput
    buf11.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf11.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op11.node.kernel = None


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 4194304}, None)]
op15.unmet_dependencies = [MemoryDep('buf11', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (4194304, 1)
op15.sizes = ([32, 128, 1024], [])
buf11_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op15_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf15', get_index_1, load, None)
        return store
op15 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op16: ExternKernelSchedulerNode(ExternKernelOut)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op16.met_dependencies = [StarDep(name='arg12_1', mode=None)]
op16.outputs = [
    buf16: ExternKernelOut
    buf16.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False)]
]
op16.node.kernel = extern_kernels.mm


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 4194304}, None)]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 4194304}, None)]
op17.met_dependencies = 
    [   MemoryDep('arg13_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg1_1', c0, {c0: 4096}, None),
        MemoryDep('arg2_1', c1 + 1024*tmp0, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg3_1', c1, {c0: 32, c1: 131072}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op17.group.device = cuda:0
op17.group.iteration = (4194304, 1)
op17.sizes = ([32, 128, 1024], [])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[32, 128], stride=[128, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 1024], stride=[1024, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op17_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 128*z0 + z1
    index1 = 1024*indirect0 + z2
    index2 = z1
    index3 = 1024
    index4 = 1024*z1 + z2
    index5 = 131072*z0 + 1024*z1 + z2
    index6 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg3_1', get_index_4)
        add = ops.add(mul, load_2)
        get_index_5 = self.get_index('index5')
        load_3 = ops.load('buf16', get_index_5)
        get_index_6 = self.get_index('index6')
        load_4 = ops.load('arg13_1', get_index_6)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(add, add_1)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf17', get_index_7, add_2, None)
        return store
op17 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 1024)
        x0 = xindex % 1024
        x4 = xindex % 131072
        x5 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        tmp9 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_out_ptr0 + (x5), None)
        tmp12 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([XBLOCK], 50265, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
        tmp6 = tl.load(in_ptr1 + (x0 + (1024*tmp4)), None)
        tmp7 = 1.0
        tmp8 = tmp6 * tmp7
        tmp10 = tmp8 + tmp9
        tmp13 = tmp11 + tmp12
        tmp14 = tmp10 + tmp13
        tl.store(in_out_ptr0 + (x5), tmp14, None)


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 4096}, None)]
op18.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 4194304}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (4096, 1024)
op18.sizes = ([4096], [1024])
buf17_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op18_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf18', get_index_1, getitem)
        return store_reduction
op18 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 4096}, None)]
op19.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 4194304}, None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (4096, 1024)
op19.sizes = ([4096], [1024])
buf17_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op19_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf19', get_index_1, getitem_1)
        return store_reduction
op19 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 4194304}, None)]
op21.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 4194304}, None),
        MemoryDep('buf18', c0, {c0: 4096}, None),
        MemoryDep('buf19', c0, {c0: 4096}, None)]
op21.met_dependencies = 
    [   MemoryDep('arg14_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg15_1', c1, {c0: 4096, c1: 1024}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (4194304, 1)
op21.sizes = ([4096, 1024], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf19_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op21_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf18', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf19', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg14_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg15_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf21', get_index_5, add_1, None)
        return store
op21 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 16777216}, None)]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 16777216}, None)]
op23.met_dependencies = [MemoryDep('arg17_1', c1, {c0: 4096, c1: 4096}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (16777216, 1)
op23.sizes = ([4096, 4096], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op23_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf22', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg17_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf23', get_index_4, mul_2, None)
        return store
op23 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op24: ExternKernelSchedulerNode(ExternKernelOut)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelOut
    buf24.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op24.node.kernel = extern_kernels.mm


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 4096}, None)]
op25.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 4194304}, None),
        MemoryDep('buf24', c0, {c0: 4194304}, None)]
op25.met_dependencies = [MemoryDep('arg19_1', c1, {c0: 4096, c1: 1024}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf25.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (4096, 1024)
op25.sizes = ([4096], [1024])
buf17_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op25_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg19_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf25', get_index_3, getitem)
        return store_reduction
op25 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 4096}, None)]
op26.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 4194304}, None),
        MemoryDep('buf24', c0, {c0: 4194304}, None)]
op26.met_dependencies = [MemoryDep('arg19_1', c1, {c0: 4096, c1: 1024}, None)]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf26.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (4096, 1024)
op26.sizes = ([4096], [1024])
buf17_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op26_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg19_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf26', get_index_3, getitem_1)
        return store_reduction
op26 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 4194304}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 4194304}, None),
        MemoryDep('buf24', c0, {c0: 4194304}, None),
        MemoryDep('buf25', c0, {c0: 4096}, None),
        MemoryDep('buf26', c0, {c0: 4096}, None)]
op28.met_dependencies = 
    [   MemoryDep('arg19_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg20_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg21_1', c1, {c0: 4096, c1: 1024}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf28.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
    ]
]
op28.group.device = cuda:0
op28.group.iteration = (4194304, 1)
op28.sizes = ([4096, 1024], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf26_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op28_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg19_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf25', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf26', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg20_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg21_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf28', get_index_7, add_3, None)
        return store
op28 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op29: ExternKernelSchedulerNode(ExternKernelOut)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = [StarDep(name='arg22_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelOut
    buf29.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf29.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op29.node.kernel = extern_kernels.mm


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op30.met_dependencies = [StarDep(name='arg24_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op30.node.kernel = extern_kernels.mm


op31: ExternKernelSchedulerNode(ExternKernelOut)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op31.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op31.outputs = [
    buf31: ExternKernelOut
    buf31.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf31.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op31.node.kernel = extern_kernels.mm


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 4194304}, None)]
op32.unmet_dependencies = [   MemoryDep('buf29', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op32.met_dependencies = [   MemoryDep('arg23_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (4194304, 1)
op32.sizes = ([512, 128, 64], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op32_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg23_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf32', get_index_2, mul, None)
        return store
op32 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 4194304}, None)]
op33.unmet_dependencies = [   MemoryDep('buf30', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op33.met_dependencies = [   MemoryDep('arg25_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf33.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (4194304, 1)
op33.sizes = ([512, 128, 64], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op33_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg25_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf33', get_index_2, add, None)
        return store
op33 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 4194304}, None)]
op34.unmet_dependencies = [   MemoryDep('buf31', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op34.met_dependencies = [   MemoryDep('arg27_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf34.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (4194304, 1)
op34.sizes = ([512, 128, 64], [])
buf31_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op34_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf34', get_index_2, add, None)
        return store
op34 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op35: ExternKernelSchedulerNode(FallbackKernel)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = 
    [   StarDep(name='buf32', mode=None),
        StarDep(name='buf33', mode=None),
        StarDep(name='buf34', mode=None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: FallbackKernel
    buf35.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf35.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
    ]
]
op35.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op36: ExternKernelSchedulerNode(MultiOutput)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf35', mode=None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: MultiOutput
    buf36.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf36.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op36.node.kernel = None


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 4194304}, None)]
op40.unmet_dependencies = [MemoryDep('buf36', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (4194304, 1)
op40.sizes = ([32, 128, 1024], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op40_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf40', get_index_1, load, None)
        return store
op40 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op41: ExternKernelSchedulerNode(ExternKernelOut)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='arg28_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelOut
    buf41.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op41.node.kernel = extern_kernels.mm


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 4194304}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 4194304}, None),
        MemoryDep('buf24', c0, {c0: 4194304}, None),
        MemoryDep('buf41', c0, {c0: 4194304}, None)]
op42.met_dependencies = 
    [   MemoryDep('arg19_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg29_1', c1, {c0: 4096, c1: 1024}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
]
op42.group.device = cuda:0
op42.group.iteration = (4194304, 1)
op42.sizes = ([4096, 1024], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op42_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg19_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf41', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg29_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf42', get_index_5, add_3, None)
        return store
op42 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 4096}, None)]
op43.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 4194304}, None)]
op43.met_dependencies = []
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf43.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (4096, 1024)
op43.sizes = ([4096], [1024])
buf42_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op43_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf43', get_index_1, getitem)
        return store_reduction
op43 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 4096}, None)]
op44.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 4194304}, None)]
op44.met_dependencies = []
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf44.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (4096, 1024)
op44.sizes = ([4096], [1024])
buf42_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op44_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf44', get_index_1, getitem_1)
        return store_reduction
op44 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 4194304}, None)]
op46.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 4194304}, None),
        MemoryDep('buf43', c0, {c0: 4096}, None),
        MemoryDep('buf44', c0, {c0: 4096}, None)]
op46.met_dependencies = 
    [   MemoryDep('arg30_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg31_1', c1, {c0: 4096, c1: 1024}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (4194304, 1)
op46.sizes = ([4096, 1024], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf44_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op46_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf43', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf44', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg30_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg31_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf46', get_index_5, add_1, None)
        return store
op46 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg32_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.node.kernel = extern_kernels.mm


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 16777216}, None)]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 16777216}, None)]
op48.met_dependencies = [MemoryDep('arg33_1', c1, {c0: 4096, c1: 4096}, None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (16777216, 1)
op48.sizes = ([4096, 4096], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op48_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg33_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf47', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg33_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf48', get_index_4, mul_2, None)
        return store
op48 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op49: ExternKernelSchedulerNode(ExternKernelOut)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = [StarDep(name='arg34_1', mode=None)]
op49.outputs = [
    buf49: ExternKernelOut
    buf49.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf49.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
]
op49.node.kernel = extern_kernels.mm


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 4096}, None)]
op50.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 4194304}, None),
        MemoryDep('buf49', c0, {c0: 4194304}, None)]
op50.met_dependencies = [MemoryDep('arg35_1', c1, {c0: 4096, c1: 1024}, None)]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (4096, 1024)
op50.sizes = ([4096], [1024])
buf42_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op50_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg35_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf50', get_index_3, getitem)
        return store_reduction
op50 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 4096}, None)]
op51.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 4194304}, None),
        MemoryDep('buf49', c0, {c0: 4194304}, None)]
op51.met_dependencies = [MemoryDep('arg35_1', c1, {c0: 4096, c1: 1024}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (4096, 1024)
op51.sizes = ([4096], [1024])
buf42_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op51_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg35_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf51', get_index_3, getitem_1)
        return store_reduction
op51 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 4194304}, None)]
op53.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 4194304}, None),
        MemoryDep('buf49', c0, {c0: 4194304}, None),
        MemoryDep('buf50', c0, {c0: 4096}, None),
        MemoryDep('buf51', c0, {c0: 4096}, None)]
op53.met_dependencies = 
    [   MemoryDep('arg35_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg36_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg37_1', c1, {c0: 4096, c1: 1024}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf53.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False),
    ]
]
op53.group.device = cuda:0
op53.group.iteration = (4194304, 1)
op53.sizes = ([4096, 1024], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf51_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op53_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg35_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf50', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf51', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg36_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg37_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf53', get_index_7, add_3, None)
        return store
op53 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op54: ExternKernelSchedulerNode(ExternKernelOut)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op54.met_dependencies = [StarDep(name='arg38_1', mode=None)]
op54.outputs = [
    buf54: ExternKernelOut
    buf54.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf54.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op54.node.kernel = extern_kernels.mm


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op55.met_dependencies = [StarDep(name='arg40_1', mode=None)]
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op55.node.kernel = extern_kernels.mm


op56: ExternKernelSchedulerNode(ExternKernelOut)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op56.met_dependencies = [StarDep(name='arg42_1', mode=None)]
op56.outputs = [
    buf56: ExternKernelOut
    buf56.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf56.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op56.node.kernel = extern_kernels.mm


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 4194304}, None)]
op57.unmet_dependencies = [   MemoryDep('buf54', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op57.met_dependencies = [   MemoryDep('arg39_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf57.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (4194304, 1)
op57.sizes = ([512, 128, 64], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op57_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg39_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf57', get_index_2, mul, None)
        return store
op57 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 4194304}, None)]
op58.unmet_dependencies = [   MemoryDep('buf55', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op58.met_dependencies = [   MemoryDep('arg41_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (4194304, 1)
op58.sizes = ([512, 128, 64], [])
buf55_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op58_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg41_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf58', get_index_2, add, None)
        return store
op58 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 4194304}, None)]
op59.unmet_dependencies = [   MemoryDep('buf56', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op59.met_dependencies = [   MemoryDep('arg43_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (4194304, 1)
op59.sizes = ([512, 128, 64], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op59_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg43_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf59', get_index_2, add, None)
        return store
op59 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op60: ExternKernelSchedulerNode(FallbackKernel)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = 
    [   StarDep(name='buf57', mode=None),
        StarDep(name='buf58', mode=None),
        StarDep(name='buf59', mode=None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: FallbackKernel
    buf60.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf60.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False),
    ]
]
op60.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op61: ExternKernelSchedulerNode(MultiOutput)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: MultiOutput
    buf61.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf61.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op61.node.kernel = None


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 4194304}, None)]
op65.unmet_dependencies = [MemoryDep('buf61', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (4194304, 1)
op65.sizes = ([32, 128, 1024], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op65_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf65', get_index_1, load, None)
        return store
op65 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg44_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False)]
]
op66.node.kernel = extern_kernels.mm


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 4194304}, None)]
op67.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 4194304}, None),
        MemoryDep('buf49', c0, {c0: 4194304}, None),
        MemoryDep('buf66', c0, {c0: 4194304}, None)]
op67.met_dependencies = 
    [   MemoryDep('arg35_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg45_1', c1, {c0: 4096, c1: 1024}, None)]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf67.users = [
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op67.group.device = cuda:0
op67.group.iteration = (4194304, 1)
op67.sizes = ([4096, 1024], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op67_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg35_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf66', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg45_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf67', get_index_5, add_3, None)
        return store
op67 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 4096}, None)]
op68.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 4194304}, None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf68.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (4096, 1024)
op68.sizes = ([4096], [1024])
buf67_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op68_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf68', get_index_1, getitem)
        return store_reduction
op68 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 4096}, None)]
op69.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 4194304}, None)]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf69.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (4096, 1024)
op69.sizes = ([4096], [1024])
buf67_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op69_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf69', get_index_1, getitem_1)
        return store_reduction
op69 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 4194304}, None)]
op71.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 4194304}, None),
        MemoryDep('buf68', c0, {c0: 4096}, None),
        MemoryDep('buf69', c0, {c0: 4096}, None)]
op71.met_dependencies = 
    [   MemoryDep('arg46_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg47_1', c1, {c0: 4096, c1: 1024}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (4194304, 1)
op71.sizes = ([4096, 1024], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf69_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op71_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf68', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf69', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg46_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg47_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf71', get_index_5, add_1, None)
        return store
op71 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op72: ExternKernelSchedulerNode(ExternKernelOut)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='arg48_1', mode=None)]
op72.outputs = [
    buf72: ExternKernelOut
    buf72.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op72.node.kernel = extern_kernels.mm


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 16777216}, None)]
op73.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 16777216}, None)]
op73.met_dependencies = [MemoryDep('arg49_1', c1, {c0: 4096, c1: 4096}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (16777216, 1)
op73.sizes = ([4096, 4096], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op73_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg49_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf72', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg49_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf73', get_index_4, mul_2, None)
        return store
op73 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op74: ExternKernelSchedulerNode(ExternKernelOut)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='arg50_1', mode=None)]
op74.outputs = [
    buf74: ExternKernelOut
    buf74.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf74.users = [
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op74.node.kernel = extern_kernels.mm


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 4096}, None)]
op75.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 4194304}, None),
        MemoryDep('buf74', c0, {c0: 4194304}, None)]
op75.met_dependencies = [MemoryDep('arg51_1', c1, {c0: 4096, c1: 1024}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf75.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (4096, 1024)
op75.sizes = ([4096], [1024])
buf67_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op75_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg51_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf75', get_index_3, getitem)
        return store_reduction
op75 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 4096}, None)]
op76.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 4194304}, None),
        MemoryDep('buf74', c0, {c0: 4194304}, None)]
op76.met_dependencies = [MemoryDep('arg51_1', c1, {c0: 4096, c1: 1024}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf76.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (4096, 1024)
op76.sizes = ([4096], [1024])
buf67_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op76_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg51_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf76', get_index_3, getitem_1)
        return store_reduction
op76 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 4194304}, None)]
op78.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 4194304}, None),
        MemoryDep('buf74', c0, {c0: 4194304}, None),
        MemoryDep('buf75', c0, {c0: 4096}, None),
        MemoryDep('buf76', c0, {c0: 4096}, None)]
op78.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg52_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg53_1', c1, {c0: 4096, c1: 1024}, None)]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf78.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False),
    ]
]
op78.group.device = cuda:0
op78.group.iteration = (4194304, 1)
op78.sizes = ([4096, 1024], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf76_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op78_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg51_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf75', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf76', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg52_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg53_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf78', get_index_7, add_3, None)
        return store
op78 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op79: ExternKernelSchedulerNode(ExternKernelOut)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op79.met_dependencies = [StarDep(name='arg54_1', mode=None)]
op79.outputs = [
    buf79: ExternKernelOut
    buf79.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf79.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op79.node.kernel = extern_kernels.mm


op80: ExternKernelSchedulerNode(ExternKernelOut)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op80.met_dependencies = [StarDep(name='arg56_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelOut
    buf80.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf80.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op80.node.kernel = extern_kernels.mm


op81: ExternKernelSchedulerNode(ExternKernelOut)
op81.writes = [StarDep(name='buf81', mode=None)]
op81.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op81.met_dependencies = [StarDep(name='arg58_1', mode=None)]
op81.outputs = [
    buf81: ExternKernelOut
    buf81.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf81.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op81.node.kernel = extern_kernels.mm


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 4194304}, None)]
op82.unmet_dependencies = [   MemoryDep('buf79', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op82.met_dependencies = [   MemoryDep('arg55_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (4194304, 1)
op82.sizes = ([512, 128, 64], [])
buf79_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op82_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg55_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf82', get_index_2, mul, None)
        return store
op82 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 4194304}, None)]
op83.unmet_dependencies = [   MemoryDep('buf80', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op83.met_dependencies = [   MemoryDep('arg57_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (4194304, 1)
op83.sizes = ([512, 128, 64], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op83_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg57_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf83', get_index_2, add, None)
        return store
op83 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 4194304}, None)]
op84.unmet_dependencies = [   MemoryDep('buf81', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op84.met_dependencies = [   MemoryDep('arg59_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (4194304, 1)
op84.sizes = ([512, 128, 64], [])
buf81_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op84_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg59_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf84', get_index_2, add, None)
        return store
op84 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op85: ExternKernelSchedulerNode(FallbackKernel)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = 
    [   StarDep(name='buf82', mode=None),
        StarDep(name='buf83', mode=None),
        StarDep(name='buf84', mode=None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: FallbackKernel
    buf85.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf85.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False),
    ]
]
op85.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op86: ExternKernelSchedulerNode(MultiOutput)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: MultiOutput
    buf86.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf86.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op86.node.kernel = None


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 4194304}, None)]
op90.unmet_dependencies = [MemoryDep('buf86', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (4194304, 1)
op90.sizes = ([32, 128, 1024], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op90_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf90', get_index_1, load, None)
        return store
op90 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op91: ExternKernelSchedulerNode(ExternKernelOut)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op91.met_dependencies = [StarDep(name='arg60_1', mode=None)]
op91.outputs = [
    buf91: ExternKernelOut
    buf91.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False)]
]
op91.node.kernel = extern_kernels.mm


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 4194304}, None)]
op92.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 4194304}, None),
        MemoryDep('buf74', c0, {c0: 4194304}, None),
        MemoryDep('buf91', c0, {c0: 4194304}, None)]
op92.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg61_1', c1, {c0: 4096, c1: 1024}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op92.group.device = cuda:0
op92.group.iteration = (4194304, 1)
op92.sizes = ([4096, 1024], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op92_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg51_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf91', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg61_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf92', get_index_5, add_3, None)
        return store
op92 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 4096}, None)]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 4194304}, None)]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf93.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (4096, 1024)
op93.sizes = ([4096], [1024])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op93_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf93', get_index_1, getitem)
        return store_reduction
op93 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 4096}, None)]
op94.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 4194304}, None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf94.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (4096, 1024)
op94.sizes = ([4096], [1024])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op94_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf94', get_index_1, getitem_1)
        return store_reduction
op94 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 4194304}, None)]
op96.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 4194304}, None),
        MemoryDep('buf93', c0, {c0: 4096}, None),
        MemoryDep('buf94', c0, {c0: 4096}, None)]
op96.met_dependencies = 
    [   MemoryDep('arg62_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg63_1', c1, {c0: 4096, c1: 1024}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (4194304, 1)
op96.sizes = ([4096, 1024], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf94_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op96_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf93', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf94', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg62_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg63_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf96', get_index_5, add_1, None)
        return store
op96 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op97: ExternKernelSchedulerNode(ExternKernelOut)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op97.met_dependencies = [StarDep(name='arg64_1', mode=None)]
op97.outputs = [
    buf97: ExternKernelOut
    buf97.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False)]
]
op97.node.kernel = extern_kernels.mm


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 16777216}, None)]
op98.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 16777216}, None)]
op98.met_dependencies = [MemoryDep('arg65_1', c1, {c0: 4096, c1: 4096}, None)]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (16777216, 1)
op98.sizes = ([4096, 4096], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op98_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg65_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf97', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg65_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf98', get_index_4, mul_2, None)
        return store
op98 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op99: ExternKernelSchedulerNode(ExternKernelOut)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf98', mode=None)]
op99.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op99.outputs = [
    buf99: ExternKernelOut
    buf99.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op99.node.kernel = extern_kernels.mm


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 4096}, None)]
op100.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 4194304}, None),
        MemoryDep('buf99', c0, {c0: 4194304}, None)]
op100.met_dependencies = [MemoryDep('arg67_1', c1, {c0: 4096, c1: 1024}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf100.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (4096, 1024)
op100.sizes = ([4096], [1024])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op100_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg67_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf100', get_index_3, getitem)
        return store_reduction
op100 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 4096}, None)]
op101.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 4194304}, None),
        MemoryDep('buf99', c0, {c0: 4194304}, None)]
op101.met_dependencies = [MemoryDep('arg67_1', c1, {c0: 4096, c1: 1024}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf101.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (4096, 1024)
op101.sizes = ([4096], [1024])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op101_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg67_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf101', get_index_3, getitem_1)
        return store_reduction
op101 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 4194304}, None)]
op103.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 4096}, None),
        MemoryDep('buf101', c0, {c0: 4096}, None),
        MemoryDep('buf92', c0, {c0: 4194304}, None),
        MemoryDep('buf99', c0, {c0: 4194304}, None)]
op103.met_dependencies = 
    [   MemoryDep('arg67_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg68_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg69_1', c1, {c0: 4096, c1: 1024}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf103.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
    ]
]
op103.group.device = cuda:0
op103.group.iteration = (4194304, 1)
op103.sizes = ([4096, 1024], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf101_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op103_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg67_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf100', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf101', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg68_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg69_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf103', get_index_7, add_3, None)
        return store
op103 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='arg70_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf104.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op104.node.kernel = extern_kernels.mm


op105: ExternKernelSchedulerNode(ExternKernelOut)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op105.met_dependencies = [StarDep(name='arg72_1', mode=None)]
op105.outputs = [
    buf105: ExternKernelOut
    buf105.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf105.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op105.node.kernel = extern_kernels.mm


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op106.met_dependencies = [StarDep(name='arg74_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf106.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op106.node.kernel = extern_kernels.mm


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 4194304}, None)]
op107.unmet_dependencies = [   MemoryDep('buf104', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op107.met_dependencies = [   MemoryDep('arg71_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (4194304, 1)
op107.sizes = ([512, 128, 64], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op107_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf107', get_index_2, mul, None)
        return store
op107 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 4194304}, None)]
op108.unmet_dependencies = [   MemoryDep('buf105', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op108.met_dependencies = [   MemoryDep('arg73_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf108.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (4194304, 1)
op108.sizes = ([512, 128, 64], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op108_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg73_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf108', get_index_2, add, None)
        return store
op108 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 4194304}, None)]
op109.unmet_dependencies = [   MemoryDep('buf106', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op109.met_dependencies = [   MemoryDep('arg75_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (4194304, 1)
op109.sizes = ([512, 128, 64], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op109_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg75_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf109', get_index_2, add, None)
        return store
op109 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op110: ExternKernelSchedulerNode(FallbackKernel)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = 
    [   StarDep(name='buf107', mode=None),
        StarDep(name='buf108', mode=None),
        StarDep(name='buf109', mode=None)]
op110.met_dependencies = []
op110.outputs = [
    buf110: FallbackKernel
    buf110.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf110.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False),
    ]
]
op110.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op111: ExternKernelSchedulerNode(MultiOutput)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: MultiOutput
    buf111.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf111.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op111.node.kernel = None


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 4194304}, None)]
op115.unmet_dependencies = [   MemoryDep('buf111', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op115.met_dependencies = []
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (4194304, 1)
op115.sizes = ([32, 128, 1024], [])
buf111_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op115_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf115', get_index_1, load, None)
        return store
op115 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op116: ExternKernelSchedulerNode(ExternKernelOut)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op116.outputs = [
    buf116: ExternKernelOut
    buf116.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False)]
]
op116.node.kernel = extern_kernels.mm


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 4194304}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 4194304}, None),
        MemoryDep('buf92', c0, {c0: 4194304}, None),
        MemoryDep('buf99', c0, {c0: 4194304}, None)]
op117.met_dependencies = 
    [   MemoryDep('arg67_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg77_1', c1, {c0: 4096, c1: 1024}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (4194304, 1)
op117.sizes = ([4096, 1024], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op117_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg67_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf116', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg77_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf117', get_index_5, add_3, None)
        return store
op117 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 4096}, None)]
op118.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 4194304}, None)]
op118.met_dependencies = []
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf118.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (4096, 1024)
op118.sizes = ([4096], [1024])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op118_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf118', get_index_1, getitem)
        return store_reduction
op118 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 4096}, None)]
op119.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 4194304}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf119.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (4096, 1024)
op119.sizes = ([4096], [1024])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op119_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf119', get_index_1, getitem_1)
        return store_reduction
op119 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 4194304}, None)]
op121.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 4194304}, None),
        MemoryDep('buf118', c0, {c0: 4096}, None),
        MemoryDep('buf119', c0, {c0: 4096}, None)]
op121.met_dependencies = 
    [   MemoryDep('arg78_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg79_1', c1, {c0: 4096, c1: 1024}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (4194304, 1)
op121.sizes = ([4096, 1024], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf119_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op121_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf118', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf119', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg78_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg79_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf121', get_index_5, add_1, None)
        return store
op121 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op122: ExternKernelSchedulerNode(ExternKernelOut)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf121', mode=None)]
op122.met_dependencies = [StarDep(name='arg80_1', mode=None)]
op122.outputs = [
    buf122: ExternKernelOut
    buf122.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf122.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False)]
]
op122.node.kernel = extern_kernels.mm


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 16777216}, None)]
op123.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 16777216}, None)]
op123.met_dependencies = [MemoryDep('arg81_1', c1, {c0: 4096, c1: 4096}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (16777216, 1)
op123.sizes = ([4096, 4096], [])
buf122_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op123_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf122', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg81_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf123', get_index_4, mul_2, None)
        return store
op123 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op124: ExternKernelSchedulerNode(ExternKernelOut)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op124.outputs = [
    buf124: ExternKernelOut
    buf124.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf124.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op124.node.kernel = extern_kernels.mm


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 4096}, None)]
op125.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 4194304}, None),
        MemoryDep('buf124', c0, {c0: 4194304}, None)]
op125.met_dependencies = [MemoryDep('arg83_1', c1, {c0: 4096, c1: 1024}, None)]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf125.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (4096, 1024)
op125.sizes = ([4096], [1024])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op125_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf125', get_index_3, getitem)
        return store_reduction
op125 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 4096}, None)]
op126.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 4194304}, None),
        MemoryDep('buf124', c0, {c0: 4194304}, None)]
op126.met_dependencies = [MemoryDep('arg83_1', c1, {c0: 4096, c1: 1024}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf126.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (4096, 1024)
op126.sizes = ([4096], [1024])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op126_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf126', get_index_3, getitem_1)
        return store_reduction
op126 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 4194304}, None)]
op128.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 4194304}, None),
        MemoryDep('buf124', c0, {c0: 4194304}, None),
        MemoryDep('buf125', c0, {c0: 4096}, None),
        MemoryDep('buf126', c0, {c0: 4096}, None)]
op128.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg84_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg85_1', c1, {c0: 4096, c1: 1024}, None)]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf128.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False),
    ]
]
op128.group.device = cuda:0
op128.group.iteration = (4194304, 1)
op128.sizes = ([4096, 1024], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf126_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op128_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf125', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf126', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg84_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg85_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf128', get_index_7, add_3, None)
        return store
op128 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op129: ExternKernelSchedulerNode(ExternKernelOut)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelOut
    buf129.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op129.node.kernel = extern_kernels.mm


op130: ExternKernelSchedulerNode(ExternKernelOut)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op130.met_dependencies = [StarDep(name='arg88_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelOut
    buf130.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf130.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op130.node.kernel = extern_kernels.mm


op131: ExternKernelSchedulerNode(ExternKernelOut)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op131.met_dependencies = [StarDep(name='arg90_1', mode=None)]
op131.outputs = [
    buf131: ExternKernelOut
    buf131.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf131.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op131.node.kernel = extern_kernels.mm


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 4194304}, None)]
op132.unmet_dependencies = [   MemoryDep('buf129', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op132.met_dependencies = [   MemoryDep('arg87_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (4194304, 1)
op132.sizes = ([512, 128, 64], [])
buf129_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op132_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf132', get_index_2, mul, None)
        return store
op132 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 4194304}, None)]
op133.unmet_dependencies = [   MemoryDep('buf130', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op133.met_dependencies = [   MemoryDep('arg89_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (4194304, 1)
op133.sizes = ([512, 128, 64], [])
buf130_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op133_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg89_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf133', get_index_2, add, None)
        return store
op133 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 4194304}, None)]
op134.unmet_dependencies = [   MemoryDep('buf131', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op134.met_dependencies = [   MemoryDep('arg91_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (4194304, 1)
op134.sizes = ([512, 128, 64], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op134_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg91_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf134', get_index_2, add, None)
        return store
op134 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op135: ExternKernelSchedulerNode(FallbackKernel)
op135.writes = [StarDep(name='buf135', mode=None)]
op135.unmet_dependencies = 
    [   StarDep(name='buf132', mode=None),
        StarDep(name='buf133', mode=None),
        StarDep(name='buf134', mode=None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: FallbackKernel
    buf135.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf135.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False),
    ]
]
op135.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op136: ExternKernelSchedulerNode(MultiOutput)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = []
op136.outputs = [
    buf136: MultiOutput
    buf136.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf136.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op136.node.kernel = None


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 4194304}, None)]
op140.unmet_dependencies = [   MemoryDep('buf136', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (4194304, 1)
op140.sizes = ([32, 128, 1024], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op140_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf140', get_index_1, load, None)
        return store
op140 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf140', mode=None)]
op141.met_dependencies = [StarDep(name='arg92_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf141.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False)]
]
op141.node.kernel = extern_kernels.mm


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 4194304}, None)]
op142.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 4194304}, None),
        MemoryDep('buf124', c0, {c0: 4194304}, None),
        MemoryDep('buf141', c0, {c0: 4194304}, None)]
op142.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg93_1', c1, {c0: 4096, c1: 1024}, None)]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
]
op142.group.device = cuda:0
op142.group.iteration = (4194304, 1)
op142.sizes = ([4096, 1024], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op142_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf141', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg93_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf142', get_index_5, add_3, None)
        return store
op142 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 4096}, None)]
op143.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 4194304}, None)]
op143.met_dependencies = []
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf143.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (4096, 1024)
op143.sizes = ([4096], [1024])
buf142_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op143_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf143', get_index_1, getitem)
        return store_reduction
op143 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 4096}, None)]
op144.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 4194304}, None)]
op144.met_dependencies = []
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf144.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (4096, 1024)
op144.sizes = ([4096], [1024])
buf142_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op144_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf144', get_index_1, getitem_1)
        return store_reduction
op144 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 4194304}, None)]
op146.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 4194304}, None),
        MemoryDep('buf143', c0, {c0: 4096}, None),
        MemoryDep('buf144', c0, {c0: 4096}, None)]
op146.met_dependencies = 
    [   MemoryDep('arg94_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg95_1', c1, {c0: 4096, c1: 1024}, None)]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (4194304, 1)
op146.sizes = ([4096, 1024], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf144_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op146_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf143', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf144', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg94_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg95_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf146', get_index_5, add_1, None)
        return store
op146 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op147: ExternKernelSchedulerNode(ExternKernelOut)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = [StarDep(name='arg96_1', mode=None)]
op147.outputs = [
    buf147: ExternKernelOut
    buf147.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False)]
]
op147.node.kernel = extern_kernels.mm


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 16777216}, None)]
op148.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 16777216}, None)]
op148.met_dependencies = [MemoryDep('arg97_1', c1, {c0: 4096, c1: 4096}, None)]
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (16777216, 1)
op148.sizes = ([4096, 4096], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op148_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg97_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf147', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg97_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf148', get_index_4, mul_2, None)
        return store
op148 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op149: ExternKernelSchedulerNode(ExternKernelOut)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelOut
    buf149.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf149.users = [
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
]
op149.node.kernel = extern_kernels.mm


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 4096}, None)]
op150.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 4194304}, None),
        MemoryDep('buf149', c0, {c0: 4194304}, None)]
op150.met_dependencies = [MemoryDep('arg99_1', c1, {c0: 4096, c1: 1024}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf150.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (4096, 1024)
op150.sizes = ([4096], [1024])
buf142_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op150_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg99_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf150', get_index_3, getitem)
        return store_reduction
op150 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 4096}, None)]
op151.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 4194304}, None),
        MemoryDep('buf149', c0, {c0: 4194304}, None)]
op151.met_dependencies = [MemoryDep('arg99_1', c1, {c0: 4096, c1: 1024}, None)]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (4096, 1024)
op151.sizes = ([4096], [1024])
buf142_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op151_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg99_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf151', get_index_3, getitem_1)
        return store_reduction
op151 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 4194304}, None)]
op153.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 4194304}, None),
        MemoryDep('buf149', c0, {c0: 4194304}, None),
        MemoryDep('buf150', c0, {c0: 4096}, None),
        MemoryDep('buf151', c0, {c0: 4096}, None)]
op153.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg101_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg99_1', c1, {c0: 4096, c1: 1024}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf153.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False),
    ]
]
op153.group.device = cuda:0
op153.group.iteration = (4194304, 1)
op153.sizes = ([4096, 1024], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf151_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op153_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg99_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf150', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf151', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg100_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg101_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf153', get_index_7, add_3, None)
        return store
op153 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op154: ExternKernelSchedulerNode(ExternKernelOut)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op154.met_dependencies = [StarDep(name='arg102_1', mode=None)]
op154.outputs = [
    buf154: ExternKernelOut
    buf154.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf154.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op154.node.kernel = extern_kernels.mm


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op155.met_dependencies = [StarDep(name='arg104_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf155.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op155.node.kernel = extern_kernels.mm


op156: ExternKernelSchedulerNode(ExternKernelOut)
op156.writes = [StarDep(name='buf156', mode=None)]
op156.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op156.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op156.outputs = [
    buf156: ExternKernelOut
    buf156.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf156.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op156.node.kernel = extern_kernels.mm


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 4194304}, None)]
op157.unmet_dependencies = [   MemoryDep('buf154', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op157.met_dependencies = [   MemoryDep('arg103_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (4194304, 1)
op157.sizes = ([512, 128, 64], [])
buf154_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op157_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg103_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf157', get_index_2, mul, None)
        return store
op157 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 4194304}, None)]
op158.unmet_dependencies = [   MemoryDep('buf155', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op158.met_dependencies = [   MemoryDep('arg105_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (4194304, 1)
op158.sizes = ([512, 128, 64], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op158_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg105_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf158', get_index_2, add, None)
        return store
op158 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 4194304}, None)]
op159.unmet_dependencies = [   MemoryDep('buf156', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op159.met_dependencies = [   MemoryDep('arg107_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (4194304, 1)
op159.sizes = ([512, 128, 64], [])
buf156_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op159_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg107_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf159', get_index_2, add, None)
        return store
op159 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op160: ExternKernelSchedulerNode(FallbackKernel)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = 
    [   StarDep(name='buf157', mode=None),
        StarDep(name='buf158', mode=None),
        StarDep(name='buf159', mode=None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: FallbackKernel
    buf160.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf160.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False),
    ]
]
op160.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op161: ExternKernelSchedulerNode(MultiOutput)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf160', mode=None)]
op161.met_dependencies = []
op161.outputs = [
    buf161: MultiOutput
    buf161.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf161.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op161.node.kernel = None


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 4194304}, None)]
op165.unmet_dependencies = [   MemoryDep('buf161', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op165.met_dependencies = []
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (4194304, 1)
op165.sizes = ([32, 128, 1024], [])
buf161_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op165_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf165', get_index_1, load, None)
        return store
op165 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op166: ExternKernelSchedulerNode(ExternKernelOut)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf165', mode=None)]
op166.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelOut
    buf166.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False)]
]
op166.node.kernel = extern_kernels.mm


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 4194304}, None)]
op167.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 4194304}, None),
        MemoryDep('buf149', c0, {c0: 4194304}, None),
        MemoryDep('buf166', c0, {c0: 4194304}, None)]
op167.met_dependencies = 
    [   MemoryDep('arg109_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg99_1', c1, {c0: 4096, c1: 1024}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf167.users = [
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
]
op167.group.device = cuda:0
op167.group.iteration = (4194304, 1)
op167.sizes = ([4096, 1024], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op167_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg99_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf166', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg109_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf167', get_index_5, add_3, None)
        return store
op167 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 4096}, None)]
op168.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 4194304}, None)]
op168.met_dependencies = []
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf168.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (4096, 1024)
op168.sizes = ([4096], [1024])
buf167_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op168_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf168', get_index_1, getitem)
        return store_reduction
op168 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 4096}, None)]
op169.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 4194304}, None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf169.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (4096, 1024)
op169.sizes = ([4096], [1024])
buf167_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op169_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf169', get_index_1, getitem_1)
        return store_reduction
op169 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 4194304}, None)]
op171.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 4194304}, None),
        MemoryDep('buf168', c0, {c0: 4096}, None),
        MemoryDep('buf169', c0, {c0: 4096}, None)]
op171.met_dependencies = 
    [   MemoryDep('arg110_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg111_1', c1, {c0: 4096, c1: 1024}, None)]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (4194304, 1)
op171.sizes = ([4096, 1024], [])
buf167_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf169_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op171_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf168', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf169', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg110_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg111_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf171', get_index_5, add_1, None)
        return store
op171 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op172: ExternKernelSchedulerNode(ExternKernelOut)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op172.met_dependencies = [StarDep(name='arg112_1', mode=None)]
op172.outputs = [
    buf172: ExternKernelOut
    buf172.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf172.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False)]
]
op172.node.kernel = extern_kernels.mm


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 16777216}, None)]
op173.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 16777216}, None)]
op173.met_dependencies = [MemoryDep('arg113_1', c1, {c0: 4096, c1: 4096}, None)]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf173.users = [NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (16777216, 1)
op173.sizes = ([4096, 4096], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op173_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf172', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg113_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf173', get_index_4, mul_2, None)
        return store
op173 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op174: ExternKernelSchedulerNode(ExternKernelOut)
op174.writes = [StarDep(name='buf174', mode=None)]
op174.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op174.met_dependencies = [StarDep(name='arg114_1', mode=None)]
op174.outputs = [
    buf174: ExternKernelOut
    buf174.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf174.users = [
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
]
op174.node.kernel = extern_kernels.mm


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 4096}, None)]
op175.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 4194304}, None),
        MemoryDep('buf174', c0, {c0: 4194304}, None)]
op175.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 4096, c1: 1024}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf175.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (4096, 1024)
op175.sizes = ([4096], [1024])
buf167_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op175_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg115_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf175', get_index_3, getitem)
        return store_reduction
op175 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 4096}, None)]
op176.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 4194304}, None),
        MemoryDep('buf174', c0, {c0: 4194304}, None)]
op176.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 4096, c1: 1024}, None)]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf176.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (4096, 1024)
op176.sizes = ([4096], [1024])
buf167_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op176_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg115_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf176', get_index_3, getitem_1)
        return store_reduction
op176 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 4194304}, None)]
op178.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 4194304}, None),
        MemoryDep('buf174', c0, {c0: 4194304}, None),
        MemoryDep('buf175', c0, {c0: 4096}, None),
        MemoryDep('buf176', c0, {c0: 4096}, None)]
op178.met_dependencies = 
    [   MemoryDep('arg115_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg116_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg117_1', c1, {c0: 4096, c1: 1024}, None)]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf178.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False),
    ]
]
op178.group.device = cuda:0
op178.group.iteration = (4194304, 1)
op178.sizes = ([4096, 1024], [])
buf167_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf176_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op178_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg115_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf175', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf176', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg116_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg117_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf178', get_index_7, add_3, None)
        return store
op178 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op179: ExternKernelSchedulerNode(ExternKernelOut)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op179.met_dependencies = [StarDep(name='arg118_1', mode=None)]
op179.outputs = [
    buf179: ExternKernelOut
    buf179.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf179.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op179.node.kernel = extern_kernels.mm


op180: ExternKernelSchedulerNode(ExternKernelOut)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op180.met_dependencies = [StarDep(name='arg120_1', mode=None)]
op180.outputs = [
    buf180: ExternKernelOut
    buf180.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf180.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op180.node.kernel = extern_kernels.mm


op181: ExternKernelSchedulerNode(ExternKernelOut)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op181.met_dependencies = [StarDep(name='arg122_1', mode=None)]
op181.outputs = [
    buf181: ExternKernelOut
    buf181.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf181.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op181.node.kernel = extern_kernels.mm


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 4194304}, None)]
op182.unmet_dependencies = [   MemoryDep('buf179', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op182.met_dependencies = [   MemoryDep('arg119_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (4194304, 1)
op182.sizes = ([512, 128, 64], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op182_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg119_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf182', get_index_2, mul, None)
        return store
op182 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 4194304}, None)]
op183.unmet_dependencies = [   MemoryDep('buf180', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op183.met_dependencies = [   MemoryDep('arg121_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf183.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (4194304, 1)
op183.sizes = ([512, 128, 64], [])
buf180_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op183_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg121_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf183', get_index_2, add, None)
        return store
op183 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 4194304}, None)]
op184.unmet_dependencies = [   MemoryDep('buf181', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op184.met_dependencies = [   MemoryDep('arg123_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (4194304, 1)
op184.sizes = ([512, 128, 64], [])
buf181_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op184_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg123_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf184', get_index_2, add, None)
        return store
op184 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op185: ExternKernelSchedulerNode(FallbackKernel)
op185.writes = [StarDep(name='buf185', mode=None)]
op185.unmet_dependencies = 
    [   StarDep(name='buf182', mode=None),
        StarDep(name='buf183', mode=None),
        StarDep(name='buf184', mode=None)]
op185.met_dependencies = []
op185.outputs = [
    buf185: FallbackKernel
    buf185.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf185.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False),
    ]
]
op185.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op186: ExternKernelSchedulerNode(MultiOutput)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = []
op186.outputs = [
    buf186: MultiOutput
    buf186.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf186.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op186.node.kernel = None


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 4194304}, None)]
op190.unmet_dependencies = [   MemoryDep('buf186', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (4194304, 1)
op190.sizes = ([32, 128, 1024], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op190_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf190', get_index_1, load, None)
        return store
op190 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op191: ExternKernelSchedulerNode(ExternKernelOut)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op191.met_dependencies = [StarDep(name='arg124_1', mode=None)]
op191.outputs = [
    buf191: ExternKernelOut
    buf191.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf191.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False)]
]
op191.node.kernel = extern_kernels.mm


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 4194304}, None)]
op192.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 4194304}, None),
        MemoryDep('buf174', c0, {c0: 4194304}, None),
        MemoryDep('buf191', c0, {c0: 4194304}, None)]
op192.met_dependencies = 
    [   MemoryDep('arg115_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg125_1', c1, {c0: 4096, c1: 1024}, None)]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf192.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
]
op192.group.device = cuda:0
op192.group.iteration = (4194304, 1)
op192.sizes = ([4096, 1024], [])
buf167_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op192_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg115_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf191', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg125_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf192', get_index_5, add_3, None)
        return store
op192 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 4096}, None)]
op193.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 4194304}, None)]
op193.met_dependencies = []
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf193.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (4096, 1024)
op193.sizes = ([4096], [1024])
buf192_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op193_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf193', get_index_1, getitem)
        return store_reduction
op193 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 4096}, None)]
op194.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 4194304}, None)]
op194.met_dependencies = []
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf194.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (4096, 1024)
op194.sizes = ([4096], [1024])
buf192_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op194_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf194', get_index_1, getitem_1)
        return store_reduction
op194 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 4194304}, None)]
op196.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 4194304}, None),
        MemoryDep('buf193', c0, {c0: 4096}, None),
        MemoryDep('buf194', c0, {c0: 4096}, None)]
op196.met_dependencies = 
    [   MemoryDep('arg126_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg127_1', c1, {c0: 4096, c1: 1024}, None)]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (4194304, 1)
op196.sizes = ([4096, 1024], [])
buf192_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf194_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op196_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf193', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf194', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg126_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg127_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf196', get_index_5, add_1, None)
        return store
op196 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op197: ExternKernelSchedulerNode(ExternKernelOut)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg128_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelOut
    buf197.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False)]
]
op197.node.kernel = extern_kernels.mm


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 16777216}, None)]
op198.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 16777216}, None)]
op198.met_dependencies = [MemoryDep('arg129_1', c1, {c0: 4096, c1: 4096}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (16777216, 1)
op198.sizes = ([4096, 4096], [])
buf197_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op198_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg129_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf197', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg129_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf198', get_index_4, mul_2, None)
        return store
op198 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op199.met_dependencies = [StarDep(name='arg130_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf199.users = [
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
]
op199.node.kernel = extern_kernels.mm


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 4096}, None)]
op200.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 4194304}, None),
        MemoryDep('buf199', c0, {c0: 4194304}, None)]
op200.met_dependencies = [MemoryDep('arg131_1', c1, {c0: 4096, c1: 1024}, None)]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf200.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (4096, 1024)
op200.sizes = ([4096], [1024])
buf192_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op200_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg131_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf200', get_index_3, getitem)
        return store_reduction
op200 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 4096}, None)]
op201.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 4194304}, None),
        MemoryDep('buf199', c0, {c0: 4194304}, None)]
op201.met_dependencies = [MemoryDep('arg131_1', c1, {c0: 4096, c1: 1024}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf201.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (4096, 1024)
op201.sizes = ([4096], [1024])
buf192_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op201_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg131_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf201', get_index_3, getitem_1)
        return store_reduction
op201 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 4194304}, None)]
op203.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 4194304}, None),
        MemoryDep('buf199', c0, {c0: 4194304}, None),
        MemoryDep('buf200', c0, {c0: 4096}, None),
        MemoryDep('buf201', c0, {c0: 4096}, None)]
op203.met_dependencies = 
    [   MemoryDep('arg131_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg132_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg133_1', c1, {c0: 4096, c1: 1024}, None)]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf203.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False),
    ]
]
op203.group.device = cuda:0
op203.group.iteration = (4194304, 1)
op203.sizes = ([4096, 1024], [])
buf192_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf201_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op203_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg131_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf200', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf201', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg132_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg133_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf203', get_index_7, add_3, None)
        return store
op203 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op204: ExternKernelSchedulerNode(ExternKernelOut)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op204.met_dependencies = [StarDep(name='arg134_1', mode=None)]
op204.outputs = [
    buf204: ExternKernelOut
    buf204.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf204.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op204.node.kernel = extern_kernels.mm


op205: ExternKernelSchedulerNode(ExternKernelOut)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op205.met_dependencies = [StarDep(name='arg136_1', mode=None)]
op205.outputs = [
    buf205: ExternKernelOut
    buf205.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf205.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op205.node.kernel = extern_kernels.mm


op206: ExternKernelSchedulerNode(ExternKernelOut)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op206.met_dependencies = [StarDep(name='arg138_1', mode=None)]
op206.outputs = [
    buf206: ExternKernelOut
    buf206.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf206.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op206.node.kernel = extern_kernels.mm


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 4194304}, None)]
op207.unmet_dependencies = [   MemoryDep('buf204', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op207.met_dependencies = [   MemoryDep('arg135_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (4194304, 1)
op207.sizes = ([512, 128, 64], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op207_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg135_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf207', get_index_2, mul, None)
        return store
op207 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 4194304}, None)]
op208.unmet_dependencies = [   MemoryDep('buf205', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op208.met_dependencies = [   MemoryDep('arg137_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (4194304, 1)
op208.sizes = ([512, 128, 64], [])
buf205_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op208_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf208', get_index_2, add, None)
        return store
op208 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 4194304}, None)]
op209.unmet_dependencies = [   MemoryDep('buf206', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op209.met_dependencies = [   MemoryDep('arg139_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (4194304, 1)
op209.sizes = ([512, 128, 64], [])
buf206_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op209_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg139_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf209', get_index_2, add, None)
        return store
op209 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op210: ExternKernelSchedulerNode(FallbackKernel)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = 
    [   StarDep(name='buf207', mode=None),
        StarDep(name='buf208', mode=None),
        StarDep(name='buf209', mode=None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: FallbackKernel
    buf210.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf210.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False),
    ]
]
op210.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op211: ExternKernelSchedulerNode(MultiOutput)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = []
op211.outputs = [
    buf211: MultiOutput
    buf211.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf211.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op211.node.kernel = None


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 4194304}, None)]
op215.unmet_dependencies = [   MemoryDep('buf211', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op215.met_dependencies = []
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (4194304, 1)
op215.sizes = ([32, 128, 1024], [])
buf211_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op215_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf215', get_index_1, load, None)
        return store
op215 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op216: ExternKernelSchedulerNode(ExternKernelOut)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op216.met_dependencies = [StarDep(name='arg140_1', mode=None)]
op216.outputs = [
    buf216: ExternKernelOut
    buf216.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op216.node.kernel = extern_kernels.mm


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 4194304}, None)]
op217.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 4194304}, None),
        MemoryDep('buf199', c0, {c0: 4194304}, None),
        MemoryDep('buf216', c0, {c0: 4194304}, None)]
op217.met_dependencies = 
    [   MemoryDep('arg131_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg141_1', c1, {c0: 4096, c1: 1024}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
]
op217.group.device = cuda:0
op217.group.iteration = (4194304, 1)
op217.sizes = ([4096, 1024], [])
buf192_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op217_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg131_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf216', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg141_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf217', get_index_5, add_3, None)
        return store
op217 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 4096}, None)]
op218.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 4194304}, None)]
op218.met_dependencies = []
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf218.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (4096, 1024)
op218.sizes = ([4096], [1024])
buf217_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op218_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf218', get_index_1, getitem)
        return store_reduction
op218 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 4096}, None)]
op219.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 4194304}, None)]
op219.met_dependencies = []
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (4096, 1024)
op219.sizes = ([4096], [1024])
buf217_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op219_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf219', get_index_1, getitem_1)
        return store_reduction
op219 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 4194304}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 4194304}, None),
        MemoryDep('buf218', c0, {c0: 4096}, None),
        MemoryDep('buf219', c0, {c0: 4096}, None)]
op221.met_dependencies = 
    [   MemoryDep('arg142_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg143_1', c1, {c0: 4096, c1: 1024}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (4194304, 1)
op221.sizes = ([4096, 1024], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf219_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op221_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf218', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf219', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg142_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg143_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf221', get_index_5, add_1, None)
        return store
op221 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='arg144_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf222.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False)]
]
op222.node.kernel = extern_kernels.mm


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 16777216}, None)]
op223.unmet_dependencies = [MemoryDep('buf222', c0, {c0: 16777216}, None)]
op223.met_dependencies = [MemoryDep('arg145_1', c1, {c0: 4096, c1: 4096}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (16777216, 1)
op223.sizes = ([4096, 4096], [])
buf222_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op223_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg145_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf222', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg145_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf223', get_index_4, mul_2, None)
        return store
op223 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf223', mode=None)]
op224.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
]
op224.node.kernel = extern_kernels.mm


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 4096}, None)]
op225.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 4194304}, None),
        MemoryDep('buf224', c0, {c0: 4194304}, None)]
op225.met_dependencies = [MemoryDep('arg147_1', c1, {c0: 4096, c1: 1024}, None)]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf225.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (4096, 1024)
op225.sizes = ([4096], [1024])
buf217_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op225_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg147_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf225', get_index_3, getitem)
        return store_reduction
op225 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 4096}, None)]
op226.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 4194304}, None),
        MemoryDep('buf224', c0, {c0: 4194304}, None)]
op226.met_dependencies = [MemoryDep('arg147_1', c1, {c0: 4096, c1: 1024}, None)]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf226.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (4096, 1024)
op226.sizes = ([4096], [1024])
buf217_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op226_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg147_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf226', get_index_3, getitem_1)
        return store_reduction
op226 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 4194304}, None)]
op228.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 4194304}, None),
        MemoryDep('buf224', c0, {c0: 4194304}, None),
        MemoryDep('buf225', c0, {c0: 4096}, None),
        MemoryDep('buf226', c0, {c0: 4096}, None)]
op228.met_dependencies = 
    [   MemoryDep('arg147_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg148_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg149_1', c1, {c0: 4096, c1: 1024}, None)]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf228.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
    ]
]
op228.group.device = cuda:0
op228.group.iteration = (4194304, 1)
op228.sizes = ([4096, 1024], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf226_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op228_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg147_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf225', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf226', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg148_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg149_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf228', get_index_7, add_3, None)
        return store
op228 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op229: ExternKernelSchedulerNode(ExternKernelOut)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op229.met_dependencies = [StarDep(name='arg150_1', mode=None)]
op229.outputs = [
    buf229: ExternKernelOut
    buf229.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf229.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op229.node.kernel = extern_kernels.mm


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op230.met_dependencies = [StarDep(name='arg152_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf230.users = [NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op230.node.kernel = extern_kernels.mm


op231: ExternKernelSchedulerNode(ExternKernelOut)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op231.met_dependencies = [StarDep(name='arg154_1', mode=None)]
op231.outputs = [
    buf231: ExternKernelOut
    buf231.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf231.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False)]
]
op231.node.kernel = extern_kernels.mm


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 4194304}, None)]
op232.unmet_dependencies = [   MemoryDep('buf229', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op232.met_dependencies = [   MemoryDep('arg151_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (4194304, 1)
op232.sizes = ([512, 128, 64], [])
buf229_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op232_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg151_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf232', get_index_2, mul, None)
        return store
op232 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 4194304}, None)]
op233.unmet_dependencies = [   MemoryDep('buf230', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op233.met_dependencies = [   MemoryDep('arg153_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf233.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (4194304, 1)
op233.sizes = ([512, 128, 64], [])
buf230_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op233_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg153_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf233', get_index_2, add, None)
        return store
op233 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 4194304}, None)]
op234.unmet_dependencies = [   MemoryDep('buf231', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op234.met_dependencies = [   MemoryDep('arg155_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf234.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (4194304, 1)
op234.sizes = ([512, 128, 64], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op234_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg155_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf234', get_index_2, add, None)
        return store
op234 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op235: ExternKernelSchedulerNode(FallbackKernel)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = 
    [   StarDep(name='buf232', mode=None),
        StarDep(name='buf233', mode=None),
        StarDep(name='buf234', mode=None)]
op235.met_dependencies = []
op235.outputs = [
    buf235: FallbackKernel
    buf235.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf235.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False),
    ]
]
op235.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op236: ExternKernelSchedulerNode(MultiOutput)
op236.writes = [StarDep(name='buf236', mode=None)]
op236.unmet_dependencies = [StarDep(name='buf235', mode=None)]
op236.met_dependencies = []
op236.outputs = [
    buf236: MultiOutput
    buf236.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf236.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op236.node.kernel = None


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 4194304}, None)]
op240.unmet_dependencies = [   MemoryDep('buf236', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op240.met_dependencies = []
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (4194304, 1)
op240.sizes = ([32, 128, 1024], [])
buf236_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op240_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf240', get_index_1, load, None)
        return store
op240 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op241: ExternKernelSchedulerNode(ExternKernelOut)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = [StarDep(name='arg156_1', mode=None)]
op241.outputs = [
    buf241: ExternKernelOut
    buf241.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf241.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False)]
]
op241.node.kernel = extern_kernels.mm


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 4194304}, None)]
op242.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 4194304}, None),
        MemoryDep('buf224', c0, {c0: 4194304}, None),
        MemoryDep('buf241', c0, {c0: 4194304}, None)]
op242.met_dependencies = 
    [   MemoryDep('arg147_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg157_1', c1, {c0: 4096, c1: 1024}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf242.users = [
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op242.group.device = cuda:0
op242.group.iteration = (4194304, 1)
op242.sizes = ([4096, 1024], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op242_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg147_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf241', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg157_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf242', get_index_5, add_3, None)
        return store
op242 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 4096}, None)]
op243.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 4194304}, None)]
op243.met_dependencies = []
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf243.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (4096, 1024)
op243.sizes = ([4096], [1024])
buf242_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op243_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf243', get_index_1, getitem)
        return store_reduction
op243 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 4096}, None)]
op244.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 4194304}, None)]
op244.met_dependencies = []
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf244.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (4096, 1024)
op244.sizes = ([4096], [1024])
buf242_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op244_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf244', get_index_1, getitem_1)
        return store_reduction
op244 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 4194304}, None)]
op246.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 4194304}, None),
        MemoryDep('buf243', c0, {c0: 4096}, None),
        MemoryDep('buf244', c0, {c0: 4096}, None)]
op246.met_dependencies = 
    [   MemoryDep('arg158_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg159_1', c1, {c0: 4096, c1: 1024}, None)]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (4194304, 1)
op246.sizes = ([4096, 1024], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf244_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op246_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf243', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf244', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg158_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg159_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf246', get_index_5, add_1, None)
        return store
op246 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op247: ExternKernelSchedulerNode(ExternKernelOut)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf246', mode=None)]
op247.met_dependencies = [StarDep(name='arg160_1', mode=None)]
op247.outputs = [
    buf247: ExternKernelOut
    buf247.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf247.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False)]
]
op247.node.kernel = extern_kernels.mm


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 16777216}, None)]
op248.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 16777216}, None)]
op248.met_dependencies = [MemoryDep('arg161_1', c1, {c0: 4096, c1: 4096}, None)]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (16777216, 1)
op248.sizes = ([4096, 4096], [])
buf247_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op248_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg161_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf247', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg161_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf248', get_index_4, mul_2, None)
        return store
op248 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op249: ExternKernelSchedulerNode(ExternKernelOut)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf248', mode=None)]
op249.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op249.outputs = [
    buf249: ExternKernelOut
    buf249.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf249.users = [
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op249.node.kernel = extern_kernels.mm


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 4096}, None)]
op250.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 4194304}, None),
        MemoryDep('buf249', c0, {c0: 4194304}, None)]
op250.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 4096, c1: 1024}, None)]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf250.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (4096, 1024)
op250.sizes = ([4096], [1024])
buf242_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op250_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf250', get_index_3, getitem)
        return store_reduction
op250 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 4096}, None)]
op251.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 4194304}, None),
        MemoryDep('buf249', c0, {c0: 4194304}, None)]
op251.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 4096, c1: 1024}, None)]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf251.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (4096, 1024)
op251.sizes = ([4096], [1024])
buf242_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op251_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf251', get_index_3, getitem_1)
        return store_reduction
op251 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 4194304}, None)]
op253.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 4194304}, None),
        MemoryDep('buf249', c0, {c0: 4194304}, None),
        MemoryDep('buf250', c0, {c0: 4096}, None),
        MemoryDep('buf251', c0, {c0: 4096}, None)]
op253.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg164_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg165_1', c1, {c0: 4096, c1: 1024}, None)]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf253.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False),
    ]
]
op253.group.device = cuda:0
op253.group.iteration = (4194304, 1)
op253.sizes = ([4096, 1024], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf251_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op253_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf250', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf251', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg164_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg165_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf253', get_index_7, add_3, None)
        return store
op253 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op254.met_dependencies = [StarDep(name='arg166_1', mode=None)]
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf254.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op254.node.kernel = extern_kernels.mm


op255: ExternKernelSchedulerNode(ExternKernelOut)
op255.writes = [StarDep(name='buf255', mode=None)]
op255.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op255.met_dependencies = [StarDep(name='arg168_1', mode=None)]
op255.outputs = [
    buf255: ExternKernelOut
    buf255.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf255.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op255.node.kernel = extern_kernels.mm


op256: ExternKernelSchedulerNode(ExternKernelOut)
op256.writes = [StarDep(name='buf256', mode=None)]
op256.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op256.met_dependencies = [StarDep(name='arg170_1', mode=None)]
op256.outputs = [
    buf256: ExternKernelOut
    buf256.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf256.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op256.node.kernel = extern_kernels.mm


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 4194304}, None)]
op257.unmet_dependencies = [   MemoryDep('buf254', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op257.met_dependencies = [   MemoryDep('arg167_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf257.users = [NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (4194304, 1)
op257.sizes = ([512, 128, 64], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op257_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg167_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf257', get_index_2, mul, None)
        return store
op257 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 4194304}, None)]
op258.unmet_dependencies = [   MemoryDep('buf255', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op258.met_dependencies = [   MemoryDep('arg169_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf258.users = [NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (4194304, 1)
op258.sizes = ([512, 128, 64], [])
buf255_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op258_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg169_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf258', get_index_2, add, None)
        return store
op258 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 4194304}, None)]
op259.unmet_dependencies = [   MemoryDep('buf256', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op259.met_dependencies = [   MemoryDep('arg171_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf259.users = [NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (4194304, 1)
op259.sizes = ([512, 128, 64], [])
buf256_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op259_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg171_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf259', get_index_2, add, None)
        return store
op259 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op260: ExternKernelSchedulerNode(FallbackKernel)
op260.writes = [StarDep(name='buf260', mode=None)]
op260.unmet_dependencies = 
    [   StarDep(name='buf257', mode=None),
        StarDep(name='buf258', mode=None),
        StarDep(name='buf259', mode=None)]
op260.met_dependencies = []
op260.outputs = [
    buf260: FallbackKernel
    buf260.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf260.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False),
    ]
]
op260.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op261: ExternKernelSchedulerNode(MultiOutput)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = [StarDep(name='buf260', mode=None)]
op261.met_dependencies = []
op261.outputs = [
    buf261: MultiOutput
    buf261.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf261.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op261.node.kernel = None


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 4194304}, None)]
op265.unmet_dependencies = [   MemoryDep('buf261', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op265.met_dependencies = []
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (4194304, 1)
op265.sizes = ([32, 128, 1024], [])
buf261_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op265_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf265', get_index_1, load, None)
        return store
op265 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op266: ExternKernelSchedulerNode(ExternKernelOut)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = [StarDep(name='arg172_1', mode=None)]
op266.outputs = [
    buf266: ExternKernelOut
    buf266.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf266.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False)]
]
op266.node.kernel = extern_kernels.mm


op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 4194304}, None)]
op267.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 4194304}, None),
        MemoryDep('buf249', c0, {c0: 4194304}, None),
        MemoryDep('buf266', c0, {c0: 4194304}, None)]
op267.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg173_1', c1, {c0: 4096, c1: 1024}, None)]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
    ]
]
op267.group.device = cuda:0
op267.group.iteration = (4194304, 1)
op267.sizes = ([4096, 1024], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op267_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf266', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg173_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf267', get_index_5, add_3, None)
        return store
op267 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 4096}, None)]
op268.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 4194304}, None)]
op268.met_dependencies = []
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf268.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (4096, 1024)
op268.sizes = ([4096], [1024])
buf267_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op268_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf268', get_index_1, getitem)
        return store_reduction
op268 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 4096}, None)]
op269.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 4194304}, None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (4096, 1024)
op269.sizes = ([4096], [1024])
buf267_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op269_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf269', get_index_1, getitem_1)
        return store_reduction
op269 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 4194304}, None)]
op271.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 4194304}, None),
        MemoryDep('buf268', c0, {c0: 4096}, None),
        MemoryDep('buf269', c0, {c0: 4096}, None)]
op271.met_dependencies = 
    [   MemoryDep('arg174_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg175_1', c1, {c0: 4096, c1: 1024}, None)]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (4194304, 1)
op271.sizes = ([4096, 1024], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf269_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op271_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf268', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf269', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg174_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg175_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf271', get_index_5, add_1, None)
        return store
op271 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op272: ExternKernelSchedulerNode(ExternKernelOut)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf271', mode=None)]
op272.met_dependencies = [StarDep(name='arg176_1', mode=None)]
op272.outputs = [
    buf272: ExternKernelOut
    buf272.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
]
op272.node.kernel = extern_kernels.mm


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 16777216}, None)]
op273.unmet_dependencies = [MemoryDep('buf272', c0, {c0: 16777216}, None)]
op273.met_dependencies = [MemoryDep('arg177_1', c1, {c0: 4096, c1: 4096}, None)]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (16777216, 1)
op273.sizes = ([4096, 4096], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op273_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg177_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf272', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg177_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf273', get_index_4, mul_2, None)
        return store
op273 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op274: ExternKernelSchedulerNode(ExternKernelOut)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf273', mode=None)]
op274.met_dependencies = [StarDep(name='arg178_1', mode=None)]
op274.outputs = [
    buf274: ExternKernelOut
    buf274.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf274.users = [
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
    ]
]
op274.node.kernel = extern_kernels.mm


op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 4096}, None)]
op275.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 4194304}, None),
        MemoryDep('buf274', c0, {c0: 4194304}, None)]
op275.met_dependencies = [MemoryDep('arg179_1', c1, {c0: 4096, c1: 1024}, None)]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf275.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (4096, 1024)
op275.sizes = ([4096], [1024])
buf267_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op275_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg179_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf275', get_index_3, getitem)
        return store_reduction
op275 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 4096}, None)]
op276.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 4194304}, None),
        MemoryDep('buf274', c0, {c0: 4194304}, None)]
op276.met_dependencies = [MemoryDep('arg179_1', c1, {c0: 4096, c1: 1024}, None)]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf276.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (4096, 1024)
op276.sizes = ([4096], [1024])
buf267_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op276_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg179_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf276', get_index_3, getitem_1)
        return store_reduction
op276 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 4194304}, None)]
op278.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 4194304}, None),
        MemoryDep('buf274', c0, {c0: 4194304}, None),
        MemoryDep('buf275', c0, {c0: 4096}, None),
        MemoryDep('buf276', c0, {c0: 4096}, None)]
op278.met_dependencies = 
    [   MemoryDep('arg179_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg180_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg181_1', c1, {c0: 4096, c1: 1024}, None)]
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf278.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False),
    ]
]
op278.group.device = cuda:0
op278.group.iteration = (4194304, 1)
op278.sizes = ([4096, 1024], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf276_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf278_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op278_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg179_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf275', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf276', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg180_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg181_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf278', get_index_7, add_3, None)
        return store
op278 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op279: ExternKernelSchedulerNode(ExternKernelOut)
op279.writes = [StarDep(name='buf279', mode=None)]
op279.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op279.met_dependencies = [StarDep(name='arg182_1', mode=None)]
op279.outputs = [
    buf279: ExternKernelOut
    buf279.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf279.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op279.node.kernel = extern_kernels.mm


op280: ExternKernelSchedulerNode(ExternKernelOut)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op280.met_dependencies = [StarDep(name='arg184_1', mode=None)]
op280.outputs = [
    buf280: ExternKernelOut
    buf280.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf280.users = [NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op280.node.kernel = extern_kernels.mm


op281: ExternKernelSchedulerNode(ExternKernelOut)
op281.writes = [StarDep(name='buf281', mode=None)]
op281.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op281.met_dependencies = [StarDep(name='arg186_1', mode=None)]
op281.outputs = [
    buf281: ExternKernelOut
    buf281.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf281.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op281.node.kernel = extern_kernels.mm


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 4194304}, None)]
op282.unmet_dependencies = [   MemoryDep('buf279', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op282.met_dependencies = [   MemoryDep('arg183_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (4194304, 1)
op282.sizes = ([512, 128, 64], [])
buf279_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op282_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg183_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf282', get_index_2, mul, None)
        return store
op282 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 4194304}, None)]
op283.unmet_dependencies = [   MemoryDep('buf280', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op283.met_dependencies = [   MemoryDep('arg185_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf283.users = [NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op283.group.device = cuda:0
op283.group.iteration = (4194304, 1)
op283.sizes = ([512, 128, 64], [])
buf280_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op283_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg185_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf283', get_index_2, add, None)
        return store
op283 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 4194304}, None)]
op284.unmet_dependencies = [   MemoryDep('buf281', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op284.met_dependencies = [   MemoryDep('arg187_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf284.users = [NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op284.group.device = cuda:0
op284.group.iteration = (4194304, 1)
op284.sizes = ([512, 128, 64], [])
buf281_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op284_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg187_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf284', get_index_2, add, None)
        return store
op284 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op285: ExternKernelSchedulerNode(FallbackKernel)
op285.writes = [StarDep(name='buf285', mode=None)]
op285.unmet_dependencies = 
    [   StarDep(name='buf282', mode=None),
        StarDep(name='buf283', mode=None),
        StarDep(name='buf284', mode=None)]
op285.met_dependencies = []
op285.outputs = [
    buf285: FallbackKernel
    buf285.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf285.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False),
    ]
]
op285.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op286: ExternKernelSchedulerNode(MultiOutput)
op286.writes = [StarDep(name='buf286', mode=None)]
op286.unmet_dependencies = [StarDep(name='buf285', mode=None)]
op286.met_dependencies = []
op286.outputs = [
    buf286: MultiOutput
    buf286.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf286.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op286.node.kernel = None


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 4194304}, None)]
op290.unmet_dependencies = [   MemoryDep('buf286', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op290.met_dependencies = []
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (4194304, 1)
op290.sizes = ([32, 128, 1024], [])
buf286_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op290_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf290', get_index_1, load, None)
        return store
op290 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op291: ExternKernelSchedulerNode(ExternKernelOut)
op291.writes = [StarDep(name='buf291', mode=None)]
op291.unmet_dependencies = [StarDep(name='buf290', mode=None)]
op291.met_dependencies = [StarDep(name='arg188_1', mode=None)]
op291.outputs = [
    buf291: ExternKernelOut
    buf291.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf291.users = [NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False)]
]
op291.node.kernel = extern_kernels.mm


op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 4194304}, None)]
op292.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 4194304}, None),
        MemoryDep('buf274', c0, {c0: 4194304}, None),
        MemoryDep('buf291', c0, {c0: 4194304}, None)]
op292.met_dependencies = 
    [   MemoryDep('arg179_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg189_1', c1, {c0: 4096, c1: 1024}, None)]
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf292.users = [
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
    ]
]
op292.group.device = cuda:0
op292.group.iteration = (4194304, 1)
op292.sizes = ([4096, 1024], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op292_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg179_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf291', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg189_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf292', get_index_5, add_3, None)
        return store
op292 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 4096}, None)]
op293.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 4194304}, None)]
op293.met_dependencies = []
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf293.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op293.group.device = cuda:0
op293.group.iteration = (4096, 1024)
op293.sizes = ([4096], [1024])
buf292_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op293_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf293', get_index_1, getitem)
        return store_reduction
op293 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 4096}, None)]
op294.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 4194304}, None)]
op294.met_dependencies = []
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf294.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op294.group.device = cuda:0
op294.group.iteration = (4096, 1024)
op294.sizes = ([4096], [1024])
buf292_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op294_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf294', get_index_1, getitem_1)
        return store_reduction
op294 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 4194304}, None)]
op296.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 4194304}, None),
        MemoryDep('buf293', c0, {c0: 4096}, None),
        MemoryDep('buf294', c0, {c0: 4096}, None)]
op296.met_dependencies = 
    [   MemoryDep('arg190_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg191_1', c1, {c0: 4096, c1: 1024}, None)]
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf296.users = [NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op296.group.device = cuda:0
op296.group.iteration = (4194304, 1)
op296.sizes = ([4096, 1024], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf294_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf296_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op296_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf293', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf294', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg190_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg191_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf296', get_index_5, add_1, None)
        return store
op296 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op297: ExternKernelSchedulerNode(ExternKernelOut)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = [StarDep(name='buf296', mode=None)]
op297.met_dependencies = [StarDep(name='arg192_1', mode=None)]
op297.outputs = [
    buf297: ExternKernelOut
    buf297.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf297.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False)]
]
op297.node.kernel = extern_kernels.mm


op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 16777216}, None)]
op298.unmet_dependencies = [MemoryDep('buf297', c0, {c0: 16777216}, None)]
op298.met_dependencies = [MemoryDep('arg193_1', c1, {c0: 4096, c1: 4096}, None)]
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf298.users = [NodeUser(node=ExternKernelSchedulerNode(name='op299'), can_inplace=False, is_weak=False)]
]
op298.group.device = cuda:0
op298.group.iteration = (16777216, 1)
op298.sizes = ([4096, 4096], [])
buf297_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op298_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf297', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg193_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf297', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg193_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf298', get_index_4, mul_2, None)
        return store
op298 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op299: ExternKernelSchedulerNode(ExternKernelOut)
op299.writes = [StarDep(name='buf299', mode=None)]
op299.unmet_dependencies = [StarDep(name='buf298', mode=None)]
op299.met_dependencies = [StarDep(name='arg194_1', mode=None)]
op299.outputs = [
    buf299: ExternKernelOut
    buf299.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf299.users = [
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
    ]
]
op299.node.kernel = extern_kernels.mm


op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 4096}, None)]
op300.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 4194304}, None),
        MemoryDep('buf299', c0, {c0: 4194304}, None)]
op300.met_dependencies = [MemoryDep('arg195_1', c1, {c0: 4096, c1: 1024}, None)]
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf300.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op300.group.device = cuda:0
op300.group.iteration = (4096, 1024)
op300.sizes = ([4096], [1024])
buf292_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op300_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg195_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf300', get_index_3, getitem)
        return store_reduction
op300 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 4096}, None)]
op301.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 4194304}, None),
        MemoryDep('buf299', c0, {c0: 4194304}, None)]
op301.met_dependencies = [MemoryDep('arg195_1', c1, {c0: 4096, c1: 1024}, None)]
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf301.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (4096, 1024)
op301.sizes = ([4096], [1024])
buf292_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op301_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg195_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf301', get_index_3, getitem_1)
        return store_reduction
op301 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 4096}, None)]
op303.unmet_dependencies = []
op303.met_dependencies = 
    [   MemoryDep('arg198_1', c1, {c0: 32, c1: 131072}, None),
        MemoryDep('arg1_1', c0, {c0: 4096}, None),
        MemoryDep('arg2_1', c1 + 1024*tmp0, {c0: 4096, c1: 1024}, None)]
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf303.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op303.group.device = cuda:0
op303.group.iteration = (4096, 1024)
op303.sizes = ([32, 128], [1024])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[32, 128], stride=[128, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 1024], stride=[1024, 1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op303_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 128*z0 + z1
    index1 = 1024*indirect0 + z2
    index2 = z1
    index3 = 1024
    index4 = 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg198_1', get_index_4)
        add = ops.add(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf303', get_index_5, getitem)
        return store_reduction
op303 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        x0 = xindex % 128
        tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp9 = tl.load(in_ptr2 + (r2 + (1024*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
            tmp6 = tl.load(in_ptr1 + (r2 + (1024*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp7 = 1.0
            tmp8 = tmp6 * tmp7
            tmp10 = tmp8 + tmp9
            tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
            tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
                tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
            )
            tmp12_mean = tl.where(rmask, tmp12_mean_next, tmp12_mean)
            tmp12_m2 = tl.where(rmask, tmp12_m2_next, tmp12_m2)
            tmp12_weight = tl.where(rmask, tmp12_weight_next, tmp12_weight)
        tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
            tmp12_mean, tmp12_m2, tmp12_weight, 1
        )
        tmp12 = tmp12_tmp[:, None]
        tmp13 = tmp13_tmp[:, None]
        tmp14 = tmp14_tmp[:, None]
        tl.store(out_ptr0 + (x3), tmp12, None)


op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 4096}, None)]
op304.unmet_dependencies = []
op304.met_dependencies = 
    [   MemoryDep('arg198_1', c1, {c0: 32, c1: 131072}, None),
        MemoryDep('arg1_1', c0, {c0: 4096}, None),
        MemoryDep('arg2_1', c1 + 1024*tmp0, {c0: 4096, c1: 1024}, None)]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf304.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (4096, 1024)
op304.sizes = ([32, 128], [1024])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[32, 128], stride=[128, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 1024], stride=[1024, 1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op304_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 128*z0 + z1
    index1 = 1024*indirect0 + z2
    index2 = z1
    index3 = 1024
    index4 = 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg198_1', get_index_4)
        add = ops.add(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf304', get_index_5, getitem_1)
        return store_reduction
op304 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        x0 = xindex % 128
        tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp9 = tl.load(in_ptr2 + (r2 + (1024*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
            tmp6 = tl.load(in_ptr1 + (r2 + (1024*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp7 = 1.0
            tmp8 = tmp6 * tmp7
            tmp10 = tmp8 + tmp9
            tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
            tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
                tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
            )
            tmp12_mean = tl.where(rmask, tmp12_mean_next, tmp12_mean)
            tmp12_m2 = tl.where(rmask, tmp12_m2_next, tmp12_m2)
            tmp12_weight = tl.where(rmask, tmp12_weight_next, tmp12_weight)
        tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
            tmp12_mean, tmp12_m2, tmp12_weight, 1
        )
        tmp12 = tmp12_tmp[:, None]
        tmp13 = tmp13_tmp[:, None]
        tmp14 = tmp14_tmp[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 4194304}, None)]
op306.unmet_dependencies = 
    [   MemoryDep('buf303', c0, {c0: 4096}, None),
        MemoryDep('buf304', c0, {c0: 4096}, None)]
op306.met_dependencies = 
    [   MemoryDep('arg198_1', c1, {c0: 32, c1: 131072}, None),
        MemoryDep('arg199_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg1_1', c0, {c0: 4096}, None),
        MemoryDep('arg200_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg2_1', c1 + 1024*tmp0, {c0: 4096, c1: 1024}, None)]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf306.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False),
    ]
]
op306.group.device = cuda:0
op306.group.iteration = (4194304, 1)
op306.sizes = ([32, 128, 1024], [])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[32, 128], stride=[128, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 1024], stride=[1024, 1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf304_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op306_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 128*z0 + z1
    index1 = 1024*indirect0 + z2
    index2 = z1
    index3 = 1024
    index4 = 1024*z1 + z2
    index5 = z2
    index6 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg198_1', get_index_4)
        add = ops.add(mul, load_2)
        get_index_5 = self.get_index('index0')
        load_3 = ops.load('buf303', get_index_5)
        sub = ops.sub(add, load_3)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('buf304', get_index_6)
        constant_1 = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_1)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_7 = self.get_index('index5')
        load_5 = ops.load('arg199_1', get_index_7)
        mul_2 = ops.mul(mul_1, load_5)
        get_index_8 = self.get_index('index5')
        load_6 = ops.load('arg200_1', get_index_8)
        add_2 = ops.add(mul_2, load_6)
        get_index_9 = self.get_index('index6')
        store = ops.store('buf306', get_index_9, add_2, None)
        return store
op306 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 1024)
        x0 = xindex % 1024
        x4 = xindex % 131072
        x5 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        tmp9 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr3 + (x3), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr4 + (x3), None, eviction_policy='evict_last')
        tmp20 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([XBLOCK], 50265, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
        tmp6 = tl.load(in_ptr1 + (x0 + (1024*tmp4)), None)
        tmp7 = 1.0
        tmp8 = tmp6 * tmp7
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 - tmp11
        tmp14 = 1024.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-05
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp21 = tmp19 * tmp20
        tmp23 = tmp21 + tmp22
        tl.store(out_ptr0 + (x5), tmp23, None)


op307: ExternKernelSchedulerNode(ExternKernelOut)
op307.writes = [StarDep(name='buf307', mode=None)]
op307.unmet_dependencies = [StarDep(name='buf306', mode=None)]
op307.met_dependencies = [StarDep(name='arg201_1', mode=None)]
op307.outputs = [
    buf307: ExternKernelOut
    buf307.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf307.users = [NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False)]
]
op307.node.kernel = extern_kernels.mm


op308: ExternKernelSchedulerNode(ExternKernelOut)
op308.writes = [StarDep(name='buf308', mode=None)]
op308.unmet_dependencies = [StarDep(name='buf306', mode=None)]
op308.met_dependencies = [StarDep(name='arg203_1', mode=None)]
op308.outputs = [
    buf308: ExternKernelOut
    buf308.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf308.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
]
op308.node.kernel = extern_kernels.mm


op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 4194304}, None)]
op309.unmet_dependencies = [   MemoryDep('buf307', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op309.met_dependencies = [MemoryDep('arg202_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf309.users = [NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op309.group.device = cuda:0
op309.group.iteration = (4194304, 1)
op309.sizes = ([32, 16, 128, 64], [])
buf307_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op309_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf309', get_index_2, mul, None)
        return store
op309 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 4194304}, None)]
op310.unmet_dependencies = [   MemoryDep('buf308', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op310.met_dependencies = [MemoryDep('arg204_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf310.users = [NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op310.group.device = cuda:0
op310.group.iteration = (4194304, 1)
op310.sizes = ([32, 16, 128, 64], [])
buf308_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op310_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg204_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf310', get_index_2, add, None)
        return store
op310 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op311: ExternKernelSchedulerNode(ExternKernelOut)
op311.writes = [StarDep(name='buf311', mode=None)]
op311.unmet_dependencies = [StarDep(name='buf309', mode=None), StarDep(name='buf310', mode=None)]
op311.met_dependencies = []
op311.outputs = [
    buf311: ExternKernelOut
    buf311.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf311.users = [
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=True, is_weak=False),
    ]
]
op311.node.kernel = extern_kernels.bmm


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 65536}, None)]
op312.unmet_dependencies = [MemoryDep('buf311', c0, {c0: 8388608}, None)]
op312.met_dependencies = []
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf312.users = [
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False),
    ]
]
op312.group.device = cuda:0
op312.group.iteration = (65536, 128)
op312.sizes = ([512, 128], [128])
buf311_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op312_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf312', get_index_3, reduction)
        return store_reduction
op312 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)


op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 65536}, None)]
op313.unmet_dependencies = 
    [   MemoryDep('buf311', c0, {c0: 8388608}, None),
        MemoryDep('buf312', c0, {c0: 65536}, None)]
op313.met_dependencies = []
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf313.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op313.group.device = cuda:0
op313.group.iteration = (65536, 128)
op313.sizes = ([512, 128], [128])
buf311_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf313_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op313_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf312', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf313', get_index_4, reduction)
        return store_reduction
op313 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op314: ExternKernelSchedulerNode(ExternKernelOut)
op314.writes = [StarDep(name='buf314', mode=None)]
op314.unmet_dependencies = [StarDep(name='buf306', mode=None)]
op314.met_dependencies = [StarDep(name='arg205_1', mode=None)]
op314.outputs = [
    buf314: ExternKernelOut
    buf314.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf314.users = [NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
]
op314.node.kernel = extern_kernels.mm


op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', c0, {c0: 8388608}, None)]
op315.unmet_dependencies = 
    [   MemoryDep('buf311', c0, {c0: 8388608}, None),
        MemoryDep('buf312', c0, {c0: 65536}, None),
        MemoryDep('buf313', c0, {c0: 65536}, None)]
op315.met_dependencies = []
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf315.users = [NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op315.group.device = cuda:0
op315.group.iteration = (8388608, 1)
op315.sizes = ([512, 128, 128], [])
buf311_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf313_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf315_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op315_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf312', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf313', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf315', get_index_5, truediv, None)
        return store
op315 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)


op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 4194304}, None)]
op316.unmet_dependencies = [   MemoryDep('buf314', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op316.met_dependencies = [MemoryDep('arg206_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf316.users = [NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op316.group.device = cuda:0
op316.group.iteration = (4194304, 1)
op316.sizes = ([32, 16, 128, 64], [])
buf314_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op316_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf316', get_index_2, add, None)
        return store
op316 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op317: ExternKernelSchedulerNode(ExternKernelOut)
op317.writes = [StarDep(name='buf317', mode=None)]
op317.unmet_dependencies = [StarDep(name='buf315', mode=None), StarDep(name='buf316', mode=None)]
op317.met_dependencies = []
op317.outputs = [
    buf317: ExternKernelOut
    buf317.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf317.users = [NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False)]
]
op317.node.kernel = extern_kernels.bmm


op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 4194304}, None)]
op318.unmet_dependencies = [   MemoryDep('buf317', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op318.met_dependencies = []
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf318.users = [NodeUser(node=ExternKernelSchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op318.group.device = cuda:0
op318.group.iteration = (4194304, 1)
op318.sizes = ([32, 128, 16, 64], [])
buf317_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op318_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf318', get_index_1, load, None)
        return store
op318 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op319: ExternKernelSchedulerNode(ExternKernelOut)
op319.writes = [StarDep(name='buf319', mode=None)]
op319.unmet_dependencies = [StarDep(name='buf318', mode=None)]
op319.met_dependencies = [StarDep(name='arg207_1', mode=None)]
op319.outputs = [
    buf319: ExternKernelOut
    buf319.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf319.users = [NodeUser(node=SchedulerNode(name='op320'), can_inplace=True, is_weak=False)]
]
op319.node.kernel = extern_kernels.mm


op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', c0, {c0: 4194304}, None)]
op320.unmet_dependencies = [MemoryDep('buf319', c0, {c0: 4194304}, None)]
op320.met_dependencies = 
    [   MemoryDep('arg198_1', c1, {c0: 32, c1: 131072}, None),
        MemoryDep('arg1_1', c0, {c0: 4096}, None),
        MemoryDep('arg208_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg2_1', c1 + 1024*tmp0, {c0: 4096, c1: 1024}, None)]
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf320.users = [
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False),
    ]
]
op320.group.device = cuda:0
op320.group.iteration = (4194304, 1)
op320.sizes = ([32, 128, 1024], [])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[32, 128], stride=[128, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 1024], stride=[1024, 1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf320_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op320_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 128*z0 + z1
    index1 = 1024*indirect0 + z2
    index2 = z1
    index3 = 1024
    index4 = 1024*z1 + z2
    index5 = 131072*z0 + 1024*z1 + z2
    index6 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg198_1', get_index_4)
        add = ops.add(mul, load_2)
        get_index_5 = self.get_index('index5')
        load_3 = ops.load('buf319', get_index_5)
        get_index_6 = self.get_index('index6')
        load_4 = ops.load('arg208_1', get_index_6)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(add, add_1)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf320', get_index_7, add_2, None)
        return store
op320 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 1024)
        x0 = xindex % 1024
        x4 = xindex % 131072
        x5 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        tmp9 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_out_ptr0 + (x5), None)
        tmp12 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([XBLOCK], 50265, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
        tmp6 = tl.load(in_ptr1 + (x0 + (1024*tmp4)), None)
        tmp7 = 1.0
        tmp8 = tmp6 * tmp7
        tmp10 = tmp8 + tmp9
        tmp13 = tmp11 + tmp12
        tmp14 = tmp10 + tmp13
        tl.store(in_out_ptr0 + (x5), tmp14, None)


op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', c0, {c0: 4096}, None)]
op321.unmet_dependencies = [MemoryDep('buf320', c0, {c0: 4194304}, None)]
op321.met_dependencies = []
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf321.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op321.group.device = cuda:0
op321.group.iteration = (4096, 1024)
op321.sizes = ([4096], [1024])
buf320_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op321_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf321', get_index_1, getitem)
        return store_reduction
op321 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 4096}, None)]
op322.unmet_dependencies = [MemoryDep('buf320', c0, {c0: 4194304}, None)]
op322.met_dependencies = []
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf322.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op322.group.device = cuda:0
op322.group.iteration = (4096, 1024)
op322.sizes = ([4096], [1024])
buf320_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf322_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op322_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf322', get_index_1, getitem_1)
        return store_reduction
op322 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 4194304}, None)]
op324.unmet_dependencies = 
    [   MemoryDep('buf320', c0, {c0: 4194304}, None),
        MemoryDep('buf321', c0, {c0: 4096}, None),
        MemoryDep('buf322', c0, {c0: 4096}, None)]
op324.met_dependencies = 
    [   MemoryDep('arg209_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg210_1', c1, {c0: 4096, c1: 1024}, None)]
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf324.users = [NodeUser(node=ExternKernelSchedulerNode(name='op325'), can_inplace=False, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (4194304, 1)
op324.sizes = ([4096, 1024], [])
buf320_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf322_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op324_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf321', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf322', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg209_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg210_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf324', get_index_5, add_1, None)
        return store
op324 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op325: ExternKernelSchedulerNode(ExternKernelOut)
op325.writes = [StarDep(name='buf325', mode=None)]
op325.unmet_dependencies = [StarDep(name='buf324', mode=None)]
op325.met_dependencies = [StarDep(name='arg211_1', mode=None)]
op325.outputs = [
    buf325: ExternKernelOut
    buf325.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf325.users = [NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False)]
]
op325.node.kernel = extern_kernels.mm


op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', c0, {c0: 4194304}, None)]
op326.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 4194304}, None),
        MemoryDep('buf299', c0, {c0: 4194304}, None),
        MemoryDep('buf300', c0, {c0: 4096}, None),
        MemoryDep('buf301', c0, {c0: 4096}, None)]
op326.met_dependencies = 
    [   MemoryDep('arg195_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg196_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg197_1', c1, {c0: 4096, c1: 1024}, None)]
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf326.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op498'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op539'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op540'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op582'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op583'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op624'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op625'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op667'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op668'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op709'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op710'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op752'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op794'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op795'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op326.group.device = cuda:0
op326.group.iteration = (4194304, 1)
op326.sizes = ([4096, 1024], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf301_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op326_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg195_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf300', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf301', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg196_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg197_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf326', get_index_7, add_3, None)
        return store
op326 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op327: ExternKernelSchedulerNode(ExternKernelOut)
op327.writes = [StarDep(name='buf327', mode=None)]
op327.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op327.met_dependencies = [StarDep(name='arg213_1', mode=None)]
op327.outputs = [
    buf327: ExternKernelOut
    buf327.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf327.users = [NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False)]
]
op327.node.kernel = extern_kernels.mm


op328: ExternKernelSchedulerNode(ExternKernelOut)
op328.writes = [StarDep(name='buf328', mode=None)]
op328.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op328.met_dependencies = [StarDep(name='arg215_1', mode=None)]
op328.outputs = [
    buf328: ExternKernelOut
    buf328.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf328.users = [NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False)]
]
op328.node.kernel = extern_kernels.mm


op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', c0, {c0: 4194304}, None)]
op329.unmet_dependencies = [   MemoryDep('buf325', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op329.met_dependencies = [   MemoryDep('arg212_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf329.users = [NodeUser(node=ExternKernelSchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op329.group.device = cuda:0
op329.group.iteration = (4194304, 1)
op329.sizes = ([512, 128, 64], [])
buf325_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op329_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf325', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg212_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf329', get_index_2, mul, None)
        return store
op329 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 4194304}, None)]
op330.unmet_dependencies = [   MemoryDep('buf327', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op330.met_dependencies = [   MemoryDep('arg214_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf330.users = [NodeUser(node=ExternKernelSchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op330.group.device = cuda:0
op330.group.iteration = (4194304, 1)
op330.sizes = ([512, 128, 64], [])
buf327_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op330_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf327', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg214_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf330', get_index_2, add, None)
        return store
op330 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 4194304}, None)]
op331.unmet_dependencies = [   MemoryDep('buf328', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op331.met_dependencies = [   MemoryDep('arg216_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf331.users = [NodeUser(node=ExternKernelSchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op331.group.device = cuda:0
op331.group.iteration = (4194304, 1)
op331.sizes = ([512, 128, 64], [])
buf328_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op331_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg216_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf331', get_index_2, add, None)
        return store
op331 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op332: ExternKernelSchedulerNode(FallbackKernel)
op332.writes = [StarDep(name='buf332', mode=None)]
op332.unmet_dependencies = 
    [   StarDep(name='buf329', mode=None),
        StarDep(name='buf330', mode=None),
        StarDep(name='buf331', mode=None)]
op332.met_dependencies = []
op332.outputs = [
    buf332: FallbackKernel
    buf332.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf332.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False),
    ]
]
op332.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op333: ExternKernelSchedulerNode(MultiOutput)
op333.writes = [StarDep(name='buf333', mode=None)]
op333.unmet_dependencies = [StarDep(name='buf332', mode=None)]
op333.met_dependencies = []
op333.outputs = [
    buf333: MultiOutput
    buf333.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf333.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op333.node.kernel = None


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 4194304}, None)]
op337.unmet_dependencies = [   MemoryDep('buf333', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op337.met_dependencies = []
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf337.users = [NodeUser(node=ExternKernelSchedulerNode(name='op338'), can_inplace=False, is_weak=False)]
]
op337.group.device = cuda:0
op337.group.iteration = (4194304, 1)
op337.sizes = ([32, 128, 1024], [])
buf333_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op337_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf337', get_index_1, load, None)
        return store
op337 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op338: ExternKernelSchedulerNode(ExternKernelOut)
op338.writes = [StarDep(name='buf338', mode=None)]
op338.unmet_dependencies = [StarDep(name='buf337', mode=None)]
op338.met_dependencies = [StarDep(name='arg217_1', mode=None)]
op338.outputs = [
    buf338: ExternKernelOut
    buf338.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf338.users = [
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False),
    ]
]
op338.node.kernel = extern_kernels.mm


op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 4096}, None)]
op339.unmet_dependencies = 
    [   MemoryDep('buf320', c0, {c0: 4194304}, None),
        MemoryDep('buf338', c0, {c0: 4194304}, None)]
op339.met_dependencies = [MemoryDep('arg218_1', c1, {c0: 4096, c1: 1024}, None)]
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf339.users = [NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
]
op339.group.device = cuda:0
op339.group.iteration = (4096, 1024)
op339.sizes = ([4096], [1024])
buf320_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op339_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf338', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg218_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf339', get_index_3, getitem)
        return store_reduction
op339 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 4096}, None)]
op340.unmet_dependencies = 
    [   MemoryDep('buf320', c0, {c0: 4194304}, None),
        MemoryDep('buf338', c0, {c0: 4194304}, None)]
op340.met_dependencies = [MemoryDep('arg218_1', c1, {c0: 4096, c1: 1024}, None)]
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf340.users = [NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
]
op340.group.device = cuda:0
op340.group.iteration = (4096, 1024)
op340.sizes = ([4096], [1024])
buf320_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op340_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf338', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg218_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf340', get_index_3, getitem_1)
        return store_reduction
op340 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 4194304}, None)]
op342.unmet_dependencies = 
    [   MemoryDep('buf320', c0, {c0: 4194304}, None),
        MemoryDep('buf338', c0, {c0: 4194304}, None),
        MemoryDep('buf339', c0, {c0: 4096}, None),
        MemoryDep('buf340', c0, {c0: 4096}, None)]
op342.met_dependencies = 
    [   MemoryDep('arg218_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg219_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg220_1', c1, {c0: 4096, c1: 1024}, None)]
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf342.users = [NodeUser(node=ExternKernelSchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op342.group.device = cuda:0
op342.group.iteration = (4194304, 1)
op342.sizes = ([4096, 1024], [])
buf320_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf340_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf342_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op342_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf338', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg218_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf339', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf340', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg219_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg220_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf342', get_index_7, add_3, None)
        return store
op342 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op343: ExternKernelSchedulerNode(ExternKernelOut)
op343.writes = [StarDep(name='buf343', mode=None)]
op343.unmet_dependencies = [StarDep(name='buf342', mode=None)]
op343.met_dependencies = [StarDep(name='arg221_1', mode=None)]
op343.outputs = [
    buf343: ExternKernelOut
    buf343.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf343.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=True, is_weak=False)]
]
op343.node.kernel = extern_kernels.mm


op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 16777216}, None)]
op344.unmet_dependencies = [MemoryDep('buf343', c0, {c0: 16777216}, None)]
op344.met_dependencies = [MemoryDep('arg222_1', c1, {c0: 4096, c1: 4096}, None)]
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf344.users = [NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op344.group.device = cuda:0
op344.group.iteration = (16777216, 1)
op344.sizes = ([4096, 4096], [])
buf343_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf344_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op344_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf343', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg222_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf343', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg222_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf344', get_index_4, mul_2, None)
        return store
op344 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op345: ExternKernelSchedulerNode(ExternKernelOut)
op345.writes = [StarDep(name='buf345', mode=None)]
op345.unmet_dependencies = [StarDep(name='buf344', mode=None)]
op345.met_dependencies = [StarDep(name='arg223_1', mode=None)]
op345.outputs = [
    buf345: ExternKernelOut
    buf345.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf345.users = [NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False)]
]
op345.node.kernel = extern_kernels.mm


op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', c0, {c0: 4194304}, None)]
op346.unmet_dependencies = 
    [   MemoryDep('buf320', c0, {c0: 4194304}, None),
        MemoryDep('buf338', c0, {c0: 4194304}, None),
        MemoryDep('buf345', c0, {c0: 4194304}, None)]
op346.met_dependencies = 
    [   MemoryDep('arg218_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg224_1', c1, {c0: 4096, c1: 1024}, None)]
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf346.users = [
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op381'), can_inplace=True, is_weak=False),
    ]
]
op346.group.device = cuda:0
op346.group.iteration = (4194304, 1)
op346.sizes = ([4096, 1024], [])
buf320_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf346_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op346_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf338', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg218_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf345', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg224_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf346', get_index_5, add_3, None)
        return store
op346 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op347: SchedulerNode(ComputedBuffer)
op347.writes = [MemoryDep('buf347', c0, {c0: 4096}, None)]
op347.unmet_dependencies = [MemoryDep('buf346', c0, {c0: 4194304}, None)]
op347.met_dependencies = []
op347.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf347.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op347.group.device = cuda:0
op347.group.iteration = (4096, 1024)
op347.sizes = ([4096], [1024])
buf346_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf347_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op347_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf347', get_index_1, getitem)
        return store_reduction
op347 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op348: SchedulerNode(ComputedBuffer)
op348.writes = [MemoryDep('buf348', c0, {c0: 4096}, None)]
op348.unmet_dependencies = [MemoryDep('buf346', c0, {c0: 4194304}, None)]
op348.met_dependencies = []
op348.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf348.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op348.group.device = cuda:0
op348.group.iteration = (4096, 1024)
op348.sizes = ([4096], [1024])
buf346_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op348_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf348', get_index_1, getitem_1)
        return store_reduction
op348 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', c0, {c0: 4194304}, None)]
op350.unmet_dependencies = 
    [   MemoryDep('buf346', c0, {c0: 4194304}, None),
        MemoryDep('buf347', c0, {c0: 4096}, None),
        MemoryDep('buf348', c0, {c0: 4096}, None)]
op350.met_dependencies = 
    [   MemoryDep('arg225_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg226_1', c1, {c0: 4096, c1: 1024}, None)]
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf350.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False),
    ]
]
op350.group.device = cuda:0
op350.group.iteration = (4194304, 1)
op350.sizes = ([4096, 1024], [])
buf346_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf347_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf348_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op350_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf347', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf348', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg225_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg226_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf350', get_index_5, add_1, None)
        return store
op350 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op351: ExternKernelSchedulerNode(ExternKernelOut)
op351.writes = [StarDep(name='buf351', mode=None)]
op351.unmet_dependencies = [StarDep(name='buf350', mode=None)]
op351.met_dependencies = [StarDep(name='arg227_1', mode=None)]
op351.outputs = [
    buf351: ExternKernelOut
    buf351.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf351.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op351.node.kernel = extern_kernels.mm


op352: ExternKernelSchedulerNode(ExternKernelOut)
op352.writes = [StarDep(name='buf352', mode=None)]
op352.unmet_dependencies = [StarDep(name='buf350', mode=None)]
op352.met_dependencies = [StarDep(name='arg229_1', mode=None)]
op352.outputs = [
    buf352: ExternKernelOut
    buf352.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf352.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op352.node.kernel = extern_kernels.mm


op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', c0, {c0: 4194304}, None)]
op353.unmet_dependencies = [   MemoryDep('buf351', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op353.met_dependencies = [MemoryDep('arg228_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf353.users = [NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
]
op353.group.device = cuda:0
op353.group.iteration = (4194304, 1)
op353.sizes = ([32, 16, 128, 64], [])
buf351_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op353_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf351', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg228_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf353', get_index_2, mul, None)
        return store
op353 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 4194304}, None)]
op354.unmet_dependencies = [   MemoryDep('buf352', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op354.met_dependencies = [MemoryDep('arg230_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf354.users = [NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
]
op354.group.device = cuda:0
op354.group.iteration = (4194304, 1)
op354.sizes = ([32, 16, 128, 64], [])
buf352_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op354_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg230_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf354', get_index_2, add, None)
        return store
op354 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op355: ExternKernelSchedulerNode(ExternKernelOut)
op355.writes = [StarDep(name='buf355', mode=None)]
op355.unmet_dependencies = [StarDep(name='buf353', mode=None), StarDep(name='buf354', mode=None)]
op355.met_dependencies = []
op355.outputs = [
    buf355: ExternKernelOut
    buf355.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf355.users = [
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=True, is_weak=False),
    ]
]
op355.node.kernel = extern_kernels.bmm


op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 65536}, None)]
op356.unmet_dependencies = [MemoryDep('buf355', c0, {c0: 8388608}, None)]
op356.met_dependencies = []
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf356.users = [
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False),
    ]
]
op356.group.device = cuda:0
op356.group.iteration = (65536, 128)
op356.sizes = ([512, 128], [128])
buf355_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op356_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf356', get_index_3, reduction)
        return store_reduction
op356 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)


op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', c0, {c0: 65536}, None)]
op357.unmet_dependencies = 
    [   MemoryDep('buf355', c0, {c0: 8388608}, None),
        MemoryDep('buf356', c0, {c0: 65536}, None)]
op357.met_dependencies = []
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf357.users = [NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
]
op357.group.device = cuda:0
op357.group.iteration = (65536, 128)
op357.sizes = ([512, 128], [128])
buf355_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf357_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op357_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf356', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf357', get_index_4, reduction)
        return store_reduction
op357 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op358: ExternKernelSchedulerNode(ExternKernelOut)
op358.writes = [StarDep(name='buf358', mode=None)]
op358.unmet_dependencies = [StarDep(name='buf350', mode=None)]
op358.met_dependencies = [StarDep(name='arg231_1', mode=None)]
op358.outputs = [
    buf358: ExternKernelOut
    buf358.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf358.users = [NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op358.node.kernel = extern_kernels.mm


op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', c0, {c0: 8388608}, None)]
op359.unmet_dependencies = 
    [   MemoryDep('buf355', c0, {c0: 8388608}, None),
        MemoryDep('buf356', c0, {c0: 65536}, None),
        MemoryDep('buf357', c0, {c0: 65536}, None)]
op359.met_dependencies = []
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf359.users = [NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op359.group.device = cuda:0
op359.group.iteration = (8388608, 1)
op359.sizes = ([512, 128, 128], [])
buf355_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf357_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf359_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op359_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf356', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf357', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf359', get_index_5, truediv, None)
        return store
op359 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)


op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', c0, {c0: 4194304}, None)]
op360.unmet_dependencies = [   MemoryDep('buf358', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op360.met_dependencies = [MemoryDep('arg232_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf360.users = [NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op360.group.device = cuda:0
op360.group.iteration = (4194304, 1)
op360.sizes = ([32, 16, 128, 64], [])
buf358_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op360_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg232_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf360', get_index_2, add, None)
        return store
op360 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op361: ExternKernelSchedulerNode(ExternKernelOut)
op361.writes = [StarDep(name='buf361', mode=None)]
op361.unmet_dependencies = [StarDep(name='buf359', mode=None), StarDep(name='buf360', mode=None)]
op361.met_dependencies = []
op361.outputs = [
    buf361: ExternKernelOut
    buf361.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf361.users = [NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False)]
]
op361.node.kernel = extern_kernels.bmm


op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', c0, {c0: 4194304}, None)]
op362.unmet_dependencies = [   MemoryDep('buf361', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op362.met_dependencies = []
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf362.users = [NodeUser(node=ExternKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
]
op362.group.device = cuda:0
op362.group.iteration = (4194304, 1)
op362.sizes = ([32, 128, 16, 64], [])
buf361_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op362_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf362', get_index_1, load, None)
        return store
op362 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op363: ExternKernelSchedulerNode(ExternKernelOut)
op363.writes = [StarDep(name='buf363', mode=None)]
op363.unmet_dependencies = [StarDep(name='buf362', mode=None)]
op363.met_dependencies = [StarDep(name='arg233_1', mode=None)]
op363.outputs = [
    buf363: ExternKernelOut
    buf363.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf363.users = [
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op381'), can_inplace=True, is_weak=False),
    ]
]
op363.node.kernel = extern_kernels.mm


op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 4096}, None)]
op364.unmet_dependencies = 
    [   MemoryDep('buf346', c0, {c0: 4194304}, None),
        MemoryDep('buf363', c0, {c0: 4194304}, None)]
op364.met_dependencies = [MemoryDep('arg234_1', c1, {c0: 4096, c1: 1024}, None)]
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf364.users = [NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
]
op364.group.device = cuda:0
op364.group.iteration = (4096, 1024)
op364.sizes = ([4096], [1024])
buf346_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op364_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf363', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg234_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf364', get_index_3, getitem)
        return store_reduction
op364 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op365: SchedulerNode(ComputedBuffer)
op365.writes = [MemoryDep('buf365', c0, {c0: 4096}, None)]
op365.unmet_dependencies = 
    [   MemoryDep('buf346', c0, {c0: 4194304}, None),
        MemoryDep('buf363', c0, {c0: 4194304}, None)]
op365.met_dependencies = [MemoryDep('arg234_1', c1, {c0: 4096, c1: 1024}, None)]
op365.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf365.users = [NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
]
op365.group.device = cuda:0
op365.group.iteration = (4096, 1024)
op365.sizes = ([4096], [1024])
buf346_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op365_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf363', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg234_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf365', get_index_3, getitem_1)
        return store_reduction
op365 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', c0, {c0: 4194304}, None)]
op367.unmet_dependencies = 
    [   MemoryDep('buf346', c0, {c0: 4194304}, None),
        MemoryDep('buf363', c0, {c0: 4194304}, None),
        MemoryDep('buf364', c0, {c0: 4096}, None),
        MemoryDep('buf365', c0, {c0: 4096}, None)]
op367.met_dependencies = 
    [   MemoryDep('arg234_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg235_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg236_1', c1, {c0: 4096, c1: 1024}, None)]
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf367.users = [NodeUser(node=ExternKernelSchedulerNode(name='op368'), can_inplace=False, is_weak=False)]
]
op367.group.device = cuda:0
op367.group.iteration = (4194304, 1)
op367.sizes = ([4096, 1024], [])
buf346_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf365_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf367_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op367_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf363', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg234_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf364', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf365', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg235_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg236_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf367', get_index_7, add_3, None)
        return store
op367 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op368: ExternKernelSchedulerNode(ExternKernelOut)
op368.writes = [StarDep(name='buf368', mode=None)]
op368.unmet_dependencies = [StarDep(name='buf367', mode=None)]
op368.met_dependencies = [StarDep(name='arg237_1', mode=None)]
op368.outputs = [
    buf368: ExternKernelOut
    buf368.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf368.users = [NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op368.node.kernel = extern_kernels.mm


op369: ExternKernelSchedulerNode(ExternKernelOut)
op369.writes = [StarDep(name='buf369', mode=None)]
op369.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op369.met_dependencies = [StarDep(name='arg239_1', mode=None)]
op369.outputs = [
    buf369: ExternKernelOut
    buf369.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf369.users = [NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
]
op369.node.kernel = extern_kernels.mm


op370: ExternKernelSchedulerNode(ExternKernelOut)
op370.writes = [StarDep(name='buf370', mode=None)]
op370.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op370.met_dependencies = [StarDep(name='arg241_1', mode=None)]
op370.outputs = [
    buf370: ExternKernelOut
    buf370.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf370.users = [NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False)]
]
op370.node.kernel = extern_kernels.mm


op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', c0, {c0: 4194304}, None)]
op371.unmet_dependencies = [   MemoryDep('buf368', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op371.met_dependencies = [   MemoryDep('arg238_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf371.users = [NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op371.group.device = cuda:0
op371.group.iteration = (4194304, 1)
op371.sizes = ([512, 128, 64], [])
buf368_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op371_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg238_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf371', get_index_2, mul, None)
        return store
op371 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 4194304}, None)]
op372.unmet_dependencies = [   MemoryDep('buf369', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op372.met_dependencies = [   MemoryDep('arg240_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf372.users = [NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op372.group.device = cuda:0
op372.group.iteration = (4194304, 1)
op372.sizes = ([512, 128, 64], [])
buf369_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf372_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op372_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf369', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg240_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf372', get_index_2, add, None)
        return store
op372 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', c0, {c0: 4194304}, None)]
op373.unmet_dependencies = [   MemoryDep('buf370', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op373.met_dependencies = [   MemoryDep('arg242_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf373.users = [NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op373.group.device = cuda:0
op373.group.iteration = (4194304, 1)
op373.sizes = ([512, 128, 64], [])
buf370_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op373_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg242_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf373', get_index_2, add, None)
        return store
op373 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op374: ExternKernelSchedulerNode(FallbackKernel)
op374.writes = [StarDep(name='buf374', mode=None)]
op374.unmet_dependencies = 
    [   StarDep(name='buf371', mode=None),
        StarDep(name='buf372', mode=None),
        StarDep(name='buf373', mode=None)]
op374.met_dependencies = []
op374.outputs = [
    buf374: FallbackKernel
    buf374.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf374.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op375'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False),
    ]
]
op374.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op375: ExternKernelSchedulerNode(MultiOutput)
op375.writes = [StarDep(name='buf375', mode=None)]
op375.unmet_dependencies = [StarDep(name='buf374', mode=None)]
op375.met_dependencies = []
op375.outputs = [
    buf375: MultiOutput
    buf375.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf375.users = [NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False)]
]
op375.node.kernel = None


op379: SchedulerNode(ComputedBuffer)
op379.writes = [MemoryDep('buf379', c0, {c0: 4194304}, None)]
op379.unmet_dependencies = [   MemoryDep('buf375', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op379.met_dependencies = []
op379.outputs = [
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf379.users = [NodeUser(node=ExternKernelSchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
]
op379.group.device = cuda:0
op379.group.iteration = (4194304, 1)
op379.sizes = ([32, 128, 1024], [])
buf375_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op379_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf375', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf379', get_index_1, load, None)
        return store
op379 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op380: ExternKernelSchedulerNode(ExternKernelOut)
op380.writes = [StarDep(name='buf380', mode=None)]
op380.unmet_dependencies = [StarDep(name='buf379', mode=None)]
op380.met_dependencies = [StarDep(name='arg243_1', mode=None)]
op380.outputs = [
    buf380: ExternKernelOut
    buf380.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf380.users = [NodeUser(node=SchedulerNode(name='op381'), can_inplace=True, is_weak=False)]
]
op380.node.kernel = extern_kernels.mm


op381: SchedulerNode(ComputedBuffer)
op381.writes = [MemoryDep('buf381', c0, {c0: 4194304}, None)]
op381.unmet_dependencies = 
    [   MemoryDep('buf346', c0, {c0: 4194304}, None),
        MemoryDep('buf363', c0, {c0: 4194304}, None),
        MemoryDep('buf380', c0, {c0: 4194304}, None)]
op381.met_dependencies = 
    [   MemoryDep('arg234_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg244_1', c1, {c0: 4096, c1: 1024}, None)]
op381.outputs = [
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf381.users = [
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False),
    ]
]
op381.group.device = cuda:0
op381.group.iteration = (4194304, 1)
op381.sizes = ([4096, 1024], [])
buf346_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf380_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op381_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf363', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg234_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf380', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg244_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf381', get_index_5, add_3, None)
        return store
op381 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op382: SchedulerNode(ComputedBuffer)
op382.writes = [MemoryDep('buf382', c0, {c0: 4096}, None)]
op382.unmet_dependencies = [MemoryDep('buf381', c0, {c0: 4194304}, None)]
op382.met_dependencies = []
op382.outputs = [
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf382.users = [NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False)]
]
op382.group.device = cuda:0
op382.group.iteration = (4096, 1024)
op382.sizes = ([4096], [1024])
buf381_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf382_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op382_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf381', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf382', get_index_1, getitem)
        return store_reduction
op382 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op383: SchedulerNode(ComputedBuffer)
op383.writes = [MemoryDep('buf383', c0, {c0: 4096}, None)]
op383.unmet_dependencies = [MemoryDep('buf381', c0, {c0: 4194304}, None)]
op383.met_dependencies = []
op383.outputs = [
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf383.users = [NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False)]
]
op383.group.device = cuda:0
op383.group.iteration = (4096, 1024)
op383.sizes = ([4096], [1024])
buf381_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf383_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op383_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf381', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf383', get_index_1, getitem_1)
        return store_reduction
op383 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 4194304}, None)]
op385.unmet_dependencies = 
    [   MemoryDep('buf381', c0, {c0: 4194304}, None),
        MemoryDep('buf382', c0, {c0: 4096}, None),
        MemoryDep('buf383', c0, {c0: 4096}, None)]
op385.met_dependencies = 
    [   MemoryDep('arg245_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg246_1', c1, {c0: 4096, c1: 1024}, None)]
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf385.users = [NodeUser(node=ExternKernelSchedulerNode(name='op386'), can_inplace=False, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (4194304, 1)
op385.sizes = ([4096, 1024], [])
buf381_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf382_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf383_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op385_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf381', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf382', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf383', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg245_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg246_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf385', get_index_5, add_1, None)
        return store
op385 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op386: ExternKernelSchedulerNode(ExternKernelOut)
op386.writes = [StarDep(name='buf386', mode=None)]
op386.unmet_dependencies = [StarDep(name='buf385', mode=None)]
op386.met_dependencies = [StarDep(name='arg247_1', mode=None)]
op386.outputs = [
    buf386: ExternKernelOut
    buf386.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf386.users = [NodeUser(node=SchedulerNode(name='op387'), can_inplace=True, is_weak=False)]
]
op386.node.kernel = extern_kernels.mm


op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', c0, {c0: 16777216}, None)]
op387.unmet_dependencies = [MemoryDep('buf386', c0, {c0: 16777216}, None)]
op387.met_dependencies = [MemoryDep('arg248_1', c1, {c0: 4096, c1: 4096}, None)]
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf387.users = [NodeUser(node=ExternKernelSchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
]
op387.group.device = cuda:0
op387.group.iteration = (16777216, 1)
op387.sizes = ([4096, 4096], [])
buf386_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op387_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf386', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg248_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf386', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg248_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf387', get_index_4, mul_2, None)
        return store
op387 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op388: ExternKernelSchedulerNode(ExternKernelOut)
op388.writes = [StarDep(name='buf388', mode=None)]
op388.unmet_dependencies = [StarDep(name='buf387', mode=None)]
op388.met_dependencies = [StarDep(name='arg249_1', mode=None)]
op388.outputs = [
    buf388: ExternKernelOut
    buf388.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf388.users = [
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False),
    ]
]
op388.node.kernel = extern_kernels.mm


op389: SchedulerNode(ComputedBuffer)
op389.writes = [MemoryDep('buf389', c0, {c0: 4096}, None)]
op389.unmet_dependencies = 
    [   MemoryDep('buf381', c0, {c0: 4194304}, None),
        MemoryDep('buf388', c0, {c0: 4194304}, None)]
op389.met_dependencies = [MemoryDep('arg250_1', c1, {c0: 4096, c1: 1024}, None)]
op389.outputs = [
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf389.users = [NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
]
op389.group.device = cuda:0
op389.group.iteration = (4096, 1024)
op389.sizes = ([4096], [1024])
buf381_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf389_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op389_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf381', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf388', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg250_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf389', get_index_3, getitem)
        return store_reduction
op389 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op390: SchedulerNode(ComputedBuffer)
op390.writes = [MemoryDep('buf390', c0, {c0: 4096}, None)]
op390.unmet_dependencies = 
    [   MemoryDep('buf381', c0, {c0: 4194304}, None),
        MemoryDep('buf388', c0, {c0: 4194304}, None)]
op390.met_dependencies = [MemoryDep('arg250_1', c1, {c0: 4096, c1: 1024}, None)]
op390.outputs = [
    buf390: ComputedBuffer
    buf390.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf390.users = [NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
]
op390.group.device = cuda:0
op390.group.iteration = (4096, 1024)
op390.sizes = ([4096], [1024])
buf381_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf390_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op390_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf381', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf388', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg250_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf390', get_index_3, getitem_1)
        return store_reduction
op390 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op392: SchedulerNode(ComputedBuffer)
op392.writes = [MemoryDep('buf392', c0, {c0: 4194304}, None)]
op392.unmet_dependencies = 
    [   MemoryDep('buf381', c0, {c0: 4194304}, None),
        MemoryDep('buf388', c0, {c0: 4194304}, None),
        MemoryDep('buf389', c0, {c0: 4096}, None),
        MemoryDep('buf390', c0, {c0: 4096}, None)]
op392.met_dependencies = 
    [   MemoryDep('arg250_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg251_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg252_1', c1, {c0: 4096, c1: 1024}, None)]
op392.outputs = [
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf392.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False),
    ]
]
op392.group.device = cuda:0
op392.group.iteration = (4194304, 1)
op392.sizes = ([4096, 1024], [])
buf381_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf389_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf390_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op392_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf381', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf388', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg250_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf389', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf390', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg251_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg252_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf392', get_index_7, add_3, None)
        return store
op392 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op393: ExternKernelSchedulerNode(ExternKernelOut)
op393.writes = [StarDep(name='buf393', mode=None)]
op393.unmet_dependencies = [StarDep(name='buf392', mode=None)]
op393.met_dependencies = [StarDep(name='arg253_1', mode=None)]
op393.outputs = [
    buf393: ExternKernelOut
    buf393.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf393.users = [NodeUser(node=SchedulerNode(name='op395'), can_inplace=False, is_weak=False)]
]
op393.node.kernel = extern_kernels.mm


op394: ExternKernelSchedulerNode(ExternKernelOut)
op394.writes = [StarDep(name='buf394', mode=None)]
op394.unmet_dependencies = [StarDep(name='buf392', mode=None)]
op394.met_dependencies = [StarDep(name='arg255_1', mode=None)]
op394.outputs = [
    buf394: ExternKernelOut
    buf394.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf394.users = [NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
]
op394.node.kernel = extern_kernels.mm


op395: SchedulerNode(ComputedBuffer)
op395.writes = [MemoryDep('buf395', c0, {c0: 4194304}, None)]
op395.unmet_dependencies = [   MemoryDep('buf393', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op395.met_dependencies = [MemoryDep('arg254_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op395.outputs = [
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf395.users = [NodeUser(node=ExternKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
]
op395.group.device = cuda:0
op395.group.iteration = (4194304, 1)
op395.sizes = ([32, 16, 128, 64], [])
buf393_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op395_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf393', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg254_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf395', get_index_2, mul, None)
        return store
op395 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op396: SchedulerNode(ComputedBuffer)
op396.writes = [MemoryDep('buf396', c0, {c0: 4194304}, None)]
op396.unmet_dependencies = [   MemoryDep('buf394', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op396.met_dependencies = [MemoryDep('arg256_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op396.outputs = [
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf396.users = [NodeUser(node=ExternKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
]
op396.group.device = cuda:0
op396.group.iteration = (4194304, 1)
op396.sizes = ([32, 16, 128, 64], [])
buf394_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf396_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op396_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf394', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg256_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf396', get_index_2, add, None)
        return store
op396 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op397: ExternKernelSchedulerNode(ExternKernelOut)
op397.writes = [StarDep(name='buf397', mode=None)]
op397.unmet_dependencies = [StarDep(name='buf395', mode=None), StarDep(name='buf396', mode=None)]
op397.met_dependencies = []
op397.outputs = [
    buf397: ExternKernelOut
    buf397.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf397.users = [
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op401'), can_inplace=True, is_weak=False),
    ]
]
op397.node.kernel = extern_kernels.bmm


op398: SchedulerNode(ComputedBuffer)
op398.writes = [MemoryDep('buf398', c0, {c0: 65536}, None)]
op398.unmet_dependencies = [MemoryDep('buf397', c0, {c0: 8388608}, None)]
op398.met_dependencies = []
op398.outputs = [
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf398.users = [
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op401'), can_inplace=False, is_weak=False),
    ]
]
op398.group.device = cuda:0
op398.group.iteration = (65536, 128)
op398.sizes = ([512, 128], [128])
buf397_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf398_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op398_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf397', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf398', get_index_3, reduction)
        return store_reduction
op398 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)


op399: SchedulerNode(ComputedBuffer)
op399.writes = [MemoryDep('buf399', c0, {c0: 65536}, None)]
op399.unmet_dependencies = 
    [   MemoryDep('buf397', c0, {c0: 8388608}, None),
        MemoryDep('buf398', c0, {c0: 65536}, None)]
op399.met_dependencies = []
op399.outputs = [
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf399.users = [NodeUser(node=SchedulerNode(name='op401'), can_inplace=False, is_weak=False)]
]
op399.group.device = cuda:0
op399.group.iteration = (65536, 128)
op399.sizes = ([512, 128], [128])
buf397_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf398_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf399_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op399_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf397', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf398', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf399', get_index_4, reduction)
        return store_reduction
op399 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op400: ExternKernelSchedulerNode(ExternKernelOut)
op400.writes = [StarDep(name='buf400', mode=None)]
op400.unmet_dependencies = [StarDep(name='buf392', mode=None)]
op400.met_dependencies = [StarDep(name='arg257_1', mode=None)]
op400.outputs = [
    buf400: ExternKernelOut
    buf400.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf400.users = [NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False)]
]
op400.node.kernel = extern_kernels.mm


op401: SchedulerNode(ComputedBuffer)
op401.writes = [MemoryDep('buf401', c0, {c0: 8388608}, None)]
op401.unmet_dependencies = 
    [   MemoryDep('buf397', c0, {c0: 8388608}, None),
        MemoryDep('buf398', c0, {c0: 65536}, None),
        MemoryDep('buf399', c0, {c0: 65536}, None)]
op401.met_dependencies = []
op401.outputs = [
    buf401: ComputedBuffer
    buf401.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf401.users = [NodeUser(node=ExternKernelSchedulerNode(name='op403'), can_inplace=False, is_weak=False)]
]
op401.group.device = cuda:0
op401.group.iteration = (8388608, 1)
op401.sizes = ([512, 128, 128], [])
buf397_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf398_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf399_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf401_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op401_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf397', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf398', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf399', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf401', get_index_5, truediv, None)
        return store
op401 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)


op402: SchedulerNode(ComputedBuffer)
op402.writes = [MemoryDep('buf402', c0, {c0: 4194304}, None)]
op402.unmet_dependencies = [   MemoryDep('buf400', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op402.met_dependencies = [MemoryDep('arg258_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op402.outputs = [
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf402.users = [NodeUser(node=ExternKernelSchedulerNode(name='op403'), can_inplace=False, is_weak=False)]
]
op402.group.device = cuda:0
op402.group.iteration = (4194304, 1)
op402.sizes = ([32, 16, 128, 64], [])
buf400_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op402_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg258_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf402', get_index_2, add, None)
        return store
op402 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op403: ExternKernelSchedulerNode(ExternKernelOut)
op403.writes = [StarDep(name='buf403', mode=None)]
op403.unmet_dependencies = [StarDep(name='buf401', mode=None), StarDep(name='buf402', mode=None)]
op403.met_dependencies = []
op403.outputs = [
    buf403: ExternKernelOut
    buf403.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf403.users = [NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False)]
]
op403.node.kernel = extern_kernels.bmm


op404: SchedulerNode(ComputedBuffer)
op404.writes = [MemoryDep('buf404', c0, {c0: 4194304}, None)]
op404.unmet_dependencies = [   MemoryDep('buf403', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op404.met_dependencies = []
op404.outputs = [
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf404.users = [NodeUser(node=ExternKernelSchedulerNode(name='op405'), can_inplace=False, is_weak=False)]
]
op404.group.device = cuda:0
op404.group.iteration = (4194304, 1)
op404.sizes = ([32, 128, 16, 64], [])
buf403_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf404_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op404_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf404', get_index_1, load, None)
        return store
op404 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op405: ExternKernelSchedulerNode(ExternKernelOut)
op405.writes = [StarDep(name='buf405', mode=None)]
op405.unmet_dependencies = [StarDep(name='buf404', mode=None)]
op405.met_dependencies = [StarDep(name='arg259_1', mode=None)]
op405.outputs = [
    buf405: ExternKernelOut
    buf405.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf405.users = [NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False)]
]
op405.node.kernel = extern_kernels.mm


op406: SchedulerNode(ComputedBuffer)
op406.writes = [MemoryDep('buf406', c0, {c0: 4194304}, None)]
op406.unmet_dependencies = 
    [   MemoryDep('buf381', c0, {c0: 4194304}, None),
        MemoryDep('buf388', c0, {c0: 4194304}, None),
        MemoryDep('buf405', c0, {c0: 4194304}, None)]
op406.met_dependencies = 
    [   MemoryDep('arg250_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg260_1', c1, {c0: 4096, c1: 1024}, None)]
op406.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf406.users = [
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op431'), can_inplace=True, is_weak=False),
    ]
]
op406.group.device = cuda:0
op406.group.iteration = (4194304, 1)
op406.sizes = ([4096, 1024], [])
buf381_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf405_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op406_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf381', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf388', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg250_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf405', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg260_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf406', get_index_5, add_3, None)
        return store
op406 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op407: SchedulerNode(ComputedBuffer)
op407.writes = [MemoryDep('buf407', c0, {c0: 4096}, None)]
op407.unmet_dependencies = [MemoryDep('buf406', c0, {c0: 4194304}, None)]
op407.met_dependencies = []
op407.outputs = [
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf407.users = [NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False)]
]
op407.group.device = cuda:0
op407.group.iteration = (4096, 1024)
op407.sizes = ([4096], [1024])
buf406_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op407_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf407', get_index_1, getitem)
        return store_reduction
op407 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op408: SchedulerNode(ComputedBuffer)
op408.writes = [MemoryDep('buf408', c0, {c0: 4096}, None)]
op408.unmet_dependencies = [MemoryDep('buf406', c0, {c0: 4194304}, None)]
op408.met_dependencies = []
op408.outputs = [
    buf408: ComputedBuffer
    buf408.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf408.users = [NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False)]
]
op408.group.device = cuda:0
op408.group.iteration = (4096, 1024)
op408.sizes = ([4096], [1024])
buf406_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op408_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf408', get_index_1, getitem_1)
        return store_reduction
op408 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op410: SchedulerNode(ComputedBuffer)
op410.writes = [MemoryDep('buf410', c0, {c0: 4194304}, None)]
op410.unmet_dependencies = 
    [   MemoryDep('buf406', c0, {c0: 4194304}, None),
        MemoryDep('buf407', c0, {c0: 4096}, None),
        MemoryDep('buf408', c0, {c0: 4096}, None)]
op410.met_dependencies = 
    [   MemoryDep('arg261_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg262_1', c1, {c0: 4096, c1: 1024}, None)]
op410.outputs = [
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf410.users = [NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False)]
]
op410.group.device = cuda:0
op410.group.iteration = (4194304, 1)
op410.sizes = ([4096, 1024], [])
buf406_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf408_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op410_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf407', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf408', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg261_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg262_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf410', get_index_5, add_1, None)
        return store
op410 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op411: ExternKernelSchedulerNode(ExternKernelOut)
op411.writes = [StarDep(name='buf411', mode=None)]
op411.unmet_dependencies = [StarDep(name='buf410', mode=None)]
op411.met_dependencies = [StarDep(name='arg263_1', mode=None)]
op411.outputs = [
    buf411: ExternKernelOut
    buf411.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf411.users = [NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
]
op411.node.kernel = extern_kernels.mm


op412: ExternKernelSchedulerNode(ExternKernelOut)
op412.writes = [StarDep(name='buf412', mode=None)]
op412.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op412.met_dependencies = [StarDep(name='arg265_1', mode=None)]
op412.outputs = [
    buf412: ExternKernelOut
    buf412.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf412.users = [NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False)]
]
op412.node.kernel = extern_kernels.mm


op413: ExternKernelSchedulerNode(ExternKernelOut)
op413.writes = [StarDep(name='buf413', mode=None)]
op413.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op413.met_dependencies = [StarDep(name='arg267_1', mode=None)]
op413.outputs = [
    buf413: ExternKernelOut
    buf413.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf413.users = [NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
]
op413.node.kernel = extern_kernels.mm


op414: SchedulerNode(ComputedBuffer)
op414.writes = [MemoryDep('buf414', c0, {c0: 4194304}, None)]
op414.unmet_dependencies = [   MemoryDep('buf411', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op414.met_dependencies = [   MemoryDep('arg264_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op414.outputs = [
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf414.users = [NodeUser(node=ExternKernelSchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
]
op414.group.device = cuda:0
op414.group.iteration = (4194304, 1)
op414.sizes = ([512, 128, 64], [])
buf411_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op414_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg264_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf414', get_index_2, mul, None)
        return store
op414 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op415: SchedulerNode(ComputedBuffer)
op415.writes = [MemoryDep('buf415', c0, {c0: 4194304}, None)]
op415.unmet_dependencies = [   MemoryDep('buf412', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op415.met_dependencies = [   MemoryDep('arg266_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op415.outputs = [
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf415.users = [NodeUser(node=ExternKernelSchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
]
op415.group.device = cuda:0
op415.group.iteration = (4194304, 1)
op415.sizes = ([512, 128, 64], [])
buf412_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf415_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op415_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg266_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf415', get_index_2, add, None)
        return store
op415 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op416: SchedulerNode(ComputedBuffer)
op416.writes = [MemoryDep('buf416', c0, {c0: 4194304}, None)]
op416.unmet_dependencies = [   MemoryDep('buf413', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op416.met_dependencies = [   MemoryDep('arg268_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op416.outputs = [
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf416.users = [NodeUser(node=ExternKernelSchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
]
op416.group.device = cuda:0
op416.group.iteration = (4194304, 1)
op416.sizes = ([512, 128, 64], [])
buf413_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf416_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op416_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf413', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg268_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf416', get_index_2, add, None)
        return store
op416 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op417: ExternKernelSchedulerNode(FallbackKernel)
op417.writes = [StarDep(name='buf417', mode=None)]
op417.unmet_dependencies = 
    [   StarDep(name='buf414', mode=None),
        StarDep(name='buf415', mode=None),
        StarDep(name='buf416', mode=None)]
op417.met_dependencies = []
op417.outputs = [
    buf417: FallbackKernel
    buf417.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf417.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op419'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op421'), can_inplace=False, is_weak=False),
    ]
]
op417.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op418: ExternKernelSchedulerNode(MultiOutput)
op418.writes = [StarDep(name='buf418', mode=None)]
op418.unmet_dependencies = [StarDep(name='buf417', mode=None)]
op418.met_dependencies = []
op418.outputs = [
    buf418: MultiOutput
    buf418.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf418.users = [NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False)]
]
op418.node.kernel = None


op422: SchedulerNode(ComputedBuffer)
op422.writes = [MemoryDep('buf422', c0, {c0: 4194304}, None)]
op422.unmet_dependencies = [   MemoryDep('buf418', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op422.met_dependencies = []
op422.outputs = [
    buf422: ComputedBuffer
    buf422.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf422.users = [NodeUser(node=ExternKernelSchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
]
op422.group.device = cuda:0
op422.group.iteration = (4194304, 1)
op422.sizes = ([32, 128, 1024], [])
buf418_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf422_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op422_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf418', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf422', get_index_1, load, None)
        return store
op422 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op423: ExternKernelSchedulerNode(ExternKernelOut)
op423.writes = [StarDep(name='buf423', mode=None)]
op423.unmet_dependencies = [StarDep(name='buf422', mode=None)]
op423.met_dependencies = [StarDep(name='arg269_1', mode=None)]
op423.outputs = [
    buf423: ExternKernelOut
    buf423.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf423.users = [
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op431'), can_inplace=True, is_weak=False),
    ]
]
op423.node.kernel = extern_kernels.mm


op424: SchedulerNode(ComputedBuffer)
op424.writes = [MemoryDep('buf424', c0, {c0: 4096}, None)]
op424.unmet_dependencies = 
    [   MemoryDep('buf406', c0, {c0: 4194304}, None),
        MemoryDep('buf423', c0, {c0: 4194304}, None)]
op424.met_dependencies = [MemoryDep('arg270_1', c1, {c0: 4096, c1: 1024}, None)]
op424.outputs = [
    buf424: ComputedBuffer
    buf424.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf424.users = [NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False)]
]
op424.group.device = cuda:0
op424.group.iteration = (4096, 1024)
op424.sizes = ([4096], [1024])
buf406_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf423_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf424_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op424_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf423', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg270_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf424', get_index_3, getitem)
        return store_reduction
op424 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op425: SchedulerNode(ComputedBuffer)
op425.writes = [MemoryDep('buf425', c0, {c0: 4096}, None)]
op425.unmet_dependencies = 
    [   MemoryDep('buf406', c0, {c0: 4194304}, None),
        MemoryDep('buf423', c0, {c0: 4194304}, None)]
op425.met_dependencies = [MemoryDep('arg270_1', c1, {c0: 4096, c1: 1024}, None)]
op425.outputs = [
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf425.users = [NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False)]
]
op425.group.device = cuda:0
op425.group.iteration = (4096, 1024)
op425.sizes = ([4096], [1024])
buf406_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf423_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op425_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf423', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg270_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf425', get_index_3, getitem_1)
        return store_reduction
op425 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op427: SchedulerNode(ComputedBuffer)
op427.writes = [MemoryDep('buf427', c0, {c0: 4194304}, None)]
op427.unmet_dependencies = 
    [   MemoryDep('buf406', c0, {c0: 4194304}, None),
        MemoryDep('buf423', c0, {c0: 4194304}, None),
        MemoryDep('buf424', c0, {c0: 4096}, None),
        MemoryDep('buf425', c0, {c0: 4096}, None)]
op427.met_dependencies = 
    [   MemoryDep('arg270_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg271_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg272_1', c1, {c0: 4096, c1: 1024}, None)]
op427.outputs = [
    buf427: ComputedBuffer
    buf427.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf427.users = [NodeUser(node=ExternKernelSchedulerNode(name='op428'), can_inplace=False, is_weak=False)]
]
op427.group.device = cuda:0
op427.group.iteration = (4194304, 1)
op427.sizes = ([4096, 1024], [])
buf406_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf423_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf424_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf425_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf427_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op427_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf423', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg270_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf424', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf425', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg271_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg272_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf427', get_index_7, add_3, None)
        return store
op427 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op428: ExternKernelSchedulerNode(ExternKernelOut)
op428.writes = [StarDep(name='buf428', mode=None)]
op428.unmet_dependencies = [StarDep(name='buf427', mode=None)]
op428.met_dependencies = [StarDep(name='arg273_1', mode=None)]
op428.outputs = [
    buf428: ExternKernelOut
    buf428.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf428.users = [NodeUser(node=SchedulerNode(name='op429'), can_inplace=True, is_weak=False)]
]
op428.node.kernel = extern_kernels.mm


op429: SchedulerNode(ComputedBuffer)
op429.writes = [MemoryDep('buf429', c0, {c0: 16777216}, None)]
op429.unmet_dependencies = [MemoryDep('buf428', c0, {c0: 16777216}, None)]
op429.met_dependencies = [MemoryDep('arg274_1', c1, {c0: 4096, c1: 4096}, None)]
op429.outputs = [
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf429.users = [NodeUser(node=ExternKernelSchedulerNode(name='op430'), can_inplace=False, is_weak=False)]
]
op429.group.device = cuda:0
op429.group.iteration = (16777216, 1)
op429.sizes = ([4096, 4096], [])
buf428_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op429_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg274_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf428', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg274_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf429', get_index_4, mul_2, None)
        return store
op429 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op430: ExternKernelSchedulerNode(ExternKernelOut)
op430.writes = [StarDep(name='buf430', mode=None)]
op430.unmet_dependencies = [StarDep(name='buf429', mode=None)]
op430.met_dependencies = [StarDep(name='arg275_1', mode=None)]
op430.outputs = [
    buf430: ExternKernelOut
    buf430.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf430.users = [NodeUser(node=SchedulerNode(name='op431'), can_inplace=True, is_weak=False)]
]
op430.node.kernel = extern_kernels.mm


op431: SchedulerNode(ComputedBuffer)
op431.writes = [MemoryDep('buf431', c0, {c0: 4194304}, None)]
op431.unmet_dependencies = 
    [   MemoryDep('buf406', c0, {c0: 4194304}, None),
        MemoryDep('buf423', c0, {c0: 4194304}, None),
        MemoryDep('buf430', c0, {c0: 4194304}, None)]
op431.met_dependencies = 
    [   MemoryDep('arg270_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg276_1', c1, {c0: 4096, c1: 1024}, None)]
op431.outputs = [
    buf431: ComputedBuffer
    buf431.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf431.users = [
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op451'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=True, is_weak=False),
    ]
]
op431.group.device = cuda:0
op431.group.iteration = (4194304, 1)
op431.sizes = ([4096, 1024], [])
buf406_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf423_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf430_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf431_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op431_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf423', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg270_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf430', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg276_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf431', get_index_5, add_3, None)
        return store
op431 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op432: SchedulerNode(ComputedBuffer)
op432.writes = [MemoryDep('buf432', c0, {c0: 4096}, None)]
op432.unmet_dependencies = [MemoryDep('buf431', c0, {c0: 4194304}, None)]
op432.met_dependencies = []
op432.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf432.users = [NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False)]
]
op432.group.device = cuda:0
op432.group.iteration = (4096, 1024)
op432.sizes = ([4096], [1024])
buf431_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op432_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf432', get_index_1, getitem)
        return store_reduction
op432 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op433: SchedulerNode(ComputedBuffer)
op433.writes = [MemoryDep('buf433', c0, {c0: 4096}, None)]
op433.unmet_dependencies = [MemoryDep('buf431', c0, {c0: 4194304}, None)]
op433.met_dependencies = []
op433.outputs = [
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf433.users = [NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False)]
]
op433.group.device = cuda:0
op433.group.iteration = (4096, 1024)
op433.sizes = ([4096], [1024])
buf431_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf433_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op433_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf433', get_index_1, getitem_1)
        return store_reduction
op433 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op435: SchedulerNode(ComputedBuffer)
op435.writes = [MemoryDep('buf435', c0, {c0: 4194304}, None)]
op435.unmet_dependencies = 
    [   MemoryDep('buf431', c0, {c0: 4194304}, None),
        MemoryDep('buf432', c0, {c0: 4096}, None),
        MemoryDep('buf433', c0, {c0: 4096}, None)]
op435.met_dependencies = 
    [   MemoryDep('arg277_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg278_1', c1, {c0: 4096, c1: 1024}, None)]
op435.outputs = [
    buf435: ComputedBuffer
    buf435.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf435.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op436'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op437'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op443'), can_inplace=False, is_weak=False),
    ]
]
op435.group.device = cuda:0
op435.group.iteration = (4194304, 1)
op435.sizes = ([4096, 1024], [])
buf431_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf433_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf435_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op435_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf432', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf433', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg277_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg278_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf435', get_index_5, add_1, None)
        return store
op435 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op436: ExternKernelSchedulerNode(ExternKernelOut)
op436.writes = [StarDep(name='buf436', mode=None)]
op436.unmet_dependencies = [StarDep(name='buf435', mode=None)]
op436.met_dependencies = [StarDep(name='arg279_1', mode=None)]
op436.outputs = [
    buf436: ExternKernelOut
    buf436.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf436.users = [NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False)]
]
op436.node.kernel = extern_kernels.mm


op437: ExternKernelSchedulerNode(ExternKernelOut)
op437.writes = [StarDep(name='buf437', mode=None)]
op437.unmet_dependencies = [StarDep(name='buf435', mode=None)]
op437.met_dependencies = [StarDep(name='arg281_1', mode=None)]
op437.outputs = [
    buf437: ExternKernelOut
    buf437.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf437.users = [NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
]
op437.node.kernel = extern_kernels.mm


op438: SchedulerNode(ComputedBuffer)
op438.writes = [MemoryDep('buf438', c0, {c0: 4194304}, None)]
op438.unmet_dependencies = [   MemoryDep('buf436', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op438.met_dependencies = [MemoryDep('arg280_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op438.outputs = [
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf438.users = [NodeUser(node=ExternKernelSchedulerNode(name='op440'), can_inplace=False, is_weak=False)]
]
op438.group.device = cuda:0
op438.group.iteration = (4194304, 1)
op438.sizes = ([32, 16, 128, 64], [])
buf436_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf438_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op438_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf436', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg280_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf438', get_index_2, mul, None)
        return store
op438 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op439: SchedulerNode(ComputedBuffer)
op439.writes = [MemoryDep('buf439', c0, {c0: 4194304}, None)]
op439.unmet_dependencies = [   MemoryDep('buf437', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op439.met_dependencies = [MemoryDep('arg282_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op439.outputs = [
    buf439: ComputedBuffer
    buf439.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf439.users = [NodeUser(node=ExternKernelSchedulerNode(name='op440'), can_inplace=False, is_weak=False)]
]
op439.group.device = cuda:0
op439.group.iteration = (4194304, 1)
op439.sizes = ([32, 16, 128, 64], [])
buf437_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op439_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg282_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf439', get_index_2, add, None)
        return store
op439 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op440: ExternKernelSchedulerNode(ExternKernelOut)
op440.writes = [StarDep(name='buf440', mode=None)]
op440.unmet_dependencies = [StarDep(name='buf438', mode=None), StarDep(name='buf439', mode=None)]
op440.met_dependencies = []
op440.outputs = [
    buf440: ExternKernelOut
    buf440.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf440.users = [
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=True, is_weak=False),
    ]
]
op440.node.kernel = extern_kernels.bmm


op441: SchedulerNode(ComputedBuffer)
op441.writes = [MemoryDep('buf441', c0, {c0: 65536}, None)]
op441.unmet_dependencies = [MemoryDep('buf440', c0, {c0: 8388608}, None)]
op441.met_dependencies = []
op441.outputs = [
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf441.users = [
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False),
    ]
]
op441.group.device = cuda:0
op441.group.iteration = (65536, 128)
op441.sizes = ([512, 128], [128])
buf440_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op441_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf441', get_index_3, reduction)
        return store_reduction
op441 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)


op442: SchedulerNode(ComputedBuffer)
op442.writes = [MemoryDep('buf442', c0, {c0: 65536}, None)]
op442.unmet_dependencies = 
    [   MemoryDep('buf440', c0, {c0: 8388608}, None),
        MemoryDep('buf441', c0, {c0: 65536}, None)]
op442.met_dependencies = []
op442.outputs = [
    buf442: ComputedBuffer
    buf442.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf442.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False)]
]
op442.group.device = cuda:0
op442.group.iteration = (65536, 128)
op442.sizes = ([512, 128], [128])
buf440_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf442_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op442_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf441', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf442', get_index_4, reduction)
        return store_reduction
op442 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op443: ExternKernelSchedulerNode(ExternKernelOut)
op443.writes = [StarDep(name='buf443', mode=None)]
op443.unmet_dependencies = [StarDep(name='buf435', mode=None)]
op443.met_dependencies = [StarDep(name='arg283_1', mode=None)]
op443.outputs = [
    buf443: ExternKernelOut
    buf443.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf443.users = [NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False)]
]
op443.node.kernel = extern_kernels.mm


op444: SchedulerNode(ComputedBuffer)
op444.writes = [MemoryDep('buf444', c0, {c0: 8388608}, None)]
op444.unmet_dependencies = 
    [   MemoryDep('buf440', c0, {c0: 8388608}, None),
        MemoryDep('buf441', c0, {c0: 65536}, None),
        MemoryDep('buf442', c0, {c0: 65536}, None)]
op444.met_dependencies = []
op444.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf444.users = [NodeUser(node=ExternKernelSchedulerNode(name='op446'), can_inplace=False, is_weak=False)]
]
op444.group.device = cuda:0
op444.group.iteration = (8388608, 1)
op444.sizes = ([512, 128, 128], [])
buf440_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf442_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf444_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op444_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf441', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf442', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf444', get_index_5, truediv, None)
        return store
op444 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)


op445: SchedulerNode(ComputedBuffer)
op445.writes = [MemoryDep('buf445', c0, {c0: 4194304}, None)]
op445.unmet_dependencies = [   MemoryDep('buf443', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op445.met_dependencies = [MemoryDep('arg284_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op445.outputs = [
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf445.users = [NodeUser(node=ExternKernelSchedulerNode(name='op446'), can_inplace=False, is_weak=False)]
]
op445.group.device = cuda:0
op445.group.iteration = (4194304, 1)
op445.sizes = ([32, 16, 128, 64], [])
buf443_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op445_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg284_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf445', get_index_2, add, None)
        return store
op445 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op446: ExternKernelSchedulerNode(ExternKernelOut)
op446.writes = [StarDep(name='buf446', mode=None)]
op446.unmet_dependencies = [StarDep(name='buf444', mode=None), StarDep(name='buf445', mode=None)]
op446.met_dependencies = []
op446.outputs = [
    buf446: ExternKernelOut
    buf446.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf446.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
]
op446.node.kernel = extern_kernels.bmm


op447: SchedulerNode(ComputedBuffer)
op447.writes = [MemoryDep('buf447', c0, {c0: 4194304}, None)]
op447.unmet_dependencies = [   MemoryDep('buf446', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op447.met_dependencies = []
op447.outputs = [
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf447.users = [NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False)]
]
op447.group.device = cuda:0
op447.group.iteration = (4194304, 1)
op447.sizes = ([32, 128, 16, 64], [])
buf446_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf447_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op447_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf446', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf447', get_index_1, load, None)
        return store
op447 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op448: ExternKernelSchedulerNode(ExternKernelOut)
op448.writes = [StarDep(name='buf448', mode=None)]
op448.unmet_dependencies = [StarDep(name='buf447', mode=None)]
op448.met_dependencies = [StarDep(name='arg285_1', mode=None)]
op448.outputs = [
    buf448: ExternKernelOut
    buf448.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf448.users = [
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op451'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=True, is_weak=False),
    ]
]
op448.node.kernel = extern_kernels.mm


op449: SchedulerNode(ComputedBuffer)
op449.writes = [MemoryDep('buf449', c0, {c0: 4096}, None)]
op449.unmet_dependencies = 
    [   MemoryDep('buf431', c0, {c0: 4194304}, None),
        MemoryDep('buf448', c0, {c0: 4194304}, None)]
op449.met_dependencies = [MemoryDep('arg286_1', c1, {c0: 4096, c1: 1024}, None)]
op449.outputs = [
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf449.users = [NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False)]
]
op449.group.device = cuda:0
op449.group.iteration = (4096, 1024)
op449.sizes = ([4096], [1024])
buf431_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op449_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf448', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg286_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf449', get_index_3, getitem)
        return store_reduction
op449 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op450: SchedulerNode(ComputedBuffer)
op450.writes = [MemoryDep('buf450', c0, {c0: 4096}, None)]
op450.unmet_dependencies = 
    [   MemoryDep('buf431', c0, {c0: 4194304}, None),
        MemoryDep('buf448', c0, {c0: 4194304}, None)]
op450.met_dependencies = [MemoryDep('arg286_1', c1, {c0: 4096, c1: 1024}, None)]
op450.outputs = [
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf450.users = [NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False)]
]
op450.group.device = cuda:0
op450.group.iteration = (4096, 1024)
op450.sizes = ([4096], [1024])
buf431_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf450_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op450_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf448', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg286_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf450', get_index_3, getitem_1)
        return store_reduction
op450 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op452: SchedulerNode(ComputedBuffer)
op452.writes = [MemoryDep('buf452', c0, {c0: 4194304}, None)]
op452.unmet_dependencies = 
    [   MemoryDep('buf431', c0, {c0: 4194304}, None),
        MemoryDep('buf448', c0, {c0: 4194304}, None),
        MemoryDep('buf449', c0, {c0: 4096}, None),
        MemoryDep('buf450', c0, {c0: 4096}, None)]
op452.met_dependencies = 
    [   MemoryDep('arg286_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg287_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg288_1', c1, {c0: 4096, c1: 1024}, None)]
op452.outputs = [
    buf452: ComputedBuffer
    buf452.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf452.users = [NodeUser(node=ExternKernelSchedulerNode(name='op453'), can_inplace=False, is_weak=False)]
]
op452.group.device = cuda:0
op452.group.iteration = (4194304, 1)
op452.sizes = ([4096, 1024], [])
buf431_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf450_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg287_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op452_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf448', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg286_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf449', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf450', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg287_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg288_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf452', get_index_7, add_3, None)
        return store
op452 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op453: ExternKernelSchedulerNode(ExternKernelOut)
op453.writes = [StarDep(name='buf453', mode=None)]
op453.unmet_dependencies = [StarDep(name='buf452', mode=None)]
op453.met_dependencies = [StarDep(name='arg289_1', mode=None)]
op453.outputs = [
    buf453: ExternKernelOut
    buf453.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf453.users = [NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False)]
]
op453.node.kernel = extern_kernels.mm


op454: ExternKernelSchedulerNode(ExternKernelOut)
op454.writes = [StarDep(name='buf454', mode=None)]
op454.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op454.met_dependencies = [StarDep(name='arg291_1', mode=None)]
op454.outputs = [
    buf454: ExternKernelOut
    buf454.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf454.users = [NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False)]
]
op454.node.kernel = extern_kernels.mm


op455: ExternKernelSchedulerNode(ExternKernelOut)
op455.writes = [StarDep(name='buf455', mode=None)]
op455.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op455.met_dependencies = [StarDep(name='arg293_1', mode=None)]
op455.outputs = [
    buf455: ExternKernelOut
    buf455.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf455.users = [NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False)]
]
op455.node.kernel = extern_kernels.mm


op456: SchedulerNode(ComputedBuffer)
op456.writes = [MemoryDep('buf456', c0, {c0: 4194304}, None)]
op456.unmet_dependencies = [   MemoryDep('buf453', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op456.met_dependencies = [   MemoryDep('arg290_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op456.outputs = [
    buf456: ComputedBuffer
    buf456.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf456.users = [NodeUser(node=ExternKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False)]
]
op456.group.device = cuda:0
op456.group.iteration = (4194304, 1)
op456.sizes = ([512, 128, 64], [])
buf453_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf456_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op456_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf453', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg290_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf456', get_index_2, mul, None)
        return store
op456 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op457: SchedulerNode(ComputedBuffer)
op457.writes = [MemoryDep('buf457', c0, {c0: 4194304}, None)]
op457.unmet_dependencies = [   MemoryDep('buf454', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op457.met_dependencies = [   MemoryDep('arg292_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op457.outputs = [
    buf457: ComputedBuffer
    buf457.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf457.users = [NodeUser(node=ExternKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False)]
]
op457.group.device = cuda:0
op457.group.iteration = (4194304, 1)
op457.sizes = ([512, 128, 64], [])
buf454_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf457_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op457_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf454', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg292_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf457', get_index_2, add, None)
        return store
op457 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op458: SchedulerNode(ComputedBuffer)
op458.writes = [MemoryDep('buf458', c0, {c0: 4194304}, None)]
op458.unmet_dependencies = [   MemoryDep('buf455', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op458.met_dependencies = [   MemoryDep('arg294_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op458.outputs = [
    buf458: ComputedBuffer
    buf458.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf458.users = [NodeUser(node=ExternKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False)]
]
op458.group.device = cuda:0
op458.group.iteration = (4194304, 1)
op458.sizes = ([512, 128, 64], [])
buf455_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg294_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf458_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op458_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf455', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg294_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf458', get_index_2, add, None)
        return store
op458 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op459: ExternKernelSchedulerNode(FallbackKernel)
op459.writes = [StarDep(name='buf459', mode=None)]
op459.unmet_dependencies = 
    [   StarDep(name='buf456', mode=None),
        StarDep(name='buf457', mode=None),
        StarDep(name='buf458', mode=None)]
op459.met_dependencies = []
op459.outputs = [
    buf459: FallbackKernel
    buf459.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf459.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op460'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op461'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op462'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op463'), can_inplace=False, is_weak=False),
    ]
]
op459.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op460: ExternKernelSchedulerNode(MultiOutput)
op460.writes = [StarDep(name='buf460', mode=None)]
op460.unmet_dependencies = [StarDep(name='buf459', mode=None)]
op460.met_dependencies = []
op460.outputs = [
    buf460: MultiOutput
    buf460.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf460.users = [NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False)]
]
op460.node.kernel = None


op464: SchedulerNode(ComputedBuffer)
op464.writes = [MemoryDep('buf464', c0, {c0: 4194304}, None)]
op464.unmet_dependencies = [   MemoryDep('buf460', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op464.met_dependencies = []
op464.outputs = [
    buf464: ComputedBuffer
    buf464.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf464.users = [NodeUser(node=ExternKernelSchedulerNode(name='op465'), can_inplace=False, is_weak=False)]
]
op464.group.device = cuda:0
op464.group.iteration = (4194304, 1)
op464.sizes = ([32, 128, 1024], [])
buf460_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf464_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op464_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf460', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf464', get_index_1, load, None)
        return store
op464 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op465: ExternKernelSchedulerNode(ExternKernelOut)
op465.writes = [StarDep(name='buf465', mode=None)]
op465.unmet_dependencies = [StarDep(name='buf464', mode=None)]
op465.met_dependencies = [StarDep(name='arg295_1', mode=None)]
op465.outputs = [
    buf465: ExternKernelOut
    buf465.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf465.users = [NodeUser(node=SchedulerNode(name='op466'), can_inplace=True, is_weak=False)]
]
op465.node.kernel = extern_kernels.mm


op466: SchedulerNode(ComputedBuffer)
op466.writes = [MemoryDep('buf466', c0, {c0: 4194304}, None)]
op466.unmet_dependencies = 
    [   MemoryDep('buf431', c0, {c0: 4194304}, None),
        MemoryDep('buf448', c0, {c0: 4194304}, None),
        MemoryDep('buf465', c0, {c0: 4194304}, None)]
op466.met_dependencies = 
    [   MemoryDep('arg286_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg296_1', c1, {c0: 4096, c1: 1024}, None)]
op466.outputs = [
    buf466: ComputedBuffer
    buf466.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf466.users = [
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op468'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op491'), can_inplace=True, is_weak=False),
    ]
]
op466.group.device = cuda:0
op466.group.iteration = (4194304, 1)
op466.sizes = ([4096, 1024], [])
buf431_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf465_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf466_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op466_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf448', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg286_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf465', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg296_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf466', get_index_5, add_3, None)
        return store
op466 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op467: SchedulerNode(ComputedBuffer)
op467.writes = [MemoryDep('buf467', c0, {c0: 4096}, None)]
op467.unmet_dependencies = [MemoryDep('buf466', c0, {c0: 4194304}, None)]
op467.met_dependencies = []
op467.outputs = [
    buf467: ComputedBuffer
    buf467.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf467.users = [NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False)]
]
op467.group.device = cuda:0
op467.group.iteration = (4096, 1024)
op467.sizes = ([4096], [1024])
buf466_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf467_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op467_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf466', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf467', get_index_1, getitem)
        return store_reduction
op467 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op468: SchedulerNode(ComputedBuffer)
op468.writes = [MemoryDep('buf468', c0, {c0: 4096}, None)]
op468.unmet_dependencies = [MemoryDep('buf466', c0, {c0: 4194304}, None)]
op468.met_dependencies = []
op468.outputs = [
    buf468: ComputedBuffer
    buf468.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf468.users = [NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False)]
]
op468.group.device = cuda:0
op468.group.iteration = (4096, 1024)
op468.sizes = ([4096], [1024])
buf466_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf468_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op468_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf466', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf468', get_index_1, getitem_1)
        return store_reduction
op468 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op470: SchedulerNode(ComputedBuffer)
op470.writes = [MemoryDep('buf470', c0, {c0: 4194304}, None)]
op470.unmet_dependencies = 
    [   MemoryDep('buf466', c0, {c0: 4194304}, None),
        MemoryDep('buf467', c0, {c0: 4096}, None),
        MemoryDep('buf468', c0, {c0: 4096}, None)]
op470.met_dependencies = 
    [   MemoryDep('arg297_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg298_1', c1, {c0: 4096, c1: 1024}, None)]
op470.outputs = [
    buf470: ComputedBuffer
    buf470.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf470.users = [NodeUser(node=ExternKernelSchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
]
op470.group.device = cuda:0
op470.group.iteration = (4194304, 1)
op470.sizes = ([4096, 1024], [])
buf466_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf467_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf468_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf470_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op470_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf466', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf467', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf468', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg297_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg298_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf470', get_index_5, add_1, None)
        return store
op470 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op471: ExternKernelSchedulerNode(ExternKernelOut)
op471.writes = [StarDep(name='buf471', mode=None)]
op471.unmet_dependencies = [StarDep(name='buf470', mode=None)]
op471.met_dependencies = [StarDep(name='arg299_1', mode=None)]
op471.outputs = [
    buf471: ExternKernelOut
    buf471.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf471.users = [NodeUser(node=SchedulerNode(name='op472'), can_inplace=True, is_weak=False)]
]
op471.node.kernel = extern_kernels.mm


op472: SchedulerNode(ComputedBuffer)
op472.writes = [MemoryDep('buf472', c0, {c0: 16777216}, None)]
op472.unmet_dependencies = [MemoryDep('buf471', c0, {c0: 16777216}, None)]
op472.met_dependencies = [MemoryDep('arg300_1', c1, {c0: 4096, c1: 4096}, None)]
op472.outputs = [
    buf472: ComputedBuffer
    buf472.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf472.users = [NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False)]
]
op472.group.device = cuda:0
op472.group.iteration = (16777216, 1)
op472.sizes = ([4096, 4096], [])
buf471_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf472_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op472_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf471', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg300_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf471', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg300_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf472', get_index_4, mul_2, None)
        return store
op472 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op473: ExternKernelSchedulerNode(ExternKernelOut)
op473.writes = [StarDep(name='buf473', mode=None)]
op473.unmet_dependencies = [StarDep(name='buf472', mode=None)]
op473.met_dependencies = [StarDep(name='arg301_1', mode=None)]
op473.outputs = [
    buf473: ExternKernelOut
    buf473.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf473.users = [
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op491'), can_inplace=True, is_weak=False),
    ]
]
op473.node.kernel = extern_kernels.mm


op474: SchedulerNode(ComputedBuffer)
op474.writes = [MemoryDep('buf474', c0, {c0: 4096}, None)]
op474.unmet_dependencies = 
    [   MemoryDep('buf466', c0, {c0: 4194304}, None),
        MemoryDep('buf473', c0, {c0: 4194304}, None)]
op474.met_dependencies = [MemoryDep('arg302_1', c1, {c0: 4096, c1: 1024}, None)]
op474.outputs = [
    buf474: ComputedBuffer
    buf474.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf474.users = [NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False)]
]
op474.group.device = cuda:0
op474.group.iteration = (4096, 1024)
op474.sizes = ([4096], [1024])
buf466_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf474_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op474_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf466', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf473', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg302_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf474', get_index_3, getitem)
        return store_reduction
op474 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op475: SchedulerNode(ComputedBuffer)
op475.writes = [MemoryDep('buf475', c0, {c0: 4096}, None)]
op475.unmet_dependencies = 
    [   MemoryDep('buf466', c0, {c0: 4194304}, None),
        MemoryDep('buf473', c0, {c0: 4194304}, None)]
op475.met_dependencies = [MemoryDep('arg302_1', c1, {c0: 4096, c1: 1024}, None)]
op475.outputs = [
    buf475: ComputedBuffer
    buf475.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf475.users = [NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False)]
]
op475.group.device = cuda:0
op475.group.iteration = (4096, 1024)
op475.sizes = ([4096], [1024])
buf466_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf475_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op475_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf466', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf473', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg302_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf475', get_index_3, getitem_1)
        return store_reduction
op475 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op477: SchedulerNode(ComputedBuffer)
op477.writes = [MemoryDep('buf477', c0, {c0: 4194304}, None)]
op477.unmet_dependencies = 
    [   MemoryDep('buf466', c0, {c0: 4194304}, None),
        MemoryDep('buf473', c0, {c0: 4194304}, None),
        MemoryDep('buf474', c0, {c0: 4096}, None),
        MemoryDep('buf475', c0, {c0: 4096}, None)]
op477.met_dependencies = 
    [   MemoryDep('arg302_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg303_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg304_1', c1, {c0: 4096, c1: 1024}, None)]
op477.outputs = [
    buf477: ComputedBuffer
    buf477.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf477.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op479'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op485'), can_inplace=False, is_weak=False),
    ]
]
op477.group.device = cuda:0
op477.group.iteration = (4194304, 1)
op477.sizes = ([4096, 1024], [])
buf466_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf474_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf475_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg304_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf477_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op477_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf466', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf473', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg302_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf474', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf475', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg303_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg304_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf477', get_index_7, add_3, None)
        return store
op477 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op478: ExternKernelSchedulerNode(ExternKernelOut)
op478.writes = [StarDep(name='buf478', mode=None)]
op478.unmet_dependencies = [StarDep(name='buf477', mode=None)]
op478.met_dependencies = [StarDep(name='arg305_1', mode=None)]
op478.outputs = [
    buf478: ExternKernelOut
    buf478.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf478.users = [NodeUser(node=SchedulerNode(name='op480'), can_inplace=False, is_weak=False)]
]
op478.node.kernel = extern_kernels.mm


op479: ExternKernelSchedulerNode(ExternKernelOut)
op479.writes = [StarDep(name='buf479', mode=None)]
op479.unmet_dependencies = [StarDep(name='buf477', mode=None)]
op479.met_dependencies = [StarDep(name='arg307_1', mode=None)]
op479.outputs = [
    buf479: ExternKernelOut
    buf479.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf479.users = [NodeUser(node=SchedulerNode(name='op481'), can_inplace=False, is_weak=False)]
]
op479.node.kernel = extern_kernels.mm


op480: SchedulerNode(ComputedBuffer)
op480.writes = [MemoryDep('buf480', c0, {c0: 4194304}, None)]
op480.unmet_dependencies = [   MemoryDep('buf478', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op480.met_dependencies = [MemoryDep('arg306_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op480.outputs = [
    buf480: ComputedBuffer
    buf480.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf480.users = [NodeUser(node=ExternKernelSchedulerNode(name='op482'), can_inplace=False, is_weak=False)]
]
op480.group.device = cuda:0
op480.group.iteration = (4194304, 1)
op480.sizes = ([32, 16, 128, 64], [])
buf478_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op480_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf478', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg306_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf480', get_index_2, mul, None)
        return store
op480 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op481: SchedulerNode(ComputedBuffer)
op481.writes = [MemoryDep('buf481', c0, {c0: 4194304}, None)]
op481.unmet_dependencies = [   MemoryDep('buf479', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op481.met_dependencies = [MemoryDep('arg308_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op481.outputs = [
    buf481: ComputedBuffer
    buf481.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf481.users = [NodeUser(node=ExternKernelSchedulerNode(name='op482'), can_inplace=False, is_weak=False)]
]
op481.group.device = cuda:0
op481.group.iteration = (4194304, 1)
op481.sizes = ([32, 16, 128, 64], [])
buf479_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf481_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op481_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf479', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg308_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf481', get_index_2, add, None)
        return store
op481 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op482: ExternKernelSchedulerNode(ExternKernelOut)
op482.writes = [StarDep(name='buf482', mode=None)]
op482.unmet_dependencies = [StarDep(name='buf480', mode=None), StarDep(name='buf481', mode=None)]
op482.met_dependencies = []
op482.outputs = [
    buf482: ExternKernelOut
    buf482.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf482.users = [
        NodeUser(node=SchedulerNode(name='op483'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=True, is_weak=False),
    ]
]
op482.node.kernel = extern_kernels.bmm


op483: SchedulerNode(ComputedBuffer)
op483.writes = [MemoryDep('buf483', c0, {c0: 65536}, None)]
op483.unmet_dependencies = [MemoryDep('buf482', c0, {c0: 8388608}, None)]
op483.met_dependencies = []
op483.outputs = [
    buf483: ComputedBuffer
    buf483.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf483.users = [
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
    ]
]
op483.group.device = cuda:0
op483.group.iteration = (65536, 128)
op483.sizes = ([512, 128], [128])
buf482_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf483_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op483_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf482', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf483', get_index_3, reduction)
        return store_reduction
op483 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)


op484: SchedulerNode(ComputedBuffer)
op484.writes = [MemoryDep('buf484', c0, {c0: 65536}, None)]
op484.unmet_dependencies = 
    [   MemoryDep('buf482', c0, {c0: 8388608}, None),
        MemoryDep('buf483', c0, {c0: 65536}, None)]
op484.met_dependencies = []
op484.outputs = [
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf484.users = [NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False)]
]
op484.group.device = cuda:0
op484.group.iteration = (65536, 128)
op484.sizes = ([512, 128], [128])
buf482_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf483_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf484_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op484_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf482', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf483', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf484', get_index_4, reduction)
        return store_reduction
op484 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op485: ExternKernelSchedulerNode(ExternKernelOut)
op485.writes = [StarDep(name='buf485', mode=None)]
op485.unmet_dependencies = [StarDep(name='buf477', mode=None)]
op485.met_dependencies = [StarDep(name='arg309_1', mode=None)]
op485.outputs = [
    buf485: ExternKernelOut
    buf485.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf485.users = [NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False)]
]
op485.node.kernel = extern_kernels.mm


op486: SchedulerNode(ComputedBuffer)
op486.writes = [MemoryDep('buf486', c0, {c0: 8388608}, None)]
op486.unmet_dependencies = 
    [   MemoryDep('buf482', c0, {c0: 8388608}, None),
        MemoryDep('buf483', c0, {c0: 65536}, None),
        MemoryDep('buf484', c0, {c0: 65536}, None)]
op486.met_dependencies = []
op486.outputs = [
    buf486: ComputedBuffer
    buf486.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf486.users = [NodeUser(node=ExternKernelSchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
]
op486.group.device = cuda:0
op486.group.iteration = (8388608, 1)
op486.sizes = ([512, 128, 128], [])
buf482_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf483_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf484_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf486_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op486_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf482', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf483', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf484', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf486', get_index_5, truediv, None)
        return store
op486 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)


op487: SchedulerNode(ComputedBuffer)
op487.writes = [MemoryDep('buf487', c0, {c0: 4194304}, None)]
op487.unmet_dependencies = [   MemoryDep('buf485', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op487.met_dependencies = [MemoryDep('arg310_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op487.outputs = [
    buf487: ComputedBuffer
    buf487.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf487.users = [NodeUser(node=ExternKernelSchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
]
op487.group.device = cuda:0
op487.group.iteration = (4194304, 1)
op487.sizes = ([32, 16, 128, 64], [])
buf485_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg310_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf487_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op487_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf485', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg310_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf487', get_index_2, add, None)
        return store
op487 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op488: ExternKernelSchedulerNode(ExternKernelOut)
op488.writes = [StarDep(name='buf488', mode=None)]
op488.unmet_dependencies = [StarDep(name='buf486', mode=None), StarDep(name='buf487', mode=None)]
op488.met_dependencies = []
op488.outputs = [
    buf488: ExternKernelOut
    buf488.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf488.users = [NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
]
op488.node.kernel = extern_kernels.bmm


op489: SchedulerNode(ComputedBuffer)
op489.writes = [MemoryDep('buf489', c0, {c0: 4194304}, None)]
op489.unmet_dependencies = [   MemoryDep('buf488', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op489.met_dependencies = []
op489.outputs = [
    buf489: ComputedBuffer
    buf489.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf489.users = [NodeUser(node=ExternKernelSchedulerNode(name='op490'), can_inplace=False, is_weak=False)]
]
op489.group.device = cuda:0
op489.group.iteration = (4194304, 1)
op489.sizes = ([32, 128, 16, 64], [])
buf488_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf489_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op489_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf488', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf489', get_index_1, load, None)
        return store
op489 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op490: ExternKernelSchedulerNode(ExternKernelOut)
op490.writes = [StarDep(name='buf490', mode=None)]
op490.unmet_dependencies = [StarDep(name='buf489', mode=None)]
op490.met_dependencies = [StarDep(name='arg311_1', mode=None)]
op490.outputs = [
    buf490: ExternKernelOut
    buf490.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf490.users = [NodeUser(node=SchedulerNode(name='op491'), can_inplace=True, is_weak=False)]
]
op490.node.kernel = extern_kernels.mm


op491: SchedulerNode(ComputedBuffer)
op491.writes = [MemoryDep('buf491', c0, {c0: 4194304}, None)]
op491.unmet_dependencies = 
    [   MemoryDep('buf466', c0, {c0: 4194304}, None),
        MemoryDep('buf473', c0, {c0: 4194304}, None),
        MemoryDep('buf490', c0, {c0: 4194304}, None)]
op491.met_dependencies = 
    [   MemoryDep('arg302_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg312_1', c1, {c0: 4096, c1: 1024}, None)]
op491.outputs = [
    buf491: ComputedBuffer
    buf491.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf491.users = [
        NodeUser(node=SchedulerNode(name='op492'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op493'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op494'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=True, is_weak=False),
    ]
]
op491.group.device = cuda:0
op491.group.iteration = (4194304, 1)
op491.sizes = ([4096, 1024], [])
buf466_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf490_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf491_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op491_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf466', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf473', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg302_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf490', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg312_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf491', get_index_5, add_3, None)
        return store
op491 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op492: SchedulerNode(ComputedBuffer)
op492.writes = [MemoryDep('buf492', c0, {c0: 4096}, None)]
op492.unmet_dependencies = [MemoryDep('buf491', c0, {c0: 4194304}, None)]
op492.met_dependencies = []
op492.outputs = [
    buf492: ComputedBuffer
    buf492.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf492.users = [NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False)]
]
op492.group.device = cuda:0
op492.group.iteration = (4096, 1024)
op492.sizes = ([4096], [1024])
buf491_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op492_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf492', get_index_1, getitem)
        return store_reduction
op492 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op493: SchedulerNode(ComputedBuffer)
op493.writes = [MemoryDep('buf493', c0, {c0: 4096}, None)]
op493.unmet_dependencies = [MemoryDep('buf491', c0, {c0: 4194304}, None)]
op493.met_dependencies = []
op493.outputs = [
    buf493: ComputedBuffer
    buf493.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf493.users = [NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False)]
]
op493.group.device = cuda:0
op493.group.iteration = (4096, 1024)
op493.sizes = ([4096], [1024])
buf491_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf493_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op493_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf493', get_index_1, getitem_1)
        return store_reduction
op493 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op495: SchedulerNode(ComputedBuffer)
op495.writes = [MemoryDep('buf495', c0, {c0: 4194304}, None)]
op495.unmet_dependencies = 
    [   MemoryDep('buf491', c0, {c0: 4194304}, None),
        MemoryDep('buf492', c0, {c0: 4096}, None),
        MemoryDep('buf493', c0, {c0: 4096}, None)]
op495.met_dependencies = 
    [   MemoryDep('arg313_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg314_1', c1, {c0: 4096, c1: 1024}, None)]
op495.outputs = [
    buf495: ComputedBuffer
    buf495.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf495.users = [NodeUser(node=ExternKernelSchedulerNode(name='op496'), can_inplace=False, is_weak=False)]
]
op495.group.device = cuda:0
op495.group.iteration = (4194304, 1)
op495.sizes = ([4096, 1024], [])
buf491_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf493_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg313_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg314_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf495_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op495_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf492', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf493', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg313_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg314_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf495', get_index_5, add_1, None)
        return store
op495 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op496: ExternKernelSchedulerNode(ExternKernelOut)
op496.writes = [StarDep(name='buf496', mode=None)]
op496.unmet_dependencies = [StarDep(name='buf495', mode=None)]
op496.met_dependencies = [StarDep(name='arg315_1', mode=None)]
op496.outputs = [
    buf496: ExternKernelOut
    buf496.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf496.users = [NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False)]
]
op496.node.kernel = extern_kernels.mm


op497: ExternKernelSchedulerNode(ExternKernelOut)
op497.writes = [StarDep(name='buf497', mode=None)]
op497.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op497.met_dependencies = [StarDep(name='arg317_1', mode=None)]
op497.outputs = [
    buf497: ExternKernelOut
    buf497.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf497.users = [NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False)]
]
op497.node.kernel = extern_kernels.mm


op498: ExternKernelSchedulerNode(ExternKernelOut)
op498.writes = [StarDep(name='buf498', mode=None)]
op498.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op498.met_dependencies = [StarDep(name='arg319_1', mode=None)]
op498.outputs = [
    buf498: ExternKernelOut
    buf498.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf498.users = [NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False)]
]
op498.node.kernel = extern_kernels.mm


op499: SchedulerNode(ComputedBuffer)
op499.writes = [MemoryDep('buf499', c0, {c0: 4194304}, None)]
op499.unmet_dependencies = [   MemoryDep('buf496', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op499.met_dependencies = [   MemoryDep('arg316_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op499.outputs = [
    buf499: ComputedBuffer
    buf499.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf499.users = [NodeUser(node=ExternKernelSchedulerNode(name='op502'), can_inplace=False, is_weak=False)]
]
op499.group.device = cuda:0
op499.group.iteration = (4194304, 1)
op499.sizes = ([512, 128, 64], [])
buf496_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf499_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op499_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf496', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg316_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf499', get_index_2, mul, None)
        return store
op499 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op500: SchedulerNode(ComputedBuffer)
op500.writes = [MemoryDep('buf500', c0, {c0: 4194304}, None)]
op500.unmet_dependencies = [   MemoryDep('buf497', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op500.met_dependencies = [   MemoryDep('arg318_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op500.outputs = [
    buf500: ComputedBuffer
    buf500.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf500.users = [NodeUser(node=ExternKernelSchedulerNode(name='op502'), can_inplace=False, is_weak=False)]
]
op500.group.device = cuda:0
op500.group.iteration = (4194304, 1)
op500.sizes = ([512, 128, 64], [])
buf497_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op500_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf497', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg318_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf500', get_index_2, add, None)
        return store
op500 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op501: SchedulerNode(ComputedBuffer)
op501.writes = [MemoryDep('buf501', c0, {c0: 4194304}, None)]
op501.unmet_dependencies = [   MemoryDep('buf498', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op501.met_dependencies = [   MemoryDep('arg320_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op501.outputs = [
    buf501: ComputedBuffer
    buf501.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf501.users = [NodeUser(node=ExternKernelSchedulerNode(name='op502'), can_inplace=False, is_weak=False)]
]
op501.group.device = cuda:0
op501.group.iteration = (4194304, 1)
op501.sizes = ([512, 128, 64], [])
buf498_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf501_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op501_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf498', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg320_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf501', get_index_2, add, None)
        return store
op501 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op502: ExternKernelSchedulerNode(FallbackKernel)
op502.writes = [StarDep(name='buf502', mode=None)]
op502.unmet_dependencies = 
    [   StarDep(name='buf499', mode=None),
        StarDep(name='buf500', mode=None),
        StarDep(name='buf501', mode=None)]
op502.met_dependencies = []
op502.outputs = [
    buf502: FallbackKernel
    buf502.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf502.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op503'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op505'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op506'), can_inplace=False, is_weak=False),
    ]
]
op502.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op503: ExternKernelSchedulerNode(MultiOutput)
op503.writes = [StarDep(name='buf503', mode=None)]
op503.unmet_dependencies = [StarDep(name='buf502', mode=None)]
op503.met_dependencies = []
op503.outputs = [
    buf503: MultiOutput
    buf503.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf503.users = [NodeUser(node=SchedulerNode(name='op507'), can_inplace=False, is_weak=False)]
]
op503.node.kernel = None


op507: SchedulerNode(ComputedBuffer)
op507.writes = [MemoryDep('buf507', c0, {c0: 4194304}, None)]
op507.unmet_dependencies = [   MemoryDep('buf503', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op507.met_dependencies = []
op507.outputs = [
    buf507: ComputedBuffer
    buf507.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf507.users = [NodeUser(node=ExternKernelSchedulerNode(name='op508'), can_inplace=False, is_weak=False)]
]
op507.group.device = cuda:0
op507.group.iteration = (4194304, 1)
op507.sizes = ([32, 128, 1024], [])
buf503_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf507_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op507_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf503', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf507', get_index_1, load, None)
        return store
op507 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op508: ExternKernelSchedulerNode(ExternKernelOut)
op508.writes = [StarDep(name='buf508', mode=None)]
op508.unmet_dependencies = [StarDep(name='buf507', mode=None)]
op508.met_dependencies = [StarDep(name='arg321_1', mode=None)]
op508.outputs = [
    buf508: ExternKernelOut
    buf508.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf508.users = [
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=True, is_weak=False),
    ]
]
op508.node.kernel = extern_kernels.mm


op509: SchedulerNode(ComputedBuffer)
op509.writes = [MemoryDep('buf509', c0, {c0: 4096}, None)]
op509.unmet_dependencies = 
    [   MemoryDep('buf491', c0, {c0: 4194304}, None),
        MemoryDep('buf508', c0, {c0: 4194304}, None)]
op509.met_dependencies = [MemoryDep('arg322_1', c1, {c0: 4096, c1: 1024}, None)]
op509.outputs = [
    buf509: ComputedBuffer
    buf509.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf509.users = [NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False)]
]
op509.group.device = cuda:0
op509.group.iteration = (4096, 1024)
op509.sizes = ([4096], [1024])
buf491_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf508_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf509_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op509_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf508', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg322_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf509', get_index_3, getitem)
        return store_reduction
op509 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op510: SchedulerNode(ComputedBuffer)
op510.writes = [MemoryDep('buf510', c0, {c0: 4096}, None)]
op510.unmet_dependencies = 
    [   MemoryDep('buf491', c0, {c0: 4194304}, None),
        MemoryDep('buf508', c0, {c0: 4194304}, None)]
op510.met_dependencies = [MemoryDep('arg322_1', c1, {c0: 4096, c1: 1024}, None)]
op510.outputs = [
    buf510: ComputedBuffer
    buf510.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf510.users = [NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False)]
]
op510.group.device = cuda:0
op510.group.iteration = (4096, 1024)
op510.sizes = ([4096], [1024])
buf491_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf508_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf510_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op510_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf508', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg322_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf510', get_index_3, getitem_1)
        return store_reduction
op510 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op512: SchedulerNode(ComputedBuffer)
op512.writes = [MemoryDep('buf512', c0, {c0: 4194304}, None)]
op512.unmet_dependencies = 
    [   MemoryDep('buf491', c0, {c0: 4194304}, None),
        MemoryDep('buf508', c0, {c0: 4194304}, None),
        MemoryDep('buf509', c0, {c0: 4096}, None),
        MemoryDep('buf510', c0, {c0: 4096}, None)]
op512.met_dependencies = 
    [   MemoryDep('arg322_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg323_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg324_1', c1, {c0: 4096, c1: 1024}, None)]
op512.outputs = [
    buf512: ComputedBuffer
    buf512.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf512.users = [NodeUser(node=ExternKernelSchedulerNode(name='op513'), can_inplace=False, is_weak=False)]
]
op512.group.device = cuda:0
op512.group.iteration = (4194304, 1)
op512.sizes = ([4096, 1024], [])
buf491_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf508_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf509_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf510_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg323_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf512_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op512_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf508', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg322_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf509', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf510', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg323_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg324_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf512', get_index_7, add_3, None)
        return store
op512 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op513: ExternKernelSchedulerNode(ExternKernelOut)
op513.writes = [StarDep(name='buf513', mode=None)]
op513.unmet_dependencies = [StarDep(name='buf512', mode=None)]
op513.met_dependencies = [StarDep(name='arg325_1', mode=None)]
op513.outputs = [
    buf513: ExternKernelOut
    buf513.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf513.users = [NodeUser(node=SchedulerNode(name='op514'), can_inplace=True, is_weak=False)]
]
op513.node.kernel = extern_kernels.mm


op514: SchedulerNode(ComputedBuffer)
op514.writes = [MemoryDep('buf514', c0, {c0: 16777216}, None)]
op514.unmet_dependencies = [MemoryDep('buf513', c0, {c0: 16777216}, None)]
op514.met_dependencies = [MemoryDep('arg326_1', c1, {c0: 4096, c1: 4096}, None)]
op514.outputs = [
    buf514: ComputedBuffer
    buf514.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf514.users = [NodeUser(node=ExternKernelSchedulerNode(name='op515'), can_inplace=False, is_weak=False)]
]
op514.group.device = cuda:0
op514.group.iteration = (16777216, 1)
op514.sizes = ([4096, 4096], [])
buf513_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg326_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf514_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op514_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf513', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg326_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf513', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg326_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf514', get_index_4, mul_2, None)
        return store
op514 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op515: ExternKernelSchedulerNode(ExternKernelOut)
op515.writes = [StarDep(name='buf515', mode=None)]
op515.unmet_dependencies = [StarDep(name='buf514', mode=None)]
op515.met_dependencies = [StarDep(name='arg327_1', mode=None)]
op515.outputs = [
    buf515: ExternKernelOut
    buf515.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf515.users = [NodeUser(node=SchedulerNode(name='op516'), can_inplace=True, is_weak=False)]
]
op515.node.kernel = extern_kernels.mm


op516: SchedulerNode(ComputedBuffer)
op516.writes = [MemoryDep('buf516', c0, {c0: 4194304}, None)]
op516.unmet_dependencies = 
    [   MemoryDep('buf491', c0, {c0: 4194304}, None),
        MemoryDep('buf508', c0, {c0: 4194304}, None),
        MemoryDep('buf515', c0, {c0: 4194304}, None)]
op516.met_dependencies = 
    [   MemoryDep('arg322_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg328_1', c1, {c0: 4096, c1: 1024}, None)]
op516.outputs = [
    buf516: ComputedBuffer
    buf516.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf516.users = [
        NodeUser(node=SchedulerNode(name='op517'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op534'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op535'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op536'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op537'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op551'), can_inplace=True, is_weak=False),
    ]
]
op516.group.device = cuda:0
op516.group.iteration = (4194304, 1)
op516.sizes = ([4096, 1024], [])
buf491_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf508_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf515_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf516_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op516_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf508', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg322_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf515', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg328_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf516', get_index_5, add_3, None)
        return store
op516 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op517: SchedulerNode(ComputedBuffer)
op517.writes = [MemoryDep('buf517', c0, {c0: 4096}, None)]
op517.unmet_dependencies = [MemoryDep('buf516', c0, {c0: 4194304}, None)]
op517.met_dependencies = []
op517.outputs = [
    buf517: ComputedBuffer
    buf517.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf517.users = [NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False)]
]
op517.group.device = cuda:0
op517.group.iteration = (4096, 1024)
op517.sizes = ([4096], [1024])
buf516_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op517_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf516', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf517', get_index_1, getitem)
        return store_reduction
op517 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op518: SchedulerNode(ComputedBuffer)
op518.writes = [MemoryDep('buf518', c0, {c0: 4096}, None)]
op518.unmet_dependencies = [MemoryDep('buf516', c0, {c0: 4194304}, None)]
op518.met_dependencies = []
op518.outputs = [
    buf518: ComputedBuffer
    buf518.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf518.users = [NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False)]
]
op518.group.device = cuda:0
op518.group.iteration = (4096, 1024)
op518.sizes = ([4096], [1024])
buf516_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op518_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf516', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf518', get_index_1, getitem_1)
        return store_reduction
op518 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op520: SchedulerNode(ComputedBuffer)
op520.writes = [MemoryDep('buf520', c0, {c0: 4194304}, None)]
op520.unmet_dependencies = 
    [   MemoryDep('buf516', c0, {c0: 4194304}, None),
        MemoryDep('buf517', c0, {c0: 4096}, None),
        MemoryDep('buf518', c0, {c0: 4096}, None)]
op520.met_dependencies = 
    [   MemoryDep('arg329_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg330_1', c1, {c0: 4096, c1: 1024}, None)]
op520.outputs = [
    buf520: ComputedBuffer
    buf520.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf520.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op521'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op522'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op528'), can_inplace=False, is_weak=False),
    ]
]
op520.group.device = cuda:0
op520.group.iteration = (4194304, 1)
op520.sizes = ([4096, 1024], [])
buf516_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf518_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg329_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg330_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf520_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op520_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf516', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf517', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf518', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg329_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg330_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf520', get_index_5, add_1, None)
        return store
op520 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op521: ExternKernelSchedulerNode(ExternKernelOut)
op521.writes = [StarDep(name='buf521', mode=None)]
op521.unmet_dependencies = [StarDep(name='buf520', mode=None)]
op521.met_dependencies = [StarDep(name='arg331_1', mode=None)]
op521.outputs = [
    buf521: ExternKernelOut
    buf521.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf521.users = [NodeUser(node=SchedulerNode(name='op523'), can_inplace=False, is_weak=False)]
]
op521.node.kernel = extern_kernels.mm


op522: ExternKernelSchedulerNode(ExternKernelOut)
op522.writes = [StarDep(name='buf522', mode=None)]
op522.unmet_dependencies = [StarDep(name='buf520', mode=None)]
op522.met_dependencies = [StarDep(name='arg333_1', mode=None)]
op522.outputs = [
    buf522: ExternKernelOut
    buf522.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf522.users = [NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False)]
]
op522.node.kernel = extern_kernels.mm


op523: SchedulerNode(ComputedBuffer)
op523.writes = [MemoryDep('buf523', c0, {c0: 4194304}, None)]
op523.unmet_dependencies = [   MemoryDep('buf521', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op523.met_dependencies = [MemoryDep('arg332_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op523.outputs = [
    buf523: ComputedBuffer
    buf523.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf523.users = [NodeUser(node=ExternKernelSchedulerNode(name='op525'), can_inplace=False, is_weak=False)]
]
op523.group.device = cuda:0
op523.group.iteration = (4194304, 1)
op523.sizes = ([32, 16, 128, 64], [])
buf521_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf523_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op523_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf521', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg332_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf523', get_index_2, mul, None)
        return store
op523 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op524: SchedulerNode(ComputedBuffer)
op524.writes = [MemoryDep('buf524', c0, {c0: 4194304}, None)]
op524.unmet_dependencies = [   MemoryDep('buf522', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op524.met_dependencies = [MemoryDep('arg334_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op524.outputs = [
    buf524: ComputedBuffer
    buf524.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf524.users = [NodeUser(node=ExternKernelSchedulerNode(name='op525'), can_inplace=False, is_weak=False)]
]
op524.group.device = cuda:0
op524.group.iteration = (4194304, 1)
op524.sizes = ([32, 16, 128, 64], [])
buf522_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg334_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op524_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf522', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg334_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf524', get_index_2, add, None)
        return store
op524 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op525: ExternKernelSchedulerNode(ExternKernelOut)
op525.writes = [StarDep(name='buf525', mode=None)]
op525.unmet_dependencies = [StarDep(name='buf523', mode=None), StarDep(name='buf524', mode=None)]
op525.met_dependencies = []
op525.outputs = [
    buf525: ExternKernelOut
    buf525.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf525.users = [
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op527'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op529'), can_inplace=True, is_weak=False),
    ]
]
op525.node.kernel = extern_kernels.bmm


op526: SchedulerNode(ComputedBuffer)
op526.writes = [MemoryDep('buf526', c0, {c0: 65536}, None)]
op526.unmet_dependencies = [MemoryDep('buf525', c0, {c0: 8388608}, None)]
op526.met_dependencies = []
op526.outputs = [
    buf526: ComputedBuffer
    buf526.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf526.users = [
        NodeUser(node=SchedulerNode(name='op527'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op529'), can_inplace=False, is_weak=False),
    ]
]
op526.group.device = cuda:0
op526.group.iteration = (65536, 128)
op526.sizes = ([512, 128], [128])
buf525_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf526_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op526_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf525', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf526', get_index_3, reduction)
        return store_reduction
op526 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)


op527: SchedulerNode(ComputedBuffer)
op527.writes = [MemoryDep('buf527', c0, {c0: 65536}, None)]
op527.unmet_dependencies = 
    [   MemoryDep('buf525', c0, {c0: 8388608}, None),
        MemoryDep('buf526', c0, {c0: 65536}, None)]
op527.met_dependencies = []
op527.outputs = [
    buf527: ComputedBuffer
    buf527.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf527.users = [NodeUser(node=SchedulerNode(name='op529'), can_inplace=False, is_weak=False)]
]
op527.group.device = cuda:0
op527.group.iteration = (65536, 128)
op527.sizes = ([512, 128], [128])
buf525_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf526_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf527_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op527_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf525', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf526', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf527', get_index_4, reduction)
        return store_reduction
op527 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op528: ExternKernelSchedulerNode(ExternKernelOut)
op528.writes = [StarDep(name='buf528', mode=None)]
op528.unmet_dependencies = [StarDep(name='buf520', mode=None)]
op528.met_dependencies = [StarDep(name='arg335_1', mode=None)]
op528.outputs = [
    buf528: ExternKernelOut
    buf528.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf528.users = [NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False)]
]
op528.node.kernel = extern_kernels.mm


op529: SchedulerNode(ComputedBuffer)
op529.writes = [MemoryDep('buf529', c0, {c0: 8388608}, None)]
op529.unmet_dependencies = 
    [   MemoryDep('buf525', c0, {c0: 8388608}, None),
        MemoryDep('buf526', c0, {c0: 65536}, None),
        MemoryDep('buf527', c0, {c0: 65536}, None)]
op529.met_dependencies = []
op529.outputs = [
    buf529: ComputedBuffer
    buf529.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf529.users = [NodeUser(node=ExternKernelSchedulerNode(name='op531'), can_inplace=False, is_weak=False)]
]
op529.group.device = cuda:0
op529.group.iteration = (8388608, 1)
op529.sizes = ([512, 128, 128], [])
buf525_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf526_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf527_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf529_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op529_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf525', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf526', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf527', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf529', get_index_5, truediv, None)
        return store
op529 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)


op530: SchedulerNode(ComputedBuffer)
op530.writes = [MemoryDep('buf530', c0, {c0: 4194304}, None)]
op530.unmet_dependencies = [   MemoryDep('buf528', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op530.met_dependencies = [MemoryDep('arg336_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op530.outputs = [
    buf530: ComputedBuffer
    buf530.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf530.users = [NodeUser(node=ExternKernelSchedulerNode(name='op531'), can_inplace=False, is_weak=False)]
]
op530.group.device = cuda:0
op530.group.iteration = (4194304, 1)
op530.sizes = ([32, 16, 128, 64], [])
buf528_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg336_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf530_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op530_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf528', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg336_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf530', get_index_2, add, None)
        return store
op530 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op531: ExternKernelSchedulerNode(ExternKernelOut)
op531.writes = [StarDep(name='buf531', mode=None)]
op531.unmet_dependencies = [StarDep(name='buf529', mode=None), StarDep(name='buf530', mode=None)]
op531.met_dependencies = []
op531.outputs = [
    buf531: ExternKernelOut
    buf531.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf531.users = [NodeUser(node=SchedulerNode(name='op532'), can_inplace=False, is_weak=False)]
]
op531.node.kernel = extern_kernels.bmm


op532: SchedulerNode(ComputedBuffer)
op532.writes = [MemoryDep('buf532', c0, {c0: 4194304}, None)]
op532.unmet_dependencies = [   MemoryDep('buf531', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op532.met_dependencies = []
op532.outputs = [
    buf532: ComputedBuffer
    buf532.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf532.users = [NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False)]
]
op532.group.device = cuda:0
op532.group.iteration = (4194304, 1)
op532.sizes = ([32, 128, 16, 64], [])
buf531_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf532_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op532_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf531', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf532', get_index_1, load, None)
        return store
op532 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op533: ExternKernelSchedulerNode(ExternKernelOut)
op533.writes = [StarDep(name='buf533', mode=None)]
op533.unmet_dependencies = [StarDep(name='buf532', mode=None)]
op533.met_dependencies = [StarDep(name='arg337_1', mode=None)]
op533.outputs = [
    buf533: ExternKernelOut
    buf533.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf533.users = [
        NodeUser(node=SchedulerNode(name='op534'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op535'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op536'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op537'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op551'), can_inplace=True, is_weak=False),
    ]
]
op533.node.kernel = extern_kernels.mm


op534: SchedulerNode(ComputedBuffer)
op534.writes = [MemoryDep('buf534', c0, {c0: 4096}, None)]
op534.unmet_dependencies = 
    [   MemoryDep('buf516', c0, {c0: 4194304}, None),
        MemoryDep('buf533', c0, {c0: 4194304}, None)]
op534.met_dependencies = [MemoryDep('arg338_1', c1, {c0: 4096, c1: 1024}, None)]
op534.outputs = [
    buf534: ComputedBuffer
    buf534.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf534.users = [NodeUser(node=SchedulerNode(name='op537'), can_inplace=False, is_weak=False)]
]
op534.group.device = cuda:0
op534.group.iteration = (4096, 1024)
op534.sizes = ([4096], [1024])
buf516_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf533_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf534_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op534_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf516', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf533', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg338_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf534', get_index_3, getitem)
        return store_reduction
op534 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op535: SchedulerNode(ComputedBuffer)
op535.writes = [MemoryDep('buf535', c0, {c0: 4096}, None)]
op535.unmet_dependencies = 
    [   MemoryDep('buf516', c0, {c0: 4194304}, None),
        MemoryDep('buf533', c0, {c0: 4194304}, None)]
op535.met_dependencies = [MemoryDep('arg338_1', c1, {c0: 4096, c1: 1024}, None)]
op535.outputs = [
    buf535: ComputedBuffer
    buf535.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf535.users = [NodeUser(node=SchedulerNode(name='op537'), can_inplace=False, is_weak=False)]
]
op535.group.device = cuda:0
op535.group.iteration = (4096, 1024)
op535.sizes = ([4096], [1024])
buf516_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf533_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf535_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op535_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf516', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf533', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg338_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf535', get_index_3, getitem_1)
        return store_reduction
op535 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op537: SchedulerNode(ComputedBuffer)
op537.writes = [MemoryDep('buf537', c0, {c0: 4194304}, None)]
op537.unmet_dependencies = 
    [   MemoryDep('buf516', c0, {c0: 4194304}, None),
        MemoryDep('buf533', c0, {c0: 4194304}, None),
        MemoryDep('buf534', c0, {c0: 4096}, None),
        MemoryDep('buf535', c0, {c0: 4096}, None)]
op537.met_dependencies = 
    [   MemoryDep('arg338_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg339_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg340_1', c1, {c0: 4096, c1: 1024}, None)]
op537.outputs = [
    buf537: ComputedBuffer
    buf537.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf537.users = [NodeUser(node=ExternKernelSchedulerNode(name='op538'), can_inplace=False, is_weak=False)]
]
op537.group.device = cuda:0
op537.group.iteration = (4194304, 1)
op537.sizes = ([4096, 1024], [])
buf516_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf533_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf534_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf535_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg340_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf537_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op537_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf516', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf533', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg338_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf534', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf535', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg339_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg340_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf537', get_index_7, add_3, None)
        return store
op537 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op538: ExternKernelSchedulerNode(ExternKernelOut)
op538.writes = [StarDep(name='buf538', mode=None)]
op538.unmet_dependencies = [StarDep(name='buf537', mode=None)]
op538.met_dependencies = [StarDep(name='arg341_1', mode=None)]
op538.outputs = [
    buf538: ExternKernelOut
    buf538.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf538.users = [NodeUser(node=SchedulerNode(name='op541'), can_inplace=False, is_weak=False)]
]
op538.node.kernel = extern_kernels.mm


op539: ExternKernelSchedulerNode(ExternKernelOut)
op539.writes = [StarDep(name='buf539', mode=None)]
op539.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op539.met_dependencies = [StarDep(name='arg343_1', mode=None)]
op539.outputs = [
    buf539: ExternKernelOut
    buf539.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf539.users = [NodeUser(node=SchedulerNode(name='op542'), can_inplace=False, is_weak=False)]
]
op539.node.kernel = extern_kernels.mm


op540: ExternKernelSchedulerNode(ExternKernelOut)
op540.writes = [StarDep(name='buf540', mode=None)]
op540.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op540.met_dependencies = [StarDep(name='arg345_1', mode=None)]
op540.outputs = [
    buf540: ExternKernelOut
    buf540.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf540.users = [NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
]
op540.node.kernel = extern_kernels.mm


op541: SchedulerNode(ComputedBuffer)
op541.writes = [MemoryDep('buf541', c0, {c0: 4194304}, None)]
op541.unmet_dependencies = [   MemoryDep('buf538', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op541.met_dependencies = [   MemoryDep('arg342_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op541.outputs = [
    buf541: ComputedBuffer
    buf541.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf541.users = [NodeUser(node=ExternKernelSchedulerNode(name='op544'), can_inplace=False, is_weak=False)]
]
op541.group.device = cuda:0
op541.group.iteration = (4194304, 1)
op541.sizes = ([512, 128, 64], [])
buf538_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf541_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op541_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf538', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg342_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf541', get_index_2, mul, None)
        return store
op541 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op542: SchedulerNode(ComputedBuffer)
op542.writes = [MemoryDep('buf542', c0, {c0: 4194304}, None)]
op542.unmet_dependencies = [   MemoryDep('buf539', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op542.met_dependencies = [   MemoryDep('arg344_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op542.outputs = [
    buf542: ComputedBuffer
    buf542.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf542.users = [NodeUser(node=ExternKernelSchedulerNode(name='op544'), can_inplace=False, is_weak=False)]
]
op542.group.device = cuda:0
op542.group.iteration = (4194304, 1)
op542.sizes = ([512, 128, 64], [])
buf539_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg344_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf542_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op542_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf539', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg344_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf542', get_index_2, add, None)
        return store
op542 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op543: SchedulerNode(ComputedBuffer)
op543.writes = [MemoryDep('buf543', c0, {c0: 4194304}, None)]
op543.unmet_dependencies = [   MemoryDep('buf540', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op543.met_dependencies = [   MemoryDep('arg346_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op543.outputs = [
    buf543: ComputedBuffer
    buf543.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf543.users = [NodeUser(node=ExternKernelSchedulerNode(name='op544'), can_inplace=False, is_weak=False)]
]
op543.group.device = cuda:0
op543.group.iteration = (4194304, 1)
op543.sizes = ([512, 128, 64], [])
buf540_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg346_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf543_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op543_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf540', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg346_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf543', get_index_2, add, None)
        return store
op543 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op544: ExternKernelSchedulerNode(FallbackKernel)
op544.writes = [StarDep(name='buf544', mode=None)]
op544.unmet_dependencies = 
    [   StarDep(name='buf541', mode=None),
        StarDep(name='buf542', mode=None),
        StarDep(name='buf543', mode=None)]
op544.met_dependencies = []
op544.outputs = [
    buf544: FallbackKernel
    buf544.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf544.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op546'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op547'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op548'), can_inplace=False, is_weak=False),
    ]
]
op544.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op545: ExternKernelSchedulerNode(MultiOutput)
op545.writes = [StarDep(name='buf545', mode=None)]
op545.unmet_dependencies = [StarDep(name='buf544', mode=None)]
op545.met_dependencies = []
op545.outputs = [
    buf545: MultiOutput
    buf545.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf545.users = [NodeUser(node=SchedulerNode(name='op549'), can_inplace=False, is_weak=False)]
]
op545.node.kernel = None


op549: SchedulerNode(ComputedBuffer)
op549.writes = [MemoryDep('buf549', c0, {c0: 4194304}, None)]
op549.unmet_dependencies = [   MemoryDep('buf545', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op549.met_dependencies = []
op549.outputs = [
    buf549: ComputedBuffer
    buf549.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf549.users = [NodeUser(node=ExternKernelSchedulerNode(name='op550'), can_inplace=False, is_weak=False)]
]
op549.group.device = cuda:0
op549.group.iteration = (4194304, 1)
op549.sizes = ([32, 128, 1024], [])
buf545_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf549_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op549_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf545', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf549', get_index_1, load, None)
        return store
op549 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op550: ExternKernelSchedulerNode(ExternKernelOut)
op550.writes = [StarDep(name='buf550', mode=None)]
op550.unmet_dependencies = [StarDep(name='buf549', mode=None)]
op550.met_dependencies = [StarDep(name='arg347_1', mode=None)]
op550.outputs = [
    buf550: ExternKernelOut
    buf550.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf550.users = [NodeUser(node=SchedulerNode(name='op551'), can_inplace=True, is_weak=False)]
]
op550.node.kernel = extern_kernels.mm


op551: SchedulerNode(ComputedBuffer)
op551.writes = [MemoryDep('buf551', c0, {c0: 4194304}, None)]
op551.unmet_dependencies = 
    [   MemoryDep('buf516', c0, {c0: 4194304}, None),
        MemoryDep('buf533', c0, {c0: 4194304}, None),
        MemoryDep('buf550', c0, {c0: 4194304}, None)]
op551.met_dependencies = 
    [   MemoryDep('arg338_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg348_1', c1, {c0: 4096, c1: 1024}, None)]
op551.outputs = [
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf551.users = [
        NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op554'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op555'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op559'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op560'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op561'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=True, is_weak=False),
    ]
]
op551.group.device = cuda:0
op551.group.iteration = (4194304, 1)
op551.sizes = ([4096, 1024], [])
buf516_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf533_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf550_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf551_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op551_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf516', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf533', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg338_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf550', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg348_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf551', get_index_5, add_3, None)
        return store
op551 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op552: SchedulerNode(ComputedBuffer)
op552.writes = [MemoryDep('buf552', c0, {c0: 4096}, None)]
op552.unmet_dependencies = [MemoryDep('buf551', c0, {c0: 4194304}, None)]
op552.met_dependencies = []
op552.outputs = [
    buf552: ComputedBuffer
    buf552.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf552.users = [NodeUser(node=SchedulerNode(name='op555'), can_inplace=False, is_weak=False)]
]
op552.group.device = cuda:0
op552.group.iteration = (4096, 1024)
op552.sizes = ([4096], [1024])
buf551_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf552_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op552_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf551', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf552', get_index_1, getitem)
        return store_reduction
op552 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op553: SchedulerNode(ComputedBuffer)
op553.writes = [MemoryDep('buf553', c0, {c0: 4096}, None)]
op553.unmet_dependencies = [MemoryDep('buf551', c0, {c0: 4194304}, None)]
op553.met_dependencies = []
op553.outputs = [
    buf553: ComputedBuffer
    buf553.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf553.users = [NodeUser(node=SchedulerNode(name='op555'), can_inplace=False, is_weak=False)]
]
op553.group.device = cuda:0
op553.group.iteration = (4096, 1024)
op553.sizes = ([4096], [1024])
buf551_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf553_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op553_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf551', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf553', get_index_1, getitem_1)
        return store_reduction
op553 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op555: SchedulerNode(ComputedBuffer)
op555.writes = [MemoryDep('buf555', c0, {c0: 4194304}, None)]
op555.unmet_dependencies = 
    [   MemoryDep('buf551', c0, {c0: 4194304}, None),
        MemoryDep('buf552', c0, {c0: 4096}, None),
        MemoryDep('buf553', c0, {c0: 4096}, None)]
op555.met_dependencies = 
    [   MemoryDep('arg349_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg350_1', c1, {c0: 4096, c1: 1024}, None)]
op555.outputs = [
    buf555: ComputedBuffer
    buf555.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf555.users = [NodeUser(node=ExternKernelSchedulerNode(name='op556'), can_inplace=False, is_weak=False)]
]
op555.group.device = cuda:0
op555.group.iteration = (4194304, 1)
op555.sizes = ([4096, 1024], [])
buf551_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf552_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf553_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf555_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op555_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf551', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf552', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf553', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg349_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg350_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf555', get_index_5, add_1, None)
        return store
op555 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op556: ExternKernelSchedulerNode(ExternKernelOut)
op556.writes = [StarDep(name='buf556', mode=None)]
op556.unmet_dependencies = [StarDep(name='buf555', mode=None)]
op556.met_dependencies = [StarDep(name='arg351_1', mode=None)]
op556.outputs = [
    buf556: ExternKernelOut
    buf556.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf556.users = [NodeUser(node=SchedulerNode(name='op557'), can_inplace=True, is_weak=False)]
]
op556.node.kernel = extern_kernels.mm


op557: SchedulerNode(ComputedBuffer)
op557.writes = [MemoryDep('buf557', c0, {c0: 16777216}, None)]
op557.unmet_dependencies = [MemoryDep('buf556', c0, {c0: 16777216}, None)]
op557.met_dependencies = [MemoryDep('arg352_1', c1, {c0: 4096, c1: 4096}, None)]
op557.outputs = [
    buf557: ComputedBuffer
    buf557.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf557.users = [NodeUser(node=ExternKernelSchedulerNode(name='op558'), can_inplace=False, is_weak=False)]
]
op557.group.device = cuda:0
op557.group.iteration = (16777216, 1)
op557.sizes = ([4096, 4096], [])
buf556_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf557_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op557_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf556', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg352_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf556', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg352_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf557', get_index_4, mul_2, None)
        return store
op557 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op558: ExternKernelSchedulerNode(ExternKernelOut)
op558.writes = [StarDep(name='buf558', mode=None)]
op558.unmet_dependencies = [StarDep(name='buf557', mode=None)]
op558.met_dependencies = [StarDep(name='arg353_1', mode=None)]
op558.outputs = [
    buf558: ExternKernelOut
    buf558.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf558.users = [
        NodeUser(node=SchedulerNode(name='op559'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op560'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op561'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=True, is_weak=False),
    ]
]
op558.node.kernel = extern_kernels.mm


op559: SchedulerNode(ComputedBuffer)
op559.writes = [MemoryDep('buf559', c0, {c0: 4096}, None)]
op559.unmet_dependencies = 
    [   MemoryDep('buf551', c0, {c0: 4194304}, None),
        MemoryDep('buf558', c0, {c0: 4194304}, None)]
op559.met_dependencies = [MemoryDep('arg354_1', c1, {c0: 4096, c1: 1024}, None)]
op559.outputs = [
    buf559: ComputedBuffer
    buf559.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf559.users = [NodeUser(node=SchedulerNode(name='op562'), can_inplace=False, is_weak=False)]
]
op559.group.device = cuda:0
op559.group.iteration = (4096, 1024)
op559.sizes = ([4096], [1024])
buf551_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf558_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf559_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op559_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf551', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf558', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg354_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf559', get_index_3, getitem)
        return store_reduction
op559 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op560: SchedulerNode(ComputedBuffer)
op560.writes = [MemoryDep('buf560', c0, {c0: 4096}, None)]
op560.unmet_dependencies = 
    [   MemoryDep('buf551', c0, {c0: 4194304}, None),
        MemoryDep('buf558', c0, {c0: 4194304}, None)]
op560.met_dependencies = [MemoryDep('arg354_1', c1, {c0: 4096, c1: 1024}, None)]
op560.outputs = [
    buf560: ComputedBuffer
    buf560.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf560.users = [NodeUser(node=SchedulerNode(name='op562'), can_inplace=False, is_weak=False)]
]
op560.group.device = cuda:0
op560.group.iteration = (4096, 1024)
op560.sizes = ([4096], [1024])
buf551_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf558_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf560_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op560_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf551', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf558', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg354_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf560', get_index_3, getitem_1)
        return store_reduction
op560 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op562: SchedulerNode(ComputedBuffer)
op562.writes = [MemoryDep('buf562', c0, {c0: 4194304}, None)]
op562.unmet_dependencies = 
    [   MemoryDep('buf551', c0, {c0: 4194304}, None),
        MemoryDep('buf558', c0, {c0: 4194304}, None),
        MemoryDep('buf559', c0, {c0: 4096}, None),
        MemoryDep('buf560', c0, {c0: 4096}, None)]
op562.met_dependencies = 
    [   MemoryDep('arg354_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg355_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg356_1', c1, {c0: 4096, c1: 1024}, None)]
op562.outputs = [
    buf562: ComputedBuffer
    buf562.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf562.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op563'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op564'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op570'), can_inplace=False, is_weak=False),
    ]
]
op562.group.device = cuda:0
op562.group.iteration = (4194304, 1)
op562.sizes = ([4096, 1024], [])
buf551_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf558_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf559_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf560_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg355_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg356_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf562_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op562_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf551', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf558', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg354_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf559', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf560', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg355_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg356_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf562', get_index_7, add_3, None)
        return store
op562 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op563: ExternKernelSchedulerNode(ExternKernelOut)
op563.writes = [StarDep(name='buf563', mode=None)]
op563.unmet_dependencies = [StarDep(name='buf562', mode=None)]
op563.met_dependencies = [StarDep(name='arg357_1', mode=None)]
op563.outputs = [
    buf563: ExternKernelOut
    buf563.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf563.users = [NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False)]
]
op563.node.kernel = extern_kernels.mm


op564: ExternKernelSchedulerNode(ExternKernelOut)
op564.writes = [StarDep(name='buf564', mode=None)]
op564.unmet_dependencies = [StarDep(name='buf562', mode=None)]
op564.met_dependencies = [StarDep(name='arg359_1', mode=None)]
op564.outputs = [
    buf564: ExternKernelOut
    buf564.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf564.users = [NodeUser(node=SchedulerNode(name='op566'), can_inplace=False, is_weak=False)]
]
op564.node.kernel = extern_kernels.mm


op565: SchedulerNode(ComputedBuffer)
op565.writes = [MemoryDep('buf565', c0, {c0: 4194304}, None)]
op565.unmet_dependencies = [   MemoryDep('buf563', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op565.met_dependencies = [MemoryDep('arg358_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op565.outputs = [
    buf565: ComputedBuffer
    buf565.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf565.users = [NodeUser(node=ExternKernelSchedulerNode(name='op567'), can_inplace=False, is_weak=False)]
]
op565.group.device = cuda:0
op565.group.iteration = (4194304, 1)
op565.sizes = ([32, 16, 128, 64], [])
buf563_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf565_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op565_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf563', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg358_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf565', get_index_2, mul, None)
        return store
op565 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op566: SchedulerNode(ComputedBuffer)
op566.writes = [MemoryDep('buf566', c0, {c0: 4194304}, None)]
op566.unmet_dependencies = [   MemoryDep('buf564', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op566.met_dependencies = [MemoryDep('arg360_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op566.outputs = [
    buf566: ComputedBuffer
    buf566.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf566.users = [NodeUser(node=ExternKernelSchedulerNode(name='op567'), can_inplace=False, is_weak=False)]
]
op566.group.device = cuda:0
op566.group.iteration = (4194304, 1)
op566.sizes = ([32, 16, 128, 64], [])
buf564_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg360_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf566_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op566_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf564', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg360_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf566', get_index_2, add, None)
        return store
op566 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op567: ExternKernelSchedulerNode(ExternKernelOut)
op567.writes = [StarDep(name='buf567', mode=None)]
op567.unmet_dependencies = [StarDep(name='buf565', mode=None), StarDep(name='buf566', mode=None)]
op567.met_dependencies = []
op567.outputs = [
    buf567: ExternKernelOut
    buf567.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf567.users = [
        NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op569'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=True, is_weak=False),
    ]
]
op567.node.kernel = extern_kernels.bmm


op568: SchedulerNode(ComputedBuffer)
op568.writes = [MemoryDep('buf568', c0, {c0: 65536}, None)]
op568.unmet_dependencies = [MemoryDep('buf567', c0, {c0: 8388608}, None)]
op568.met_dependencies = []
op568.outputs = [
    buf568: ComputedBuffer
    buf568.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf568.users = [
        NodeUser(node=SchedulerNode(name='op569'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False),
    ]
]
op568.group.device = cuda:0
op568.group.iteration = (65536, 128)
op568.sizes = ([512, 128], [128])
buf567_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op568_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf567', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf568', get_index_3, reduction)
        return store_reduction
op568 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)


op569: SchedulerNode(ComputedBuffer)
op569.writes = [MemoryDep('buf569', c0, {c0: 65536}, None)]
op569.unmet_dependencies = 
    [   MemoryDep('buf567', c0, {c0: 8388608}, None),
        MemoryDep('buf568', c0, {c0: 65536}, None)]
op569.met_dependencies = []
op569.outputs = [
    buf569: ComputedBuffer
    buf569.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf569.users = [NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
]
op569.group.device = cuda:0
op569.group.iteration = (65536, 128)
op569.sizes = ([512, 128], [128])
buf567_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf569_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op569_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf567', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf568', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf569', get_index_4, reduction)
        return store_reduction
op569 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op570: ExternKernelSchedulerNode(ExternKernelOut)
op570.writes = [StarDep(name='buf570', mode=None)]
op570.unmet_dependencies = [StarDep(name='buf562', mode=None)]
op570.met_dependencies = [StarDep(name='arg361_1', mode=None)]
op570.outputs = [
    buf570: ExternKernelOut
    buf570.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf570.users = [NodeUser(node=SchedulerNode(name='op572'), can_inplace=False, is_weak=False)]
]
op570.node.kernel = extern_kernels.mm


op571: SchedulerNode(ComputedBuffer)
op571.writes = [MemoryDep('buf571', c0, {c0: 8388608}, None)]
op571.unmet_dependencies = 
    [   MemoryDep('buf567', c0, {c0: 8388608}, None),
        MemoryDep('buf568', c0, {c0: 65536}, None),
        MemoryDep('buf569', c0, {c0: 65536}, None)]
op571.met_dependencies = []
op571.outputs = [
    buf571: ComputedBuffer
    buf571.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf571.users = [NodeUser(node=ExternKernelSchedulerNode(name='op573'), can_inplace=False, is_weak=False)]
]
op571.group.device = cuda:0
op571.group.iteration = (8388608, 1)
op571.sizes = ([512, 128, 128], [])
buf567_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf569_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf571_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op571_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf567', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf568', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf569', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf571', get_index_5, truediv, None)
        return store
op571 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)


op572: SchedulerNode(ComputedBuffer)
op572.writes = [MemoryDep('buf572', c0, {c0: 4194304}, None)]
op572.unmet_dependencies = [   MemoryDep('buf570', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op572.met_dependencies = [MemoryDep('arg362_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op572.outputs = [
    buf572: ComputedBuffer
    buf572.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf572.users = [NodeUser(node=ExternKernelSchedulerNode(name='op573'), can_inplace=False, is_weak=False)]
]
op572.group.device = cuda:0
op572.group.iteration = (4194304, 1)
op572.sizes = ([32, 16, 128, 64], [])
buf570_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg362_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf572_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op572_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf570', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg362_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf572', get_index_2, add, None)
        return store
op572 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op573: ExternKernelSchedulerNode(ExternKernelOut)
op573.writes = [StarDep(name='buf573', mode=None)]
op573.unmet_dependencies = [StarDep(name='buf571', mode=None), StarDep(name='buf572', mode=None)]
op573.met_dependencies = []
op573.outputs = [
    buf573: ExternKernelOut
    buf573.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf573.users = [NodeUser(node=SchedulerNode(name='op574'), can_inplace=False, is_weak=False)]
]
op573.node.kernel = extern_kernels.bmm


op574: SchedulerNode(ComputedBuffer)
op574.writes = [MemoryDep('buf574', c0, {c0: 4194304}, None)]
op574.unmet_dependencies = [   MemoryDep('buf573', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op574.met_dependencies = []
op574.outputs = [
    buf574: ComputedBuffer
    buf574.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf574.users = [NodeUser(node=ExternKernelSchedulerNode(name='op575'), can_inplace=False, is_weak=False)]
]
op574.group.device = cuda:0
op574.group.iteration = (4194304, 1)
op574.sizes = ([32, 128, 16, 64], [])
buf573_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf574_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op574_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf573', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf574', get_index_1, load, None)
        return store
op574 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op575: ExternKernelSchedulerNode(ExternKernelOut)
op575.writes = [StarDep(name='buf575', mode=None)]
op575.unmet_dependencies = [StarDep(name='buf574', mode=None)]
op575.met_dependencies = [StarDep(name='arg363_1', mode=None)]
op575.outputs = [
    buf575: ExternKernelOut
    buf575.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf575.users = [NodeUser(node=SchedulerNode(name='op576'), can_inplace=True, is_weak=False)]
]
op575.node.kernel = extern_kernels.mm


op576: SchedulerNode(ComputedBuffer)
op576.writes = [MemoryDep('buf576', c0, {c0: 4194304}, None)]
op576.unmet_dependencies = 
    [   MemoryDep('buf551', c0, {c0: 4194304}, None),
        MemoryDep('buf558', c0, {c0: 4194304}, None),
        MemoryDep('buf575', c0, {c0: 4194304}, None)]
op576.met_dependencies = 
    [   MemoryDep('arg354_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg364_1', c1, {c0: 4096, c1: 1024}, None)]
op576.outputs = [
    buf576: ComputedBuffer
    buf576.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf576.users = [
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op578'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op579'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op580'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op595'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op597'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op601'), can_inplace=True, is_weak=False),
    ]
]
op576.group.device = cuda:0
op576.group.iteration = (4194304, 1)
op576.sizes = ([4096, 1024], [])
buf551_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf558_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf575_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg364_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf576_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op576_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf551', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf558', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg354_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf575', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg364_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf576', get_index_5, add_3, None)
        return store
op576 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op577: SchedulerNode(ComputedBuffer)
op577.writes = [MemoryDep('buf577', c0, {c0: 4096}, None)]
op577.unmet_dependencies = [MemoryDep('buf576', c0, {c0: 4194304}, None)]
op577.met_dependencies = []
op577.outputs = [
    buf577: ComputedBuffer
    buf577.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf577.users = [NodeUser(node=SchedulerNode(name='op580'), can_inplace=False, is_weak=False)]
]
op577.group.device = cuda:0
op577.group.iteration = (4096, 1024)
op577.sizes = ([4096], [1024])
buf576_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf577_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op577_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf576', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf577', get_index_1, getitem)
        return store_reduction
op577 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op578: SchedulerNode(ComputedBuffer)
op578.writes = [MemoryDep('buf578', c0, {c0: 4096}, None)]
op578.unmet_dependencies = [MemoryDep('buf576', c0, {c0: 4194304}, None)]
op578.met_dependencies = []
op578.outputs = [
    buf578: ComputedBuffer
    buf578.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf578.users = [NodeUser(node=SchedulerNode(name='op580'), can_inplace=False, is_weak=False)]
]
op578.group.device = cuda:0
op578.group.iteration = (4096, 1024)
op578.sizes = ([4096], [1024])
buf576_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf578_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op578_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf576', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf578', get_index_1, getitem_1)
        return store_reduction
op578 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op580: SchedulerNode(ComputedBuffer)
op580.writes = [MemoryDep('buf580', c0, {c0: 4194304}, None)]
op580.unmet_dependencies = 
    [   MemoryDep('buf576', c0, {c0: 4194304}, None),
        MemoryDep('buf577', c0, {c0: 4096}, None),
        MemoryDep('buf578', c0, {c0: 4096}, None)]
op580.met_dependencies = 
    [   MemoryDep('arg365_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg366_1', c1, {c0: 4096, c1: 1024}, None)]
op580.outputs = [
    buf580: ComputedBuffer
    buf580.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf580.users = [NodeUser(node=ExternKernelSchedulerNode(name='op581'), can_inplace=False, is_weak=False)]
]
op580.group.device = cuda:0
op580.group.iteration = (4194304, 1)
op580.sizes = ([4096, 1024], [])
buf576_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf577_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf578_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg365_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg366_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf580_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op580_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf576', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf577', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf578', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg365_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg366_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf580', get_index_5, add_1, None)
        return store
op580 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op581: ExternKernelSchedulerNode(ExternKernelOut)
op581.writes = [StarDep(name='buf581', mode=None)]
op581.unmet_dependencies = [StarDep(name='buf580', mode=None)]
op581.met_dependencies = [StarDep(name='arg367_1', mode=None)]
op581.outputs = [
    buf581: ExternKernelOut
    buf581.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf581.users = [NodeUser(node=SchedulerNode(name='op584'), can_inplace=False, is_weak=False)]
]
op581.node.kernel = extern_kernels.mm


op582: ExternKernelSchedulerNode(ExternKernelOut)
op582.writes = [StarDep(name='buf582', mode=None)]
op582.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op582.met_dependencies = [StarDep(name='arg369_1', mode=None)]
op582.outputs = [
    buf582: ExternKernelOut
    buf582.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf582.users = [NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False)]
]
op582.node.kernel = extern_kernels.mm


op583: ExternKernelSchedulerNode(ExternKernelOut)
op583.writes = [StarDep(name='buf583', mode=None)]
op583.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op583.met_dependencies = [StarDep(name='arg371_1', mode=None)]
op583.outputs = [
    buf583: ExternKernelOut
    buf583.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf583.users = [NodeUser(node=SchedulerNode(name='op586'), can_inplace=False, is_weak=False)]
]
op583.node.kernel = extern_kernels.mm


op584: SchedulerNode(ComputedBuffer)
op584.writes = [MemoryDep('buf584', c0, {c0: 4194304}, None)]
op584.unmet_dependencies = [   MemoryDep('buf581', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op584.met_dependencies = [   MemoryDep('arg368_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op584.outputs = [
    buf584: ComputedBuffer
    buf584.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf584.users = [NodeUser(node=ExternKernelSchedulerNode(name='op587'), can_inplace=False, is_weak=False)]
]
op584.group.device = cuda:0
op584.group.iteration = (4194304, 1)
op584.sizes = ([512, 128, 64], [])
buf581_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf584_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op584_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf581', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg368_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf584', get_index_2, mul, None)
        return store
op584 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op585: SchedulerNode(ComputedBuffer)
op585.writes = [MemoryDep('buf585', c0, {c0: 4194304}, None)]
op585.unmet_dependencies = [   MemoryDep('buf582', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op585.met_dependencies = [   MemoryDep('arg370_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op585.outputs = [
    buf585: ComputedBuffer
    buf585.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf585.users = [NodeUser(node=ExternKernelSchedulerNode(name='op587'), can_inplace=False, is_weak=False)]
]
op585.group.device = cuda:0
op585.group.iteration = (4194304, 1)
op585.sizes = ([512, 128, 64], [])
buf582_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op585_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf582', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg370_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf585', get_index_2, add, None)
        return store
op585 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op586: SchedulerNode(ComputedBuffer)
op586.writes = [MemoryDep('buf586', c0, {c0: 4194304}, None)]
op586.unmet_dependencies = [   MemoryDep('buf583', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op586.met_dependencies = [   MemoryDep('arg372_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op586.outputs = [
    buf586: ComputedBuffer
    buf586.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf586.users = [NodeUser(node=ExternKernelSchedulerNode(name='op587'), can_inplace=False, is_weak=False)]
]
op586.group.device = cuda:0
op586.group.iteration = (4194304, 1)
op586.sizes = ([512, 128, 64], [])
buf583_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg372_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf586_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op586_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf583', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg372_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf586', get_index_2, add, None)
        return store
op586 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op587: ExternKernelSchedulerNode(FallbackKernel)
op587.writes = [StarDep(name='buf587', mode=None)]
op587.unmet_dependencies = 
    [   StarDep(name='buf584', mode=None),
        StarDep(name='buf585', mode=None),
        StarDep(name='buf586', mode=None)]
op587.met_dependencies = []
op587.outputs = [
    buf587: FallbackKernel
    buf587.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf587.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op588'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op589'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op590'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op591'), can_inplace=False, is_weak=False),
    ]
]
op587.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op588: ExternKernelSchedulerNode(MultiOutput)
op588.writes = [StarDep(name='buf588', mode=None)]
op588.unmet_dependencies = [StarDep(name='buf587', mode=None)]
op588.met_dependencies = []
op588.outputs = [
    buf588: MultiOutput
    buf588.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf588.users = [NodeUser(node=SchedulerNode(name='op592'), can_inplace=False, is_weak=False)]
]
op588.node.kernel = None


op592: SchedulerNode(ComputedBuffer)
op592.writes = [MemoryDep('buf592', c0, {c0: 4194304}, None)]
op592.unmet_dependencies = [   MemoryDep('buf588', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op592.met_dependencies = []
op592.outputs = [
    buf592: ComputedBuffer
    buf592.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf592.users = [NodeUser(node=ExternKernelSchedulerNode(name='op593'), can_inplace=False, is_weak=False)]
]
op592.group.device = cuda:0
op592.group.iteration = (4194304, 1)
op592.sizes = ([32, 128, 1024], [])
buf588_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf592_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op592_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf588', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf592', get_index_1, load, None)
        return store
op592 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op593: ExternKernelSchedulerNode(ExternKernelOut)
op593.writes = [StarDep(name='buf593', mode=None)]
op593.unmet_dependencies = [StarDep(name='buf592', mode=None)]
op593.met_dependencies = [StarDep(name='arg373_1', mode=None)]
op593.outputs = [
    buf593: ExternKernelOut
    buf593.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf593.users = [
        NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op595'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op597'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op601'), can_inplace=True, is_weak=False),
    ]
]
op593.node.kernel = extern_kernels.mm


op594: SchedulerNode(ComputedBuffer)
op594.writes = [MemoryDep('buf594', c0, {c0: 4096}, None)]
op594.unmet_dependencies = 
    [   MemoryDep('buf576', c0, {c0: 4194304}, None),
        MemoryDep('buf593', c0, {c0: 4194304}, None)]
op594.met_dependencies = [MemoryDep('arg374_1', c1, {c0: 4096, c1: 1024}, None)]
op594.outputs = [
    buf594: ComputedBuffer
    buf594.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf594.users = [NodeUser(node=SchedulerNode(name='op597'), can_inplace=False, is_weak=False)]
]
op594.group.device = cuda:0
op594.group.iteration = (4096, 1024)
op594.sizes = ([4096], [1024])
buf576_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf593_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg374_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf594_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op594_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf576', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf593', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg374_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf594', get_index_3, getitem)
        return store_reduction
op594 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op595: SchedulerNode(ComputedBuffer)
op595.writes = [MemoryDep('buf595', c0, {c0: 4096}, None)]
op595.unmet_dependencies = 
    [   MemoryDep('buf576', c0, {c0: 4194304}, None),
        MemoryDep('buf593', c0, {c0: 4194304}, None)]
op595.met_dependencies = [MemoryDep('arg374_1', c1, {c0: 4096, c1: 1024}, None)]
op595.outputs = [
    buf595: ComputedBuffer
    buf595.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf595.users = [NodeUser(node=SchedulerNode(name='op597'), can_inplace=False, is_weak=False)]
]
op595.group.device = cuda:0
op595.group.iteration = (4096, 1024)
op595.sizes = ([4096], [1024])
buf576_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf593_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg374_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf595_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op595_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf576', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf593', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg374_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf595', get_index_3, getitem_1)
        return store_reduction
op595 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op597: SchedulerNode(ComputedBuffer)
op597.writes = [MemoryDep('buf597', c0, {c0: 4194304}, None)]
op597.unmet_dependencies = 
    [   MemoryDep('buf576', c0, {c0: 4194304}, None),
        MemoryDep('buf593', c0, {c0: 4194304}, None),
        MemoryDep('buf594', c0, {c0: 4096}, None),
        MemoryDep('buf595', c0, {c0: 4096}, None)]
op597.met_dependencies = 
    [   MemoryDep('arg374_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg375_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg376_1', c1, {c0: 4096, c1: 1024}, None)]
op597.outputs = [
    buf597: ComputedBuffer
    buf597.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf597.users = [NodeUser(node=ExternKernelSchedulerNode(name='op598'), can_inplace=False, is_weak=False)]
]
op597.group.device = cuda:0
op597.group.iteration = (4194304, 1)
op597.sizes = ([4096, 1024], [])
buf576_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf593_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg374_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf594_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf595_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg375_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg376_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf597_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op597_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf576', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf593', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg374_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf594', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf595', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg375_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg376_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf597', get_index_7, add_3, None)
        return store
op597 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op598: ExternKernelSchedulerNode(ExternKernelOut)
op598.writes = [StarDep(name='buf598', mode=None)]
op598.unmet_dependencies = [StarDep(name='buf597', mode=None)]
op598.met_dependencies = [StarDep(name='arg377_1', mode=None)]
op598.outputs = [
    buf598: ExternKernelOut
    buf598.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf598.users = [NodeUser(node=SchedulerNode(name='op599'), can_inplace=True, is_weak=False)]
]
op598.node.kernel = extern_kernels.mm


op599: SchedulerNode(ComputedBuffer)
op599.writes = [MemoryDep('buf599', c0, {c0: 16777216}, None)]
op599.unmet_dependencies = [MemoryDep('buf598', c0, {c0: 16777216}, None)]
op599.met_dependencies = [MemoryDep('arg378_1', c1, {c0: 4096, c1: 4096}, None)]
op599.outputs = [
    buf599: ComputedBuffer
    buf599.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf599.users = [NodeUser(node=ExternKernelSchedulerNode(name='op600'), can_inplace=False, is_weak=False)]
]
op599.group.device = cuda:0
op599.group.iteration = (16777216, 1)
op599.sizes = ([4096, 4096], [])
buf598_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg378_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf599_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op599_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf598', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg378_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf598', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg378_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf599', get_index_4, mul_2, None)
        return store
op599 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op600: ExternKernelSchedulerNode(ExternKernelOut)
op600.writes = [StarDep(name='buf600', mode=None)]
op600.unmet_dependencies = [StarDep(name='buf599', mode=None)]
op600.met_dependencies = [StarDep(name='arg379_1', mode=None)]
op600.outputs = [
    buf600: ExternKernelOut
    buf600.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf600.users = [NodeUser(node=SchedulerNode(name='op601'), can_inplace=True, is_weak=False)]
]
op600.node.kernel = extern_kernels.mm


op601: SchedulerNode(ComputedBuffer)
op601.writes = [MemoryDep('buf601', c0, {c0: 4194304}, None)]
op601.unmet_dependencies = 
    [   MemoryDep('buf576', c0, {c0: 4194304}, None),
        MemoryDep('buf593', c0, {c0: 4194304}, None),
        MemoryDep('buf600', c0, {c0: 4194304}, None)]
op601.met_dependencies = 
    [   MemoryDep('arg374_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg380_1', c1, {c0: 4096, c1: 1024}, None)]
op601.outputs = [
    buf601: ComputedBuffer
    buf601.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf601.users = [
        NodeUser(node=SchedulerNode(name='op602'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op604'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op605'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op619'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op620'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op622'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op636'), can_inplace=True, is_weak=False),
    ]
]
op601.group.device = cuda:0
op601.group.iteration = (4194304, 1)
op601.sizes = ([4096, 1024], [])
buf576_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf593_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg374_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf600_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg380_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf601_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op601_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf576', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf593', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg374_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf600', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg380_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf601', get_index_5, add_3, None)
        return store
op601 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op602: SchedulerNode(ComputedBuffer)
op602.writes = [MemoryDep('buf602', c0, {c0: 4096}, None)]
op602.unmet_dependencies = [MemoryDep('buf601', c0, {c0: 4194304}, None)]
op602.met_dependencies = []
op602.outputs = [
    buf602: ComputedBuffer
    buf602.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf602.users = [NodeUser(node=SchedulerNode(name='op605'), can_inplace=False, is_weak=False)]
]
op602.group.device = cuda:0
op602.group.iteration = (4096, 1024)
op602.sizes = ([4096], [1024])
buf601_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf602_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op602_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf601', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf602', get_index_1, getitem)
        return store_reduction
op602 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op603: SchedulerNode(ComputedBuffer)
op603.writes = [MemoryDep('buf603', c0, {c0: 4096}, None)]
op603.unmet_dependencies = [MemoryDep('buf601', c0, {c0: 4194304}, None)]
op603.met_dependencies = []
op603.outputs = [
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf603.users = [NodeUser(node=SchedulerNode(name='op605'), can_inplace=False, is_weak=False)]
]
op603.group.device = cuda:0
op603.group.iteration = (4096, 1024)
op603.sizes = ([4096], [1024])
buf601_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf603_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op603_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf601', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf603', get_index_1, getitem_1)
        return store_reduction
op603 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op605: SchedulerNode(ComputedBuffer)
op605.writes = [MemoryDep('buf605', c0, {c0: 4194304}, None)]
op605.unmet_dependencies = 
    [   MemoryDep('buf601', c0, {c0: 4194304}, None),
        MemoryDep('buf602', c0, {c0: 4096}, None),
        MemoryDep('buf603', c0, {c0: 4096}, None)]
op605.met_dependencies = 
    [   MemoryDep('arg381_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg382_1', c1, {c0: 4096, c1: 1024}, None)]
op605.outputs = [
    buf605: ComputedBuffer
    buf605.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf605.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op606'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op607'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op613'), can_inplace=False, is_weak=False),
    ]
]
op605.group.device = cuda:0
op605.group.iteration = (4194304, 1)
op605.sizes = ([4096, 1024], [])
buf601_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf602_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf603_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg381_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg382_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf605_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op605_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf601', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf602', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf603', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg381_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg382_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf605', get_index_5, add_1, None)
        return store
op605 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op606: ExternKernelSchedulerNode(ExternKernelOut)
op606.writes = [StarDep(name='buf606', mode=None)]
op606.unmet_dependencies = [StarDep(name='buf605', mode=None)]
op606.met_dependencies = [StarDep(name='arg383_1', mode=None)]
op606.outputs = [
    buf606: ExternKernelOut
    buf606.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf606.users = [NodeUser(node=SchedulerNode(name='op608'), can_inplace=False, is_weak=False)]
]
op606.node.kernel = extern_kernels.mm


op607: ExternKernelSchedulerNode(ExternKernelOut)
op607.writes = [StarDep(name='buf607', mode=None)]
op607.unmet_dependencies = [StarDep(name='buf605', mode=None)]
op607.met_dependencies = [StarDep(name='arg385_1', mode=None)]
op607.outputs = [
    buf607: ExternKernelOut
    buf607.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf607.users = [NodeUser(node=SchedulerNode(name='op609'), can_inplace=False, is_weak=False)]
]
op607.node.kernel = extern_kernels.mm


op608: SchedulerNode(ComputedBuffer)
op608.writes = [MemoryDep('buf608', c0, {c0: 4194304}, None)]
op608.unmet_dependencies = [   MemoryDep('buf606', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op608.met_dependencies = [MemoryDep('arg384_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op608.outputs = [
    buf608: ComputedBuffer
    buf608.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf608.users = [NodeUser(node=ExternKernelSchedulerNode(name='op610'), can_inplace=False, is_weak=False)]
]
op608.group.device = cuda:0
op608.group.iteration = (4194304, 1)
op608.sizes = ([32, 16, 128, 64], [])
buf606_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg384_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf608_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op608_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf606', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg384_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf608', get_index_2, mul, None)
        return store
op608 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op609: SchedulerNode(ComputedBuffer)
op609.writes = [MemoryDep('buf609', c0, {c0: 4194304}, None)]
op609.unmet_dependencies = [   MemoryDep('buf607', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op609.met_dependencies = [MemoryDep('arg386_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op609.outputs = [
    buf609: ComputedBuffer
    buf609.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf609.users = [NodeUser(node=ExternKernelSchedulerNode(name='op610'), can_inplace=False, is_weak=False)]
]
op609.group.device = cuda:0
op609.group.iteration = (4194304, 1)
op609.sizes = ([32, 16, 128, 64], [])
buf607_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg386_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf609_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op609_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf607', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg386_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf609', get_index_2, add, None)
        return store
op609 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op610: ExternKernelSchedulerNode(ExternKernelOut)
op610.writes = [StarDep(name='buf610', mode=None)]
op610.unmet_dependencies = [StarDep(name='buf608', mode=None), StarDep(name='buf609', mode=None)]
op610.met_dependencies = []
op610.outputs = [
    buf610: ExternKernelOut
    buf610.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf610.users = [
        NodeUser(node=SchedulerNode(name='op611'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op612'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op614'), can_inplace=True, is_weak=False),
    ]
]
op610.node.kernel = extern_kernels.bmm


op611: SchedulerNode(ComputedBuffer)
op611.writes = [MemoryDep('buf611', c0, {c0: 65536}, None)]
op611.unmet_dependencies = [MemoryDep('buf610', c0, {c0: 8388608}, None)]
op611.met_dependencies = []
op611.outputs = [
    buf611: ComputedBuffer
    buf611.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf611.users = [
        NodeUser(node=SchedulerNode(name='op612'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op614'), can_inplace=False, is_weak=False),
    ]
]
op611.group.device = cuda:0
op611.group.iteration = (65536, 128)
op611.sizes = ([512, 128], [128])
buf610_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf611_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op611_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf610', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf611', get_index_3, reduction)
        return store_reduction
op611 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)


op612: SchedulerNode(ComputedBuffer)
op612.writes = [MemoryDep('buf612', c0, {c0: 65536}, None)]
op612.unmet_dependencies = 
    [   MemoryDep('buf610', c0, {c0: 8388608}, None),
        MemoryDep('buf611', c0, {c0: 65536}, None)]
op612.met_dependencies = []
op612.outputs = [
    buf612: ComputedBuffer
    buf612.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf612.users = [NodeUser(node=SchedulerNode(name='op614'), can_inplace=False, is_weak=False)]
]
op612.group.device = cuda:0
op612.group.iteration = (65536, 128)
op612.sizes = ([512, 128], [128])
buf610_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf611_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf612_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op612_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf610', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf611', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf612', get_index_4, reduction)
        return store_reduction
op612 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op613: ExternKernelSchedulerNode(ExternKernelOut)
op613.writes = [StarDep(name='buf613', mode=None)]
op613.unmet_dependencies = [StarDep(name='buf605', mode=None)]
op613.met_dependencies = [StarDep(name='arg387_1', mode=None)]
op613.outputs = [
    buf613: ExternKernelOut
    buf613.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf613.users = [NodeUser(node=SchedulerNode(name='op615'), can_inplace=False, is_weak=False)]
]
op613.node.kernel = extern_kernels.mm


op614: SchedulerNode(ComputedBuffer)
op614.writes = [MemoryDep('buf614', c0, {c0: 8388608}, None)]
op614.unmet_dependencies = 
    [   MemoryDep('buf610', c0, {c0: 8388608}, None),
        MemoryDep('buf611', c0, {c0: 65536}, None),
        MemoryDep('buf612', c0, {c0: 65536}, None)]
op614.met_dependencies = []
op614.outputs = [
    buf614: ComputedBuffer
    buf614.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf614.users = [NodeUser(node=ExternKernelSchedulerNode(name='op616'), can_inplace=False, is_weak=False)]
]
op614.group.device = cuda:0
op614.group.iteration = (8388608, 1)
op614.sizes = ([512, 128, 128], [])
buf610_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf611_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf612_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf614_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op614_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf610', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf611', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf612', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf614', get_index_5, truediv, None)
        return store
op614 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)


op615: SchedulerNode(ComputedBuffer)
op615.writes = [MemoryDep('buf615', c0, {c0: 4194304}, None)]
op615.unmet_dependencies = [   MemoryDep('buf613', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op615.met_dependencies = [MemoryDep('arg388_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op615.outputs = [
    buf615: ComputedBuffer
    buf615.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf615.users = [NodeUser(node=ExternKernelSchedulerNode(name='op616'), can_inplace=False, is_weak=False)]
]
op615.group.device = cuda:0
op615.group.iteration = (4194304, 1)
op615.sizes = ([32, 16, 128, 64], [])
buf613_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg388_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf615_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op615_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf613', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg388_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf615', get_index_2, add, None)
        return store
op615 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op616: ExternKernelSchedulerNode(ExternKernelOut)
op616.writes = [StarDep(name='buf616', mode=None)]
op616.unmet_dependencies = [StarDep(name='buf614', mode=None), StarDep(name='buf615', mode=None)]
op616.met_dependencies = []
op616.outputs = [
    buf616: ExternKernelOut
    buf616.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf616.users = [NodeUser(node=SchedulerNode(name='op617'), can_inplace=False, is_weak=False)]
]
op616.node.kernel = extern_kernels.bmm


op617: SchedulerNode(ComputedBuffer)
op617.writes = [MemoryDep('buf617', c0, {c0: 4194304}, None)]
op617.unmet_dependencies = [   MemoryDep('buf616', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op617.met_dependencies = []
op617.outputs = [
    buf617: ComputedBuffer
    buf617.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf617.users = [NodeUser(node=ExternKernelSchedulerNode(name='op618'), can_inplace=False, is_weak=False)]
]
op617.group.device = cuda:0
op617.group.iteration = (4194304, 1)
op617.sizes = ([32, 128, 16, 64], [])
buf616_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf617_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op617_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf616', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf617', get_index_1, load, None)
        return store
op617 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op618: ExternKernelSchedulerNode(ExternKernelOut)
op618.writes = [StarDep(name='buf618', mode=None)]
op618.unmet_dependencies = [StarDep(name='buf617', mode=None)]
op618.met_dependencies = [StarDep(name='arg389_1', mode=None)]
op618.outputs = [
    buf618: ExternKernelOut
    buf618.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf618.users = [
        NodeUser(node=SchedulerNode(name='op619'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op620'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op622'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op636'), can_inplace=True, is_weak=False),
    ]
]
op618.node.kernel = extern_kernels.mm


op619: SchedulerNode(ComputedBuffer)
op619.writes = [MemoryDep('buf619', c0, {c0: 4096}, None)]
op619.unmet_dependencies = 
    [   MemoryDep('buf601', c0, {c0: 4194304}, None),
        MemoryDep('buf618', c0, {c0: 4194304}, None)]
op619.met_dependencies = [MemoryDep('arg390_1', c1, {c0: 4096, c1: 1024}, None)]
op619.outputs = [
    buf619: ComputedBuffer
    buf619.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf619.users = [NodeUser(node=SchedulerNode(name='op622'), can_inplace=False, is_weak=False)]
]
op619.group.device = cuda:0
op619.group.iteration = (4096, 1024)
op619.sizes = ([4096], [1024])
buf601_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf618_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg390_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf619_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op619_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf601', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf618', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg390_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf619', get_index_3, getitem)
        return store_reduction
op619 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op620: SchedulerNode(ComputedBuffer)
op620.writes = [MemoryDep('buf620', c0, {c0: 4096}, None)]
op620.unmet_dependencies = 
    [   MemoryDep('buf601', c0, {c0: 4194304}, None),
        MemoryDep('buf618', c0, {c0: 4194304}, None)]
op620.met_dependencies = [MemoryDep('arg390_1', c1, {c0: 4096, c1: 1024}, None)]
op620.outputs = [
    buf620: ComputedBuffer
    buf620.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf620.users = [NodeUser(node=SchedulerNode(name='op622'), can_inplace=False, is_weak=False)]
]
op620.group.device = cuda:0
op620.group.iteration = (4096, 1024)
op620.sizes = ([4096], [1024])
buf601_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf618_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg390_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf620_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op620_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf601', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf618', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg390_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf620', get_index_3, getitem_1)
        return store_reduction
op620 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op622: SchedulerNode(ComputedBuffer)
op622.writes = [MemoryDep('buf622', c0, {c0: 4194304}, None)]
op622.unmet_dependencies = 
    [   MemoryDep('buf601', c0, {c0: 4194304}, None),
        MemoryDep('buf618', c0, {c0: 4194304}, None),
        MemoryDep('buf619', c0, {c0: 4096}, None),
        MemoryDep('buf620', c0, {c0: 4096}, None)]
op622.met_dependencies = 
    [   MemoryDep('arg390_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg391_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg392_1', c1, {c0: 4096, c1: 1024}, None)]
op622.outputs = [
    buf622: ComputedBuffer
    buf622.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf622.users = [NodeUser(node=ExternKernelSchedulerNode(name='op623'), can_inplace=False, is_weak=False)]
]
op622.group.device = cuda:0
op622.group.iteration = (4194304, 1)
op622.sizes = ([4096, 1024], [])
buf601_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf618_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg390_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf619_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf620_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg391_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg392_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf622_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op622_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf601', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf618', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg390_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf619', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf620', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg391_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg392_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf622', get_index_7, add_3, None)
        return store
op622 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op623: ExternKernelSchedulerNode(ExternKernelOut)
op623.writes = [StarDep(name='buf623', mode=None)]
op623.unmet_dependencies = [StarDep(name='buf622', mode=None)]
op623.met_dependencies = [StarDep(name='arg393_1', mode=None)]
op623.outputs = [
    buf623: ExternKernelOut
    buf623.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf623.users = [NodeUser(node=SchedulerNode(name='op626'), can_inplace=False, is_weak=False)]
]
op623.node.kernel = extern_kernels.mm


op624: ExternKernelSchedulerNode(ExternKernelOut)
op624.writes = [StarDep(name='buf624', mode=None)]
op624.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op624.met_dependencies = [StarDep(name='arg395_1', mode=None)]
op624.outputs = [
    buf624: ExternKernelOut
    buf624.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf624.users = [NodeUser(node=SchedulerNode(name='op627'), can_inplace=False, is_weak=False)]
]
op624.node.kernel = extern_kernels.mm


op625: ExternKernelSchedulerNode(ExternKernelOut)
op625.writes = [StarDep(name='buf625', mode=None)]
op625.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op625.met_dependencies = [StarDep(name='arg397_1', mode=None)]
op625.outputs = [
    buf625: ExternKernelOut
    buf625.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf625.users = [NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False)]
]
op625.node.kernel = extern_kernels.mm


op626: SchedulerNode(ComputedBuffer)
op626.writes = [MemoryDep('buf626', c0, {c0: 4194304}, None)]
op626.unmet_dependencies = [   MemoryDep('buf623', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op626.met_dependencies = [   MemoryDep('arg394_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op626.outputs = [
    buf626: ComputedBuffer
    buf626.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf626.users = [NodeUser(node=ExternKernelSchedulerNode(name='op629'), can_inplace=False, is_weak=False)]
]
op626.group.device = cuda:0
op626.group.iteration = (4194304, 1)
op626.sizes = ([512, 128, 64], [])
buf623_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg394_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf626_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op626_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf623', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg394_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf626', get_index_2, mul, None)
        return store
op626 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op627: SchedulerNode(ComputedBuffer)
op627.writes = [MemoryDep('buf627', c0, {c0: 4194304}, None)]
op627.unmet_dependencies = [   MemoryDep('buf624', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op627.met_dependencies = [   MemoryDep('arg396_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op627.outputs = [
    buf627: ComputedBuffer
    buf627.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf627.users = [NodeUser(node=ExternKernelSchedulerNode(name='op629'), can_inplace=False, is_weak=False)]
]
op627.group.device = cuda:0
op627.group.iteration = (4194304, 1)
op627.sizes = ([512, 128, 64], [])
buf624_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg396_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf627_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op627_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf624', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg396_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf627', get_index_2, add, None)
        return store
op627 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op628: SchedulerNode(ComputedBuffer)
op628.writes = [MemoryDep('buf628', c0, {c0: 4194304}, None)]
op628.unmet_dependencies = [   MemoryDep('buf625', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op628.met_dependencies = [   MemoryDep('arg398_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op628.outputs = [
    buf628: ComputedBuffer
    buf628.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf628.users = [NodeUser(node=ExternKernelSchedulerNode(name='op629'), can_inplace=False, is_weak=False)]
]
op628.group.device = cuda:0
op628.group.iteration = (4194304, 1)
op628.sizes = ([512, 128, 64], [])
buf625_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg398_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf628_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op628_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf625', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg398_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf628', get_index_2, add, None)
        return store
op628 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op629: ExternKernelSchedulerNode(FallbackKernel)
op629.writes = [StarDep(name='buf629', mode=None)]
op629.unmet_dependencies = 
    [   StarDep(name='buf626', mode=None),
        StarDep(name='buf627', mode=None),
        StarDep(name='buf628', mode=None)]
op629.met_dependencies = []
op629.outputs = [
    buf629: FallbackKernel
    buf629.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf629.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op630'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op631'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op632'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op633'), can_inplace=False, is_weak=False),
    ]
]
op629.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op630: ExternKernelSchedulerNode(MultiOutput)
op630.writes = [StarDep(name='buf630', mode=None)]
op630.unmet_dependencies = [StarDep(name='buf629', mode=None)]
op630.met_dependencies = []
op630.outputs = [
    buf630: MultiOutput
    buf630.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf630.users = [NodeUser(node=SchedulerNode(name='op634'), can_inplace=False, is_weak=False)]
]
op630.node.kernel = None


op634: SchedulerNode(ComputedBuffer)
op634.writes = [MemoryDep('buf634', c0, {c0: 4194304}, None)]
op634.unmet_dependencies = [   MemoryDep('buf630', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op634.met_dependencies = []
op634.outputs = [
    buf634: ComputedBuffer
    buf634.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf634.users = [NodeUser(node=ExternKernelSchedulerNode(name='op635'), can_inplace=False, is_weak=False)]
]
op634.group.device = cuda:0
op634.group.iteration = (4194304, 1)
op634.sizes = ([32, 128, 1024], [])
buf630_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf634_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op634_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf630', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf634', get_index_1, load, None)
        return store
op634 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op635: ExternKernelSchedulerNode(ExternKernelOut)
op635.writes = [StarDep(name='buf635', mode=None)]
op635.unmet_dependencies = [StarDep(name='buf634', mode=None)]
op635.met_dependencies = [StarDep(name='arg399_1', mode=None)]
op635.outputs = [
    buf635: ExternKernelOut
    buf635.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf635.users = [NodeUser(node=SchedulerNode(name='op636'), can_inplace=True, is_weak=False)]
]
op635.node.kernel = extern_kernels.mm


op636: SchedulerNode(ComputedBuffer)
op636.writes = [MemoryDep('buf636', c0, {c0: 4194304}, None)]
op636.unmet_dependencies = 
    [   MemoryDep('buf601', c0, {c0: 4194304}, None),
        MemoryDep('buf618', c0, {c0: 4194304}, None),
        MemoryDep('buf635', c0, {c0: 4194304}, None)]
op636.met_dependencies = 
    [   MemoryDep('arg390_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg400_1', c1, {c0: 4096, c1: 1024}, None)]
op636.outputs = [
    buf636: ComputedBuffer
    buf636.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf636.users = [
        NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op638'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op639'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op640'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op644'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op645'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op646'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op647'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op661'), can_inplace=True, is_weak=False),
    ]
]
op636.group.device = cuda:0
op636.group.iteration = (4194304, 1)
op636.sizes = ([4096, 1024], [])
buf601_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf618_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg390_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf635_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg400_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf636_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op636_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf601', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf618', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg390_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf635', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg400_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf636', get_index_5, add_3, None)
        return store
op636 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op637: SchedulerNode(ComputedBuffer)
op637.writes = [MemoryDep('buf637', c0, {c0: 4096}, None)]
op637.unmet_dependencies = [MemoryDep('buf636', c0, {c0: 4194304}, None)]
op637.met_dependencies = []
op637.outputs = [
    buf637: ComputedBuffer
    buf637.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf637.users = [NodeUser(node=SchedulerNode(name='op640'), can_inplace=False, is_weak=False)]
]
op637.group.device = cuda:0
op637.group.iteration = (4096, 1024)
op637.sizes = ([4096], [1024])
buf636_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf637_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op637_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf636', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf637', get_index_1, getitem)
        return store_reduction
op637 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op638: SchedulerNode(ComputedBuffer)
op638.writes = [MemoryDep('buf638', c0, {c0: 4096}, None)]
op638.unmet_dependencies = [MemoryDep('buf636', c0, {c0: 4194304}, None)]
op638.met_dependencies = []
op638.outputs = [
    buf638: ComputedBuffer
    buf638.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf638.users = [NodeUser(node=SchedulerNode(name='op640'), can_inplace=False, is_weak=False)]
]
op638.group.device = cuda:0
op638.group.iteration = (4096, 1024)
op638.sizes = ([4096], [1024])
buf636_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf638_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op638_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf636', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf638', get_index_1, getitem_1)
        return store_reduction
op638 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op640: SchedulerNode(ComputedBuffer)
op640.writes = [MemoryDep('buf640', c0, {c0: 4194304}, None)]
op640.unmet_dependencies = 
    [   MemoryDep('buf636', c0, {c0: 4194304}, None),
        MemoryDep('buf637', c0, {c0: 4096}, None),
        MemoryDep('buf638', c0, {c0: 4096}, None)]
op640.met_dependencies = 
    [   MemoryDep('arg401_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg402_1', c1, {c0: 4096, c1: 1024}, None)]
op640.outputs = [
    buf640: ComputedBuffer
    buf640.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf640.users = [NodeUser(node=ExternKernelSchedulerNode(name='op641'), can_inplace=False, is_weak=False)]
]
op640.group.device = cuda:0
op640.group.iteration = (4194304, 1)
op640.sizes = ([4096, 1024], [])
buf636_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf637_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf638_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg401_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg402_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf640_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op640_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf636', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf637', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf638', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg401_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg402_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf640', get_index_5, add_1, None)
        return store
op640 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op641: ExternKernelSchedulerNode(ExternKernelOut)
op641.writes = [StarDep(name='buf641', mode=None)]
op641.unmet_dependencies = [StarDep(name='buf640', mode=None)]
op641.met_dependencies = [StarDep(name='arg403_1', mode=None)]
op641.outputs = [
    buf641: ExternKernelOut
    buf641.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf641.users = [NodeUser(node=SchedulerNode(name='op642'), can_inplace=True, is_weak=False)]
]
op641.node.kernel = extern_kernels.mm


op642: SchedulerNode(ComputedBuffer)
op642.writes = [MemoryDep('buf642', c0, {c0: 16777216}, None)]
op642.unmet_dependencies = [MemoryDep('buf641', c0, {c0: 16777216}, None)]
op642.met_dependencies = [MemoryDep('arg404_1', c1, {c0: 4096, c1: 4096}, None)]
op642.outputs = [
    buf642: ComputedBuffer
    buf642.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf642.users = [NodeUser(node=ExternKernelSchedulerNode(name='op643'), can_inplace=False, is_weak=False)]
]
op642.group.device = cuda:0
op642.group.iteration = (16777216, 1)
op642.sizes = ([4096, 4096], [])
buf641_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg404_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf642_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op642_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf641', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg404_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf641', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg404_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf642', get_index_4, mul_2, None)
        return store
op642 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op643: ExternKernelSchedulerNode(ExternKernelOut)
op643.writes = [StarDep(name='buf643', mode=None)]
op643.unmet_dependencies = [StarDep(name='buf642', mode=None)]
op643.met_dependencies = [StarDep(name='arg405_1', mode=None)]
op643.outputs = [
    buf643: ExternKernelOut
    buf643.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf643.users = [
        NodeUser(node=SchedulerNode(name='op644'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op645'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op646'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op647'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op661'), can_inplace=True, is_weak=False),
    ]
]
op643.node.kernel = extern_kernels.mm


op644: SchedulerNode(ComputedBuffer)
op644.writes = [MemoryDep('buf644', c0, {c0: 4096}, None)]
op644.unmet_dependencies = 
    [   MemoryDep('buf636', c0, {c0: 4194304}, None),
        MemoryDep('buf643', c0, {c0: 4194304}, None)]
op644.met_dependencies = [MemoryDep('arg406_1', c1, {c0: 4096, c1: 1024}, None)]
op644.outputs = [
    buf644: ComputedBuffer
    buf644.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf644.users = [NodeUser(node=SchedulerNode(name='op647'), can_inplace=False, is_weak=False)]
]
op644.group.device = cuda:0
op644.group.iteration = (4096, 1024)
op644.sizes = ([4096], [1024])
buf636_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf643_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg406_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf644_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op644_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf636', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf643', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg406_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf644', get_index_3, getitem)
        return store_reduction
op644 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op645: SchedulerNode(ComputedBuffer)
op645.writes = [MemoryDep('buf645', c0, {c0: 4096}, None)]
op645.unmet_dependencies = 
    [   MemoryDep('buf636', c0, {c0: 4194304}, None),
        MemoryDep('buf643', c0, {c0: 4194304}, None)]
op645.met_dependencies = [MemoryDep('arg406_1', c1, {c0: 4096, c1: 1024}, None)]
op645.outputs = [
    buf645: ComputedBuffer
    buf645.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf645.users = [NodeUser(node=SchedulerNode(name='op647'), can_inplace=False, is_weak=False)]
]
op645.group.device = cuda:0
op645.group.iteration = (4096, 1024)
op645.sizes = ([4096], [1024])
buf636_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf643_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg406_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf645_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op645_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf636', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf643', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg406_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf645', get_index_3, getitem_1)
        return store_reduction
op645 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op647: SchedulerNode(ComputedBuffer)
op647.writes = [MemoryDep('buf647', c0, {c0: 4194304}, None)]
op647.unmet_dependencies = 
    [   MemoryDep('buf636', c0, {c0: 4194304}, None),
        MemoryDep('buf643', c0, {c0: 4194304}, None),
        MemoryDep('buf644', c0, {c0: 4096}, None),
        MemoryDep('buf645', c0, {c0: 4096}, None)]
op647.met_dependencies = 
    [   MemoryDep('arg406_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg407_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg408_1', c1, {c0: 4096, c1: 1024}, None)]
op647.outputs = [
    buf647: ComputedBuffer
    buf647.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf647.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op648'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op649'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op655'), can_inplace=False, is_weak=False),
    ]
]
op647.group.device = cuda:0
op647.group.iteration = (4194304, 1)
op647.sizes = ([4096, 1024], [])
buf636_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf643_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg406_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf644_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf645_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg407_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg408_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf647_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op647_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf636', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf643', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg406_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf644', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf645', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg407_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg408_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf647', get_index_7, add_3, None)
        return store
op647 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op648: ExternKernelSchedulerNode(ExternKernelOut)
op648.writes = [StarDep(name='buf648', mode=None)]
op648.unmet_dependencies = [StarDep(name='buf647', mode=None)]
op648.met_dependencies = [StarDep(name='arg409_1', mode=None)]
op648.outputs = [
    buf648: ExternKernelOut
    buf648.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf648.users = [NodeUser(node=SchedulerNode(name='op650'), can_inplace=False, is_weak=False)]
]
op648.node.kernel = extern_kernels.mm


op649: ExternKernelSchedulerNode(ExternKernelOut)
op649.writes = [StarDep(name='buf649', mode=None)]
op649.unmet_dependencies = [StarDep(name='buf647', mode=None)]
op649.met_dependencies = [StarDep(name='arg411_1', mode=None)]
op649.outputs = [
    buf649: ExternKernelOut
    buf649.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf649.users = [NodeUser(node=SchedulerNode(name='op651'), can_inplace=False, is_weak=False)]
]
op649.node.kernel = extern_kernels.mm


op650: SchedulerNode(ComputedBuffer)
op650.writes = [MemoryDep('buf650', c0, {c0: 4194304}, None)]
op650.unmet_dependencies = [   MemoryDep('buf648', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op650.met_dependencies = [MemoryDep('arg410_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op650.outputs = [
    buf650: ComputedBuffer
    buf650.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf650.users = [NodeUser(node=ExternKernelSchedulerNode(name='op652'), can_inplace=False, is_weak=False)]
]
op650.group.device = cuda:0
op650.group.iteration = (4194304, 1)
op650.sizes = ([32, 16, 128, 64], [])
buf648_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg410_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf650_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op650_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf648', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg410_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf650', get_index_2, mul, None)
        return store
op650 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op651: SchedulerNode(ComputedBuffer)
op651.writes = [MemoryDep('buf651', c0, {c0: 4194304}, None)]
op651.unmet_dependencies = [   MemoryDep('buf649', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op651.met_dependencies = [MemoryDep('arg412_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op651.outputs = [
    buf651: ComputedBuffer
    buf651.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf651.users = [NodeUser(node=ExternKernelSchedulerNode(name='op652'), can_inplace=False, is_weak=False)]
]
op651.group.device = cuda:0
op651.group.iteration = (4194304, 1)
op651.sizes = ([32, 16, 128, 64], [])
buf649_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg412_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf651_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op651_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf649', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg412_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf651', get_index_2, add, None)
        return store
op651 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op652: ExternKernelSchedulerNode(ExternKernelOut)
op652.writes = [StarDep(name='buf652', mode=None)]
op652.unmet_dependencies = [StarDep(name='buf650', mode=None), StarDep(name='buf651', mode=None)]
op652.met_dependencies = []
op652.outputs = [
    buf652: ExternKernelOut
    buf652.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf652.users = [
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op656'), can_inplace=True, is_weak=False),
    ]
]
op652.node.kernel = extern_kernels.bmm


op653: SchedulerNode(ComputedBuffer)
op653.writes = [MemoryDep('buf653', c0, {c0: 65536}, None)]
op653.unmet_dependencies = [MemoryDep('buf652', c0, {c0: 8388608}, None)]
op653.met_dependencies = []
op653.outputs = [
    buf653: ComputedBuffer
    buf653.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf653.users = [
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op656'), can_inplace=False, is_weak=False),
    ]
]
op653.group.device = cuda:0
op653.group.iteration = (65536, 128)
op653.sizes = ([512, 128], [128])
buf652_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf653_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op653_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf652', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf653', get_index_3, reduction)
        return store_reduction
op653 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)


op654: SchedulerNode(ComputedBuffer)
op654.writes = [MemoryDep('buf654', c0, {c0: 65536}, None)]
op654.unmet_dependencies = 
    [   MemoryDep('buf652', c0, {c0: 8388608}, None),
        MemoryDep('buf653', c0, {c0: 65536}, None)]
op654.met_dependencies = []
op654.outputs = [
    buf654: ComputedBuffer
    buf654.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf654.users = [NodeUser(node=SchedulerNode(name='op656'), can_inplace=False, is_weak=False)]
]
op654.group.device = cuda:0
op654.group.iteration = (65536, 128)
op654.sizes = ([512, 128], [128])
buf652_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf653_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf654_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op654_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf652', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf653', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf654', get_index_4, reduction)
        return store_reduction
op654 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op655: ExternKernelSchedulerNode(ExternKernelOut)
op655.writes = [StarDep(name='buf655', mode=None)]
op655.unmet_dependencies = [StarDep(name='buf647', mode=None)]
op655.met_dependencies = [StarDep(name='arg413_1', mode=None)]
op655.outputs = [
    buf655: ExternKernelOut
    buf655.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf655.users = [NodeUser(node=SchedulerNode(name='op657'), can_inplace=False, is_weak=False)]
]
op655.node.kernel = extern_kernels.mm


op656: SchedulerNode(ComputedBuffer)
op656.writes = [MemoryDep('buf656', c0, {c0: 8388608}, None)]
op656.unmet_dependencies = 
    [   MemoryDep('buf652', c0, {c0: 8388608}, None),
        MemoryDep('buf653', c0, {c0: 65536}, None),
        MemoryDep('buf654', c0, {c0: 65536}, None)]
op656.met_dependencies = []
op656.outputs = [
    buf656: ComputedBuffer
    buf656.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf656.users = [NodeUser(node=ExternKernelSchedulerNode(name='op658'), can_inplace=False, is_weak=False)]
]
op656.group.device = cuda:0
op656.group.iteration = (8388608, 1)
op656.sizes = ([512, 128, 128], [])
buf652_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf653_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf654_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf656_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op656_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf652', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf653', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf654', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf656', get_index_5, truediv, None)
        return store
op656 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)


op657: SchedulerNode(ComputedBuffer)
op657.writes = [MemoryDep('buf657', c0, {c0: 4194304}, None)]
op657.unmet_dependencies = [   MemoryDep('buf655', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op657.met_dependencies = [MemoryDep('arg414_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op657.outputs = [
    buf657: ComputedBuffer
    buf657.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf657.users = [NodeUser(node=ExternKernelSchedulerNode(name='op658'), can_inplace=False, is_weak=False)]
]
op657.group.device = cuda:0
op657.group.iteration = (4194304, 1)
op657.sizes = ([32, 16, 128, 64], [])
buf655_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg414_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf657_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op657_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf655', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg414_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf657', get_index_2, add, None)
        return store
op657 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op658: ExternKernelSchedulerNode(ExternKernelOut)
op658.writes = [StarDep(name='buf658', mode=None)]
op658.unmet_dependencies = [StarDep(name='buf656', mode=None), StarDep(name='buf657', mode=None)]
op658.met_dependencies = []
op658.outputs = [
    buf658: ExternKernelOut
    buf658.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf658.users = [NodeUser(node=SchedulerNode(name='op659'), can_inplace=False, is_weak=False)]
]
op658.node.kernel = extern_kernels.bmm


op659: SchedulerNode(ComputedBuffer)
op659.writes = [MemoryDep('buf659', c0, {c0: 4194304}, None)]
op659.unmet_dependencies = [   MemoryDep('buf658', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op659.met_dependencies = []
op659.outputs = [
    buf659: ComputedBuffer
    buf659.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf659.users = [NodeUser(node=ExternKernelSchedulerNode(name='op660'), can_inplace=False, is_weak=False)]
]
op659.group.device = cuda:0
op659.group.iteration = (4194304, 1)
op659.sizes = ([32, 128, 16, 64], [])
buf658_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf659_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op659_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf658', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf659', get_index_1, load, None)
        return store
op659 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op660: ExternKernelSchedulerNode(ExternKernelOut)
op660.writes = [StarDep(name='buf660', mode=None)]
op660.unmet_dependencies = [StarDep(name='buf659', mode=None)]
op660.met_dependencies = [StarDep(name='arg415_1', mode=None)]
op660.outputs = [
    buf660: ExternKernelOut
    buf660.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf660.users = [NodeUser(node=SchedulerNode(name='op661'), can_inplace=True, is_weak=False)]
]
op660.node.kernel = extern_kernels.mm


op661: SchedulerNode(ComputedBuffer)
op661.writes = [MemoryDep('buf661', c0, {c0: 4194304}, None)]
op661.unmet_dependencies = 
    [   MemoryDep('buf636', c0, {c0: 4194304}, None),
        MemoryDep('buf643', c0, {c0: 4194304}, None),
        MemoryDep('buf660', c0, {c0: 4194304}, None)]
op661.met_dependencies = 
    [   MemoryDep('arg406_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg416_1', c1, {c0: 4096, c1: 1024}, None)]
op661.outputs = [
    buf661: ComputedBuffer
    buf661.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf661.users = [
        NodeUser(node=SchedulerNode(name='op662'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op663'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op664'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op665'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op679'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op681'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op682'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op686'), can_inplace=True, is_weak=False),
    ]
]
op661.group.device = cuda:0
op661.group.iteration = (4194304, 1)
op661.sizes = ([4096, 1024], [])
buf636_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf643_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg406_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf660_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg416_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf661_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op661_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf636', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf643', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg406_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf660', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg416_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf661', get_index_5, add_3, None)
        return store
op661 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op662: SchedulerNode(ComputedBuffer)
op662.writes = [MemoryDep('buf662', c0, {c0: 4096}, None)]
op662.unmet_dependencies = [MemoryDep('buf661', c0, {c0: 4194304}, None)]
op662.met_dependencies = []
op662.outputs = [
    buf662: ComputedBuffer
    buf662.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf662.users = [NodeUser(node=SchedulerNode(name='op665'), can_inplace=False, is_weak=False)]
]
op662.group.device = cuda:0
op662.group.iteration = (4096, 1024)
op662.sizes = ([4096], [1024])
buf661_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf662_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op662_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf661', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf662', get_index_1, getitem)
        return store_reduction
op662 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op663: SchedulerNode(ComputedBuffer)
op663.writes = [MemoryDep('buf663', c0, {c0: 4096}, None)]
op663.unmet_dependencies = [MemoryDep('buf661', c0, {c0: 4194304}, None)]
op663.met_dependencies = []
op663.outputs = [
    buf663: ComputedBuffer
    buf663.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf663.users = [NodeUser(node=SchedulerNode(name='op665'), can_inplace=False, is_weak=False)]
]
op663.group.device = cuda:0
op663.group.iteration = (4096, 1024)
op663.sizes = ([4096], [1024])
buf661_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf663_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op663_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf661', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf663', get_index_1, getitem_1)
        return store_reduction
op663 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op665: SchedulerNode(ComputedBuffer)
op665.writes = [MemoryDep('buf665', c0, {c0: 4194304}, None)]
op665.unmet_dependencies = 
    [   MemoryDep('buf661', c0, {c0: 4194304}, None),
        MemoryDep('buf662', c0, {c0: 4096}, None),
        MemoryDep('buf663', c0, {c0: 4096}, None)]
op665.met_dependencies = 
    [   MemoryDep('arg417_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg418_1', c1, {c0: 4096, c1: 1024}, None)]
op665.outputs = [
    buf665: ComputedBuffer
    buf665.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf665.users = [NodeUser(node=ExternKernelSchedulerNode(name='op666'), can_inplace=False, is_weak=False)]
]
op665.group.device = cuda:0
op665.group.iteration = (4194304, 1)
op665.sizes = ([4096, 1024], [])
buf661_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf662_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf663_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg417_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg418_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf665_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op665_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf661', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf662', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf663', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg417_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg418_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf665', get_index_5, add_1, None)
        return store
op665 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op666: ExternKernelSchedulerNode(ExternKernelOut)
op666.writes = [StarDep(name='buf666', mode=None)]
op666.unmet_dependencies = [StarDep(name='buf665', mode=None)]
op666.met_dependencies = [StarDep(name='arg419_1', mode=None)]
op666.outputs = [
    buf666: ExternKernelOut
    buf666.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf666.users = [NodeUser(node=SchedulerNode(name='op669'), can_inplace=False, is_weak=False)]
]
op666.node.kernel = extern_kernels.mm


op667: ExternKernelSchedulerNode(ExternKernelOut)
op667.writes = [StarDep(name='buf667', mode=None)]
op667.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op667.met_dependencies = [StarDep(name='arg421_1', mode=None)]
op667.outputs = [
    buf667: ExternKernelOut
    buf667.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf667.users = [NodeUser(node=SchedulerNode(name='op670'), can_inplace=False, is_weak=False)]
]
op667.node.kernel = extern_kernels.mm


op668: ExternKernelSchedulerNode(ExternKernelOut)
op668.writes = [StarDep(name='buf668', mode=None)]
op668.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op668.met_dependencies = [StarDep(name='arg423_1', mode=None)]
op668.outputs = [
    buf668: ExternKernelOut
    buf668.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf668.users = [NodeUser(node=SchedulerNode(name='op671'), can_inplace=False, is_weak=False)]
]
op668.node.kernel = extern_kernels.mm


op669: SchedulerNode(ComputedBuffer)
op669.writes = [MemoryDep('buf669', c0, {c0: 4194304}, None)]
op669.unmet_dependencies = [   MemoryDep('buf666', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op669.met_dependencies = [   MemoryDep('arg420_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op669.outputs = [
    buf669: ComputedBuffer
    buf669.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf669.users = [NodeUser(node=ExternKernelSchedulerNode(name='op672'), can_inplace=False, is_weak=False)]
]
op669.group.device = cuda:0
op669.group.iteration = (4194304, 1)
op669.sizes = ([512, 128, 64], [])
buf666_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg420_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf669_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op669_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf666', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg420_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf669', get_index_2, mul, None)
        return store
op669 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op670: SchedulerNode(ComputedBuffer)
op670.writes = [MemoryDep('buf670', c0, {c0: 4194304}, None)]
op670.unmet_dependencies = [   MemoryDep('buf667', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op670.met_dependencies = [   MemoryDep('arg422_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op670.outputs = [
    buf670: ComputedBuffer
    buf670.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf670.users = [NodeUser(node=ExternKernelSchedulerNode(name='op672'), can_inplace=False, is_weak=False)]
]
op670.group.device = cuda:0
op670.group.iteration = (4194304, 1)
op670.sizes = ([512, 128, 64], [])
buf667_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg422_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf670_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op670_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf667', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg422_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf670', get_index_2, add, None)
        return store
op670 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op671: SchedulerNode(ComputedBuffer)
op671.writes = [MemoryDep('buf671', c0, {c0: 4194304}, None)]
op671.unmet_dependencies = [   MemoryDep('buf668', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op671.met_dependencies = [   MemoryDep('arg424_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op671.outputs = [
    buf671: ComputedBuffer
    buf671.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf671.users = [NodeUser(node=ExternKernelSchedulerNode(name='op672'), can_inplace=False, is_weak=False)]
]
op671.group.device = cuda:0
op671.group.iteration = (4194304, 1)
op671.sizes = ([512, 128, 64], [])
buf668_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg424_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf671_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op671_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf668', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg424_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf671', get_index_2, add, None)
        return store
op671 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op672: ExternKernelSchedulerNode(FallbackKernel)
op672.writes = [StarDep(name='buf672', mode=None)]
op672.unmet_dependencies = 
    [   StarDep(name='buf669', mode=None),
        StarDep(name='buf670', mode=None),
        StarDep(name='buf671', mode=None)]
op672.met_dependencies = []
op672.outputs = [
    buf672: FallbackKernel
    buf672.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf672.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op673'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op674'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op675'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op676'), can_inplace=False, is_weak=False),
    ]
]
op672.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op673: ExternKernelSchedulerNode(MultiOutput)
op673.writes = [StarDep(name='buf673', mode=None)]
op673.unmet_dependencies = [StarDep(name='buf672', mode=None)]
op673.met_dependencies = []
op673.outputs = [
    buf673: MultiOutput
    buf673.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf673.users = [NodeUser(node=SchedulerNode(name='op677'), can_inplace=False, is_weak=False)]
]
op673.node.kernel = None


op677: SchedulerNode(ComputedBuffer)
op677.writes = [MemoryDep('buf677', c0, {c0: 4194304}, None)]
op677.unmet_dependencies = [   MemoryDep('buf673', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op677.met_dependencies = []
op677.outputs = [
    buf677: ComputedBuffer
    buf677.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf677.users = [NodeUser(node=ExternKernelSchedulerNode(name='op678'), can_inplace=False, is_weak=False)]
]
op677.group.device = cuda:0
op677.group.iteration = (4194304, 1)
op677.sizes = ([32, 128, 1024], [])
buf673_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf677_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op677_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf673', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf677', get_index_1, load, None)
        return store
op677 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op678: ExternKernelSchedulerNode(ExternKernelOut)
op678.writes = [StarDep(name='buf678', mode=None)]
op678.unmet_dependencies = [StarDep(name='buf677', mode=None)]
op678.met_dependencies = [StarDep(name='arg425_1', mode=None)]
op678.outputs = [
    buf678: ExternKernelOut
    buf678.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf678.users = [
        NodeUser(node=SchedulerNode(name='op679'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op681'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op682'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op686'), can_inplace=True, is_weak=False),
    ]
]
op678.node.kernel = extern_kernels.mm


op679: SchedulerNode(ComputedBuffer)
op679.writes = [MemoryDep('buf679', c0, {c0: 4096}, None)]
op679.unmet_dependencies = 
    [   MemoryDep('buf661', c0, {c0: 4194304}, None),
        MemoryDep('buf678', c0, {c0: 4194304}, None)]
op679.met_dependencies = [MemoryDep('arg426_1', c1, {c0: 4096, c1: 1024}, None)]
op679.outputs = [
    buf679: ComputedBuffer
    buf679.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf679.users = [NodeUser(node=SchedulerNode(name='op682'), can_inplace=False, is_weak=False)]
]
op679.group.device = cuda:0
op679.group.iteration = (4096, 1024)
op679.sizes = ([4096], [1024])
buf661_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf678_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg426_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf679_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op679_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf661', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf678', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg426_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf679', get_index_3, getitem)
        return store_reduction
op679 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op680: SchedulerNode(ComputedBuffer)
op680.writes = [MemoryDep('buf680', c0, {c0: 4096}, None)]
op680.unmet_dependencies = 
    [   MemoryDep('buf661', c0, {c0: 4194304}, None),
        MemoryDep('buf678', c0, {c0: 4194304}, None)]
op680.met_dependencies = [MemoryDep('arg426_1', c1, {c0: 4096, c1: 1024}, None)]
op680.outputs = [
    buf680: ComputedBuffer
    buf680.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf680.users = [NodeUser(node=SchedulerNode(name='op682'), can_inplace=False, is_weak=False)]
]
op680.group.device = cuda:0
op680.group.iteration = (4096, 1024)
op680.sizes = ([4096], [1024])
buf661_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf678_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg426_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf680_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op680_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf661', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf678', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg426_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf680', get_index_3, getitem_1)
        return store_reduction
op680 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op682: SchedulerNode(ComputedBuffer)
op682.writes = [MemoryDep('buf682', c0, {c0: 4194304}, None)]
op682.unmet_dependencies = 
    [   MemoryDep('buf661', c0, {c0: 4194304}, None),
        MemoryDep('buf678', c0, {c0: 4194304}, None),
        MemoryDep('buf679', c0, {c0: 4096}, None),
        MemoryDep('buf680', c0, {c0: 4096}, None)]
op682.met_dependencies = 
    [   MemoryDep('arg426_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg427_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg428_1', c1, {c0: 4096, c1: 1024}, None)]
op682.outputs = [
    buf682: ComputedBuffer
    buf682.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf682.users = [NodeUser(node=ExternKernelSchedulerNode(name='op683'), can_inplace=False, is_weak=False)]
]
op682.group.device = cuda:0
op682.group.iteration = (4194304, 1)
op682.sizes = ([4096, 1024], [])
buf661_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf678_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg426_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf679_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf680_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg427_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg428_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf682_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op682_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf661', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf678', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg426_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf679', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf680', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg427_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg428_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf682', get_index_7, add_3, None)
        return store
op682 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op683: ExternKernelSchedulerNode(ExternKernelOut)
op683.writes = [StarDep(name='buf683', mode=None)]
op683.unmet_dependencies = [StarDep(name='buf682', mode=None)]
op683.met_dependencies = [StarDep(name='arg429_1', mode=None)]
op683.outputs = [
    buf683: ExternKernelOut
    buf683.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf683.users = [NodeUser(node=SchedulerNode(name='op684'), can_inplace=True, is_weak=False)]
]
op683.node.kernel = extern_kernels.mm


op684: SchedulerNode(ComputedBuffer)
op684.writes = [MemoryDep('buf684', c0, {c0: 16777216}, None)]
op684.unmet_dependencies = [MemoryDep('buf683', c0, {c0: 16777216}, None)]
op684.met_dependencies = [MemoryDep('arg430_1', c1, {c0: 4096, c1: 4096}, None)]
op684.outputs = [
    buf684: ComputedBuffer
    buf684.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf684.users = [NodeUser(node=ExternKernelSchedulerNode(name='op685'), can_inplace=False, is_weak=False)]
]
op684.group.device = cuda:0
op684.group.iteration = (16777216, 1)
op684.sizes = ([4096, 4096], [])
buf683_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg430_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf684_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op684_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf683', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg430_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf683', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg430_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf684', get_index_4, mul_2, None)
        return store
op684 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op685: ExternKernelSchedulerNode(ExternKernelOut)
op685.writes = [StarDep(name='buf685', mode=None)]
op685.unmet_dependencies = [StarDep(name='buf684', mode=None)]
op685.met_dependencies = [StarDep(name='arg431_1', mode=None)]
op685.outputs = [
    buf685: ExternKernelOut
    buf685.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf685.users = [NodeUser(node=SchedulerNode(name='op686'), can_inplace=True, is_weak=False)]
]
op685.node.kernel = extern_kernels.mm


op686: SchedulerNode(ComputedBuffer)
op686.writes = [MemoryDep('buf686', c0, {c0: 4194304}, None)]
op686.unmet_dependencies = 
    [   MemoryDep('buf661', c0, {c0: 4194304}, None),
        MemoryDep('buf678', c0, {c0: 4194304}, None),
        MemoryDep('buf685', c0, {c0: 4194304}, None)]
op686.met_dependencies = 
    [   MemoryDep('arg426_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg432_1', c1, {c0: 4096, c1: 1024}, None)]
op686.outputs = [
    buf686: ComputedBuffer
    buf686.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf686.users = [
        NodeUser(node=SchedulerNode(name='op687'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op688'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op689'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op690'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op704'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op705'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op706'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op707'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op721'), can_inplace=True, is_weak=False),
    ]
]
op686.group.device = cuda:0
op686.group.iteration = (4194304, 1)
op686.sizes = ([4096, 1024], [])
buf661_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf678_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg426_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf685_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg432_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf686_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op686_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf661', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf678', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg426_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf685', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg432_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf686', get_index_5, add_3, None)
        return store
op686 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op687: SchedulerNode(ComputedBuffer)
op687.writes = [MemoryDep('buf687', c0, {c0: 4096}, None)]
op687.unmet_dependencies = [MemoryDep('buf686', c0, {c0: 4194304}, None)]
op687.met_dependencies = []
op687.outputs = [
    buf687: ComputedBuffer
    buf687.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf687.users = [NodeUser(node=SchedulerNode(name='op690'), can_inplace=False, is_weak=False)]
]
op687.group.device = cuda:0
op687.group.iteration = (4096, 1024)
op687.sizes = ([4096], [1024])
buf686_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf687_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op687_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf686', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf687', get_index_1, getitem)
        return store_reduction
op687 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op688: SchedulerNode(ComputedBuffer)
op688.writes = [MemoryDep('buf688', c0, {c0: 4096}, None)]
op688.unmet_dependencies = [MemoryDep('buf686', c0, {c0: 4194304}, None)]
op688.met_dependencies = []
op688.outputs = [
    buf688: ComputedBuffer
    buf688.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf688.users = [NodeUser(node=SchedulerNode(name='op690'), can_inplace=False, is_weak=False)]
]
op688.group.device = cuda:0
op688.group.iteration = (4096, 1024)
op688.sizes = ([4096], [1024])
buf686_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf688_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op688_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf686', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf688', get_index_1, getitem_1)
        return store_reduction
op688 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op690: SchedulerNode(ComputedBuffer)
op690.writes = [MemoryDep('buf690', c0, {c0: 4194304}, None)]
op690.unmet_dependencies = 
    [   MemoryDep('buf686', c0, {c0: 4194304}, None),
        MemoryDep('buf687', c0, {c0: 4096}, None),
        MemoryDep('buf688', c0, {c0: 4096}, None)]
op690.met_dependencies = 
    [   MemoryDep('arg433_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg434_1', c1, {c0: 4096, c1: 1024}, None)]
op690.outputs = [
    buf690: ComputedBuffer
    buf690.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf690.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op691'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op692'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op698'), can_inplace=False, is_weak=False),
    ]
]
op690.group.device = cuda:0
op690.group.iteration = (4194304, 1)
op690.sizes = ([4096, 1024], [])
buf686_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf687_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf688_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg433_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg434_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf690_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op690_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf686', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf687', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf688', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg433_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg434_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf690', get_index_5, add_1, None)
        return store
op690 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op691: ExternKernelSchedulerNode(ExternKernelOut)
op691.writes = [StarDep(name='buf691', mode=None)]
op691.unmet_dependencies = [StarDep(name='buf690', mode=None)]
op691.met_dependencies = [StarDep(name='arg435_1', mode=None)]
op691.outputs = [
    buf691: ExternKernelOut
    buf691.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf691.users = [NodeUser(node=SchedulerNode(name='op693'), can_inplace=False, is_weak=False)]
]
op691.node.kernel = extern_kernels.mm


op692: ExternKernelSchedulerNode(ExternKernelOut)
op692.writes = [StarDep(name='buf692', mode=None)]
op692.unmet_dependencies = [StarDep(name='buf690', mode=None)]
op692.met_dependencies = [StarDep(name='arg437_1', mode=None)]
op692.outputs = [
    buf692: ExternKernelOut
    buf692.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf692.users = [NodeUser(node=SchedulerNode(name='op694'), can_inplace=False, is_weak=False)]
]
op692.node.kernel = extern_kernels.mm


op693: SchedulerNode(ComputedBuffer)
op693.writes = [MemoryDep('buf693', c0, {c0: 4194304}, None)]
op693.unmet_dependencies = [   MemoryDep('buf691', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op693.met_dependencies = [MemoryDep('arg436_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op693.outputs = [
    buf693: ComputedBuffer
    buf693.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf693.users = [NodeUser(node=ExternKernelSchedulerNode(name='op695'), can_inplace=False, is_weak=False)]
]
op693.group.device = cuda:0
op693.group.iteration = (4194304, 1)
op693.sizes = ([32, 16, 128, 64], [])
buf691_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg436_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf693_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op693_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf691', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg436_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf693', get_index_2, mul, None)
        return store
op693 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op694: SchedulerNode(ComputedBuffer)
op694.writes = [MemoryDep('buf694', c0, {c0: 4194304}, None)]
op694.unmet_dependencies = [   MemoryDep('buf692', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op694.met_dependencies = [MemoryDep('arg438_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op694.outputs = [
    buf694: ComputedBuffer
    buf694.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf694.users = [NodeUser(node=ExternKernelSchedulerNode(name='op695'), can_inplace=False, is_weak=False)]
]
op694.group.device = cuda:0
op694.group.iteration = (4194304, 1)
op694.sizes = ([32, 16, 128, 64], [])
buf692_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg438_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf694_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op694_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf692', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg438_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf694', get_index_2, add, None)
        return store
op694 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op695: ExternKernelSchedulerNode(ExternKernelOut)
op695.writes = [StarDep(name='buf695', mode=None)]
op695.unmet_dependencies = [StarDep(name='buf693', mode=None), StarDep(name='buf694', mode=None)]
op695.met_dependencies = []
op695.outputs = [
    buf695: ExternKernelOut
    buf695.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf695.users = [
        NodeUser(node=SchedulerNode(name='op696'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op697'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op699'), can_inplace=True, is_weak=False),
    ]
]
op695.node.kernel = extern_kernels.bmm


op696: SchedulerNode(ComputedBuffer)
op696.writes = [MemoryDep('buf696', c0, {c0: 65536}, None)]
op696.unmet_dependencies = [MemoryDep('buf695', c0, {c0: 8388608}, None)]
op696.met_dependencies = []
op696.outputs = [
    buf696: ComputedBuffer
    buf696.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf696.users = [
        NodeUser(node=SchedulerNode(name='op697'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op699'), can_inplace=False, is_weak=False),
    ]
]
op696.group.device = cuda:0
op696.group.iteration = (65536, 128)
op696.sizes = ([512, 128], [128])
buf695_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf696_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op696_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf695', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf696', get_index_3, reduction)
        return store_reduction
op696 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)


op697: SchedulerNode(ComputedBuffer)
op697.writes = [MemoryDep('buf697', c0, {c0: 65536}, None)]
op697.unmet_dependencies = 
    [   MemoryDep('buf695', c0, {c0: 8388608}, None),
        MemoryDep('buf696', c0, {c0: 65536}, None)]
op697.met_dependencies = []
op697.outputs = [
    buf697: ComputedBuffer
    buf697.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf697.users = [NodeUser(node=SchedulerNode(name='op699'), can_inplace=False, is_weak=False)]
]
op697.group.device = cuda:0
op697.group.iteration = (65536, 128)
op697.sizes = ([512, 128], [128])
buf695_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf696_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf697_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op697_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf695', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf696', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf697', get_index_4, reduction)
        return store_reduction
op697 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op698: ExternKernelSchedulerNode(ExternKernelOut)
op698.writes = [StarDep(name='buf698', mode=None)]
op698.unmet_dependencies = [StarDep(name='buf690', mode=None)]
op698.met_dependencies = [StarDep(name='arg439_1', mode=None)]
op698.outputs = [
    buf698: ExternKernelOut
    buf698.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf698.users = [NodeUser(node=SchedulerNode(name='op700'), can_inplace=False, is_weak=False)]
]
op698.node.kernel = extern_kernels.mm


op699: SchedulerNode(ComputedBuffer)
op699.writes = [MemoryDep('buf699', c0, {c0: 8388608}, None)]
op699.unmet_dependencies = 
    [   MemoryDep('buf695', c0, {c0: 8388608}, None),
        MemoryDep('buf696', c0, {c0: 65536}, None),
        MemoryDep('buf697', c0, {c0: 65536}, None)]
op699.met_dependencies = []
op699.outputs = [
    buf699: ComputedBuffer
    buf699.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf699.users = [NodeUser(node=ExternKernelSchedulerNode(name='op701'), can_inplace=False, is_weak=False)]
]
op699.group.device = cuda:0
op699.group.iteration = (8388608, 1)
op699.sizes = ([512, 128, 128], [])
buf695_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf696_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf697_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf699_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op699_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf695', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf696', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf697', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf699', get_index_5, truediv, None)
        return store
op699 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)


op700: SchedulerNode(ComputedBuffer)
op700.writes = [MemoryDep('buf700', c0, {c0: 4194304}, None)]
op700.unmet_dependencies = [   MemoryDep('buf698', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op700.met_dependencies = [MemoryDep('arg440_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op700.outputs = [
    buf700: ComputedBuffer
    buf700.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf700.users = [NodeUser(node=ExternKernelSchedulerNode(name='op701'), can_inplace=False, is_weak=False)]
]
op700.group.device = cuda:0
op700.group.iteration = (4194304, 1)
op700.sizes = ([32, 16, 128, 64], [])
buf698_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg440_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf700_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op700_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf698', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg440_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf700', get_index_2, add, None)
        return store
op700 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op701: ExternKernelSchedulerNode(ExternKernelOut)
op701.writes = [StarDep(name='buf701', mode=None)]
op701.unmet_dependencies = [StarDep(name='buf699', mode=None), StarDep(name='buf700', mode=None)]
op701.met_dependencies = []
op701.outputs = [
    buf701: ExternKernelOut
    buf701.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf701.users = [NodeUser(node=SchedulerNode(name='op702'), can_inplace=False, is_weak=False)]
]
op701.node.kernel = extern_kernels.bmm


op702: SchedulerNode(ComputedBuffer)
op702.writes = [MemoryDep('buf702', c0, {c0: 4194304}, None)]
op702.unmet_dependencies = [   MemoryDep('buf701', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op702.met_dependencies = []
op702.outputs = [
    buf702: ComputedBuffer
    buf702.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf702.users = [NodeUser(node=ExternKernelSchedulerNode(name='op703'), can_inplace=False, is_weak=False)]
]
op702.group.device = cuda:0
op702.group.iteration = (4194304, 1)
op702.sizes = ([32, 128, 16, 64], [])
buf701_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf702_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op702_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf701', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf702', get_index_1, load, None)
        return store
op702 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op703: ExternKernelSchedulerNode(ExternKernelOut)
op703.writes = [StarDep(name='buf703', mode=None)]
op703.unmet_dependencies = [StarDep(name='buf702', mode=None)]
op703.met_dependencies = [StarDep(name='arg441_1', mode=None)]
op703.outputs = [
    buf703: ExternKernelOut
    buf703.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf703.users = [
        NodeUser(node=SchedulerNode(name='op704'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op705'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op706'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op707'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op721'), can_inplace=True, is_weak=False),
    ]
]
op703.node.kernel = extern_kernels.mm


op704: SchedulerNode(ComputedBuffer)
op704.writes = [MemoryDep('buf704', c0, {c0: 4096}, None)]
op704.unmet_dependencies = 
    [   MemoryDep('buf686', c0, {c0: 4194304}, None),
        MemoryDep('buf703', c0, {c0: 4194304}, None)]
op704.met_dependencies = [MemoryDep('arg442_1', c1, {c0: 4096, c1: 1024}, None)]
op704.outputs = [
    buf704: ComputedBuffer
    buf704.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf704.users = [NodeUser(node=SchedulerNode(name='op707'), can_inplace=False, is_weak=False)]
]
op704.group.device = cuda:0
op704.group.iteration = (4096, 1024)
op704.sizes = ([4096], [1024])
buf686_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf703_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg442_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf704_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op704_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf686', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf703', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg442_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf704', get_index_3, getitem)
        return store_reduction
op704 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op705: SchedulerNode(ComputedBuffer)
op705.writes = [MemoryDep('buf705', c0, {c0: 4096}, None)]
op705.unmet_dependencies = 
    [   MemoryDep('buf686', c0, {c0: 4194304}, None),
        MemoryDep('buf703', c0, {c0: 4194304}, None)]
op705.met_dependencies = [MemoryDep('arg442_1', c1, {c0: 4096, c1: 1024}, None)]
op705.outputs = [
    buf705: ComputedBuffer
    buf705.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf705.users = [NodeUser(node=SchedulerNode(name='op707'), can_inplace=False, is_weak=False)]
]
op705.group.device = cuda:0
op705.group.iteration = (4096, 1024)
op705.sizes = ([4096], [1024])
buf686_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf703_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg442_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf705_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op705_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf686', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf703', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg442_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf705', get_index_3, getitem_1)
        return store_reduction
op705 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op707: SchedulerNode(ComputedBuffer)
op707.writes = [MemoryDep('buf707', c0, {c0: 4194304}, None)]
op707.unmet_dependencies = 
    [   MemoryDep('buf686', c0, {c0: 4194304}, None),
        MemoryDep('buf703', c0, {c0: 4194304}, None),
        MemoryDep('buf704', c0, {c0: 4096}, None),
        MemoryDep('buf705', c0, {c0: 4096}, None)]
op707.met_dependencies = 
    [   MemoryDep('arg442_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg443_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg444_1', c1, {c0: 4096, c1: 1024}, None)]
op707.outputs = [
    buf707: ComputedBuffer
    buf707.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf707.users = [NodeUser(node=ExternKernelSchedulerNode(name='op708'), can_inplace=False, is_weak=False)]
]
op707.group.device = cuda:0
op707.group.iteration = (4194304, 1)
op707.sizes = ([4096, 1024], [])
buf686_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf703_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg442_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf704_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf705_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg443_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg444_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf707_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op707_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf686', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf703', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg442_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf704', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf705', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg443_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg444_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf707', get_index_7, add_3, None)
        return store
op707 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op708: ExternKernelSchedulerNode(ExternKernelOut)
op708.writes = [StarDep(name='buf708', mode=None)]
op708.unmet_dependencies = [StarDep(name='buf707', mode=None)]
op708.met_dependencies = [StarDep(name='arg445_1', mode=None)]
op708.outputs = [
    buf708: ExternKernelOut
    buf708.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf708.users = [NodeUser(node=SchedulerNode(name='op711'), can_inplace=False, is_weak=False)]
]
op708.node.kernel = extern_kernels.mm


op709: ExternKernelSchedulerNode(ExternKernelOut)
op709.writes = [StarDep(name='buf709', mode=None)]
op709.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op709.met_dependencies = [StarDep(name='arg447_1', mode=None)]
op709.outputs = [
    buf709: ExternKernelOut
    buf709.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf709.users = [NodeUser(node=SchedulerNode(name='op712'), can_inplace=False, is_weak=False)]
]
op709.node.kernel = extern_kernels.mm


op710: ExternKernelSchedulerNode(ExternKernelOut)
op710.writes = [StarDep(name='buf710', mode=None)]
op710.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op710.met_dependencies = [StarDep(name='arg449_1', mode=None)]
op710.outputs = [
    buf710: ExternKernelOut
    buf710.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf710.users = [NodeUser(node=SchedulerNode(name='op713'), can_inplace=False, is_weak=False)]
]
op710.node.kernel = extern_kernels.mm


op711: SchedulerNode(ComputedBuffer)
op711.writes = [MemoryDep('buf711', c0, {c0: 4194304}, None)]
op711.unmet_dependencies = [   MemoryDep('buf708', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op711.met_dependencies = [   MemoryDep('arg446_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op711.outputs = [
    buf711: ComputedBuffer
    buf711.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf711.users = [NodeUser(node=ExternKernelSchedulerNode(name='op714'), can_inplace=False, is_weak=False)]
]
op711.group.device = cuda:0
op711.group.iteration = (4194304, 1)
op711.sizes = ([512, 128, 64], [])
buf708_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg446_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf711_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op711_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf708', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg446_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf711', get_index_2, mul, None)
        return store
op711 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op712: SchedulerNode(ComputedBuffer)
op712.writes = [MemoryDep('buf712', c0, {c0: 4194304}, None)]
op712.unmet_dependencies = [   MemoryDep('buf709', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op712.met_dependencies = [   MemoryDep('arg448_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op712.outputs = [
    buf712: ComputedBuffer
    buf712.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf712.users = [NodeUser(node=ExternKernelSchedulerNode(name='op714'), can_inplace=False, is_weak=False)]
]
op712.group.device = cuda:0
op712.group.iteration = (4194304, 1)
op712.sizes = ([512, 128, 64], [])
buf709_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg448_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf712_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op712_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf709', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg448_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf712', get_index_2, add, None)
        return store
op712 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op713: SchedulerNode(ComputedBuffer)
op713.writes = [MemoryDep('buf713', c0, {c0: 4194304}, None)]
op713.unmet_dependencies = [   MemoryDep('buf710', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op713.met_dependencies = [   MemoryDep('arg450_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op713.outputs = [
    buf713: ComputedBuffer
    buf713.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf713.users = [NodeUser(node=ExternKernelSchedulerNode(name='op714'), can_inplace=False, is_weak=False)]
]
op713.group.device = cuda:0
op713.group.iteration = (4194304, 1)
op713.sizes = ([512, 128, 64], [])
buf710_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg450_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf713_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op713_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf710', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg450_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf713', get_index_2, add, None)
        return store
op713 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op714: ExternKernelSchedulerNode(FallbackKernel)
op714.writes = [StarDep(name='buf714', mode=None)]
op714.unmet_dependencies = 
    [   StarDep(name='buf711', mode=None),
        StarDep(name='buf712', mode=None),
        StarDep(name='buf713', mode=None)]
op714.met_dependencies = []
op714.outputs = [
    buf714: FallbackKernel
    buf714.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf714.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op715'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op716'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op717'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op718'), can_inplace=False, is_weak=False),
    ]
]
op714.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op715: ExternKernelSchedulerNode(MultiOutput)
op715.writes = [StarDep(name='buf715', mode=None)]
op715.unmet_dependencies = [StarDep(name='buf714', mode=None)]
op715.met_dependencies = []
op715.outputs = [
    buf715: MultiOutput
    buf715.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf715.users = [NodeUser(node=SchedulerNode(name='op719'), can_inplace=False, is_weak=False)]
]
op715.node.kernel = None


op719: SchedulerNode(ComputedBuffer)
op719.writes = [MemoryDep('buf719', c0, {c0: 4194304}, None)]
op719.unmet_dependencies = [   MemoryDep('buf715', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op719.met_dependencies = []
op719.outputs = [
    buf719: ComputedBuffer
    buf719.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf719.users = [NodeUser(node=ExternKernelSchedulerNode(name='op720'), can_inplace=False, is_weak=False)]
]
op719.group.device = cuda:0
op719.group.iteration = (4194304, 1)
op719.sizes = ([32, 128, 1024], [])
buf715_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf719_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op719_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf715', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf719', get_index_1, load, None)
        return store
op719 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op720: ExternKernelSchedulerNode(ExternKernelOut)
op720.writes = [StarDep(name='buf720', mode=None)]
op720.unmet_dependencies = [StarDep(name='buf719', mode=None)]
op720.met_dependencies = [StarDep(name='arg451_1', mode=None)]
op720.outputs = [
    buf720: ExternKernelOut
    buf720.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf720.users = [NodeUser(node=SchedulerNode(name='op721'), can_inplace=True, is_weak=False)]
]
op720.node.kernel = extern_kernels.mm


op721: SchedulerNode(ComputedBuffer)
op721.writes = [MemoryDep('buf721', c0, {c0: 4194304}, None)]
op721.unmet_dependencies = 
    [   MemoryDep('buf686', c0, {c0: 4194304}, None),
        MemoryDep('buf703', c0, {c0: 4194304}, None),
        MemoryDep('buf720', c0, {c0: 4194304}, None)]
op721.met_dependencies = 
    [   MemoryDep('arg442_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg452_1', c1, {c0: 4096, c1: 1024}, None)]
op721.outputs = [
    buf721: ComputedBuffer
    buf721.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf721.users = [
        NodeUser(node=SchedulerNode(name='op722'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op723'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op724'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op725'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op729'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op730'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op731'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op732'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op746'), can_inplace=True, is_weak=False),
    ]
]
op721.group.device = cuda:0
op721.group.iteration = (4194304, 1)
op721.sizes = ([4096, 1024], [])
buf686_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf703_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg442_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf720_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg452_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf721_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op721_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf686', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf703', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg442_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf720', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg452_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf721', get_index_5, add_3, None)
        return store
op721 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op722: SchedulerNode(ComputedBuffer)
op722.writes = [MemoryDep('buf722', c0, {c0: 4096}, None)]
op722.unmet_dependencies = [MemoryDep('buf721', c0, {c0: 4194304}, None)]
op722.met_dependencies = []
op722.outputs = [
    buf722: ComputedBuffer
    buf722.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf722.users = [NodeUser(node=SchedulerNode(name='op725'), can_inplace=False, is_weak=False)]
]
op722.group.device = cuda:0
op722.group.iteration = (4096, 1024)
op722.sizes = ([4096], [1024])
buf721_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf722_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op722_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf721', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf722', get_index_1, getitem)
        return store_reduction
op722 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op723: SchedulerNode(ComputedBuffer)
op723.writes = [MemoryDep('buf723', c0, {c0: 4096}, None)]
op723.unmet_dependencies = [MemoryDep('buf721', c0, {c0: 4194304}, None)]
op723.met_dependencies = []
op723.outputs = [
    buf723: ComputedBuffer
    buf723.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf723.users = [NodeUser(node=SchedulerNode(name='op725'), can_inplace=False, is_weak=False)]
]
op723.group.device = cuda:0
op723.group.iteration = (4096, 1024)
op723.sizes = ([4096], [1024])
buf721_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf723_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op723_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf721', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf723', get_index_1, getitem_1)
        return store_reduction
op723 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op725: SchedulerNode(ComputedBuffer)
op725.writes = [MemoryDep('buf725', c0, {c0: 4194304}, None)]
op725.unmet_dependencies = 
    [   MemoryDep('buf721', c0, {c0: 4194304}, None),
        MemoryDep('buf722', c0, {c0: 4096}, None),
        MemoryDep('buf723', c0, {c0: 4096}, None)]
op725.met_dependencies = 
    [   MemoryDep('arg453_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg454_1', c1, {c0: 4096, c1: 1024}, None)]
op725.outputs = [
    buf725: ComputedBuffer
    buf725.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf725.users = [NodeUser(node=ExternKernelSchedulerNode(name='op726'), can_inplace=False, is_weak=False)]
]
op725.group.device = cuda:0
op725.group.iteration = (4194304, 1)
op725.sizes = ([4096, 1024], [])
buf721_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf722_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf723_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg453_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg454_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf725_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op725_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf721', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf722', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf723', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg453_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg454_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf725', get_index_5, add_1, None)
        return store
op725 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op726: ExternKernelSchedulerNode(ExternKernelOut)
op726.writes = [StarDep(name='buf726', mode=None)]
op726.unmet_dependencies = [StarDep(name='buf725', mode=None)]
op726.met_dependencies = [StarDep(name='arg455_1', mode=None)]
op726.outputs = [
    buf726: ExternKernelOut
    buf726.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf726.users = [NodeUser(node=SchedulerNode(name='op727'), can_inplace=True, is_weak=False)]
]
op726.node.kernel = extern_kernels.mm


op727: SchedulerNode(ComputedBuffer)
op727.writes = [MemoryDep('buf727', c0, {c0: 16777216}, None)]
op727.unmet_dependencies = [MemoryDep('buf726', c0, {c0: 16777216}, None)]
op727.met_dependencies = [MemoryDep('arg456_1', c1, {c0: 4096, c1: 4096}, None)]
op727.outputs = [
    buf727: ComputedBuffer
    buf727.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf727.users = [NodeUser(node=ExternKernelSchedulerNode(name='op728'), can_inplace=False, is_weak=False)]
]
op727.group.device = cuda:0
op727.group.iteration = (16777216, 1)
op727.sizes = ([4096, 4096], [])
buf726_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg456_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf727_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op727_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf726', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg456_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf726', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg456_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf727', get_index_4, mul_2, None)
        return store
op727 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op728: ExternKernelSchedulerNode(ExternKernelOut)
op728.writes = [StarDep(name='buf728', mode=None)]
op728.unmet_dependencies = [StarDep(name='buf727', mode=None)]
op728.met_dependencies = [StarDep(name='arg457_1', mode=None)]
op728.outputs = [
    buf728: ExternKernelOut
    buf728.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf728.users = [
        NodeUser(node=SchedulerNode(name='op729'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op730'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op731'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op732'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op746'), can_inplace=True, is_weak=False),
    ]
]
op728.node.kernel = extern_kernels.mm


op729: SchedulerNode(ComputedBuffer)
op729.writes = [MemoryDep('buf729', c0, {c0: 4096}, None)]
op729.unmet_dependencies = 
    [   MemoryDep('buf721', c0, {c0: 4194304}, None),
        MemoryDep('buf728', c0, {c0: 4194304}, None)]
op729.met_dependencies = [MemoryDep('arg458_1', c1, {c0: 4096, c1: 1024}, None)]
op729.outputs = [
    buf729: ComputedBuffer
    buf729.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf729.users = [NodeUser(node=SchedulerNode(name='op732'), can_inplace=False, is_weak=False)]
]
op729.group.device = cuda:0
op729.group.iteration = (4096, 1024)
op729.sizes = ([4096], [1024])
buf721_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf728_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg458_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf729_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op729_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf721', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf728', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg458_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf729', get_index_3, getitem)
        return store_reduction
op729 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op730: SchedulerNode(ComputedBuffer)
op730.writes = [MemoryDep('buf730', c0, {c0: 4096}, None)]
op730.unmet_dependencies = 
    [   MemoryDep('buf721', c0, {c0: 4194304}, None),
        MemoryDep('buf728', c0, {c0: 4194304}, None)]
op730.met_dependencies = [MemoryDep('arg458_1', c1, {c0: 4096, c1: 1024}, None)]
op730.outputs = [
    buf730: ComputedBuffer
    buf730.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf730.users = [NodeUser(node=SchedulerNode(name='op732'), can_inplace=False, is_weak=False)]
]
op730.group.device = cuda:0
op730.group.iteration = (4096, 1024)
op730.sizes = ([4096], [1024])
buf721_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf728_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg458_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf730_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op730_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf721', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf728', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg458_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf730', get_index_3, getitem_1)
        return store_reduction
op730 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op732: SchedulerNode(ComputedBuffer)
op732.writes = [MemoryDep('buf732', c0, {c0: 4194304}, None)]
op732.unmet_dependencies = 
    [   MemoryDep('buf721', c0, {c0: 4194304}, None),
        MemoryDep('buf728', c0, {c0: 4194304}, None),
        MemoryDep('buf729', c0, {c0: 4096}, None),
        MemoryDep('buf730', c0, {c0: 4096}, None)]
op732.met_dependencies = 
    [   MemoryDep('arg458_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg459_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg460_1', c1, {c0: 4096, c1: 1024}, None)]
op732.outputs = [
    buf732: ComputedBuffer
    buf732.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf732.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op733'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op734'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op740'), can_inplace=False, is_weak=False),
    ]
]
op732.group.device = cuda:0
op732.group.iteration = (4194304, 1)
op732.sizes = ([4096, 1024], [])
buf721_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf728_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg458_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf729_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf730_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg459_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg460_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf732_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op732_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf721', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf728', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg458_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf729', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf730', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg459_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg460_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf732', get_index_7, add_3, None)
        return store
op732 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op733: ExternKernelSchedulerNode(ExternKernelOut)
op733.writes = [StarDep(name='buf733', mode=None)]
op733.unmet_dependencies = [StarDep(name='buf732', mode=None)]
op733.met_dependencies = [StarDep(name='arg461_1', mode=None)]
op733.outputs = [
    buf733: ExternKernelOut
    buf733.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf733.users = [NodeUser(node=SchedulerNode(name='op735'), can_inplace=False, is_weak=False)]
]
op733.node.kernel = extern_kernels.mm


op734: ExternKernelSchedulerNode(ExternKernelOut)
op734.writes = [StarDep(name='buf734', mode=None)]
op734.unmet_dependencies = [StarDep(name='buf732', mode=None)]
op734.met_dependencies = [StarDep(name='arg463_1', mode=None)]
op734.outputs = [
    buf734: ExternKernelOut
    buf734.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf734.users = [NodeUser(node=SchedulerNode(name='op736'), can_inplace=False, is_weak=False)]
]
op734.node.kernel = extern_kernels.mm


op735: SchedulerNode(ComputedBuffer)
op735.writes = [MemoryDep('buf735', c0, {c0: 4194304}, None)]
op735.unmet_dependencies = [   MemoryDep('buf733', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op735.met_dependencies = [MemoryDep('arg462_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op735.outputs = [
    buf735: ComputedBuffer
    buf735.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf735.users = [NodeUser(node=ExternKernelSchedulerNode(name='op737'), can_inplace=False, is_weak=False)]
]
op735.group.device = cuda:0
op735.group.iteration = (4194304, 1)
op735.sizes = ([32, 16, 128, 64], [])
buf733_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg462_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf735_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op735_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf733', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg462_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf735', get_index_2, mul, None)
        return store
op735 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op736: SchedulerNode(ComputedBuffer)
op736.writes = [MemoryDep('buf736', c0, {c0: 4194304}, None)]
op736.unmet_dependencies = [   MemoryDep('buf734', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op736.met_dependencies = [MemoryDep('arg464_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op736.outputs = [
    buf736: ComputedBuffer
    buf736.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf736.users = [NodeUser(node=ExternKernelSchedulerNode(name='op737'), can_inplace=False, is_weak=False)]
]
op736.group.device = cuda:0
op736.group.iteration = (4194304, 1)
op736.sizes = ([32, 16, 128, 64], [])
buf734_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg464_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf736_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op736_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf734', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg464_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf736', get_index_2, add, None)
        return store
op736 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op737: ExternKernelSchedulerNode(ExternKernelOut)
op737.writes = [StarDep(name='buf737', mode=None)]
op737.unmet_dependencies = [StarDep(name='buf735', mode=None), StarDep(name='buf736', mode=None)]
op737.met_dependencies = []
op737.outputs = [
    buf737: ExternKernelOut
    buf737.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf737.users = [
        NodeUser(node=SchedulerNode(name='op738'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op739'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op741'), can_inplace=True, is_weak=False),
    ]
]
op737.node.kernel = extern_kernels.bmm


op738: SchedulerNode(ComputedBuffer)
op738.writes = [MemoryDep('buf738', c0, {c0: 65536}, None)]
op738.unmet_dependencies = [MemoryDep('buf737', c0, {c0: 8388608}, None)]
op738.met_dependencies = []
op738.outputs = [
    buf738: ComputedBuffer
    buf738.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf738.users = [
        NodeUser(node=SchedulerNode(name='op739'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op741'), can_inplace=False, is_weak=False),
    ]
]
op738.group.device = cuda:0
op738.group.iteration = (65536, 128)
op738.sizes = ([512, 128], [128])
buf737_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf738_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op738_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf737', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf738', get_index_3, reduction)
        return store_reduction
op738 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)


op739: SchedulerNode(ComputedBuffer)
op739.writes = [MemoryDep('buf739', c0, {c0: 65536}, None)]
op739.unmet_dependencies = 
    [   MemoryDep('buf737', c0, {c0: 8388608}, None),
        MemoryDep('buf738', c0, {c0: 65536}, None)]
op739.met_dependencies = []
op739.outputs = [
    buf739: ComputedBuffer
    buf739.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf739.users = [NodeUser(node=SchedulerNode(name='op741'), can_inplace=False, is_weak=False)]
]
op739.group.device = cuda:0
op739.group.iteration = (65536, 128)
op739.sizes = ([512, 128], [128])
buf737_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf738_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf739_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op739_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf737', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf738', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf739', get_index_4, reduction)
        return store_reduction
op739 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op740: ExternKernelSchedulerNode(ExternKernelOut)
op740.writes = [StarDep(name='buf740', mode=None)]
op740.unmet_dependencies = [StarDep(name='buf732', mode=None)]
op740.met_dependencies = [StarDep(name='arg465_1', mode=None)]
op740.outputs = [
    buf740: ExternKernelOut
    buf740.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf740.users = [NodeUser(node=SchedulerNode(name='op742'), can_inplace=False, is_weak=False)]
]
op740.node.kernel = extern_kernels.mm


op741: SchedulerNode(ComputedBuffer)
op741.writes = [MemoryDep('buf741', c0, {c0: 8388608}, None)]
op741.unmet_dependencies = 
    [   MemoryDep('buf737', c0, {c0: 8388608}, None),
        MemoryDep('buf738', c0, {c0: 65536}, None),
        MemoryDep('buf739', c0, {c0: 65536}, None)]
op741.met_dependencies = []
op741.outputs = [
    buf741: ComputedBuffer
    buf741.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf741.users = [NodeUser(node=ExternKernelSchedulerNode(name='op743'), can_inplace=False, is_weak=False)]
]
op741.group.device = cuda:0
op741.group.iteration = (8388608, 1)
op741.sizes = ([512, 128, 128], [])
buf737_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf738_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf739_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf741_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op741_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf737', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf738', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf739', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf741', get_index_5, truediv, None)
        return store
op741 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)


op742: SchedulerNode(ComputedBuffer)
op742.writes = [MemoryDep('buf742', c0, {c0: 4194304}, None)]
op742.unmet_dependencies = [   MemoryDep('buf740', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op742.met_dependencies = [MemoryDep('arg466_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op742.outputs = [
    buf742: ComputedBuffer
    buf742.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf742.users = [NodeUser(node=ExternKernelSchedulerNode(name='op743'), can_inplace=False, is_weak=False)]
]
op742.group.device = cuda:0
op742.group.iteration = (4194304, 1)
op742.sizes = ([32, 16, 128, 64], [])
buf740_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg466_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf742_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op742_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf740', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg466_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf742', get_index_2, add, None)
        return store
op742 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op743: ExternKernelSchedulerNode(ExternKernelOut)
op743.writes = [StarDep(name='buf743', mode=None)]
op743.unmet_dependencies = [StarDep(name='buf741', mode=None), StarDep(name='buf742', mode=None)]
op743.met_dependencies = []
op743.outputs = [
    buf743: ExternKernelOut
    buf743.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf743.users = [NodeUser(node=SchedulerNode(name='op744'), can_inplace=False, is_weak=False)]
]
op743.node.kernel = extern_kernels.bmm


op744: SchedulerNode(ComputedBuffer)
op744.writes = [MemoryDep('buf744', c0, {c0: 4194304}, None)]
op744.unmet_dependencies = [   MemoryDep('buf743', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op744.met_dependencies = []
op744.outputs = [
    buf744: ComputedBuffer
    buf744.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf744.users = [NodeUser(node=ExternKernelSchedulerNode(name='op745'), can_inplace=False, is_weak=False)]
]
op744.group.device = cuda:0
op744.group.iteration = (4194304, 1)
op744.sizes = ([32, 128, 16, 64], [])
buf743_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf744_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op744_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf743', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf744', get_index_1, load, None)
        return store
op744 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op745: ExternKernelSchedulerNode(ExternKernelOut)
op745.writes = [StarDep(name='buf745', mode=None)]
op745.unmet_dependencies = [StarDep(name='buf744', mode=None)]
op745.met_dependencies = [StarDep(name='arg467_1', mode=None)]
op745.outputs = [
    buf745: ExternKernelOut
    buf745.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf745.users = [NodeUser(node=SchedulerNode(name='op746'), can_inplace=True, is_weak=False)]
]
op745.node.kernel = extern_kernels.mm


op746: SchedulerNode(ComputedBuffer)
op746.writes = [MemoryDep('buf746', c0, {c0: 4194304}, None)]
op746.unmet_dependencies = 
    [   MemoryDep('buf721', c0, {c0: 4194304}, None),
        MemoryDep('buf728', c0, {c0: 4194304}, None),
        MemoryDep('buf745', c0, {c0: 4194304}, None)]
op746.met_dependencies = 
    [   MemoryDep('arg458_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg468_1', c1, {c0: 4096, c1: 1024}, None)]
op746.outputs = [
    buf746: ComputedBuffer
    buf746.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf746.users = [
        NodeUser(node=SchedulerNode(name='op747'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op748'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op749'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op750'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op764'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op765'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op766'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op767'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op771'), can_inplace=True, is_weak=False),
    ]
]
op746.group.device = cuda:0
op746.group.iteration = (4194304, 1)
op746.sizes = ([4096, 1024], [])
buf721_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf728_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg458_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf745_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg468_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf746_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op746_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf721', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf728', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg458_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf745', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg468_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf746', get_index_5, add_3, None)
        return store
op746 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op747: SchedulerNode(ComputedBuffer)
op747.writes = [MemoryDep('buf747', c0, {c0: 4096}, None)]
op747.unmet_dependencies = [MemoryDep('buf746', c0, {c0: 4194304}, None)]
op747.met_dependencies = []
op747.outputs = [
    buf747: ComputedBuffer
    buf747.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf747.users = [NodeUser(node=SchedulerNode(name='op750'), can_inplace=False, is_weak=False)]
]
op747.group.device = cuda:0
op747.group.iteration = (4096, 1024)
op747.sizes = ([4096], [1024])
buf746_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf747_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op747_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf746', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf747', get_index_1, getitem)
        return store_reduction
op747 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op748: SchedulerNode(ComputedBuffer)
op748.writes = [MemoryDep('buf748', c0, {c0: 4096}, None)]
op748.unmet_dependencies = [MemoryDep('buf746', c0, {c0: 4194304}, None)]
op748.met_dependencies = []
op748.outputs = [
    buf748: ComputedBuffer
    buf748.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf748.users = [NodeUser(node=SchedulerNode(name='op750'), can_inplace=False, is_weak=False)]
]
op748.group.device = cuda:0
op748.group.iteration = (4096, 1024)
op748.sizes = ([4096], [1024])
buf746_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf748_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op748_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf746', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf748', get_index_1, getitem_1)
        return store_reduction
op748 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op750: SchedulerNode(ComputedBuffer)
op750.writes = [MemoryDep('buf750', c0, {c0: 4194304}, None)]
op750.unmet_dependencies = 
    [   MemoryDep('buf746', c0, {c0: 4194304}, None),
        MemoryDep('buf747', c0, {c0: 4096}, None),
        MemoryDep('buf748', c0, {c0: 4096}, None)]
op750.met_dependencies = 
    [   MemoryDep('arg469_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg470_1', c1, {c0: 4096, c1: 1024}, None)]
op750.outputs = [
    buf750: ComputedBuffer
    buf750.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf750.users = [NodeUser(node=ExternKernelSchedulerNode(name='op751'), can_inplace=False, is_weak=False)]
]
op750.group.device = cuda:0
op750.group.iteration = (4194304, 1)
op750.sizes = ([4096, 1024], [])
buf746_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf747_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf748_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg469_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg470_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf750_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op750_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf746', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf747', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf748', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg469_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg470_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf750', get_index_5, add_1, None)
        return store
op750 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op751: ExternKernelSchedulerNode(ExternKernelOut)
op751.writes = [StarDep(name='buf751', mode=None)]
op751.unmet_dependencies = [StarDep(name='buf750', mode=None)]
op751.met_dependencies = [StarDep(name='arg471_1', mode=None)]
op751.outputs = [
    buf751: ExternKernelOut
    buf751.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf751.users = [NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False)]
]
op751.node.kernel = extern_kernels.mm


op752: ExternKernelSchedulerNode(ExternKernelOut)
op752.writes = [StarDep(name='buf752', mode=None)]
op752.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op752.met_dependencies = [StarDep(name='arg473_1', mode=None)]
op752.outputs = [
    buf752: ExternKernelOut
    buf752.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf752.users = [NodeUser(node=SchedulerNode(name='op755'), can_inplace=False, is_weak=False)]
]
op752.node.kernel = extern_kernels.mm


op753: ExternKernelSchedulerNode(ExternKernelOut)
op753.writes = [StarDep(name='buf753', mode=None)]
op753.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op753.met_dependencies = [StarDep(name='arg475_1', mode=None)]
op753.outputs = [
    buf753: ExternKernelOut
    buf753.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf753.users = [NodeUser(node=SchedulerNode(name='op756'), can_inplace=False, is_weak=False)]
]
op753.node.kernel = extern_kernels.mm


op754: SchedulerNode(ComputedBuffer)
op754.writes = [MemoryDep('buf754', c0, {c0: 4194304}, None)]
op754.unmet_dependencies = [   MemoryDep('buf751', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op754.met_dependencies = [   MemoryDep('arg472_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op754.outputs = [
    buf754: ComputedBuffer
    buf754.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf754.users = [NodeUser(node=ExternKernelSchedulerNode(name='op757'), can_inplace=False, is_weak=False)]
]
op754.group.device = cuda:0
op754.group.iteration = (4194304, 1)
op754.sizes = ([512, 128, 64], [])
buf751_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg472_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf754_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op754_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf751', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg472_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf754', get_index_2, mul, None)
        return store
op754 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op755: SchedulerNode(ComputedBuffer)
op755.writes = [MemoryDep('buf755', c0, {c0: 4194304}, None)]
op755.unmet_dependencies = [   MemoryDep('buf752', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op755.met_dependencies = [   MemoryDep('arg474_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op755.outputs = [
    buf755: ComputedBuffer
    buf755.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf755.users = [NodeUser(node=ExternKernelSchedulerNode(name='op757'), can_inplace=False, is_weak=False)]
]
op755.group.device = cuda:0
op755.group.iteration = (4194304, 1)
op755.sizes = ([512, 128, 64], [])
buf752_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg474_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf755_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op755_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf752', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg474_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf755', get_index_2, add, None)
        return store
op755 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op756: SchedulerNode(ComputedBuffer)
op756.writes = [MemoryDep('buf756', c0, {c0: 4194304}, None)]
op756.unmet_dependencies = [   MemoryDep('buf753', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op756.met_dependencies = [   MemoryDep('arg476_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op756.outputs = [
    buf756: ComputedBuffer
    buf756.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf756.users = [NodeUser(node=ExternKernelSchedulerNode(name='op757'), can_inplace=False, is_weak=False)]
]
op756.group.device = cuda:0
op756.group.iteration = (4194304, 1)
op756.sizes = ([512, 128, 64], [])
buf753_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg476_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf756_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op756_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf753', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg476_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf756', get_index_2, add, None)
        return store
op756 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op757: ExternKernelSchedulerNode(FallbackKernel)
op757.writes = [StarDep(name='buf757', mode=None)]
op757.unmet_dependencies = 
    [   StarDep(name='buf754', mode=None),
        StarDep(name='buf755', mode=None),
        StarDep(name='buf756', mode=None)]
op757.met_dependencies = []
op757.outputs = [
    buf757: FallbackKernel
    buf757.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf757.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op758'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op759'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op760'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op761'), can_inplace=False, is_weak=False),
    ]
]
op757.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op758: ExternKernelSchedulerNode(MultiOutput)
op758.writes = [StarDep(name='buf758', mode=None)]
op758.unmet_dependencies = [StarDep(name='buf757', mode=None)]
op758.met_dependencies = []
op758.outputs = [
    buf758: MultiOutput
    buf758.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf758.users = [NodeUser(node=SchedulerNode(name='op762'), can_inplace=False, is_weak=False)]
]
op758.node.kernel = None


op762: SchedulerNode(ComputedBuffer)
op762.writes = [MemoryDep('buf762', c0, {c0: 4194304}, None)]
op762.unmet_dependencies = [   MemoryDep('buf758', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op762.met_dependencies = []
op762.outputs = [
    buf762: ComputedBuffer
    buf762.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf762.users = [NodeUser(node=ExternKernelSchedulerNode(name='op763'), can_inplace=False, is_weak=False)]
]
op762.group.device = cuda:0
op762.group.iteration = (4194304, 1)
op762.sizes = ([32, 128, 1024], [])
buf758_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf762_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op762_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf758', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf762', get_index_1, load, None)
        return store
op762 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op763: ExternKernelSchedulerNode(ExternKernelOut)
op763.writes = [StarDep(name='buf763', mode=None)]
op763.unmet_dependencies = [StarDep(name='buf762', mode=None)]
op763.met_dependencies = [StarDep(name='arg477_1', mode=None)]
op763.outputs = [
    buf763: ExternKernelOut
    buf763.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf763.users = [
        NodeUser(node=SchedulerNode(name='op764'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op765'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op766'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op767'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op771'), can_inplace=True, is_weak=False),
    ]
]
op763.node.kernel = extern_kernels.mm


op764: SchedulerNode(ComputedBuffer)
op764.writes = [MemoryDep('buf764', c0, {c0: 4096}, None)]
op764.unmet_dependencies = 
    [   MemoryDep('buf746', c0, {c0: 4194304}, None),
        MemoryDep('buf763', c0, {c0: 4194304}, None)]
op764.met_dependencies = [MemoryDep('arg478_1', c1, {c0: 4096, c1: 1024}, None)]
op764.outputs = [
    buf764: ComputedBuffer
    buf764.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf764.users = [NodeUser(node=SchedulerNode(name='op767'), can_inplace=False, is_weak=False)]
]
op764.group.device = cuda:0
op764.group.iteration = (4096, 1024)
op764.sizes = ([4096], [1024])
buf746_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf763_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg478_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf764_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op764_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf746', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf763', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg478_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf764', get_index_3, getitem)
        return store_reduction
op764 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op765: SchedulerNode(ComputedBuffer)
op765.writes = [MemoryDep('buf765', c0, {c0: 4096}, None)]
op765.unmet_dependencies = 
    [   MemoryDep('buf746', c0, {c0: 4194304}, None),
        MemoryDep('buf763', c0, {c0: 4194304}, None)]
op765.met_dependencies = [MemoryDep('arg478_1', c1, {c0: 4096, c1: 1024}, None)]
op765.outputs = [
    buf765: ComputedBuffer
    buf765.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf765.users = [NodeUser(node=SchedulerNode(name='op767'), can_inplace=False, is_weak=False)]
]
op765.group.device = cuda:0
op765.group.iteration = (4096, 1024)
op765.sizes = ([4096], [1024])
buf746_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf763_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg478_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf765_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op765_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf746', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf763', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg478_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf765', get_index_3, getitem_1)
        return store_reduction
op765 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op767: SchedulerNode(ComputedBuffer)
op767.writes = [MemoryDep('buf767', c0, {c0: 4194304}, None)]
op767.unmet_dependencies = 
    [   MemoryDep('buf746', c0, {c0: 4194304}, None),
        MemoryDep('buf763', c0, {c0: 4194304}, None),
        MemoryDep('buf764', c0, {c0: 4096}, None),
        MemoryDep('buf765', c0, {c0: 4096}, None)]
op767.met_dependencies = 
    [   MemoryDep('arg478_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg479_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg480_1', c1, {c0: 4096, c1: 1024}, None)]
op767.outputs = [
    buf767: ComputedBuffer
    buf767.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf767.users = [NodeUser(node=ExternKernelSchedulerNode(name='op768'), can_inplace=False, is_weak=False)]
]
op767.group.device = cuda:0
op767.group.iteration = (4194304, 1)
op767.sizes = ([4096, 1024], [])
buf746_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf763_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg478_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf764_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf765_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg479_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg480_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf767_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op767_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf746', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf763', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg478_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf764', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf765', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg479_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg480_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf767', get_index_7, add_3, None)
        return store
op767 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op768: ExternKernelSchedulerNode(ExternKernelOut)
op768.writes = [StarDep(name='buf768', mode=None)]
op768.unmet_dependencies = [StarDep(name='buf767', mode=None)]
op768.met_dependencies = [StarDep(name='arg481_1', mode=None)]
op768.outputs = [
    buf768: ExternKernelOut
    buf768.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf768.users = [NodeUser(node=SchedulerNode(name='op769'), can_inplace=True, is_weak=False)]
]
op768.node.kernel = extern_kernels.mm


op769: SchedulerNode(ComputedBuffer)
op769.writes = [MemoryDep('buf769', c0, {c0: 16777216}, None)]
op769.unmet_dependencies = [MemoryDep('buf768', c0, {c0: 16777216}, None)]
op769.met_dependencies = [MemoryDep('arg482_1', c1, {c0: 4096, c1: 4096}, None)]
op769.outputs = [
    buf769: ComputedBuffer
    buf769.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf769.users = [NodeUser(node=ExternKernelSchedulerNode(name='op770'), can_inplace=False, is_weak=False)]
]
op769.group.device = cuda:0
op769.group.iteration = (16777216, 1)
op769.sizes = ([4096, 4096], [])
buf768_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg482_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf769_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op769_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf768', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg482_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf768', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg482_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf769', get_index_4, mul_2, None)
        return store
op769 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op770: ExternKernelSchedulerNode(ExternKernelOut)
op770.writes = [StarDep(name='buf770', mode=None)]
op770.unmet_dependencies = [StarDep(name='buf769', mode=None)]
op770.met_dependencies = [StarDep(name='arg483_1', mode=None)]
op770.outputs = [
    buf770: ExternKernelOut
    buf770.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf770.users = [NodeUser(node=SchedulerNode(name='op771'), can_inplace=True, is_weak=False)]
]
op770.node.kernel = extern_kernels.mm


op771: SchedulerNode(ComputedBuffer)
op771.writes = [MemoryDep('buf771', c0, {c0: 4194304}, None)]
op771.unmet_dependencies = 
    [   MemoryDep('buf746', c0, {c0: 4194304}, None),
        MemoryDep('buf763', c0, {c0: 4194304}, None),
        MemoryDep('buf770', c0, {c0: 4194304}, None)]
op771.met_dependencies = 
    [   MemoryDep('arg478_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg484_1', c1, {c0: 4096, c1: 1024}, None)]
op771.outputs = [
    buf771: ComputedBuffer
    buf771.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf771.users = [
        NodeUser(node=SchedulerNode(name='op772'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op773'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op774'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op775'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op789'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op790'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op791'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op792'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op806'), can_inplace=True, is_weak=False),
    ]
]
op771.group.device = cuda:0
op771.group.iteration = (4194304, 1)
op771.sizes = ([4096, 1024], [])
buf746_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf763_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg478_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf770_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg484_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf771_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op771_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf746', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf763', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg478_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf770', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg484_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf771', get_index_5, add_3, None)
        return store
op771 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op772: SchedulerNode(ComputedBuffer)
op772.writes = [MemoryDep('buf772', c0, {c0: 4096}, None)]
op772.unmet_dependencies = [MemoryDep('buf771', c0, {c0: 4194304}, None)]
op772.met_dependencies = []
op772.outputs = [
    buf772: ComputedBuffer
    buf772.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf772.users = [NodeUser(node=SchedulerNode(name='op775'), can_inplace=False, is_weak=False)]
]
op772.group.device = cuda:0
op772.group.iteration = (4096, 1024)
op772.sizes = ([4096], [1024])
buf771_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf772_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op772_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf771', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf772', get_index_1, getitem)
        return store_reduction
op772 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op773: SchedulerNode(ComputedBuffer)
op773.writes = [MemoryDep('buf773', c0, {c0: 4096}, None)]
op773.unmet_dependencies = [MemoryDep('buf771', c0, {c0: 4194304}, None)]
op773.met_dependencies = []
op773.outputs = [
    buf773: ComputedBuffer
    buf773.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf773.users = [NodeUser(node=SchedulerNode(name='op775'), can_inplace=False, is_weak=False)]
]
op773.group.device = cuda:0
op773.group.iteration = (4096, 1024)
op773.sizes = ([4096], [1024])
buf771_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf773_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op773_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf771', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf773', get_index_1, getitem_1)
        return store_reduction
op773 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op775: SchedulerNode(ComputedBuffer)
op775.writes = [MemoryDep('buf775', c0, {c0: 4194304}, None)]
op775.unmet_dependencies = 
    [   MemoryDep('buf771', c0, {c0: 4194304}, None),
        MemoryDep('buf772', c0, {c0: 4096}, None),
        MemoryDep('buf773', c0, {c0: 4096}, None)]
op775.met_dependencies = 
    [   MemoryDep('arg485_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg486_1', c1, {c0: 4096, c1: 1024}, None)]
op775.outputs = [
    buf775: ComputedBuffer
    buf775.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf775.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op776'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op777'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op783'), can_inplace=False, is_weak=False),
    ]
]
op775.group.device = cuda:0
op775.group.iteration = (4194304, 1)
op775.sizes = ([4096, 1024], [])
buf771_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf772_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf773_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg485_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg486_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf775_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op775_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf771', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf772', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf773', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg485_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg486_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf775', get_index_5, add_1, None)
        return store
op775 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op776: ExternKernelSchedulerNode(ExternKernelOut)
op776.writes = [StarDep(name='buf776', mode=None)]
op776.unmet_dependencies = [StarDep(name='buf775', mode=None)]
op776.met_dependencies = [StarDep(name='arg487_1', mode=None)]
op776.outputs = [
    buf776: ExternKernelOut
    buf776.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf776.users = [NodeUser(node=SchedulerNode(name='op778'), can_inplace=False, is_weak=False)]
]
op776.node.kernel = extern_kernels.mm


op777: ExternKernelSchedulerNode(ExternKernelOut)
op777.writes = [StarDep(name='buf777', mode=None)]
op777.unmet_dependencies = [StarDep(name='buf775', mode=None)]
op777.met_dependencies = [StarDep(name='arg489_1', mode=None)]
op777.outputs = [
    buf777: ExternKernelOut
    buf777.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf777.users = [NodeUser(node=SchedulerNode(name='op779'), can_inplace=False, is_weak=False)]
]
op777.node.kernel = extern_kernels.mm


op778: SchedulerNode(ComputedBuffer)
op778.writes = [MemoryDep('buf778', c0, {c0: 4194304}, None)]
op778.unmet_dependencies = [   MemoryDep('buf776', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op778.met_dependencies = [MemoryDep('arg488_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op778.outputs = [
    buf778: ComputedBuffer
    buf778.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf778.users = [NodeUser(node=ExternKernelSchedulerNode(name='op780'), can_inplace=False, is_weak=False)]
]
op778.group.device = cuda:0
op778.group.iteration = (4194304, 1)
op778.sizes = ([32, 16, 128, 64], [])
buf776_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg488_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf778_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op778_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf776', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg488_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf778', get_index_2, mul, None)
        return store
op778 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op779: SchedulerNode(ComputedBuffer)
op779.writes = [MemoryDep('buf779', c0, {c0: 4194304}, None)]
op779.unmet_dependencies = [   MemoryDep('buf777', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op779.met_dependencies = [MemoryDep('arg490_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op779.outputs = [
    buf779: ComputedBuffer
    buf779.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf779.users = [NodeUser(node=ExternKernelSchedulerNode(name='op780'), can_inplace=False, is_weak=False)]
]
op779.group.device = cuda:0
op779.group.iteration = (4194304, 1)
op779.sizes = ([32, 16, 128, 64], [])
buf777_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg490_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf779_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op779_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf777', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg490_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf779', get_index_2, add, None)
        return store
op779 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op780: ExternKernelSchedulerNode(ExternKernelOut)
op780.writes = [StarDep(name='buf780', mode=None)]
op780.unmet_dependencies = [StarDep(name='buf778', mode=None), StarDep(name='buf779', mode=None)]
op780.met_dependencies = []
op780.outputs = [
    buf780: ExternKernelOut
    buf780.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf780.users = [
        NodeUser(node=SchedulerNode(name='op781'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op782'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op784'), can_inplace=True, is_weak=False),
    ]
]
op780.node.kernel = extern_kernels.bmm


op781: SchedulerNode(ComputedBuffer)
op781.writes = [MemoryDep('buf781', c0, {c0: 65536}, None)]
op781.unmet_dependencies = [MemoryDep('buf780', c0, {c0: 8388608}, None)]
op781.met_dependencies = []
op781.outputs = [
    buf781: ComputedBuffer
    buf781.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf781.users = [
        NodeUser(node=SchedulerNode(name='op782'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op784'), can_inplace=False, is_weak=False),
    ]
]
op781.group.device = cuda:0
op781.group.iteration = (65536, 128)
op781.sizes = ([512, 128], [128])
buf780_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf781_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op781_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf780', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf781', get_index_3, reduction)
        return store_reduction
op781 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)


op782: SchedulerNode(ComputedBuffer)
op782.writes = [MemoryDep('buf782', c0, {c0: 65536}, None)]
op782.unmet_dependencies = 
    [   MemoryDep('buf780', c0, {c0: 8388608}, None),
        MemoryDep('buf781', c0, {c0: 65536}, None)]
op782.met_dependencies = []
op782.outputs = [
    buf782: ComputedBuffer
    buf782.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf782.users = [NodeUser(node=SchedulerNode(name='op784'), can_inplace=False, is_weak=False)]
]
op782.group.device = cuda:0
op782.group.iteration = (65536, 128)
op782.sizes = ([512, 128], [128])
buf780_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf781_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf782_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op782_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf780', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf781', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf782', get_index_4, reduction)
        return store_reduction
op782 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op783: ExternKernelSchedulerNode(ExternKernelOut)
op783.writes = [StarDep(name='buf783', mode=None)]
op783.unmet_dependencies = [StarDep(name='buf775', mode=None)]
op783.met_dependencies = [StarDep(name='arg491_1', mode=None)]
op783.outputs = [
    buf783: ExternKernelOut
    buf783.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf783.users = [NodeUser(node=SchedulerNode(name='op785'), can_inplace=False, is_weak=False)]
]
op783.node.kernel = extern_kernels.mm


op784: SchedulerNode(ComputedBuffer)
op784.writes = [MemoryDep('buf784', c0, {c0: 8388608}, None)]
op784.unmet_dependencies = 
    [   MemoryDep('buf780', c0, {c0: 8388608}, None),
        MemoryDep('buf781', c0, {c0: 65536}, None),
        MemoryDep('buf782', c0, {c0: 65536}, None)]
op784.met_dependencies = []
op784.outputs = [
    buf784: ComputedBuffer
    buf784.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf784.users = [NodeUser(node=ExternKernelSchedulerNode(name='op786'), can_inplace=False, is_weak=False)]
]
op784.group.device = cuda:0
op784.group.iteration = (8388608, 1)
op784.sizes = ([512, 128, 128], [])
buf780_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf781_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf782_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf784_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op784_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf780', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf781', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf782', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf784', get_index_5, truediv, None)
        return store
op784 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)


op785: SchedulerNode(ComputedBuffer)
op785.writes = [MemoryDep('buf785', c0, {c0: 4194304}, None)]
op785.unmet_dependencies = [   MemoryDep('buf783', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op785.met_dependencies = [MemoryDep('arg492_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op785.outputs = [
    buf785: ComputedBuffer
    buf785.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf785.users = [NodeUser(node=ExternKernelSchedulerNode(name='op786'), can_inplace=False, is_weak=False)]
]
op785.group.device = cuda:0
op785.group.iteration = (4194304, 1)
op785.sizes = ([32, 16, 128, 64], [])
buf783_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg492_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf785_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op785_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf783', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg492_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf785', get_index_2, add, None)
        return store
op785 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op786: ExternKernelSchedulerNode(ExternKernelOut)
op786.writes = [StarDep(name='buf786', mode=None)]
op786.unmet_dependencies = [StarDep(name='buf784', mode=None), StarDep(name='buf785', mode=None)]
op786.met_dependencies = []
op786.outputs = [
    buf786: ExternKernelOut
    buf786.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf786.users = [NodeUser(node=SchedulerNode(name='op787'), can_inplace=False, is_weak=False)]
]
op786.node.kernel = extern_kernels.bmm


op787: SchedulerNode(ComputedBuffer)
op787.writes = [MemoryDep('buf787', c0, {c0: 4194304}, None)]
op787.unmet_dependencies = [   MemoryDep('buf786', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op787.met_dependencies = []
op787.outputs = [
    buf787: ComputedBuffer
    buf787.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf787.users = [NodeUser(node=ExternKernelSchedulerNode(name='op788'), can_inplace=False, is_weak=False)]
]
op787.group.device = cuda:0
op787.group.iteration = (4194304, 1)
op787.sizes = ([32, 128, 16, 64], [])
buf786_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf787_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op787_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf786', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf787', get_index_1, load, None)
        return store
op787 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op788: ExternKernelSchedulerNode(ExternKernelOut)
op788.writes = [StarDep(name='buf788', mode=None)]
op788.unmet_dependencies = [StarDep(name='buf787', mode=None)]
op788.met_dependencies = [StarDep(name='arg493_1', mode=None)]
op788.outputs = [
    buf788: ExternKernelOut
    buf788.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf788.users = [
        NodeUser(node=SchedulerNode(name='op789'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op790'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op791'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op792'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op806'), can_inplace=True, is_weak=False),
    ]
]
op788.node.kernel = extern_kernels.mm


op789: SchedulerNode(ComputedBuffer)
op789.writes = [MemoryDep('buf789', c0, {c0: 4096}, None)]
op789.unmet_dependencies = 
    [   MemoryDep('buf771', c0, {c0: 4194304}, None),
        MemoryDep('buf788', c0, {c0: 4194304}, None)]
op789.met_dependencies = [MemoryDep('arg494_1', c1, {c0: 4096, c1: 1024}, None)]
op789.outputs = [
    buf789: ComputedBuffer
    buf789.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf789.users = [NodeUser(node=SchedulerNode(name='op792'), can_inplace=False, is_weak=False)]
]
op789.group.device = cuda:0
op789.group.iteration = (4096, 1024)
op789.sizes = ([4096], [1024])
buf771_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf788_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg494_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf789_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op789_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf771', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf788', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg494_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf789', get_index_3, getitem)
        return store_reduction
op789 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op790: SchedulerNode(ComputedBuffer)
op790.writes = [MemoryDep('buf790', c0, {c0: 4096}, None)]
op790.unmet_dependencies = 
    [   MemoryDep('buf771', c0, {c0: 4194304}, None),
        MemoryDep('buf788', c0, {c0: 4194304}, None)]
op790.met_dependencies = [MemoryDep('arg494_1', c1, {c0: 4096, c1: 1024}, None)]
op790.outputs = [
    buf790: ComputedBuffer
    buf790.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf790.users = [NodeUser(node=SchedulerNode(name='op792'), can_inplace=False, is_weak=False)]
]
op790.group.device = cuda:0
op790.group.iteration = (4096, 1024)
op790.sizes = ([4096], [1024])
buf771_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf788_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg494_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf790_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op790_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf771', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf788', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg494_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf790', get_index_3, getitem_1)
        return store_reduction
op790 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op792: SchedulerNode(ComputedBuffer)
op792.writes = [MemoryDep('buf792', c0, {c0: 4194304}, None)]
op792.unmet_dependencies = 
    [   MemoryDep('buf771', c0, {c0: 4194304}, None),
        MemoryDep('buf788', c0, {c0: 4194304}, None),
        MemoryDep('buf789', c0, {c0: 4096}, None),
        MemoryDep('buf790', c0, {c0: 4096}, None)]
op792.met_dependencies = 
    [   MemoryDep('arg494_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg495_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg496_1', c1, {c0: 4096, c1: 1024}, None)]
op792.outputs = [
    buf792: ComputedBuffer
    buf792.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf792.users = [NodeUser(node=ExternKernelSchedulerNode(name='op793'), can_inplace=False, is_weak=False)]
]
op792.group.device = cuda:0
op792.group.iteration = (4194304, 1)
op792.sizes = ([4096, 1024], [])
buf771_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf788_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg494_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf789_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf790_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg495_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg496_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf792_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op792_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf771', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf788', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg494_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf789', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf790', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg495_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg496_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf792', get_index_7, add_3, None)
        return store
op792 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op793: ExternKernelSchedulerNode(ExternKernelOut)
op793.writes = [StarDep(name='buf793', mode=None)]
op793.unmet_dependencies = [StarDep(name='buf792', mode=None)]
op793.met_dependencies = [StarDep(name='arg497_1', mode=None)]
op793.outputs = [
    buf793: ExternKernelOut
    buf793.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf793.users = [NodeUser(node=SchedulerNode(name='op796'), can_inplace=False, is_weak=False)]
]
op793.node.kernel = extern_kernels.mm


op794: ExternKernelSchedulerNode(ExternKernelOut)
op794.writes = [StarDep(name='buf794', mode=None)]
op794.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op794.met_dependencies = [StarDep(name='arg499_1', mode=None)]
op794.outputs = [
    buf794: ExternKernelOut
    buf794.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf794.users = [NodeUser(node=SchedulerNode(name='op797'), can_inplace=False, is_weak=False)]
]
op794.node.kernel = extern_kernels.mm


op795: ExternKernelSchedulerNode(ExternKernelOut)
op795.writes = [StarDep(name='buf795', mode=None)]
op795.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op795.met_dependencies = [StarDep(name='arg501_1', mode=None)]
op795.outputs = [
    buf795: ExternKernelOut
    buf795.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf795.users = [NodeUser(node=SchedulerNode(name='op798'), can_inplace=False, is_weak=False)]
]
op795.node.kernel = extern_kernels.mm


op796: SchedulerNode(ComputedBuffer)
op796.writes = [MemoryDep('buf796', c0, {c0: 4194304}, None)]
op796.unmet_dependencies = [   MemoryDep('buf793', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op796.met_dependencies = [   MemoryDep('arg498_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op796.outputs = [
    buf796: ComputedBuffer
    buf796.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf796.users = [NodeUser(node=ExternKernelSchedulerNode(name='op799'), can_inplace=False, is_weak=False)]
]
op796.group.device = cuda:0
op796.group.iteration = (4194304, 1)
op796.sizes = ([512, 128, 64], [])
buf793_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg498_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf796_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op796_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf793', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg498_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf796', get_index_2, mul, None)
        return store
op796 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x3), tmp4, None)


op797: SchedulerNode(ComputedBuffer)
op797.writes = [MemoryDep('buf797', c0, {c0: 4194304}, None)]
op797.unmet_dependencies = [   MemoryDep('buf794', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op797.met_dependencies = [   MemoryDep('arg500_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op797.outputs = [
    buf797: ComputedBuffer
    buf797.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf797.users = [NodeUser(node=ExternKernelSchedulerNode(name='op799'), can_inplace=False, is_weak=False)]
]
op797.group.device = cuda:0
op797.group.iteration = (4194304, 1)
op797.sizes = ([512, 128, 64], [])
buf794_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg500_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf797_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op797_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf794', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg500_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf797', get_index_2, add, None)
        return store
op797 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op798: SchedulerNode(ComputedBuffer)
op798.writes = [MemoryDep('buf798', c0, {c0: 4194304}, None)]
op798.unmet_dependencies = [   MemoryDep('buf795', 1024*c1 + c2 + 131072*((c0//16)) + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op798.met_dependencies = [   MemoryDep('arg502_1', c2 + 64*ModularIndexing(c0, 1, 16), {c0: 512, c1: 128, c2: 64}, None)]
op798.outputs = [
    buf798: ComputedBuffer
    buf798.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
    buf798.users = [NodeUser(node=ExternKernelSchedulerNode(name='op799'), can_inplace=False, is_weak=False)]
]
op798.group.device = cuda:0
op798.group.iteration = (4194304, 1)
op798.sizes = ([512, 128, 64], [])
buf795_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg502_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf798_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 8192, 64, 1])
class op798_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 64}
    index0 = 1024*z1 + z2 + 131072*((z0//16)) + 64*ModularIndexing(z0, 1, 16)
    index1 = z2 + 64*ModularIndexing(z0, 1, 16)
    index2 = 8192*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf795', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg502_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf798', get_index_2, add, None)
        return store
op798 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*(x2 % 16)) + (1024*x1) + (131072*(x2 // 16))), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*(x2 % 16))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x3), tmp2, None)


op799: ExternKernelSchedulerNode(FallbackKernel)
op799.writes = [StarDep(name='buf799', mode=None)]
op799.unmet_dependencies = 
    [   StarDep(name='buf796', mode=None),
        StarDep(name='buf797', mode=None),
        StarDep(name='buf798', mode=None)]
op799.met_dependencies = []
op799.outputs = [
    buf799: FallbackKernel
    buf799.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf799.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op800'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op801'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op802'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op803'), can_inplace=False, is_weak=False),
    ]
]
op799.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op800: ExternKernelSchedulerNode(MultiOutput)
op800.writes = [StarDep(name='buf800', mode=None)]
op800.unmet_dependencies = [StarDep(name='buf799', mode=None)]
op800.met_dependencies = []
op800.outputs = [
    buf800: MultiOutput
    buf800.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
    buf800.users = [NodeUser(node=SchedulerNode(name='op804'), can_inplace=False, is_weak=False)]
]
op800.node.kernel = None


op804: SchedulerNode(ComputedBuffer)
op804.writes = [MemoryDep('buf804', c0, {c0: 4194304}, None)]
op804.unmet_dependencies = [   MemoryDep('buf800', 1024*c0 + 32768*c1 + c2, {c0: 32, c1: 128, c2: 1024}, None)]
op804.met_dependencies = []
op804.outputs = [
    buf804: ComputedBuffer
    buf804.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf804.users = [NodeUser(node=ExternKernelSchedulerNode(name='op805'), can_inplace=False, is_weak=False)]
]
op804.group.device = cuda:0
op804.group.iteration = (4194304, 1)
op804.sizes = ([32, 128, 1024], [])
buf800_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 128, 64], stride=[4194304, 64, 32768, 1])
buf804_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op804_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 1024*z0 + 32768*z1 + z2
    index1 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf800', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf804', get_index_1, load, None)
        return store
op804 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 1024
        x1 = (xindex // 1024) % 128
        x2 = (xindex // 131072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x2) + (32768*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op805: ExternKernelSchedulerNode(ExternKernelOut)
op805.writes = [StarDep(name='buf805', mode=None)]
op805.unmet_dependencies = [StarDep(name='buf804', mode=None)]
op805.met_dependencies = [StarDep(name='arg503_1', mode=None)]
op805.outputs = [
    buf805: ExternKernelOut
    buf805.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf805.users = [NodeUser(node=SchedulerNode(name='op806'), can_inplace=True, is_weak=False)]
]
op805.node.kernel = extern_kernels.mm


op806: SchedulerNode(ComputedBuffer)
op806.writes = [MemoryDep('buf806', c0, {c0: 4194304}, None)]
op806.unmet_dependencies = 
    [   MemoryDep('buf771', c0, {c0: 4194304}, None),
        MemoryDep('buf788', c0, {c0: 4194304}, None),
        MemoryDep('buf805', c0, {c0: 4194304}, None)]
op806.met_dependencies = 
    [   MemoryDep('arg494_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg504_1', c1, {c0: 4096, c1: 1024}, None)]
op806.outputs = [
    buf806: ComputedBuffer
    buf806.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf806.users = [
        NodeUser(node=SchedulerNode(name='op807'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op808'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op809'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op810'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op814'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op815'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op816'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op817'), can_inplace=True, is_weak=False),
    ]
]
op806.group.device = cuda:0
op806.group.iteration = (4194304, 1)
op806.sizes = ([4096, 1024], [])
buf771_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf788_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg494_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf805_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg504_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf806_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op806_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf771', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf788', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg494_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf805', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg504_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf806', get_index_5, add_3, None)
        return store
op806 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op807: SchedulerNode(ComputedBuffer)
op807.writes = [MemoryDep('buf807', c0, {c0: 4096}, None)]
op807.unmet_dependencies = [MemoryDep('buf806', c0, {c0: 4194304}, None)]
op807.met_dependencies = []
op807.outputs = [
    buf807: ComputedBuffer
    buf807.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf807.users = [NodeUser(node=SchedulerNode(name='op810'), can_inplace=False, is_weak=False)]
]
op807.group.device = cuda:0
op807.group.iteration = (4096, 1024)
op807.sizes = ([4096], [1024])
buf806_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf807_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op807_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf806', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf807', get_index_1, getitem)
        return store_reduction
op807 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)


op808: SchedulerNode(ComputedBuffer)
op808.writes = [MemoryDep('buf808', c0, {c0: 4096}, None)]
op808.unmet_dependencies = [MemoryDep('buf806', c0, {c0: 4194304}, None)]
op808.met_dependencies = []
op808.outputs = [
    buf808: ComputedBuffer
    buf808.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf808.users = [NodeUser(node=SchedulerNode(name='op810'), can_inplace=False, is_weak=False)]
]
op808.group.device = cuda:0
op808.group.iteration = (4096, 1024)
op808.sizes = ([4096], [1024])
buf806_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf808_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op808_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf806', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf808', get_index_1, getitem_1)
        return store_reduction
op808 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)


op810: SchedulerNode(ComputedBuffer)
op810.writes = [MemoryDep('buf810', c0, {c0: 4194304}, None)]
op810.unmet_dependencies = 
    [   MemoryDep('buf806', c0, {c0: 4194304}, None),
        MemoryDep('buf807', c0, {c0: 4096}, None),
        MemoryDep('buf808', c0, {c0: 4096}, None)]
op810.met_dependencies = 
    [   MemoryDep('arg505_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg506_1', c1, {c0: 4096, c1: 1024}, None)]
op810.outputs = [
    buf810: ComputedBuffer
    buf810.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf810.users = [NodeUser(node=ExternKernelSchedulerNode(name='op811'), can_inplace=False, is_weak=False)]
]
op810.group.device = cuda:0
op810.group.iteration = (4194304, 1)
op810.sizes = ([4096, 1024], [])
buf806_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf807_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf808_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg505_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg506_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf810_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op810_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf806', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf807', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf808', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg505_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg506_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf810', get_index_5, add_1, None)
        return store
op810 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op811: ExternKernelSchedulerNode(ExternKernelOut)
op811.writes = [StarDep(name='buf811', mode=None)]
op811.unmet_dependencies = [StarDep(name='buf810', mode=None)]
op811.met_dependencies = [StarDep(name='arg507_1', mode=None)]
op811.outputs = [
    buf811: ExternKernelOut
    buf811.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf811.users = [NodeUser(node=SchedulerNode(name='op812'), can_inplace=True, is_weak=False)]
]
op811.node.kernel = extern_kernels.mm


op812: SchedulerNode(ComputedBuffer)
op812.writes = [MemoryDep('buf812', c0, {c0: 16777216}, None)]
op812.unmet_dependencies = [MemoryDep('buf811', c0, {c0: 16777216}, None)]
op812.met_dependencies = [MemoryDep('arg508_1', c1, {c0: 4096, c1: 4096}, None)]
op812.outputs = [
    buf812: ComputedBuffer
    buf812.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf812.users = [NodeUser(node=ExternKernelSchedulerNode(name='op813'), can_inplace=False, is_weak=False)]
]
op812.group.device = cuda:0
op812.group.iteration = (16777216, 1)
op812.sizes = ([4096, 4096], [])
buf811_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg508_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf812_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op812_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf811', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg508_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf811', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg508_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf812', get_index_4, mul_2, None)
        return store
op812 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op813: ExternKernelSchedulerNode(ExternKernelOut)
op813.writes = [StarDep(name='buf813', mode=None)]
op813.unmet_dependencies = [StarDep(name='buf812', mode=None)]
op813.met_dependencies = [StarDep(name='arg509_1', mode=None)]
op813.outputs = [
    buf813: ExternKernelOut
    buf813.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf813.users = [
        NodeUser(node=SchedulerNode(name='op814'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op815'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op816'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op817'), can_inplace=True, is_weak=False),
    ]
]
op813.node.kernel = extern_kernels.mm


op814: SchedulerNode(ComputedBuffer)
op814.writes = [MemoryDep('buf814', c0, {c0: 4096}, None)]
op814.unmet_dependencies = 
    [   MemoryDep('buf806', c0, {c0: 4194304}, None),
        MemoryDep('buf813', c0, {c0: 4194304}, None)]
op814.met_dependencies = [MemoryDep('arg510_1', c1, {c0: 4096, c1: 1024}, None)]
op814.outputs = [
    buf814: ComputedBuffer
    buf814.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf814.users = [NodeUser(node=SchedulerNode(name='op817'), can_inplace=False, is_weak=False)]
]
op814.group.device = cuda:0
op814.group.iteration = (4096, 1024)
op814.sizes = ([4096], [1024])
buf806_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf813_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg510_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf814_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op814_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf806', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf813', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg510_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf814', get_index_3, getitem)
        return store_reduction
op814 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op815: SchedulerNode(ComputedBuffer)
op815.writes = [MemoryDep('buf815', c0, {c0: 4096}, None)]
op815.unmet_dependencies = 
    [   MemoryDep('buf806', c0, {c0: 4194304}, None),
        MemoryDep('buf813', c0, {c0: 4194304}, None)]
op815.met_dependencies = [MemoryDep('arg510_1', c1, {c0: 4096, c1: 1024}, None)]
op815.outputs = [
    buf815: ComputedBuffer
    buf815.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf815.users = [NodeUser(node=SchedulerNode(name='op817'), can_inplace=False, is_weak=False)]
]
op815.group.device = cuda:0
op815.group.iteration = (4096, 1024)
op815.sizes = ([4096], [1024])
buf806_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf813_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg510_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf815_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op815_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf806', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf813', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg510_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf815', get_index_3, getitem_1)
        return store_reduction
op815 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op817: SchedulerNode(ComputedBuffer)
op817.writes = [MemoryDep('buf817', c0, {c0: 4194304}, None)]
op817.unmet_dependencies = 
    [   MemoryDep('buf806', c0, {c0: 4194304}, None),
        MemoryDep('buf813', c0, {c0: 4194304}, None),
        MemoryDep('buf814', c0, {c0: 4096}, None),
        MemoryDep('buf815', c0, {c0: 4096}, None)]
op817.met_dependencies = 
    [   MemoryDep('arg510_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg511_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg512_1', c1, {c0: 4096, c1: 1024}, None)]
op817.outputs = [
    buf817: ComputedBuffer
    buf817.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf817.users = [NodeUser(node=ExternKernelSchedulerNode(name='op819'), can_inplace=False, is_weak=False)]
]
op817.group.device = cuda:0
op817.group.iteration = (4194304, 1)
op817.sizes = ([4096, 1024], [])
buf806_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf813_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg510_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf814_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf815_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg511_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg512_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf817_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op817_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf806', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf813', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg510_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf814', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf815', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg511_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg512_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf817', get_index_7, add_3, None)
        return store
op817 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op818: SchedulerNode(ComputedBuffer)
op818.writes = [MemoryDep('buf818', 50272*c0 + c1, {c0: 1024, c1: 50268}, None)]
op818.unmet_dependencies = []
op818.met_dependencies = [MemoryDep('arg2_1', c0 + 1024*I, {c0: 1024, c1: 50268}, None)]
op818.outputs = [
    buf818: ComputedBuffer
    buf818.layout = FixedLayout('cuda', torch.float32, size=[1024, 50268], stride=[50272, 1])
    buf818.users = [NodeUser(node=ExternKernelSchedulerNode(name='op819'), can_inplace=False, is_weak=False)]
]
op818.group.device = cuda:0
op818.group.iteration = (51474432, 1)
op818.sizes = ([1024, 50268], [])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 1024], stride=[1024, 1])
buf818_layout = FixedLayout('cuda', torch.float32, size=[1024, 50268], stride=[50272, 1])
class op818_loop_body:
    var_ranges = {z0: 1024, z1: 50268}
    index0 = z1
    index1 = z0 + 1024*I
    index2 = 50272*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(50265, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(50265, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(50268, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf818', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg2_1', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
op818 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 51474432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 50268
        x1 = (xindex // 50268)
        tmp0 = x0
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 50265, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x1 + (1024*x0)), tmp4, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 50268, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = 0.0
        tmp10 = tl.full(tmp9.shape, 0.0, tmp9.dtype)
        tmp11 = tl.where(tmp6, tmp9, tmp10)
        tmp12 = tl.where(tmp4, tmp5, tmp11)
        tl.store(out_ptr0 + (x0 + (50272*x1)), tmp12, None)


op819: ExternKernelSchedulerNode(ExternKernelOut)
op819.writes = [StarDep(name='buf819', mode=None)]
op819.unmet_dependencies = [StarDep(name='buf817', mode=None), StarDep(name='buf818', mode=None)]
op819.met_dependencies = []
op819.outputs = [
    buf819: ExternKernelOut
    buf819.layout = FixedLayout('cuda', torch.float32, size=[4096, 50268], stride=[50272, 1])
    buf819.users = [NodeUser(node=SchedulerNode(name='op820'), can_inplace=False, is_weak=False)]
]
op819.node.kernel = extern_kernels.mm


op820: SchedulerNode(ComputedBuffer)
op820.writes = [MemoryDep('buf820', c0, {c0: 205885440}, None)]
op820.unmet_dependencies = [MemoryDep('buf819', 50272*c0 + c1, {c0: 4096, c1: 50265}, None)]
op820.met_dependencies = [MemoryDep('arg513_1', c1, {c0: 4096, c1: 50265}, None)]
op820.outputs = [
    buf820: ComputedBuffer
    buf820.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 50265], stride=[6433920, 50265, 1])
    buf820.users = [
        NodeUser(node=SchedulerNode(name='op821'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op822'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op823'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op820.group.device = cuda:0
op820.group.iteration = (205885440, 1)
op820.sizes = ([4096, 50265], [])
buf819_layout = FixedLayout('cuda', torch.float32, size=[4096, 50268], stride=[50272, 1])
arg513_1_layout = FixedLayout('cuda', torch.float32, size=[1, 50265], stride=[50265, 1])
buf820_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 50265], stride=[6433920, 50265, 1])
class op820_loop_body:
    var_ranges = {z0: 4096, z1: 50265}
    index0 = 50272*z0 + z1
    index1 = z1
    index2 = 50265*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf819', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg513_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf820', get_index_2, add, None)
        return store
op820 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[268435456], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 205885440
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 50265
        x1 = (xindex // 50265)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (50272*x1)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op821: SchedulerNode(ComputedBuffer)
op821.writes = [MemoryDep('buf821', c0, {c0: 4096}, None)]
op821.unmet_dependencies = [MemoryDep('buf820', c0, {c0: 205885440}, None)]
op821.met_dependencies = []
op821.outputs = [
    buf821: ComputedBuffer
    buf821.layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
    buf821.users = [
        NodeUser(node=SchedulerNode(name='op822'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op823'), can_inplace=False, is_weak=False),
    ]
]
op821.group.device = cuda:0
op821.group.iteration = (4096, 50265)
op821.sizes = ([4096], [50265])
buf820_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 50265], stride=[6433920, 50265, 1])
buf821_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
class op821_loop_body:
    var_ranges = {z0: 4096, z1: 50265}
    index0 = 50265*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf820', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf821', get_index_1, reduction)
        return store_reduction
op821 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 65536],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 50265
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (50265*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp2, None)


op822: SchedulerNode(ComputedBuffer)
op822.writes = [MemoryDep('buf822', c0, {c0: 4096}, None)]
op822.unmet_dependencies = 
    [   MemoryDep('buf820', c0, {c0: 205885440}, None),
        MemoryDep('buf821', c0, {c0: 4096}, None)]
op822.met_dependencies = []
op822.outputs = [
    buf822: ComputedBuffer
    buf822.layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
    buf822.users = [NodeUser(node=SchedulerNode(name='op823'), can_inplace=False, is_weak=False)]
]
op822.group.device = cuda:0
op822.group.iteration = (4096, 50265)
op822.sizes = ([4096], [50265])
buf820_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 50265], stride=[6433920, 50265, 1])
buf821_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
buf822_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
class op822_loop_body:
    var_ranges = {z0: 4096, z1: 50265}
    index0 = 50265*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf820', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf821', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf822', get_index_2, reduction)
        return store_reduction
op822 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 65536],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 50265
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (50265*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)


op823: SchedulerNode(ComputedBuffer)
op823.writes = [MemoryDep('buf823', 0, {}, None)]
op823.unmet_dependencies = 
    [   MemoryDep('buf820', 50265*c0 + tmp8, {c0: 4096}, None),
        MemoryDep('buf821', c0, {c0: 4096}, None),
        MemoryDep('buf822', c0, {c0: 4096}, None)]
op823.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 4096}, None)]
op823.outputs = [
    buf823: ComputedBuffer
    buf823.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf823.users = [NodeUser(node=SchedulerNode(name='op825'), can_inplace=True, is_weak=False)]
]
op823.group.device = cuda:0
op823.group.iteration = (1, 4096)
op823.sizes = ([], [4096])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[32, 128], stride=[128, 1])
buf820_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 50265], stride=[6433920, 50265, 1])
buf821_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
buf822_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
buf823_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op823_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    index1 = indirect0 + 50265*z0
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg0_1', get_index_1)
        constant_1 = ops.constant(-100, torch.int64)
        ne_1 = ops.ne(load_1, constant_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg0_1', get_index_2)
        constant_2 = ops.constant(0, torch.int64)
        where = ops.where(ne_1, load_2, constant_2)
        set_indirect0 = self.set_indirect0(where)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf820', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf821', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf822', get_index_5)
        log = ops.log(load_5)
        sub_1 = ops.sub(sub, log)
        neg = ops.neg(sub_1)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ne, neg, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', where_1)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf823', get_index_6, reduction)
        return store_reduction
op823 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp13 = tl.load(in_ptr3 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tl.full([1, 1], 0, tl.int64)
            tmp4 = tl.where(tmp2, tmp0, tmp3)
            tmp5 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp6 = tmp4 + tmp5
            tmp7 = tmp4 < 0
            tmp8 = tl.where(tmp7, tmp6, tmp4)
            tl.device_assert(((0 <= tmp8) & (tmp8 < 50265)) | ~(rmask), "index out of bounds: 0 <= tmp8 < 50265")
            tmp10 = tl.load(in_ptr1 + (tmp8 + (50265*r0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 - tmp11
            tmp14 = tl_math.log(tmp13)
            tmp15 = tmp12 - tmp14
            tmp16 = -tmp15
            tmp17 = 0.0
            tmp18 = tl.where(tmp2, tmp16, tmp17)
            tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
            tmp21 = _tmp20 + tmp19
            _tmp20 = tl.where(rmask, tmp21, _tmp20)
        tmp20 = tl.sum(_tmp20, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp20, None)


op824: SchedulerNode(ComputedBuffer)
op824.writes = [MemoryDep('buf824', 0, {}, None)]
op824.unmet_dependencies = []
op824.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 4096}, None)]
op824.outputs = [
    buf824: ComputedBuffer
    buf824.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf824.users = [NodeUser(node=SchedulerNode(name='op825'), can_inplace=True, is_weak=False)]
]
op824.group.device = cuda:0
op824.group.iteration = (1, 4096)
op824.sizes = ([], [4096])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[32, 128], stride=[128, 1])
buf824_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op824_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf824', get_index_1, reduction)
        return store_reduction
op824 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 3), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tmp2.to(tl.int64)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp5, None)


op825: SchedulerNode(ComputedBuffer)
op825.writes = [MemoryDep('buf825', 0, {}, None)]
op825.unmet_dependencies = [MemoryDep('buf823', 0, {}, None), MemoryDep('buf824', 0, {}, None)]
op825.met_dependencies = []
op825.outputs = [
    buf825: ComputedBuffer
    buf825.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf825.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op825.group.device = cuda:0
op825.group.iteration = (1, 1)
op825.sizes = ([], [])
buf823_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf824_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
buf825_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op825_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf823', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf824', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        truediv = ops.truediv(load, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf825', get_index_2, truediv, None)
        return store
op825 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp0 = tl.load(in_out_ptr0 + (0))
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
        tmp2 = tl.load(in_ptr0 + (0))
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK])
        tmp4 = tmp3.to(tl.float32)
        tmp5 = tmp1 / tmp4
        tl.store(in_out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp5, None)



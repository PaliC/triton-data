op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 3145728}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg0_1', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op1'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (3145728, 1)
op0.sizes = ([1024, 4, 768], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op0_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store
op0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op1: ExternKernelSchedulerNode(ExternKernelOut)
op1.writes = [StarDep(name='buf1', mode=None)]
op1.unmet_dependencies = [StarDep(name='buf0', mode=None)]
op1.met_dependencies = [StarDep(name='arg1_1', mode=None)]
op1.outputs = [
    buf1: ExternKernelOut
    buf1.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf1.users = [NodeUser(node=SchedulerNode(name='op2'), can_inplace=True, is_weak=False)]
]
op1.node.kernel = extern_kernels.mm


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 3145728}, None)]
op2.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 3145728}, None)]
op2.met_dependencies = [   MemoryDep('arg2_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf2.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op2.group.device = cuda:0
op2.group.iteration = (3145728, 1)
op2.sizes = ([1024, 48, 64], [])
buf1_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op2_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf2', get_index_2, mul, None)
        return store
op2 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x3), tmp4, None)


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 3145728}, None)]
op3.unmet_dependencies = []
op3.met_dependencies = [MemoryDep('arg0_1', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf3.users = [NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (3145728, 1)
op3.sizes = ([1024, 4, 768], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op3_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf3', get_index_1, load, None)
        return store
op3 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op4: ExternKernelSchedulerNode(ExternKernelOut)
op4.writes = [StarDep(name='buf4', mode=None)]
op4.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op4.met_dependencies = [StarDep(name='arg3_1', mode=None)]
op4.outputs = [
    buf4: ExternKernelOut
    buf4.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf4.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False)]
]
op4.node.kernel = extern_kernels.mm


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 3145728}, None)]
op5.unmet_dependencies = [MemoryDep('buf4', c0, {c0: 3145728}, None)]
op5.met_dependencies = [   MemoryDep('arg4_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (3145728, 1)
op5.sizes = ([1024, 48, 64], [])
buf4_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op5_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf5', get_index_2, add, None)
        return store
op5 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x3), tmp2, None)


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 4718592}, None)]
op6.unmet_dependencies = [   MemoryDep('buf2', 64*c0 + 786432*c1 + 3072*c2 + c3, {c0: 48, c1: 3, c2: 512, c3: 64}, None)]
op6.met_dependencies = []
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (4718592, 1)
op6.sizes = ([48, 3, 512, 64], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
class op6_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 512, z3: 64}
    index0 = 64*z0 + 786432*z1 + 3072*z2 + z3
    index1 = 98304*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf6', get_index_1, load, None)
        return store
op6 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 3
        x3 = (xindex // 98304)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x3) + (3072*x1) + (786432*x2)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 4718592}, None)]
op7.unmet_dependencies = [   MemoryDep('buf5', 64*c0 + 786432*c1 + c2 + 3072*c3, {c0: 48, c1: 3, c2: 64, c3: 512}, None)]
op7.met_dependencies = []
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (4718592, 1)
op7.sizes = ([48, 3, 64, 512], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
class op7_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 64, z3: 512}
    index0 = 64*z0 + 786432*z1 + z2 + 3072*z3
    index1 = 98304*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf7', get_index_1, load, None)
        return store
op7 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 9216
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 3
        y2 = (yindex // 192)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (3072*x3) + (786432*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf6', mode=None), StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
    ]
]
op8.node.kernel = extern_kernels.bmm


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', 24640*c0 + c1, {c0: 1024, c1: 24624}, None)]
op9.unmet_dependencies = 
    [   MemoryDep('buf8', 786432*c2 + 262144*(((513*c0 + c3 + 656384)//262656)) + 786432*(((513*c0 + c3 + 656384)//787968)) + ModularIndexing(513*c0 + c3, 1, 512) + 512*ModularIndexing(513*c0 + c3 + 656384, 512, 513), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf8', ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 262656, 144), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf8', ModularIndexing(513*c0 + c3 + 787712, 1, 262656) + 262144*ModularIndexing(513*c0 + c3 + 787712, 262656, 3) + 786432*ModularIndexing(513*c0 + 787968*c2 + c3 + 787712, 787968, 48), {c0: 256, c1: 4, c2: 48, c3: 513}, None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
    buf9.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (25214976, 1)
op9.sizes = ([256, 4, 48, 513], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
class op9_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 48, z3: 513}
    index0 = z1
    index1 = z3
    index2 = ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index3 = 786432*z2 + 262144*(((513*z0 + z3 + 656384)//262656)) + 786432*(((513*z0 + z3 + 656384)//787968)) + ModularIndexing(513*z0 + z3, 1, 512) + 512*ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index4 = ModularIndexing(513*z0 + z3 + 787712, 512, 513)
    index5 = ModularIndexing(513*z0 + z3 + 787712, 1, 262656) + 262144*ModularIndexing(513*z0 + z3 + 787712, 262656, 3) + 786432*ModularIndexing(513*z0 + 787968*z2 + z3 + 787712, 787968, 48)
    index6 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 512, 513)
    index7 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 262656, 144)
    index8 = 98560*z0 + 24640*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index8')
        store = ops.store('buf9', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf8', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf8', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf8', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op9 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[256, 131072], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 256
        xnumel = 98496
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = (xindex // 24624)
        x1 = xindex % 513
        y0 = yindex
        x2 = (xindex // 513) % 48
        x5 = xindex % 24624
        tmp0 = x3
        tmp1 = tl.full([1, 1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1, 1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x1 + (513*y0)) // 512) % 513
        tmp7 = tl.full([1, 1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((512*(((656384 + x1 + (513*y0)) // 512) % 513)) + (262144*((656384 + x1 + (513*y0)) // 262656)) + (786432*x2) + (786432*((656384 + x1 + (513*y0)) // 787968)) + ((x1 + (513*y0)) % 512)), tmp9 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.full(tmp10.shape, 0.0, tmp10.dtype)
        tmp12 = tl.where(tmp5, tmp10, tmp11)
        tmp13 = tl.full([1, 1], 3, tl.int64)
        tmp14 = tmp13 < tmp13
        tmp15 = tl.broadcast_to(x1, [XBLOCK, YBLOCK])
        tmp16 = tmp15 >= tmp4
        tmp17 = tmp16 & tmp14
        tmp18 = ((787712 + x1 + (513*y0)) // 512) % 513
        tmp19 = tmp18 < tmp7
        tmp20 = tmp19 & tmp17
        tmp21 = tl.load(in_ptr0 + ((262144*(((787712 + x1 + (513*y0)) // 262656) % 3)) + (786432*(((787712 + x1 + (513*y0) + (787968*x2)) // 787968) % 48)) + ((787712 + x1 + (513*y0)) % 262656)), tmp20 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.full(tmp21.shape, 0.0, tmp21.dtype)
        tmp23 = tl.where(tmp17, tmp21, tmp22)
        tmp24 = 0.0
        tmp25 = tl.where(tmp16, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp14, tmp25, tmp26)
        tmp28 = tl.where(tmp14, tmp27, tmp24)
        tmp29 = tl.where(tmp5, tmp12, tmp28)
        tmp30 = tmp0 < tmp13
        tmp31 = tmp16 & tmp30
        tmp32 = (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp33 = tmp32 < tmp7
        tmp34 = tmp33 & tmp31
        tmp35 = tl.load(in_ptr0 + ((262144*((((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 262656) % 144)) + (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) % 262656)), tmp34 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp31, tmp35, tmp36)
        tmp38 = tl.where(tmp16, tmp37, tmp24)
        tmp39 = tl.full(tmp38.shape, 0.0, tmp38.dtype)
        tmp40 = tl.where(tmp30, tmp38, tmp39)
        tmp41 = tl.where(tmp30, tmp40, tmp24)
        tmp42 = tl.where(tmp2, tmp29, tmp41)
        tl.store(out_ptr0 + (x5 + (24640*x3) + (98560*y0)), tmp42, xmask & ymask)


op10: SchedulerNode(ComputedBuffer)
op10.writes = [   MemoryDep('buf10', 131328*c0 + 525312*c1 + c2, {c0: 4, c1: 48, c2: 131328}, None)]
op10.unmet_dependencies = 
    [   MemoryDep('buf8', ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 262656, 144), {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf8', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf8', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf9', 24640*c0 + 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf9', 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
    buf10.users = [
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
    ]
]
op10.group.device = cuda:0
op10.group.iteration = (25214976, 1)
op10.sizes = ([4, 48, 256, 513], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
class op10_loop_body:
    var_ranges = {z0: 4, z1: 48, z2: 256, z3: 513}
    index0 = z0
    index1 = z2
    index2 = z3
    index3 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 512, 513)
    index4 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 262656, 144)
    index5 = ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index6 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index7 = 513*z1 + 98560*z2 + z3
    index8 = ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index9 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index10 = 24640*z0 + 513*z1 + 98560*z2 + z3
    index11 = 131328*z0 + 525312*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf9', get_index_2)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_4 = ops.constant(1, torch.int64)
        ge_2 = ops.ge(index_expr_2, constant_4)
        masked_subblock10 = self.masked_subblock10(ge_2, 0.0)
        get_index_4 = self.get_index('index10')
        load_1 = ops.load('buf9', get_index_4)
        where_2 = ops.where(ge_2, masked_subblock10, load_1)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_5 = self.get_index('index11')
        store = ops.store('buf10', get_index_5, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf8', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf8', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf9', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf9', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf8', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf9', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
    def masked_subblock12(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf8', get_index)
        return load
    def masked_subblock11(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock12 = self.masked_subblock12(lt, 0.0)
        return masked_subblock12
    def masked_subblock10(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock11 = self.masked_subblock11(lt, 0.0)
        get_index_1 = self.get_index('index10')
        load = ops.load('buf9', get_index_1)
        where = ops.where(lt, masked_subblock11, load)
        return where
op10 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 6303744)
        x1 = (xindex // 513) % 256
        x0 = xindex % 513
        x2 = (xindex // 131328) % 48
        x4 = xindex % 131328
        tmp47 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), None, eviction_policy='evict_last')
        tmp62 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), None)
        tmp0 = x3
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1], 1, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = x0
        tmp7 = tmp6 >= tmp4
        tmp8 = tl.full([1], 256, tl.int64)
        tmp9 = tmp6 < tmp8
        tmp10 = tmp7 & tmp9
        tmp11 = tmp10 & tmp5
        tmp12 = (((-256) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp13 = tl.full([1], 512, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = tl.load(in_ptr0 + ((262144*((((-256) + x0 + (513*x1) + (787968*x2)) // 262656) % 144)) + (((-256) + x0 + (513*x1) + (787968*x2)) % 262656)), tmp15, eviction_policy='evict_last', other=0.0)
        tmp17 = tl.full(tmp16.shape, 0.0, tmp16.dtype)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.full([1], 0, tl.int64)
        tmp20 = tmp19 >= tmp4
        tmp21 = tmp20 & tmp5
        tmp22 = tmp9 & tmp21
        tmp23 = (((-131584) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp24 = tmp23 < tmp13
        tmp25 = tmp24 & tmp22
        tmp26 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp25, eviction_policy='evict_last', other=0.0)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp22, tmp26, tmp27)
        tmp29 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp21, eviction_policy='evict_last', other=0.0)
        tmp30 = tl.where(tmp9, tmp28, tmp29)
        tmp31 = tl.full(tmp30.shape, 0.0, tmp30.dtype)
        tmp32 = tl.where(tmp21, tmp30, tmp31)
        tmp33 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp5, eviction_policy='evict_last', other=0.0)
        tmp34 = tl.where(tmp20, tmp32, tmp33)
        tmp35 = tl.where(tmp10, tmp18, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp5, tmp35, tmp36)
        tmp38 = tmp9 & tmp20
        tmp39 = tmp24 & tmp38
        tmp40 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp39, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp38, tmp40, tmp41)
        tmp43 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp20, eviction_policy='evict_last', other=0.0)
        tmp44 = tl.where(tmp9, tmp42, tmp43)
        tmp45 = tl.full(tmp44.shape, 0.0, tmp44.dtype)
        tmp46 = tl.where(tmp20, tmp44, tmp45)
        tmp48 = tl.where(tmp20, tmp46, tmp47)
        tmp49 = tl.where(tmp5, tmp37, tmp48)
        tmp50 = tmp0 >= tmp4
        tmp51 = tmp9 & tmp50
        tmp52 = (((-131584) + x0 + (513*x1) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp53 = tmp52 < tmp13
        tmp54 = tmp53 & tmp51
        tmp55 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp54, other=0.0)
        tmp56 = tl.full(tmp55.shape, 0.0, tmp55.dtype)
        tmp57 = tl.where(tmp51, tmp55, tmp56)
        tmp58 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), tmp50, other=0.0)
        tmp59 = tl.where(tmp9, tmp57, tmp58)
        tmp60 = tl.full(tmp59.shape, 0.0, tmp59.dtype)
        tmp61 = tl.where(tmp50, tmp59, tmp60)
        tmp63 = tl.where(tmp50, tmp61, tmp62)
        tmp64 = tl.where(tmp2, tmp49, tmp63)
        tl.store(out_ptr0 + (x4 + (131328*x3) + (525312*x2)), tmp64, None)


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 6303744}, None)]
op11.unmet_dependencies = [MemoryDep('buf10', 525312*c0 + c1 + 393984, {c0: 48, c1: 131328}, None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
    buf11.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (6303744, 1)
op11.sizes = ([48, 256, 513], [])
buf10_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
class op11_loop_body:
    var_ranges = {z0: 48, z1: 256, z2: 513}
    index0 = z2
    index1 = -z1 - z2 + 512
    index2 = z1 + 768
    index3 = z1 + z2 + 513
    index4 = 525312*z0 + 513*z1 + z2 + 393984
    index5 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf10', get_index_2)
        where = ops.where(lt, masked_subblock4, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index5')
        store = ops.store('buf11', get_index_3, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf10', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf10', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_3 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf10', get_index_2)
        where_1 = ops.where(lt, masked_subblock2, load)
        constant_4 = ops.constant(-inf, torch.float32)
        where_2 = ops.where(to_dtype, constant_4, where_1)
        return where_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf10', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf10', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
op11 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6303744
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 513
        x1 = (xindex // 513) % 256
        x2 = (xindex // 131328)
        x3 = xindex % 131328
        x4 = xindex
        tmp43 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), None)
        tmp0 = x0
        tmp1 = tl.full([1], 256, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = 512 + ((-1)*x0) + ((-1)*x1)
        tmp4 = tl.full([1], 0, tl.int64)
        tmp5 = tmp3 <= tmp4
        tmp6 = 1.0
        tmp7 = 0.0
        tmp8 = tl.where(tmp5, tmp6, tmp7)
        tmp9 = (tmp8 != 0)
        tmp10 = 768 + x1
        tmp11 = tmp10 < tmp1
        tmp12 = tmp11 & tmp2
        tmp13 = tl.full([1], 257, tl.int64)
        tmp14 = tmp0 < tmp13
        tmp15 = tmp14 & tmp12
        tmp16 = 513 + x0 + x1
        tmp17 = tmp16 <= tmp4
        tmp18 = tl.where(tmp17, tmp6, tmp7)
        tmp19 = (tmp18 != 0)
        tmp20 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp15, other=0.0)
        tmp21 = float("-inf")
        tmp22 = tl.where(tmp19, tmp21, tmp20)
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp15, tmp22, tmp23)
        tmp25 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp12, other=0.0)
        tmp26 = tl.where(tmp14, tmp24, tmp25)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp12, tmp26, tmp27)
        tmp29 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp2, other=0.0)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp31 = tl.where(tmp9, tmp21, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tmp34 = tmp14 & tmp11
        tmp35 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp34, other=0.0)
        tmp36 = tl.where(tmp19, tmp21, tmp35)
        tmp37 = tl.full(tmp36.shape, 0.0, tmp36.dtype)
        tmp38 = tl.where(tmp34, tmp36, tmp37)
        tmp39 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp11, other=0.0)
        tmp40 = tl.where(tmp14, tmp38, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp11, tmp40, tmp41)
        tmp44 = tl.where(tmp11, tmp42, tmp43)
        tmp45 = tl.where(tmp2, tmp33, tmp44)
        tl.store(out_ptr0 + (x4), tmp45, None)


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 4096}, None)]
op12.unmet_dependencies = []
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf12.users = [
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
    ]
]
op12.group.device = cuda:0
op12.group.iteration = (4096, 1)
op12.sizes = ([4096], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op12_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(1.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf12', get_index, constant, None)
        return store
op12 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = 1.0
        tl.store(out_ptr0 + (x0), tmp0, None)


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 4096}, None)]
op13.unmet_dependencies = []
op13.met_dependencies = [MemoryDep('arg7_1', c0, {c0: 4096}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf13.users = [
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
    ]
]
op13.group.device = cuda:0
op13.group.iteration = (4096, 1)
op13.sizes = ([4096], [])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[4, 1024], stride=[1024, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op13_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        constant = ops.constant(0.0, torch.float32)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        ne_1 = ops.ne(load_1, constant_1)
        to_dtype = ops.to_dtype(ne_1, torch.float32, src_dtype = torch.bool)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(ne, constant_2, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf13', get_index_2, where, None)
        return store
op13 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.0
        tmp2 = tmp0 != tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp4, tmp3)
        tl.store(out_ptr0 + (x0), tmp5, None)


op14: SchedulerNode(ComputedBuffer)
op14.writes = [   MemoryDep('buf14', 525312*c0 + 513*c1 + 131328*c2 + c3, {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op14.unmet_dependencies = 
    [   MemoryDep('buf12', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3 + 656384, 512, 513), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf12', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 512, 513) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf12', ModularIndexing(513*c1 + c3 + 787712, 512, 513) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf13', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3, 1, 512), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf13', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 1, 512) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf13', ModularIndexing(513*c1 + c3 + 787712, 1, 512) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
    buf14.users = [
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
    ]
]
op14.group.device = cuda:0
op14.group.iteration = (2101248, 1)
op14.sizes = ([4, 256, 4, 513], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
class op14_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 4, z3: 513}
    index0 = z0
    index1 = z3
    index2 = ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index3 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index4 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3, 1, 512)
    index5 = ModularIndexing(513*z1 + z3 + 787712, 512, 513)
    index6 = ModularIndexing(513*z1 + z3 + 787712, 512, 513) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index7 = ModularIndexing(513*z1 + z3 + 787712, 1, 512) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index8 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513)
    index9 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index10 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 1, 512) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index11 = 525312*z0 + 513*z1 + 131328*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index11')
        store = ops.store('buf14', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf13', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf13', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index10')
        load_1 = ops.load('buf13', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op14 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2101248
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 525312)
        x0 = xindex % 513
        x2 = (xindex // 2052) % 256
        x1 = (xindex // 513) % 4
        tmp0 = x3
        tmp1 = tl.full([1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x0 + (513*x2)) // 512) % 513
        tmp7 = tl.full([1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + (((656384 + x0 + (513*x2)) // 512) % 513)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.load(in_ptr1 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + ((x0 + (513*x2)) % 512)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp12 = tmp10 * tmp11
        tmp13 = tl.full(tmp12.shape, 0.0, tmp12.dtype)
        tmp14 = tl.where(tmp9, tmp12, tmp13)
        tmp15 = tl.full(tmp14.shape, 0.0, tmp14.dtype)
        tmp16 = tl.where(tmp5, tmp14, tmp15)
        tmp17 = tl.full([1], 3, tl.int64)
        tmp18 = tmp17 < tmp17
        tmp19 = tmp5 & tmp18
        tmp20 = ((787712 + x0 + (513*x2)) // 512) % 513
        tmp21 = tmp20 < tmp7
        tmp22 = tmp21 & tmp19
        tmp23 = tl.load(in_ptr0 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + (((787712 + x0 + (513*x2)) // 512) % 513)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp24 = tl.load(in_ptr1 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + ((787712 + x0 + (513*x2)) % 512)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp25 = tmp23 * tmp24
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp22, tmp25, tmp26)
        tmp28 = tl.full(tmp27.shape, 0.0, tmp27.dtype)
        tmp29 = tl.where(tmp19, tmp27, tmp28)
        tmp30 = 0.0
        tmp31 = tl.where(tmp5, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp18, tmp31, tmp32)
        tmp34 = tl.where(tmp18, tmp33, tmp30)
        tmp35 = tl.where(tmp5, tmp16, tmp34)
        tmp36 = tmp0 < tmp17
        tmp37 = tmp5 & tmp36
        tmp38 = (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513
        tmp39 = tmp38 < tmp7
        tmp40 = tmp39 & tmp37
        tmp41 = tl.load(in_ptr0 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + ((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513)), tmp40, eviction_policy='evict_last', other=0.0)
        tmp42 = tl.load(in_ptr1 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) % 512)), tmp40, other=0.0)
        tmp43 = tmp41 * tmp42
        tmp44 = tl.full(tmp43.shape, 0.0, tmp43.dtype)
        tmp45 = tl.where(tmp40, tmp43, tmp44)
        tmp46 = tl.full(tmp45.shape, 0.0, tmp45.dtype)
        tmp47 = tl.where(tmp37, tmp45, tmp46)
        tmp48 = tl.where(tmp5, tmp47, tmp30)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp36, tmp48, tmp49)
        tmp51 = tl.where(tmp36, tmp50, tmp30)
        tmp52 = tl.where(tmp2, tmp35, tmp51)
        tl.store(out_ptr0 + (x0 + (513*x2) + (131328*x1) + (525312*x3)), tmp52, None)


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 525312}, None)]
op15.unmet_dependencies = 
    [   MemoryDep('buf12', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf12', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf13', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf13', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf14', c0, {c0: 525312}, None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
    ]
]
op15.group.device = cuda:0
op15.group.iteration = (525312, 1)
op15.sizes = ([4, 256, 513], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
class op15_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 513}
    index0 = z1
    index1 = z2
    index2 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513)
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index5 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index7 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index8 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_1 = ops.constant(0, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_1, constant_2)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf14', get_index_1)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index8')
        store = ops.store('buf15', get_index_2, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf13', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf13', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf14', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index8')
        load = ops.load('buf14', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf13', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf14', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
op15 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 256
        x2 = xindex
        y1 = (yindex // 256)
        y3 = yindex
        tmp56 = tl.load(in_ptr2 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 1, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tmp3 >= tmp1
        tmp5 = tl.full([1, 1], 256, tl.int64)
        tmp6 = tmp3 < tmp5
        tmp7 = tmp4 & tmp6
        tmp8 = tmp7 & tmp2
        tmp9 = (((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp10 = tl.full([1, 1], 512, tl.int64)
        tmp11 = tmp9 < tmp10
        tmp12 = tmp11 & tmp8
        tmp13 = tl.load(in_ptr0 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp14 = tl.load(in_ptr1 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + (((-256) + x2 + (513*y0) + (787968*y1)) % 512)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp15 = tmp13 * tmp14
        tmp16 = tl.full(tmp15.shape, 0.0, tmp15.dtype)
        tmp17 = tl.where(tmp12, tmp15, tmp16)
        tmp18 = tl.full(tmp17.shape, 0.0, tmp17.dtype)
        tmp19 = tl.where(tmp8, tmp17, tmp18)
        tmp20 = tl.full([1, 1], 0, tl.int64)
        tmp21 = tmp20 >= tmp1
        tmp22 = tmp21 & tmp2
        tmp23 = tmp6 & tmp22
        tmp24 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp25 = tmp24 < tmp10
        tmp26 = tmp25 & tmp23
        tmp27 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tmp27 * tmp28
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp26, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp23, tmp31, tmp32)
        tmp34 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp22 & xmask, eviction_policy='evict_last', other=0.0)
        tmp35 = tl.where(tmp6, tmp33, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp22, tmp35, tmp36)
        tmp38 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp39 = tl.where(tmp21, tmp37, tmp38)
        tmp40 = tl.where(tmp7, tmp19, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp2, tmp40, tmp41)
        tmp43 = tmp6 & tmp21
        tmp44 = tmp25 & tmp43
        tmp45 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp47 = tmp45 * tmp46
        tmp48 = tl.full(tmp47.shape, 0.0, tmp47.dtype)
        tmp49 = tl.where(tmp44, tmp47, tmp48)
        tmp50 = tl.full(tmp49.shape, 0.0, tmp49.dtype)
        tmp51 = tl.where(tmp43, tmp49, tmp50)
        tmp52 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp21 & xmask, eviction_policy='evict_last', other=0.0)
        tmp53 = tl.where(tmp6, tmp51, tmp52)
        tmp54 = tl.full(tmp53.shape, 0.0, tmp53.dtype)
        tmp55 = tl.where(tmp21, tmp53, tmp54)
        tmp57 = tl.where(tmp21, tmp55, tmp56)
        tmp58 = tl.where(tmp2, tmp42, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 263168}, None)]
op16.unmet_dependencies = 
    [   MemoryDep('buf12', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf13', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf14', 513*c0 + c1, {c0: 1024, c1: 257}, None),
        MemoryDep('buf15', 513*c0 + c1, {c0: 1024, c1: 257}, None)]
op16.met_dependencies = []
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (263168, 1)
op16.sizes = ([4, 256, 257], [])
buf15_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
class op16_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 257}
    index0 = z1 + z2 - 255
    index1 = 131328*z0 + 513*z1 + z2
    index2 = z2
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index5 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index6 = 65792*z0 + 257*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        constant_3 = ops.constant(0, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq = ops.eq(constant_3, constant_4)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf15', get_index_1)
        constant_5 = ops.constant(0, torch.int64)
        constant_6 = ops.constant(1, torch.int64)
        ge = ops.ge(constant_5, constant_6)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf14', get_index_2)
        where_1 = ops.where(ge, masked_subblock1, load_1)
        where_2 = ops.where(eq, load, where_1)
        constant_7 = ops.constant(-inf, torch.float32)
        where_3 = ops.where(to_dtype, constant_7, where_2)
        get_index_3 = self.get_index('index6')
        store = ops.store('buf16', get_index_3, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('buf13', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf14', get_index_1)
        where = ops.where(lt, masked_subblock2, load)
        return where
op16 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 257
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 256
        y3 = yindex
        y1 = (yindex // 256)
        tmp9 = tl.load(in_ptr0 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr3 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = (-255) + x2 + y0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 <= tmp1
        tmp3 = 1.0
        tmp4 = 0.0
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tmp6 = (tmp5 != 0)
        tmp7 = tl.full([1, 1], 0, tl.int32)
        tmp8 = tmp7 == tmp7
        tmp10 = tl.full([1, 1], 1, tl.int64)
        tmp11 = tmp1 >= tmp10
        tmp12 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp13 = tl.full([1, 1], 256, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp17 = tl.full([1, 1], 512, tl.int64)
        tmp18 = tmp16 < tmp17
        tmp19 = tmp18 & tmp15
        tmp20 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tmp20 * tmp21
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp19, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp15, tmp24, tmp25)
        tmp27 = tl.load(in_ptr3 + (x2 + (513*y3)), tmp11 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.where(tmp14, tmp26, tmp27)
        tmp29 = tl.full(tmp28.shape, 0.0, tmp28.dtype)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp32 = tl.where(tmp11, tmp30, tmp31)
        tmp33 = tl.where(tmp8, tmp9, tmp32)
        tmp34 = float("-inf")
        tmp35 = tl.where(tmp6, tmp34, tmp33)
        tl.store(out_ptr0 + (x2 + (257*y3)), tmp35, xmask)


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 2101248}, None)]
op17.unmet_dependencies = 
    [   MemoryDep('buf12', ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf13', ModularIndexing(c2 + 513*ModularIndexing(c1, 1, 256), 1, 512) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf14', 131328*c0 + c2 + 525312*((c1//256)) + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf15', 131328*c0 + c2 + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf16', 65792*c0 + 257*c1 + c2, {c0: 4, c1: 1024, c2: 513}, None)]
op17.met_dependencies = []
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (2101248, 1)
op17.sizes = ([4, 1024, 513], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
class op17_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 513}
    index0 = z1
    index1 = z2
    index2 = 65792*z0 + 257*z1 + z2
    index3 = (z1//256)
    index4 = 131328*z0 + z2 + 513*ModularIndexing(z1, 1, 256)
    index5 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index7 = ModularIndexing(z2 + 513*ModularIndexing(z1, 1, 256), 1, 512) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index8 = 131328*z0 + z2 + 525312*((z1//256)) + 513*ModularIndexing(z1, 1, 256)
    index9 = 525312*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf15', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock6 = self.masked_subblock6(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf14', get_index_4)
        where = ops.where(ge, masked_subblock6, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_5 = self.get_index('index9')
        store = ops.store('buf17', get_index_5, where_2, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf16', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf13', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf14', get_index_1)
        where = ops.where(lt, masked_subblock4, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf15', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf14', get_index_4)
        where = ops.where(ge, masked_subblock3, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock2, where_1)
        return where_2
    def masked_subblock8(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf13', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf14', get_index_1)
        where = ops.where(lt, masked_subblock7, load)
        return where
op17 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 11, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 4096
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 1024
        x2 = xindex
        y1 = (yindex // 1024)
        y3 = yindex
        tmp40 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), xmask, eviction_policy='evict_last')
        tmp55 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 256, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tl.full([1, 1], 257, tl.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp5 & tmp2
        tmp7 = tl.load(in_ptr0 + (x2 + (257*y0) + (65792*y1)), tmp6 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tl.broadcast_to((y0 // 256), [XBLOCK, YBLOCK])
        tmp9 = tl.full([1, 1], 0, tl.int32)
        tmp10 = tmp8 == tmp9
        tmp11 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp12 = tl.full([1, 1], 1, tl.int64)
        tmp13 = tmp8 >= tmp12
        tmp14 = tmp13 & tmp2
        tmp15 = tmp3 < tmp1
        tmp16 = tmp15 & tmp14
        tmp17 = (((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513
        tmp18 = tl.full([1, 1], 512, tl.int64)
        tmp19 = tmp17 < tmp18
        tmp20 = tmp19 & tmp16
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp23 = tmp21 * tmp22
        tmp24 = tl.full(tmp23.shape, 0.0, tmp23.dtype)
        tmp25 = tl.where(tmp20, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp16, tmp25, tmp26)
        tmp28 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp14 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tl.where(tmp15, tmp27, tmp28)
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp14, tmp29, tmp30)
        tmp32 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp33 = tl.where(tmp13, tmp31, tmp32)
        tmp34 = tl.where(tmp10, tmp11, tmp33)
        tmp35 = tl.where(tmp5, tmp7, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp2, tmp35, tmp36)
        tmp38 = (y0 // 256)
        tmp39 = tmp38 == tmp9
        tmp41 = tmp38 >= tmp12
        tmp42 = tmp15 & tmp41
        tmp43 = tmp19 & tmp42
        tmp44 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp45 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tmp44 * tmp45
        tmp47 = tl.full(tmp46.shape, 0.0, tmp46.dtype)
        tmp48 = tl.where(tmp43, tmp46, tmp47)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp42, tmp48, tmp49)
        tmp51 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp41 & xmask, eviction_policy='evict_last', other=0.0)
        tmp52 = tl.where(tmp15, tmp50, tmp51)
        tmp53 = tl.full(tmp52.shape, 0.0, tmp52.dtype)
        tmp54 = tl.where(tmp41, tmp52, tmp53)
        tmp56 = tl.where(tmp41, tmp54, tmp55)
        tmp57 = tl.where(tmp39, tmp40, tmp56)
        tmp58 = tl.where(tmp2, tmp37, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op18: SchedulerNode(ComputedBuffer)
op18.writes = [   MemoryDep('buf18', 6324224*c0 + 513*c1 + 6176*c2 + c3, {c0: 4, c1: 12, c2: 1024, c3: 513}, None)]
op18.unmet_dependencies = 
    [   MemoryDep('buf10', 525312*c0 + 513*c1 + c2 + 131328*((ModularIndexing(c1, 1, 256)//256)), {c0: 48, c1: 1024, c2: 513}, None),
        MemoryDep('buf11', 131328*c0 + c1 - 393984, {c0: 48, c1: 525312}, None),
        MemoryDep('buf17', 525312*c0 + c2, {c0: 4, c1: 12, c2: 525312}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
    buf18.users = [
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
    ]
]
op18.group.device = cuda:0
op18.group.iteration = (25214976, 1)
op18.sizes = ([4, 12, 1024, 513], [])
buf11_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
class op18_loop_body:
    var_ranges = {z0: 4, z1: 12, z2: 1024, z3: 513}
    index0 = z2
    index1 = 1575936*z0 + 131328*z1 + 513*z2 + z3 - 393984
    index2 = z2 + 256*((ModularIndexing(z2, 1, 256)//256))
    index3 = z3
    index4 = z2 + z3 + 256*((ModularIndexing(z2, 1, 256)//256)) - 255
    index5 = 6303744*z0 + 525312*z1 + 513*z2 + z3 + 131328*((ModularIndexing(z2, 1, 256)//256))
    index6 = -z2 - z3 + 1280
    index7 = 525312*z0 + 513*z2 + z3
    index8 = 6324224*z0 + 513*z1 + 6176*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(768, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index5')
        load = ops.load('buf10', get_index_2)
        where = ops.where(lt, masked_subblock2, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_4 = self.get_index('index7')
        load_1 = ops.load('buf17', get_index_4)
        where_2 = ops.where(ge_1, masked_subblock4, load_1)
        add = ops.add(where_1, where_2)
        get_index_5 = self.get_index('index8')
        store = ops.store('buf18', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf11', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf10', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf10', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf17', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(ge, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf17', get_index_1)
        where = ops.where(ge, masked_subblock5, load)
        return where
op18 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 513) % 1024
        x4 = xindex % 525312
        x5 = (xindex // 525312)
        x0 = xindex % 513
        x3 = (xindex // 6303744)
        x2 = (xindex // 525312) % 12
        tmp27 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), None)
        tmp44 = tl.load(in_ptr2 + (x4 + (525312*x3)), None, eviction_policy='evict_last')
        tmp0 = x1
        tmp1 = tl.full([1], 768, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.load(in_ptr0 + ((-393984) + x4 + (131328*x5)), tmp2, other=0.0)
        tmp4 = x1 + (256*((x1 % 256) // 256))
        tmp5 = tl.full([1], 256, tl.int64)
        tmp6 = tmp4 < tmp5
        tmp7 = x0
        tmp8 = tl.full([1], 257, tl.int64)
        tmp9 = tmp7 < tmp8
        tmp10 = tmp9 & tmp6
        tmp11 = (-255) + x0 + x1 + (256*((x1 % 256) // 256))
        tmp12 = tl.full([1], 0, tl.int64)
        tmp13 = tmp11 <= tmp12
        tmp14 = 1.0
        tmp15 = 0.0
        tmp16 = tl.where(tmp13, tmp14, tmp15)
        tmp17 = (tmp16 != 0)
        tmp18 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp10, other=0.0)
        tmp19 = float("-inf")
        tmp20 = tl.where(tmp17, tmp19, tmp18)
        tmp21 = tl.full(tmp20.shape, 0.0, tmp20.dtype)
        tmp22 = tl.where(tmp10, tmp20, tmp21)
        tmp23 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp6, other=0.0)
        tmp24 = tl.where(tmp9, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp6, tmp24, tmp25)
        tmp28 = tl.where(tmp6, tmp26, tmp27)
        tmp29 = tl.where(tmp2, tmp3, tmp28)
        tmp30 = tmp7 >= tmp5
        tmp31 = tmp30 & tmp2
        tmp32 = 1280 + ((-1)*x0) + ((-1)*x1)
        tmp33 = tmp32 <= tmp12
        tmp34 = tl.where(tmp33, tmp14, tmp15)
        tmp35 = (tmp34 != 0)
        tmp36 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp31, eviction_policy='evict_last', other=0.0)
        tmp37 = tl.where(tmp35, tmp19, tmp36)
        tmp38 = tl.full(tmp37.shape, 0.0, tmp37.dtype)
        tmp39 = tl.where(tmp31, tmp37, tmp38)
        tmp40 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.where(tmp30, tmp39, tmp40)
        tmp42 = tl.full(tmp41.shape, 0.0, tmp41.dtype)
        tmp43 = tl.where(tmp2, tmp41, tmp42)
        tmp45 = tl.where(tmp2, tmp43, tmp44)
        tmp46 = tmp29 + tmp45
        tl.store(out_ptr0 + (x0 + (513*x2) + (6176*x1) + (6324224*x3)), tmp46, None)


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 49152}, None)]
op19.unmet_dependencies = [MemoryDep('buf18', 6176*c0 + c1, {c0: 4096, c1: 6156}, None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf19.users = [
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
    ]
]
op19.group.device = cuda:0
op19.group.iteration = (49152, 513)
op19.sizes = ([4096, 12], [513])
buf18_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op19_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf19', get_index_1, reduction)
        return store_reduction
op19 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        x3 = xindex
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp2, None)


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 49152}, None)]
op20.unmet_dependencies = 
    [   MemoryDep('buf18', 6176*c0 + c1, {c0: 4096, c1: 6156}, None),
        MemoryDep('buf19', c0, {c0: 49152}, None)]
op20.met_dependencies = []
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf20.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (49152, 513)
op20.sizes = ([4096, 12], [513])
buf18_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf20_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op20_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf19', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf20', get_index_2, reduction)
        return store_reduction
op20 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        x3 = xindex
        tmp1 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp5, None)


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 3145728}, None)]
op21.unmet_dependencies = []
op21.met_dependencies = [MemoryDep('arg0_1', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (3145728, 1)
op21.sizes = ([1024, 4, 768], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op21_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf21', get_index_1, load, None)
        return store
op21 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg5_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 4718592}, None)]
op23.unmet_dependencies = [   MemoryDep('buf22', 64*c0 + 3072*c1 + c2 - 786432, {c0: 48, c1: 1536, c2: 64}, None)]
op23.met_dependencies = [   MemoryDep('arg6_1', c2 + 64*ModularIndexing(c0, 1, 12), {c0: 48, c1: 1536, c2: 64}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
    buf23.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (4718592, 1)
op23.sizes = ([48, 1536, 64], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
class op23_loop_body:
    var_ranges = {z0: 48, z1: 1536, z2: 64}
    index0 = z1 - 256
    index1 = 64*z0 + 3072*z1 + z2 - 786432
    index2 = z2 + 64*ModularIndexing(z0, 1, 12)
    index3 = 98304*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1024, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, -1.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf23', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op23 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 1536
        x0 = xindex % 64
        x2 = (xindex // 98304)
        x3 = xindex
        tmp0 = (-256) + x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 1024, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-786432) + x0 + (64*x2) + (3072*x1)), tmp5, other=0.0)
        tmp7 = tl.load(in_ptr1 + (x0 + (64*(x2 % 12))), tmp5, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, -1.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', 770*c0 + 788480*c1 + c2, {c0: 1024, c1: 48, c2: 770}, None)]
op24.unmet_dependencies = 
    [   MemoryDep('buf18', 6176*c0 + c2 + 6324224*((c1//12)) + 6324224*((ModularIndexing(c1, 1, 12)//12)) + 513*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 770}, None),
        MemoryDep('buf19', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None),
        MemoryDep('buf20', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None)]
op24.met_dependencies = [MemoryDep('arg8_1', c0 + 1024*((c1//12)), {c0: 1024, c1: 48}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
    buf24.users = [NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (37847040, 1)
op24.sizes = ([1024, 48, 770], [])
arg8_1_layout = FixedLayout('cuda', torch.bool, size=[4, 1024], stride=[1024, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf20_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf24_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
class op24_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 770}
    index0 = z2
    index1 = z0 + 1024*((z1//12))
    index2 = 6176*z0 + z2 + 6324224*((z1//12)) + 6324224*((ModularIndexing(z1, 1, 12)//12)) + 513*ModularIndexing(z1, 1, 12)
    index3 = 12*z0 + 12288*((z1//12)) + ModularIndexing(z1, 1, 12)
    index4 = 770*z0 + 788480*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(513, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index4')
        store = ops.store('buf24', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg8_1', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf18', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('buf19', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf20', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(load, constant, truediv)
        return where
op24 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 37847040
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 770
        x1 = (xindex // 770) % 48
        x2 = (xindex // 36960)
        tmp0 = x0
        tmp1 = tl.full([1], 513, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.load(in_ptr0 + (x2 + (1024*(x1 // 12))), tmp2, eviction_policy='evict_last', other=0.0).to(tl.int1)
        tmp4 = tl.load(in_ptr1 + (x0 + (513*(x1 % 12)) + (6176*x2) + (6324224*(x1 // 12)) + (6324224*((x1 % 12) // 12))), tmp2, other=0.0)
        tmp5 = tl.load(in_ptr2 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp4 - tmp5
        tmp7 = tl_math.exp(tmp6)
        tmp8 = tl.load(in_ptr3 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp9 = tmp7 / tmp8
        tmp10 = 0.0
        tmp11 = tl.where(tmp3, tmp10, tmp9)
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp2, tmp11, tmp12)
        tl.store(out_ptr0 + (x0 + (770*x2) + (788480*x1)), tmp13, None)


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 9437184}, None)]
op25.unmet_dependencies = [MemoryDep('buf23', 98304*c0 + 16384*c1 + c2, {c0: 48, c1: 4, c2: 49152}, None)]
op25.met_dependencies = []
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
    buf25.users = [NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (9437184, 1)
op25.sizes = ([48, 4, 49152], [])
buf23_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
class op25_loop_body:
    var_ranges = {z0: 48, z1: 4, z2: 49152}
    index0 = 98304*z0 + 16384*z1 + z2
    index1 = 196608*z0 + 49152*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf25', get_index_1, load, None)
        return store
op25 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 9437184
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 49152
        x1 = (xindex // 49152) % 4
        x2 = (xindex // 196608)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (16384*x1) + (98304*x2)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op26: ExternKernelSchedulerNode(ExternKernelOut)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf24', mode=None), StarDep(name='buf25', mode=None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: ExternKernelOut
    buf26.layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
    buf26.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op26.node.kernel = extern_kernels.bmm


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 3145728}, None)]
op27.unmet_dependencies = [   MemoryDep('buf26', 786432*c0 + 64*c1 + 65536*((c2//64)) + ModularIndexing(c2, 1, 64), {c0: 4, c1: 1024, c2: 768}, None)]
op27.met_dependencies = []
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (3145728, 1)
op27.sizes = ([4, 1024, 768], [])
buf26_layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op27_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 768}
    index0 = 786432*z0 + 64*z1 + 65536*((z2//64)) + ModularIndexing(z2, 1, 64)
    index1 = 786432*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf27', get_index_1, load, None)
        return store
op27 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 1024
        x2 = (xindex // 786432)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + ((64*x1) + (65536*(x0 // 64)) + (786432*x2) + (x0 % 64)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op28: ExternKernelSchedulerNode(ExternKernelOut)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf27', mode=None)]
op28.met_dependencies = [StarDep(name='arg9_1', mode=None)]
op28.outputs = [
    buf28: ExternKernelOut
    buf28.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf28.users = [
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False),
    ]
]
op28.node.kernel = extern_kernels.mm


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 4096}, None)]
op29.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 3145728}, None)]
op29.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 3145728}, None),
        MemoryDep('arg10_1', c1, {c0: 4096, c1: 768}, None)]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf29.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (4096, 768)
op29.sizes = ([4096], [768])
buf28_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op29_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg10_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg0_1', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf29', get_index_3, getitem)
        return store_reduction
op29 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 4096}, None)]
op30.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 3145728}, None)]
op30.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 3145728}, None),
        MemoryDep('arg10_1', c1, {c0: 4096, c1: 768}, None)]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf30.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (4096, 768)
op30.sizes = ([4096], [768])
buf28_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op30_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg10_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg0_1', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf30', get_index_3, getitem_1)
        return store_reduction
op30 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 3145728}, None)]
op32.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 3145728}, None),
        MemoryDep('buf29', c0, {c0: 4096}, None),
        MemoryDep('buf30', c0, {c0: 4096}, None)]
op32.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 3145728}, None),
        MemoryDep('arg10_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg11_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg12_1', c1, {c0: 4096, c1: 768}, None)]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf32.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False),
    ]
]
op32.group.device = cuda:0
op32.group.iteration = (3145728, 1)
op32.sizes = ([4096, 768], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf30_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op32_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg10_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg0_1', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf29', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf30', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg11_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg12_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf32', get_index_7, add_3, None)
        return store
op32 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op33: ExternKernelSchedulerNode(ExternKernelOut)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf32', mode=None)]
op33.met_dependencies = [StarDep(name='arg13_1', mode=None)]
op33.outputs = [
    buf33: ExternKernelOut
    buf33.layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
    buf33.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False)]
]
op33.node.kernel = extern_kernels.mm


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 12582912}, None)]
op34.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 12582912}, None)]
op34.met_dependencies = [MemoryDep('arg14_1', c1, {c0: 4096, c1: 3072}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
    buf34.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (12582912, 1)
op34.sizes = ([4096, 3072], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
class op34_loop_body:
    var_ranges = {z0: 4096, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg14_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf33', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf34', get_index_4, mul_2, None)
        return store
op34 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op35: ExternKernelSchedulerNode(ExternKernelOut)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op35.met_dependencies = [StarDep(name='arg15_1', mode=None)]
op35.outputs = [
    buf35: ExternKernelOut
    buf35.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf35.users = [
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False),
    ]
]
op35.node.kernel = extern_kernels.mm


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 4096}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf32', c0, {c0: 3145728}, None),
        MemoryDep('buf35', c0, {c0: 3145728}, None)]
op36.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 4096, c1: 768}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf36.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (4096, 768)
op36.sizes = ([4096], [768])
buf35_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op36_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg16_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf32', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf36', get_index_3, getitem)
        return store_reduction
op36 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 4096}, None)]
op37.unmet_dependencies = 
    [   MemoryDep('buf32', c0, {c0: 3145728}, None),
        MemoryDep('buf35', c0, {c0: 3145728}, None)]
op37.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 4096, c1: 768}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf37.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (4096, 768)
op37.sizes = ([4096], [768])
buf35_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op37_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg16_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf32', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf37', get_index_3, getitem_1)
        return store_reduction
op37 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 3145728}, None)]
op39.unmet_dependencies = 
    [   MemoryDep('buf32', c0, {c0: 3145728}, None),
        MemoryDep('buf35', c0, {c0: 3145728}, None),
        MemoryDep('buf36', c0, {c0: 4096}, None),
        MemoryDep('buf37', c0, {c0: 4096}, None)]
op39.met_dependencies = 
    [   MemoryDep('arg16_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg17_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg18_1', c1, {c0: 4096, c1: 768}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False),
    ]
]
op39.group.device = cuda:0
op39.group.iteration = (3145728, 1)
op39.sizes = ([4096, 768], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf37_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op39_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg16_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf32', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf36', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf37', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg17_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg18_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf39', get_index_7, add_3, None)
        return store
op39 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 3145728}, None)]
op40.unmet_dependencies = [MemoryDep('buf39', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (3145728, 1)
op40.sizes = ([1024, 4, 768], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op40_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf40', get_index_1, load, None)
        return store
op40 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op41: ExternKernelSchedulerNode(ExternKernelOut)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='arg19_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelOut
    buf41.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op41.node.kernel = extern_kernels.mm


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 3145728}, None)]
op42.unmet_dependencies = [MemoryDep('buf41', c0, {c0: 3145728}, None)]
op42.met_dependencies = [   MemoryDep('arg20_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf42.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (3145728, 1)
op42.sizes = ([1024, 48, 64], [])
buf41_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op42_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg20_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf42', get_index_2, mul, None)
        return store
op42 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x3), tmp4, None)


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 3145728}, None)]
op43.unmet_dependencies = [MemoryDep('buf39', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op43.met_dependencies = []
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (3145728, 1)
op43.sizes = ([1024, 4, 768], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op43_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf43', get_index_1, load, None)
        return store
op43 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op44: ExternKernelSchedulerNode(ExternKernelOut)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf43', mode=None)]
op44.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op44.outputs = [
    buf44: ExternKernelOut
    buf44.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False)]
]
op44.node.kernel = extern_kernels.mm


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 3145728}, None)]
op45.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 3145728}, None)]
op45.met_dependencies = [   MemoryDep('arg22_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf45.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (3145728, 1)
op45.sizes = ([1024, 48, 64], [])
buf44_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op45_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf45', get_index_2, add, None)
        return store
op45 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x3), tmp2, None)


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 4718592}, None)]
op46.unmet_dependencies = [   MemoryDep('buf42', 64*c0 + 786432*c1 + 3072*c2 + c3, {c0: 48, c1: 3, c2: 512, c3: 64}, None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (4718592, 1)
op46.sizes = ([48, 3, 512, 64], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
class op46_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 512, z3: 64}
    index0 = 64*z0 + 786432*z1 + 3072*z2 + z3
    index1 = 98304*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf46', get_index_1, load, None)
        return store
op46 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 3
        x3 = (xindex // 98304)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x3) + (3072*x1) + (786432*x2)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 4718592}, None)]
op47.unmet_dependencies = [   MemoryDep('buf45', 64*c0 + 786432*c1 + c2 + 3072*c3, {c0: 48, c1: 3, c2: 64, c3: 512}, None)]
op47.met_dependencies = []
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (4718592, 1)
op47.sizes = ([48, 3, 64, 512], [])
buf45_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
class op47_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 64, z3: 512}
    index0 = 64*z0 + 786432*z1 + z2 + 3072*z3
    index1 = 98304*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf47', get_index_1, load, None)
        return store
op47 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 9216
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 3
        y2 = (yindex // 192)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (3072*x3) + (786432*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op48: ExternKernelSchedulerNode(ExternKernelOut)
op48.writes = [StarDep(name='buf48', mode=None)]
op48.unmet_dependencies = [StarDep(name='buf46', mode=None), StarDep(name='buf47', mode=None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: ExternKernelOut
    buf48.layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
    buf48.users = [
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
    ]
]
op48.node.kernel = extern_kernels.bmm


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', 24640*c0 + c1, {c0: 1024, c1: 24624}, None)]
op49.unmet_dependencies = 
    [   MemoryDep('buf48', 786432*c2 + 262144*(((513*c0 + c3 + 656384)//262656)) + 786432*(((513*c0 + c3 + 656384)//787968)) + ModularIndexing(513*c0 + c3, 1, 512) + 512*ModularIndexing(513*c0 + c3 + 656384, 512, 513), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf48', ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 262656, 144), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf48', ModularIndexing(513*c0 + c3 + 787712, 1, 262656) + 262144*ModularIndexing(513*c0 + c3 + 787712, 262656, 3) + 786432*ModularIndexing(513*c0 + 787968*c2 + c3 + 787712, 787968, 48), {c0: 256, c1: 4, c2: 48, c3: 513}, None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (25214976, 1)
op49.sizes = ([256, 4, 48, 513], [])
buf48_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
class op49_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 48, z3: 513}
    index0 = z1
    index1 = z3
    index2 = ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index3 = 786432*z2 + 262144*(((513*z0 + z3 + 656384)//262656)) + 786432*(((513*z0 + z3 + 656384)//787968)) + ModularIndexing(513*z0 + z3, 1, 512) + 512*ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index4 = ModularIndexing(513*z0 + z3 + 787712, 512, 513)
    index5 = ModularIndexing(513*z0 + z3 + 787712, 1, 262656) + 262144*ModularIndexing(513*z0 + z3 + 787712, 262656, 3) + 786432*ModularIndexing(513*z0 + 787968*z2 + z3 + 787712, 787968, 48)
    index6 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 512, 513)
    index7 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 262656, 144)
    index8 = 98560*z0 + 24640*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index8')
        store = ops.store('buf49', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf48', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf48', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf48', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op49 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[256, 131072], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 256
        xnumel = 98496
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = (xindex // 24624)
        x1 = xindex % 513
        y0 = yindex
        x2 = (xindex // 513) % 48
        x5 = xindex % 24624
        tmp0 = x3
        tmp1 = tl.full([1, 1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1, 1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x1 + (513*y0)) // 512) % 513
        tmp7 = tl.full([1, 1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((512*(((656384 + x1 + (513*y0)) // 512) % 513)) + (262144*((656384 + x1 + (513*y0)) // 262656)) + (786432*x2) + (786432*((656384 + x1 + (513*y0)) // 787968)) + ((x1 + (513*y0)) % 512)), tmp9 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.full(tmp10.shape, 0.0, tmp10.dtype)
        tmp12 = tl.where(tmp5, tmp10, tmp11)
        tmp13 = tl.full([1, 1], 3, tl.int64)
        tmp14 = tmp13 < tmp13
        tmp15 = tl.broadcast_to(x1, [XBLOCK, YBLOCK])
        tmp16 = tmp15 >= tmp4
        tmp17 = tmp16 & tmp14
        tmp18 = ((787712 + x1 + (513*y0)) // 512) % 513
        tmp19 = tmp18 < tmp7
        tmp20 = tmp19 & tmp17
        tmp21 = tl.load(in_ptr0 + ((262144*(((787712 + x1 + (513*y0)) // 262656) % 3)) + (786432*(((787712 + x1 + (513*y0) + (787968*x2)) // 787968) % 48)) + ((787712 + x1 + (513*y0)) % 262656)), tmp20 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.full(tmp21.shape, 0.0, tmp21.dtype)
        tmp23 = tl.where(tmp17, tmp21, tmp22)
        tmp24 = 0.0
        tmp25 = tl.where(tmp16, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp14, tmp25, tmp26)
        tmp28 = tl.where(tmp14, tmp27, tmp24)
        tmp29 = tl.where(tmp5, tmp12, tmp28)
        tmp30 = tmp0 < tmp13
        tmp31 = tmp16 & tmp30
        tmp32 = (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp33 = tmp32 < tmp7
        tmp34 = tmp33 & tmp31
        tmp35 = tl.load(in_ptr0 + ((262144*((((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 262656) % 144)) + (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) % 262656)), tmp34 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp31, tmp35, tmp36)
        tmp38 = tl.where(tmp16, tmp37, tmp24)
        tmp39 = tl.full(tmp38.shape, 0.0, tmp38.dtype)
        tmp40 = tl.where(tmp30, tmp38, tmp39)
        tmp41 = tl.where(tmp30, tmp40, tmp24)
        tmp42 = tl.where(tmp2, tmp29, tmp41)
        tl.store(out_ptr0 + (x5 + (24640*x3) + (98560*y0)), tmp42, xmask & ymask)


op50: SchedulerNode(ComputedBuffer)
op50.writes = [   MemoryDep('buf50', 131328*c0 + 525312*c1 + c2, {c0: 4, c1: 48, c2: 131328}, None)]
op50.unmet_dependencies = 
    [   MemoryDep('buf48', ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 262656, 144), {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf48', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf48', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf49', 24640*c0 + 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf49', 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None)]
op50.met_dependencies = []
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
    buf50.users = [
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
    ]
]
op50.group.device = cuda:0
op50.group.iteration = (25214976, 1)
op50.sizes = ([4, 48, 256, 513], [])
buf48_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
class op50_loop_body:
    var_ranges = {z0: 4, z1: 48, z2: 256, z3: 513}
    index0 = z0
    index1 = z2
    index2 = z3
    index3 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 512, 513)
    index4 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 262656, 144)
    index5 = ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index6 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index7 = 513*z1 + 98560*z2 + z3
    index8 = ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index9 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index10 = 24640*z0 + 513*z1 + 98560*z2 + z3
    index11 = 131328*z0 + 525312*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf49', get_index_2)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_4 = ops.constant(1, torch.int64)
        ge_2 = ops.ge(index_expr_2, constant_4)
        masked_subblock10 = self.masked_subblock10(ge_2, 0.0)
        get_index_4 = self.get_index('index10')
        load_1 = ops.load('buf49', get_index_4)
        where_2 = ops.where(ge_2, masked_subblock10, load_1)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_5 = self.get_index('index11')
        store = ops.store('buf50', get_index_5, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf48', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf48', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf49', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf49', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf48', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf49', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
    def masked_subblock12(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf48', get_index)
        return load
    def masked_subblock11(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock12 = self.masked_subblock12(lt, 0.0)
        return masked_subblock12
    def masked_subblock10(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock11 = self.masked_subblock11(lt, 0.0)
        get_index_1 = self.get_index('index10')
        load = ops.load('buf49', get_index_1)
        where = ops.where(lt, masked_subblock11, load)
        return where
op50 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 6303744)
        x1 = (xindex // 513) % 256
        x0 = xindex % 513
        x2 = (xindex // 131328) % 48
        x4 = xindex % 131328
        tmp47 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), None, eviction_policy='evict_last')
        tmp62 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), None)
        tmp0 = x3
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1], 1, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = x0
        tmp7 = tmp6 >= tmp4
        tmp8 = tl.full([1], 256, tl.int64)
        tmp9 = tmp6 < tmp8
        tmp10 = tmp7 & tmp9
        tmp11 = tmp10 & tmp5
        tmp12 = (((-256) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp13 = tl.full([1], 512, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = tl.load(in_ptr0 + ((262144*((((-256) + x0 + (513*x1) + (787968*x2)) // 262656) % 144)) + (((-256) + x0 + (513*x1) + (787968*x2)) % 262656)), tmp15, eviction_policy='evict_last', other=0.0)
        tmp17 = tl.full(tmp16.shape, 0.0, tmp16.dtype)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.full([1], 0, tl.int64)
        tmp20 = tmp19 >= tmp4
        tmp21 = tmp20 & tmp5
        tmp22 = tmp9 & tmp21
        tmp23 = (((-131584) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp24 = tmp23 < tmp13
        tmp25 = tmp24 & tmp22
        tmp26 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp25, eviction_policy='evict_last', other=0.0)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp22, tmp26, tmp27)
        tmp29 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp21, eviction_policy='evict_last', other=0.0)
        tmp30 = tl.where(tmp9, tmp28, tmp29)
        tmp31 = tl.full(tmp30.shape, 0.0, tmp30.dtype)
        tmp32 = tl.where(tmp21, tmp30, tmp31)
        tmp33 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp5, eviction_policy='evict_last', other=0.0)
        tmp34 = tl.where(tmp20, tmp32, tmp33)
        tmp35 = tl.where(tmp10, tmp18, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp5, tmp35, tmp36)
        tmp38 = tmp9 & tmp20
        tmp39 = tmp24 & tmp38
        tmp40 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp39, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp38, tmp40, tmp41)
        tmp43 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp20, eviction_policy='evict_last', other=0.0)
        tmp44 = tl.where(tmp9, tmp42, tmp43)
        tmp45 = tl.full(tmp44.shape, 0.0, tmp44.dtype)
        tmp46 = tl.where(tmp20, tmp44, tmp45)
        tmp48 = tl.where(tmp20, tmp46, tmp47)
        tmp49 = tl.where(tmp5, tmp37, tmp48)
        tmp50 = tmp0 >= tmp4
        tmp51 = tmp9 & tmp50
        tmp52 = (((-131584) + x0 + (513*x1) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp53 = tmp52 < tmp13
        tmp54 = tmp53 & tmp51
        tmp55 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp54, other=0.0)
        tmp56 = tl.full(tmp55.shape, 0.0, tmp55.dtype)
        tmp57 = tl.where(tmp51, tmp55, tmp56)
        tmp58 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), tmp50, other=0.0)
        tmp59 = tl.where(tmp9, tmp57, tmp58)
        tmp60 = tl.full(tmp59.shape, 0.0, tmp59.dtype)
        tmp61 = tl.where(tmp50, tmp59, tmp60)
        tmp63 = tl.where(tmp50, tmp61, tmp62)
        tmp64 = tl.where(tmp2, tmp49, tmp63)
        tl.store(out_ptr0 + (x4 + (131328*x3) + (525312*x2)), tmp64, None)


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 6303744}, None)]
op51.unmet_dependencies = [MemoryDep('buf50', 525312*c0 + c1 + 393984, {c0: 48, c1: 131328}, None)]
op51.met_dependencies = []
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
    buf51.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (6303744, 1)
op51.sizes = ([48, 256, 513], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
class op51_loop_body:
    var_ranges = {z0: 48, z1: 256, z2: 513}
    index0 = z2
    index1 = -z1 - z2 + 512
    index2 = z1 + 768
    index3 = z1 + z2 + 513
    index4 = 525312*z0 + 513*z1 + z2 + 393984
    index5 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf50', get_index_2)
        where = ops.where(lt, masked_subblock4, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index5')
        store = ops.store('buf51', get_index_3, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf50', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf50', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_3 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf50', get_index_2)
        where_1 = ops.where(lt, masked_subblock2, load)
        constant_4 = ops.constant(-inf, torch.float32)
        where_2 = ops.where(to_dtype, constant_4, where_1)
        return where_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf50', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf50', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
op51 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6303744
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 513
        x1 = (xindex // 513) % 256
        x2 = (xindex // 131328)
        x3 = xindex % 131328
        x4 = xindex
        tmp43 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), None)
        tmp0 = x0
        tmp1 = tl.full([1], 256, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = 512 + ((-1)*x0) + ((-1)*x1)
        tmp4 = tl.full([1], 0, tl.int64)
        tmp5 = tmp3 <= tmp4
        tmp6 = 1.0
        tmp7 = 0.0
        tmp8 = tl.where(tmp5, tmp6, tmp7)
        tmp9 = (tmp8 != 0)
        tmp10 = 768 + x1
        tmp11 = tmp10 < tmp1
        tmp12 = tmp11 & tmp2
        tmp13 = tl.full([1], 257, tl.int64)
        tmp14 = tmp0 < tmp13
        tmp15 = tmp14 & tmp12
        tmp16 = 513 + x0 + x1
        tmp17 = tmp16 <= tmp4
        tmp18 = tl.where(tmp17, tmp6, tmp7)
        tmp19 = (tmp18 != 0)
        tmp20 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp15, other=0.0)
        tmp21 = float("-inf")
        tmp22 = tl.where(tmp19, tmp21, tmp20)
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp15, tmp22, tmp23)
        tmp25 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp12, other=0.0)
        tmp26 = tl.where(tmp14, tmp24, tmp25)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp12, tmp26, tmp27)
        tmp29 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp2, other=0.0)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp31 = tl.where(tmp9, tmp21, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tmp34 = tmp14 & tmp11
        tmp35 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp34, other=0.0)
        tmp36 = tl.where(tmp19, tmp21, tmp35)
        tmp37 = tl.full(tmp36.shape, 0.0, tmp36.dtype)
        tmp38 = tl.where(tmp34, tmp36, tmp37)
        tmp39 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp11, other=0.0)
        tmp40 = tl.where(tmp14, tmp38, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp11, tmp40, tmp41)
        tmp44 = tl.where(tmp11, tmp42, tmp43)
        tmp45 = tl.where(tmp2, tmp33, tmp44)
        tl.store(out_ptr0 + (x4), tmp45, None)


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 4096}, None)]
op52.unmet_dependencies = []
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf52.users = [
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
    ]
]
op52.group.device = cuda:0
op52.group.iteration = (4096, 1)
op52.sizes = ([4096], [])
buf52_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op52_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(1.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf52', get_index, constant, None)
        return store
op52 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = 1.0
        tl.store(out_ptr0 + (x0), tmp0, None)


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 4096}, None)]
op53.unmet_dependencies = []
op53.met_dependencies = [MemoryDep('arg7_1', c0, {c0: 4096}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf53.users = [
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
    ]
]
op53.group.device = cuda:0
op53.group.iteration = (4096, 1)
op53.sizes = ([4096], [])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[4, 1024], stride=[1024, 1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op53_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        constant = ops.constant(0.0, torch.float32)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        ne_1 = ops.ne(load_1, constant_1)
        to_dtype = ops.to_dtype(ne_1, torch.float32, src_dtype = torch.bool)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(ne, constant_2, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf53', get_index_2, where, None)
        return store
op53 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.0
        tmp2 = tmp0 != tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp4, tmp3)
        tl.store(out_ptr0 + (x0), tmp5, None)


op54: SchedulerNode(ComputedBuffer)
op54.writes = [   MemoryDep('buf54', 525312*c0 + 513*c1 + 131328*c2 + c3, {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op54.unmet_dependencies = 
    [   MemoryDep('buf52', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3 + 656384, 512, 513), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf52', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 512, 513) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf52', ModularIndexing(513*c1 + c3 + 787712, 512, 513) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf53', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3, 1, 512), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf53', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 1, 512) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf53', ModularIndexing(513*c1 + c3 + 787712, 1, 512) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op54.met_dependencies = []
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
    buf54.users = [
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
    ]
]
op54.group.device = cuda:0
op54.group.iteration = (2101248, 1)
op54.sizes = ([4, 256, 4, 513], [])
buf52_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
class op54_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 4, z3: 513}
    index0 = z0
    index1 = z3
    index2 = ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index3 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index4 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3, 1, 512)
    index5 = ModularIndexing(513*z1 + z3 + 787712, 512, 513)
    index6 = ModularIndexing(513*z1 + z3 + 787712, 512, 513) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index7 = ModularIndexing(513*z1 + z3 + 787712, 1, 512) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index8 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513)
    index9 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index10 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 1, 512) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index11 = 525312*z0 + 513*z1 + 131328*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index11')
        store = ops.store('buf54', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf53', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf53', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index10')
        load_1 = ops.load('buf53', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op54 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2101248
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 525312)
        x0 = xindex % 513
        x2 = (xindex // 2052) % 256
        x1 = (xindex // 513) % 4
        tmp0 = x3
        tmp1 = tl.full([1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x0 + (513*x2)) // 512) % 513
        tmp7 = tl.full([1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + (((656384 + x0 + (513*x2)) // 512) % 513)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.load(in_ptr1 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + ((x0 + (513*x2)) % 512)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp12 = tmp10 * tmp11
        tmp13 = tl.full(tmp12.shape, 0.0, tmp12.dtype)
        tmp14 = tl.where(tmp9, tmp12, tmp13)
        tmp15 = tl.full(tmp14.shape, 0.0, tmp14.dtype)
        tmp16 = tl.where(tmp5, tmp14, tmp15)
        tmp17 = tl.full([1], 3, tl.int64)
        tmp18 = tmp17 < tmp17
        tmp19 = tmp5 & tmp18
        tmp20 = ((787712 + x0 + (513*x2)) // 512) % 513
        tmp21 = tmp20 < tmp7
        tmp22 = tmp21 & tmp19
        tmp23 = tl.load(in_ptr0 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + (((787712 + x0 + (513*x2)) // 512) % 513)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp24 = tl.load(in_ptr1 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + ((787712 + x0 + (513*x2)) % 512)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp25 = tmp23 * tmp24
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp22, tmp25, tmp26)
        tmp28 = tl.full(tmp27.shape, 0.0, tmp27.dtype)
        tmp29 = tl.where(tmp19, tmp27, tmp28)
        tmp30 = 0.0
        tmp31 = tl.where(tmp5, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp18, tmp31, tmp32)
        tmp34 = tl.where(tmp18, tmp33, tmp30)
        tmp35 = tl.where(tmp5, tmp16, tmp34)
        tmp36 = tmp0 < tmp17
        tmp37 = tmp5 & tmp36
        tmp38 = (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513
        tmp39 = tmp38 < tmp7
        tmp40 = tmp39 & tmp37
        tmp41 = tl.load(in_ptr0 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + ((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513)), tmp40, eviction_policy='evict_last', other=0.0)
        tmp42 = tl.load(in_ptr1 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) % 512)), tmp40, other=0.0)
        tmp43 = tmp41 * tmp42
        tmp44 = tl.full(tmp43.shape, 0.0, tmp43.dtype)
        tmp45 = tl.where(tmp40, tmp43, tmp44)
        tmp46 = tl.full(tmp45.shape, 0.0, tmp45.dtype)
        tmp47 = tl.where(tmp37, tmp45, tmp46)
        tmp48 = tl.where(tmp5, tmp47, tmp30)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp36, tmp48, tmp49)
        tmp51 = tl.where(tmp36, tmp50, tmp30)
        tmp52 = tl.where(tmp2, tmp35, tmp51)
        tl.store(out_ptr0 + (x0 + (513*x2) + (131328*x1) + (525312*x3)), tmp52, None)


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 525312}, None)]
op55.unmet_dependencies = 
    [   MemoryDep('buf52', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf52', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf53', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf53', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf54', c0, {c0: 525312}, None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
    buf55.users = [
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
    ]
]
op55.group.device = cuda:0
op55.group.iteration = (525312, 1)
op55.sizes = ([4, 256, 513], [])
buf52_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
class op55_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 513}
    index0 = z1
    index1 = z2
    index2 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513)
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index5 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index7 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index8 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_1 = ops.constant(0, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_1, constant_2)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf54', get_index_1)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index8')
        store = ops.store('buf55', get_index_2, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf53', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf53', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf54', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index8')
        load = ops.load('buf54', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf53', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf54', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
op55 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 256
        x2 = xindex
        y1 = (yindex // 256)
        y3 = yindex
        tmp56 = tl.load(in_ptr2 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 1, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tmp3 >= tmp1
        tmp5 = tl.full([1, 1], 256, tl.int64)
        tmp6 = tmp3 < tmp5
        tmp7 = tmp4 & tmp6
        tmp8 = tmp7 & tmp2
        tmp9 = (((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp10 = tl.full([1, 1], 512, tl.int64)
        tmp11 = tmp9 < tmp10
        tmp12 = tmp11 & tmp8
        tmp13 = tl.load(in_ptr0 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp14 = tl.load(in_ptr1 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + (((-256) + x2 + (513*y0) + (787968*y1)) % 512)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp15 = tmp13 * tmp14
        tmp16 = tl.full(tmp15.shape, 0.0, tmp15.dtype)
        tmp17 = tl.where(tmp12, tmp15, tmp16)
        tmp18 = tl.full(tmp17.shape, 0.0, tmp17.dtype)
        tmp19 = tl.where(tmp8, tmp17, tmp18)
        tmp20 = tl.full([1, 1], 0, tl.int64)
        tmp21 = tmp20 >= tmp1
        tmp22 = tmp21 & tmp2
        tmp23 = tmp6 & tmp22
        tmp24 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp25 = tmp24 < tmp10
        tmp26 = tmp25 & tmp23
        tmp27 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tmp27 * tmp28
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp26, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp23, tmp31, tmp32)
        tmp34 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp22 & xmask, eviction_policy='evict_last', other=0.0)
        tmp35 = tl.where(tmp6, tmp33, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp22, tmp35, tmp36)
        tmp38 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp39 = tl.where(tmp21, tmp37, tmp38)
        tmp40 = tl.where(tmp7, tmp19, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp2, tmp40, tmp41)
        tmp43 = tmp6 & tmp21
        tmp44 = tmp25 & tmp43
        tmp45 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp47 = tmp45 * tmp46
        tmp48 = tl.full(tmp47.shape, 0.0, tmp47.dtype)
        tmp49 = tl.where(tmp44, tmp47, tmp48)
        tmp50 = tl.full(tmp49.shape, 0.0, tmp49.dtype)
        tmp51 = tl.where(tmp43, tmp49, tmp50)
        tmp52 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp21 & xmask, eviction_policy='evict_last', other=0.0)
        tmp53 = tl.where(tmp6, tmp51, tmp52)
        tmp54 = tl.full(tmp53.shape, 0.0, tmp53.dtype)
        tmp55 = tl.where(tmp21, tmp53, tmp54)
        tmp57 = tl.where(tmp21, tmp55, tmp56)
        tmp58 = tl.where(tmp2, tmp42, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 263168}, None)]
op56.unmet_dependencies = 
    [   MemoryDep('buf52', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf53', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf54', 513*c0 + c1, {c0: 1024, c1: 257}, None),
        MemoryDep('buf55', 513*c0 + c1, {c0: 1024, c1: 257}, None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (263168, 1)
op56.sizes = ([4, 256, 257], [])
buf55_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
class op56_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 257}
    index0 = z1 + z2 - 255
    index1 = 131328*z0 + 513*z1 + z2
    index2 = z2
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index5 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index6 = 65792*z0 + 257*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        constant_3 = ops.constant(0, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq = ops.eq(constant_3, constant_4)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf55', get_index_1)
        constant_5 = ops.constant(0, torch.int64)
        constant_6 = ops.constant(1, torch.int64)
        ge = ops.ge(constant_5, constant_6)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf54', get_index_2)
        where_1 = ops.where(ge, masked_subblock1, load_1)
        where_2 = ops.where(eq, load, where_1)
        constant_7 = ops.constant(-inf, torch.float32)
        where_3 = ops.where(to_dtype, constant_7, where_2)
        get_index_3 = self.get_index('index6')
        store = ops.store('buf56', get_index_3, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('buf53', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf54', get_index_1)
        where = ops.where(lt, masked_subblock2, load)
        return where
op56 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 257
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 256
        y3 = yindex
        y1 = (yindex // 256)
        tmp9 = tl.load(in_ptr0 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr3 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = (-255) + x2 + y0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 <= tmp1
        tmp3 = 1.0
        tmp4 = 0.0
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tmp6 = (tmp5 != 0)
        tmp7 = tl.full([1, 1], 0, tl.int32)
        tmp8 = tmp7 == tmp7
        tmp10 = tl.full([1, 1], 1, tl.int64)
        tmp11 = tmp1 >= tmp10
        tmp12 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp13 = tl.full([1, 1], 256, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp17 = tl.full([1, 1], 512, tl.int64)
        tmp18 = tmp16 < tmp17
        tmp19 = tmp18 & tmp15
        tmp20 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tmp20 * tmp21
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp19, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp15, tmp24, tmp25)
        tmp27 = tl.load(in_ptr3 + (x2 + (513*y3)), tmp11 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.where(tmp14, tmp26, tmp27)
        tmp29 = tl.full(tmp28.shape, 0.0, tmp28.dtype)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp32 = tl.where(tmp11, tmp30, tmp31)
        tmp33 = tl.where(tmp8, tmp9, tmp32)
        tmp34 = float("-inf")
        tmp35 = tl.where(tmp6, tmp34, tmp33)
        tl.store(out_ptr0 + (x2 + (257*y3)), tmp35, xmask)


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 2101248}, None)]
op57.unmet_dependencies = 
    [   MemoryDep('buf52', ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf53', ModularIndexing(c2 + 513*ModularIndexing(c1, 1, 256), 1, 512) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf54', 131328*c0 + c2 + 525312*((c1//256)) + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf55', 131328*c0 + c2 + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf56', 65792*c0 + 257*c1 + c2, {c0: 4, c1: 1024, c2: 513}, None)]
op57.met_dependencies = []
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (2101248, 1)
op57.sizes = ([4, 1024, 513], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
class op57_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 513}
    index0 = z1
    index1 = z2
    index2 = 65792*z0 + 257*z1 + z2
    index3 = (z1//256)
    index4 = 131328*z0 + z2 + 513*ModularIndexing(z1, 1, 256)
    index5 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index7 = ModularIndexing(z2 + 513*ModularIndexing(z1, 1, 256), 1, 512) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index8 = 131328*z0 + z2 + 525312*((z1//256)) + 513*ModularIndexing(z1, 1, 256)
    index9 = 525312*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf55', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock6 = self.masked_subblock6(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf54', get_index_4)
        where = ops.where(ge, masked_subblock6, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_5 = self.get_index('index9')
        store = ops.store('buf57', get_index_5, where_2, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf56', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf53', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf54', get_index_1)
        where = ops.where(lt, masked_subblock4, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf55', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf54', get_index_4)
        where = ops.where(ge, masked_subblock3, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock2, where_1)
        return where_2
    def masked_subblock8(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf53', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf54', get_index_1)
        where = ops.where(lt, masked_subblock7, load)
        return where
op57 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 11, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 4096
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 1024
        x2 = xindex
        y1 = (yindex // 1024)
        y3 = yindex
        tmp40 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), xmask, eviction_policy='evict_last')
        tmp55 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 256, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tl.full([1, 1], 257, tl.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp5 & tmp2
        tmp7 = tl.load(in_ptr0 + (x2 + (257*y0) + (65792*y1)), tmp6 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tl.broadcast_to((y0 // 256), [XBLOCK, YBLOCK])
        tmp9 = tl.full([1, 1], 0, tl.int32)
        tmp10 = tmp8 == tmp9
        tmp11 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp12 = tl.full([1, 1], 1, tl.int64)
        tmp13 = tmp8 >= tmp12
        tmp14 = tmp13 & tmp2
        tmp15 = tmp3 < tmp1
        tmp16 = tmp15 & tmp14
        tmp17 = (((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513
        tmp18 = tl.full([1, 1], 512, tl.int64)
        tmp19 = tmp17 < tmp18
        tmp20 = tmp19 & tmp16
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp23 = tmp21 * tmp22
        tmp24 = tl.full(tmp23.shape, 0.0, tmp23.dtype)
        tmp25 = tl.where(tmp20, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp16, tmp25, tmp26)
        tmp28 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp14 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tl.where(tmp15, tmp27, tmp28)
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp14, tmp29, tmp30)
        tmp32 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp33 = tl.where(tmp13, tmp31, tmp32)
        tmp34 = tl.where(tmp10, tmp11, tmp33)
        tmp35 = tl.where(tmp5, tmp7, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp2, tmp35, tmp36)
        tmp38 = (y0 // 256)
        tmp39 = tmp38 == tmp9
        tmp41 = tmp38 >= tmp12
        tmp42 = tmp15 & tmp41
        tmp43 = tmp19 & tmp42
        tmp44 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp45 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tmp44 * tmp45
        tmp47 = tl.full(tmp46.shape, 0.0, tmp46.dtype)
        tmp48 = tl.where(tmp43, tmp46, tmp47)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp42, tmp48, tmp49)
        tmp51 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp41 & xmask, eviction_policy='evict_last', other=0.0)
        tmp52 = tl.where(tmp15, tmp50, tmp51)
        tmp53 = tl.full(tmp52.shape, 0.0, tmp52.dtype)
        tmp54 = tl.where(tmp41, tmp52, tmp53)
        tmp56 = tl.where(tmp41, tmp54, tmp55)
        tmp57 = tl.where(tmp39, tmp40, tmp56)
        tmp58 = tl.where(tmp2, tmp37, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op58: SchedulerNode(ComputedBuffer)
op58.writes = [   MemoryDep('buf58', 6324224*c0 + 513*c1 + 6176*c2 + c3, {c0: 4, c1: 12, c2: 1024, c3: 513}, None)]
op58.unmet_dependencies = 
    [   MemoryDep('buf50', 525312*c0 + 513*c1 + c2 + 131328*((ModularIndexing(c1, 1, 256)//256)), {c0: 48, c1: 1024, c2: 513}, None),
        MemoryDep('buf51', 131328*c0 + c1 - 393984, {c0: 48, c1: 525312}, None),
        MemoryDep('buf57', 525312*c0 + c2, {c0: 4, c1: 12, c2: 525312}, None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
    ]
]
op58.group.device = cuda:0
op58.group.iteration = (25214976, 1)
op58.sizes = ([4, 12, 1024, 513], [])
buf51_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
class op58_loop_body:
    var_ranges = {z0: 4, z1: 12, z2: 1024, z3: 513}
    index0 = z2
    index1 = 1575936*z0 + 131328*z1 + 513*z2 + z3 - 393984
    index2 = z2 + 256*((ModularIndexing(z2, 1, 256)//256))
    index3 = z3
    index4 = z2 + z3 + 256*((ModularIndexing(z2, 1, 256)//256)) - 255
    index5 = 6303744*z0 + 525312*z1 + 513*z2 + z3 + 131328*((ModularIndexing(z2, 1, 256)//256))
    index6 = -z2 - z3 + 1280
    index7 = 525312*z0 + 513*z2 + z3
    index8 = 6324224*z0 + 513*z1 + 6176*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(768, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index5')
        load = ops.load('buf50', get_index_2)
        where = ops.where(lt, masked_subblock2, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_4 = self.get_index('index7')
        load_1 = ops.load('buf57', get_index_4)
        where_2 = ops.where(ge_1, masked_subblock4, load_1)
        add = ops.add(where_1, where_2)
        get_index_5 = self.get_index('index8')
        store = ops.store('buf58', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf51', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf50', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf50', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf57', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(ge, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf57', get_index_1)
        where = ops.where(ge, masked_subblock5, load)
        return where
op58 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 513) % 1024
        x4 = xindex % 525312
        x5 = (xindex // 525312)
        x0 = xindex % 513
        x3 = (xindex // 6303744)
        x2 = (xindex // 525312) % 12
        tmp27 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), None)
        tmp44 = tl.load(in_ptr2 + (x4 + (525312*x3)), None, eviction_policy='evict_last')
        tmp0 = x1
        tmp1 = tl.full([1], 768, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.load(in_ptr0 + ((-393984) + x4 + (131328*x5)), tmp2, other=0.0)
        tmp4 = x1 + (256*((x1 % 256) // 256))
        tmp5 = tl.full([1], 256, tl.int64)
        tmp6 = tmp4 < tmp5
        tmp7 = x0
        tmp8 = tl.full([1], 257, tl.int64)
        tmp9 = tmp7 < tmp8
        tmp10 = tmp9 & tmp6
        tmp11 = (-255) + x0 + x1 + (256*((x1 % 256) // 256))
        tmp12 = tl.full([1], 0, tl.int64)
        tmp13 = tmp11 <= tmp12
        tmp14 = 1.0
        tmp15 = 0.0
        tmp16 = tl.where(tmp13, tmp14, tmp15)
        tmp17 = (tmp16 != 0)
        tmp18 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp10, other=0.0)
        tmp19 = float("-inf")
        tmp20 = tl.where(tmp17, tmp19, tmp18)
        tmp21 = tl.full(tmp20.shape, 0.0, tmp20.dtype)
        tmp22 = tl.where(tmp10, tmp20, tmp21)
        tmp23 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp6, other=0.0)
        tmp24 = tl.where(tmp9, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp6, tmp24, tmp25)
        tmp28 = tl.where(tmp6, tmp26, tmp27)
        tmp29 = tl.where(tmp2, tmp3, tmp28)
        tmp30 = tmp7 >= tmp5
        tmp31 = tmp30 & tmp2
        tmp32 = 1280 + ((-1)*x0) + ((-1)*x1)
        tmp33 = tmp32 <= tmp12
        tmp34 = tl.where(tmp33, tmp14, tmp15)
        tmp35 = (tmp34 != 0)
        tmp36 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp31, eviction_policy='evict_last', other=0.0)
        tmp37 = tl.where(tmp35, tmp19, tmp36)
        tmp38 = tl.full(tmp37.shape, 0.0, tmp37.dtype)
        tmp39 = tl.where(tmp31, tmp37, tmp38)
        tmp40 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.where(tmp30, tmp39, tmp40)
        tmp42 = tl.full(tmp41.shape, 0.0, tmp41.dtype)
        tmp43 = tl.where(tmp2, tmp41, tmp42)
        tmp45 = tl.where(tmp2, tmp43, tmp44)
        tmp46 = tmp29 + tmp45
        tl.store(out_ptr0 + (x0 + (513*x2) + (6176*x1) + (6324224*x3)), tmp46, None)


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 49152}, None)]
op59.unmet_dependencies = [MemoryDep('buf58', 6176*c0 + c1, {c0: 4096, c1: 6156}, None)]
op59.met_dependencies = []
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
    ]
]
op59.group.device = cuda:0
op59.group.iteration = (49152, 513)
op59.sizes = ([4096, 12], [513])
buf58_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op59_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf59', get_index_1, reduction)
        return store_reduction
op59 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        x3 = xindex
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp2, None)


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 49152}, None)]
op60.unmet_dependencies = 
    [   MemoryDep('buf58', 6176*c0 + c1, {c0: 4096, c1: 6156}, None),
        MemoryDep('buf59', c0, {c0: 49152}, None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf60.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (49152, 513)
op60.sizes = ([4096, 12], [513])
buf58_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf60_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op60_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf59', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf60', get_index_2, reduction)
        return store_reduction
op60 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        x3 = xindex
        tmp1 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp5, None)


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 3145728}, None)]
op61.unmet_dependencies = [MemoryDep('buf39', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf61.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (3145728, 1)
op61.sizes = ([1024, 4, 768], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op61_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf61', get_index_1, load, None)
        return store
op61 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op62: ExternKernelSchedulerNode(ExternKernelOut)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op62.met_dependencies = [StarDep(name='arg23_1', mode=None)]
op62.outputs = [
    buf62: ExternKernelOut
    buf62.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op62.node.kernel = extern_kernels.mm


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 4718592}, None)]
op63.unmet_dependencies = [   MemoryDep('buf62', 64*c0 + 3072*c1 + c2 - 786432, {c0: 48, c1: 1536, c2: 64}, None)]
op63.met_dependencies = [   MemoryDep('arg24_1', c2 + 64*ModularIndexing(c0, 1, 12), {c0: 48, c1: 1536, c2: 64}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
    buf63.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (4718592, 1)
op63.sizes = ([48, 1536, 64], [])
buf62_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
class op63_loop_body:
    var_ranges = {z0: 48, z1: 1536, z2: 64}
    index0 = z1 - 256
    index1 = 64*z0 + 3072*z1 + z2 - 786432
    index2 = z2 + 64*ModularIndexing(z0, 1, 12)
    index3 = 98304*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1024, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, -1.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf63', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op63 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 1536
        x0 = xindex % 64
        x2 = (xindex // 98304)
        x3 = xindex
        tmp0 = (-256) + x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 1024, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-786432) + x0 + (64*x2) + (3072*x1)), tmp5, other=0.0)
        tmp7 = tl.load(in_ptr1 + (x0 + (64*(x2 % 12))), tmp5, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, -1.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', 770*c0 + 788480*c1 + c2, {c0: 1024, c1: 48, c2: 770}, None)]
op64.unmet_dependencies = 
    [   MemoryDep('buf58', 6176*c0 + c2 + 6324224*((c1//12)) + 6324224*((ModularIndexing(c1, 1, 12)//12)) + 513*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 770}, None),
        MemoryDep('buf59', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None),
        MemoryDep('buf60', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None)]
op64.met_dependencies = [MemoryDep('arg8_1', c0 + 1024*((c1//12)), {c0: 1024, c1: 48}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
    buf64.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (37847040, 1)
op64.sizes = ([1024, 48, 770], [])
arg8_1_layout = FixedLayout('cuda', torch.bool, size=[4, 1024], stride=[1024, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf60_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf64_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
class op64_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 770}
    index0 = z2
    index1 = z0 + 1024*((z1//12))
    index2 = 6176*z0 + z2 + 6324224*((z1//12)) + 6324224*((ModularIndexing(z1, 1, 12)//12)) + 513*ModularIndexing(z1, 1, 12)
    index3 = 12*z0 + 12288*((z1//12)) + ModularIndexing(z1, 1, 12)
    index4 = 770*z0 + 788480*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(513, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index4')
        store = ops.store('buf64', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg8_1', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf58', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('buf59', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf60', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(load, constant, truediv)
        return where
op64 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 37847040
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 770
        x1 = (xindex // 770) % 48
        x2 = (xindex // 36960)
        tmp0 = x0
        tmp1 = tl.full([1], 513, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.load(in_ptr0 + (x2 + (1024*(x1 // 12))), tmp2, eviction_policy='evict_last', other=0.0).to(tl.int1)
        tmp4 = tl.load(in_ptr1 + (x0 + (513*(x1 % 12)) + (6176*x2) + (6324224*(x1 // 12)) + (6324224*((x1 % 12) // 12))), tmp2, other=0.0)
        tmp5 = tl.load(in_ptr2 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp4 - tmp5
        tmp7 = tl_math.exp(tmp6)
        tmp8 = tl.load(in_ptr3 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp9 = tmp7 / tmp8
        tmp10 = 0.0
        tmp11 = tl.where(tmp3, tmp10, tmp9)
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp2, tmp11, tmp12)
        tl.store(out_ptr0 + (x0 + (770*x2) + (788480*x1)), tmp13, None)


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 9437184}, None)]
op65.unmet_dependencies = [MemoryDep('buf63', 98304*c0 + 16384*c1 + c2, {c0: 48, c1: 4, c2: 49152}, None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (9437184, 1)
op65.sizes = ([48, 4, 49152], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
class op65_loop_body:
    var_ranges = {z0: 48, z1: 4, z2: 49152}
    index0 = 98304*z0 + 16384*z1 + z2
    index1 = 196608*z0 + 49152*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf65', get_index_1, load, None)
        return store
op65 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 9437184
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 49152
        x1 = (xindex // 49152) % 4
        x2 = (xindex // 196608)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (16384*x1) + (98304*x2)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf64', mode=None), StarDep(name='buf65', mode=None)]
op66.met_dependencies = []
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op66.node.kernel = extern_kernels.bmm


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 3145728}, None)]
op67.unmet_dependencies = [   MemoryDep('buf66', 786432*c0 + 64*c1 + 65536*((c2//64)) + ModularIndexing(c2, 1, 64), {c0: 4, c1: 1024, c2: 768}, None)]
op67.met_dependencies = []
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (3145728, 1)
op67.sizes = ([4, 1024, 768], [])
buf66_layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op67_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 768}
    index0 = 786432*z0 + 64*z1 + 65536*((z2//64)) + ModularIndexing(z2, 1, 64)
    index1 = 786432*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf67', get_index_1, load, None)
        return store
op67 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 1024
        x2 = (xindex // 786432)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + ((64*x1) + (65536*(x0 // 64)) + (786432*x2) + (x0 % 64)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op68: ExternKernelSchedulerNode(ExternKernelOut)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf67', mode=None)]
op68.met_dependencies = [StarDep(name='arg25_1', mode=None)]
op68.outputs = [
    buf68: ExternKernelOut
    buf68.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False),
    ]
]
op68.node.kernel = extern_kernels.mm


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 4096}, None)]
op69.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 3145728}, None),
        MemoryDep('buf68', c0, {c0: 3145728}, None)]
op69.met_dependencies = [MemoryDep('arg26_1', c1, {c0: 4096, c1: 768}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf69.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (4096, 768)
op69.sizes = ([4096], [768])
buf68_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op69_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf39', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf69', get_index_3, getitem)
        return store_reduction
op69 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 4096}, None)]
op70.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 3145728}, None),
        MemoryDep('buf68', c0, {c0: 3145728}, None)]
op70.met_dependencies = [MemoryDep('arg26_1', c1, {c0: 4096, c1: 768}, None)]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf70.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (4096, 768)
op70.sizes = ([4096], [768])
buf68_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op70_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf39', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf70', get_index_3, getitem_1)
        return store_reduction
op70 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 3145728}, None)]
op72.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 3145728}, None),
        MemoryDep('buf68', c0, {c0: 3145728}, None),
        MemoryDep('buf69', c0, {c0: 4096}, None),
        MemoryDep('buf70', c0, {c0: 4096}, None)]
op72.met_dependencies = 
    [   MemoryDep('arg26_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg27_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg28_1', c1, {c0: 4096, c1: 768}, None)]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf72.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False),
    ]
]
op72.group.device = cuda:0
op72.group.iteration = (3145728, 1)
op72.sizes = ([4096, 768], [])
buf68_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf70_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op72_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf39', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf69', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf70', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg27_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg28_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf72', get_index_7, add_3, None)
        return store
op72 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op73: ExternKernelSchedulerNode(ExternKernelOut)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf72', mode=None)]
op73.met_dependencies = [StarDep(name='arg29_1', mode=None)]
op73.outputs = [
    buf73: ExternKernelOut
    buf73.layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
    buf73.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=True, is_weak=False)]
]
op73.node.kernel = extern_kernels.mm


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 12582912}, None)]
op74.unmet_dependencies = [MemoryDep('buf73', c0, {c0: 12582912}, None)]
op74.met_dependencies = [MemoryDep('arg30_1', c1, {c0: 4096, c1: 3072}, None)]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (12582912, 1)
op74.sizes = ([4096, 3072], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
class op74_loop_body:
    var_ranges = {z0: 4096, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg30_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf73', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg30_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf74', get_index_4, mul_2, None)
        return store
op74 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op75: ExternKernelSchedulerNode(ExternKernelOut)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op75.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op75.outputs = [
    buf75: ExternKernelOut
    buf75.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf75.users = [
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False),
    ]
]
op75.node.kernel = extern_kernels.mm


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 4096}, None)]
op76.unmet_dependencies = 
    [   MemoryDep('buf72', c0, {c0: 3145728}, None),
        MemoryDep('buf75', c0, {c0: 3145728}, None)]
op76.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 4096, c1: 768}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf76.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (4096, 768)
op76.sizes = ([4096], [768])
buf75_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op76_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf72', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf76', get_index_3, getitem)
        return store_reduction
op76 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 4096}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf72', c0, {c0: 3145728}, None),
        MemoryDep('buf75', c0, {c0: 3145728}, None)]
op77.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 4096, c1: 768}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf77.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (4096, 768)
op77.sizes = ([4096], [768])
buf75_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op77_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf72', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf77', get_index_3, getitem_1)
        return store_reduction
op77 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 3145728}, None)]
op79.unmet_dependencies = 
    [   MemoryDep('buf72', c0, {c0: 3145728}, None),
        MemoryDep('buf75', c0, {c0: 3145728}, None),
        MemoryDep('buf76', c0, {c0: 4096}, None),
        MemoryDep('buf77', c0, {c0: 4096}, None)]
op79.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg33_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg34_1', c1, {c0: 4096, c1: 768}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf79.users = [
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False),
    ]
]
op79.group.device = cuda:0
op79.group.iteration = (3145728, 1)
op79.sizes = ([4096, 768], [])
buf75_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf77_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op79_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf72', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf76', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf77', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg33_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg34_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf79', get_index_7, add_3, None)
        return store
op79 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 3145728}, None)]
op80.unmet_dependencies = [MemoryDep('buf79', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op80.met_dependencies = []
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf80.users = [NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (3145728, 1)
op80.sizes = ([1024, 4, 768], [])
buf79_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op80_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf80', get_index_1, load, None)
        return store
op80 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op81: ExternKernelSchedulerNode(ExternKernelOut)
op81.writes = [StarDep(name='buf81', mode=None)]
op81.unmet_dependencies = [StarDep(name='buf80', mode=None)]
op81.met_dependencies = [StarDep(name='arg35_1', mode=None)]
op81.outputs = [
    buf81: ExternKernelOut
    buf81.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf81.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False)]
]
op81.node.kernel = extern_kernels.mm


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 3145728}, None)]
op82.unmet_dependencies = [MemoryDep('buf81', c0, {c0: 3145728}, None)]
op82.met_dependencies = [   MemoryDep('arg36_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf82.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (3145728, 1)
op82.sizes = ([1024, 48, 64], [])
buf81_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op82_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf82', get_index_2, mul, None)
        return store
op82 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x3), tmp4, None)


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 3145728}, None)]
op83.unmet_dependencies = [MemoryDep('buf79', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op83.met_dependencies = []
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (3145728, 1)
op83.sizes = ([1024, 4, 768], [])
buf79_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op83_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf83', get_index_1, load, None)
        return store
op83 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op84: ExternKernelSchedulerNode(ExternKernelOut)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = [StarDep(name='buf83', mode=None)]
op84.met_dependencies = [StarDep(name='arg37_1', mode=None)]
op84.outputs = [
    buf84: ExternKernelOut
    buf84.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf84.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False)]
]
op84.node.kernel = extern_kernels.mm


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 3145728}, None)]
op85.unmet_dependencies = [MemoryDep('buf84', c0, {c0: 3145728}, None)]
op85.met_dependencies = [   MemoryDep('arg38_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf85.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (3145728, 1)
op85.sizes = ([1024, 48, 64], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op85_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg38_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf85', get_index_2, add, None)
        return store
op85 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x3), tmp2, None)


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 4718592}, None)]
op86.unmet_dependencies = [   MemoryDep('buf82', 64*c0 + 786432*c1 + 3072*c2 + c3, {c0: 48, c1: 3, c2: 512, c3: 64}, None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (4718592, 1)
op86.sizes = ([48, 3, 512, 64], [])
buf82_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
class op86_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 512, z3: 64}
    index0 = 64*z0 + 786432*z1 + 3072*z2 + z3
    index1 = 98304*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf86', get_index_1, load, None)
        return store
op86 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 3
        x3 = (xindex // 98304)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x3) + (3072*x1) + (786432*x2)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 4718592}, None)]
op87.unmet_dependencies = [   MemoryDep('buf85', 64*c0 + 786432*c1 + c2 + 3072*c3, {c0: 48, c1: 3, c2: 64, c3: 512}, None)]
op87.met_dependencies = []
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (4718592, 1)
op87.sizes = ([48, 3, 64, 512], [])
buf85_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
class op87_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 64, z3: 512}
    index0 = 64*z0 + 786432*z1 + z2 + 3072*z3
    index1 = 98304*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf87', get_index_1, load, None)
        return store
op87 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 9216
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 3
        y2 = (yindex // 192)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (3072*x3) + (786432*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op88: ExternKernelSchedulerNode(ExternKernelOut)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf86', mode=None), StarDep(name='buf87', mode=None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ExternKernelOut
    buf88.layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
    buf88.users = [
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
    ]
]
op88.node.kernel = extern_kernels.bmm


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', 24640*c0 + c1, {c0: 1024, c1: 24624}, None)]
op89.unmet_dependencies = 
    [   MemoryDep('buf88', 786432*c2 + 262144*(((513*c0 + c3 + 656384)//262656)) + 786432*(((513*c0 + c3 + 656384)//787968)) + ModularIndexing(513*c0 + c3, 1, 512) + 512*ModularIndexing(513*c0 + c3 + 656384, 512, 513), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf88', ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 262656, 144), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf88', ModularIndexing(513*c0 + c3 + 787712, 1, 262656) + 262144*ModularIndexing(513*c0 + c3 + 787712, 262656, 3) + 786432*ModularIndexing(513*c0 + 787968*c2 + c3 + 787712, 787968, 48), {c0: 256, c1: 4, c2: 48, c3: 513}, None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (25214976, 1)
op89.sizes = ([256, 4, 48, 513], [])
buf88_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
class op89_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 48, z3: 513}
    index0 = z1
    index1 = z3
    index2 = ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index3 = 786432*z2 + 262144*(((513*z0 + z3 + 656384)//262656)) + 786432*(((513*z0 + z3 + 656384)//787968)) + ModularIndexing(513*z0 + z3, 1, 512) + 512*ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index4 = ModularIndexing(513*z0 + z3 + 787712, 512, 513)
    index5 = ModularIndexing(513*z0 + z3 + 787712, 1, 262656) + 262144*ModularIndexing(513*z0 + z3 + 787712, 262656, 3) + 786432*ModularIndexing(513*z0 + 787968*z2 + z3 + 787712, 787968, 48)
    index6 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 512, 513)
    index7 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 262656, 144)
    index8 = 98560*z0 + 24640*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index8')
        store = ops.store('buf89', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf88', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf88', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf88', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op89 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[256, 131072], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 256
        xnumel = 98496
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = (xindex // 24624)
        x1 = xindex % 513
        y0 = yindex
        x2 = (xindex // 513) % 48
        x5 = xindex % 24624
        tmp0 = x3
        tmp1 = tl.full([1, 1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1, 1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x1 + (513*y0)) // 512) % 513
        tmp7 = tl.full([1, 1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((512*(((656384 + x1 + (513*y0)) // 512) % 513)) + (262144*((656384 + x1 + (513*y0)) // 262656)) + (786432*x2) + (786432*((656384 + x1 + (513*y0)) // 787968)) + ((x1 + (513*y0)) % 512)), tmp9 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.full(tmp10.shape, 0.0, tmp10.dtype)
        tmp12 = tl.where(tmp5, tmp10, tmp11)
        tmp13 = tl.full([1, 1], 3, tl.int64)
        tmp14 = tmp13 < tmp13
        tmp15 = tl.broadcast_to(x1, [XBLOCK, YBLOCK])
        tmp16 = tmp15 >= tmp4
        tmp17 = tmp16 & tmp14
        tmp18 = ((787712 + x1 + (513*y0)) // 512) % 513
        tmp19 = tmp18 < tmp7
        tmp20 = tmp19 & tmp17
        tmp21 = tl.load(in_ptr0 + ((262144*(((787712 + x1 + (513*y0)) // 262656) % 3)) + (786432*(((787712 + x1 + (513*y0) + (787968*x2)) // 787968) % 48)) + ((787712 + x1 + (513*y0)) % 262656)), tmp20 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.full(tmp21.shape, 0.0, tmp21.dtype)
        tmp23 = tl.where(tmp17, tmp21, tmp22)
        tmp24 = 0.0
        tmp25 = tl.where(tmp16, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp14, tmp25, tmp26)
        tmp28 = tl.where(tmp14, tmp27, tmp24)
        tmp29 = tl.where(tmp5, tmp12, tmp28)
        tmp30 = tmp0 < tmp13
        tmp31 = tmp16 & tmp30
        tmp32 = (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp33 = tmp32 < tmp7
        tmp34 = tmp33 & tmp31
        tmp35 = tl.load(in_ptr0 + ((262144*((((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 262656) % 144)) + (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) % 262656)), tmp34 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp31, tmp35, tmp36)
        tmp38 = tl.where(tmp16, tmp37, tmp24)
        tmp39 = tl.full(tmp38.shape, 0.0, tmp38.dtype)
        tmp40 = tl.where(tmp30, tmp38, tmp39)
        tmp41 = tl.where(tmp30, tmp40, tmp24)
        tmp42 = tl.where(tmp2, tmp29, tmp41)
        tl.store(out_ptr0 + (x5 + (24640*x3) + (98560*y0)), tmp42, xmask & ymask)


op90: SchedulerNode(ComputedBuffer)
op90.writes = [   MemoryDep('buf90', 131328*c0 + 525312*c1 + c2, {c0: 4, c1: 48, c2: 131328}, None)]
op90.unmet_dependencies = 
    [   MemoryDep('buf88', ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 262656, 144), {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf88', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf88', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf89', 24640*c0 + 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf89', 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
    buf90.users = [
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
    ]
]
op90.group.device = cuda:0
op90.group.iteration = (25214976, 1)
op90.sizes = ([4, 48, 256, 513], [])
buf88_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
class op90_loop_body:
    var_ranges = {z0: 4, z1: 48, z2: 256, z3: 513}
    index0 = z0
    index1 = z2
    index2 = z3
    index3 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 512, 513)
    index4 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 262656, 144)
    index5 = ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index6 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index7 = 513*z1 + 98560*z2 + z3
    index8 = ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index9 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index10 = 24640*z0 + 513*z1 + 98560*z2 + z3
    index11 = 131328*z0 + 525312*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf89', get_index_2)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_4 = ops.constant(1, torch.int64)
        ge_2 = ops.ge(index_expr_2, constant_4)
        masked_subblock10 = self.masked_subblock10(ge_2, 0.0)
        get_index_4 = self.get_index('index10')
        load_1 = ops.load('buf89', get_index_4)
        where_2 = ops.where(ge_2, masked_subblock10, load_1)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_5 = self.get_index('index11')
        store = ops.store('buf90', get_index_5, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf88', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf88', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf89', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf89', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf88', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf89', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
    def masked_subblock12(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf88', get_index)
        return load
    def masked_subblock11(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock12 = self.masked_subblock12(lt, 0.0)
        return masked_subblock12
    def masked_subblock10(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock11 = self.masked_subblock11(lt, 0.0)
        get_index_1 = self.get_index('index10')
        load = ops.load('buf89', get_index_1)
        where = ops.where(lt, masked_subblock11, load)
        return where
op90 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 6303744)
        x1 = (xindex // 513) % 256
        x0 = xindex % 513
        x2 = (xindex // 131328) % 48
        x4 = xindex % 131328
        tmp47 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), None, eviction_policy='evict_last')
        tmp62 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), None)
        tmp0 = x3
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1], 1, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = x0
        tmp7 = tmp6 >= tmp4
        tmp8 = tl.full([1], 256, tl.int64)
        tmp9 = tmp6 < tmp8
        tmp10 = tmp7 & tmp9
        tmp11 = tmp10 & tmp5
        tmp12 = (((-256) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp13 = tl.full([1], 512, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = tl.load(in_ptr0 + ((262144*((((-256) + x0 + (513*x1) + (787968*x2)) // 262656) % 144)) + (((-256) + x0 + (513*x1) + (787968*x2)) % 262656)), tmp15, eviction_policy='evict_last', other=0.0)
        tmp17 = tl.full(tmp16.shape, 0.0, tmp16.dtype)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.full([1], 0, tl.int64)
        tmp20 = tmp19 >= tmp4
        tmp21 = tmp20 & tmp5
        tmp22 = tmp9 & tmp21
        tmp23 = (((-131584) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp24 = tmp23 < tmp13
        tmp25 = tmp24 & tmp22
        tmp26 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp25, eviction_policy='evict_last', other=0.0)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp22, tmp26, tmp27)
        tmp29 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp21, eviction_policy='evict_last', other=0.0)
        tmp30 = tl.where(tmp9, tmp28, tmp29)
        tmp31 = tl.full(tmp30.shape, 0.0, tmp30.dtype)
        tmp32 = tl.where(tmp21, tmp30, tmp31)
        tmp33 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp5, eviction_policy='evict_last', other=0.0)
        tmp34 = tl.where(tmp20, tmp32, tmp33)
        tmp35 = tl.where(tmp10, tmp18, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp5, tmp35, tmp36)
        tmp38 = tmp9 & tmp20
        tmp39 = tmp24 & tmp38
        tmp40 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp39, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp38, tmp40, tmp41)
        tmp43 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp20, eviction_policy='evict_last', other=0.0)
        tmp44 = tl.where(tmp9, tmp42, tmp43)
        tmp45 = tl.full(tmp44.shape, 0.0, tmp44.dtype)
        tmp46 = tl.where(tmp20, tmp44, tmp45)
        tmp48 = tl.where(tmp20, tmp46, tmp47)
        tmp49 = tl.where(tmp5, tmp37, tmp48)
        tmp50 = tmp0 >= tmp4
        tmp51 = tmp9 & tmp50
        tmp52 = (((-131584) + x0 + (513*x1) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp53 = tmp52 < tmp13
        tmp54 = tmp53 & tmp51
        tmp55 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp54, other=0.0)
        tmp56 = tl.full(tmp55.shape, 0.0, tmp55.dtype)
        tmp57 = tl.where(tmp51, tmp55, tmp56)
        tmp58 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), tmp50, other=0.0)
        tmp59 = tl.where(tmp9, tmp57, tmp58)
        tmp60 = tl.full(tmp59.shape, 0.0, tmp59.dtype)
        tmp61 = tl.where(tmp50, tmp59, tmp60)
        tmp63 = tl.where(tmp50, tmp61, tmp62)
        tmp64 = tl.where(tmp2, tmp49, tmp63)
        tl.store(out_ptr0 + (x4 + (131328*x3) + (525312*x2)), tmp64, None)


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 6303744}, None)]
op91.unmet_dependencies = [MemoryDep('buf90', 525312*c0 + c1 + 393984, {c0: 48, c1: 131328}, None)]
op91.met_dependencies = []
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (6303744, 1)
op91.sizes = ([48, 256, 513], [])
buf90_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
class op91_loop_body:
    var_ranges = {z0: 48, z1: 256, z2: 513}
    index0 = z2
    index1 = -z1 - z2 + 512
    index2 = z1 + 768
    index3 = z1 + z2 + 513
    index4 = 525312*z0 + 513*z1 + z2 + 393984
    index5 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf90', get_index_2)
        where = ops.where(lt, masked_subblock4, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index5')
        store = ops.store('buf91', get_index_3, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf90', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf90', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_3 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf90', get_index_2)
        where_1 = ops.where(lt, masked_subblock2, load)
        constant_4 = ops.constant(-inf, torch.float32)
        where_2 = ops.where(to_dtype, constant_4, where_1)
        return where_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf90', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf90', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
op91 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6303744
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 513
        x1 = (xindex // 513) % 256
        x2 = (xindex // 131328)
        x3 = xindex % 131328
        x4 = xindex
        tmp43 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), None)
        tmp0 = x0
        tmp1 = tl.full([1], 256, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = 512 + ((-1)*x0) + ((-1)*x1)
        tmp4 = tl.full([1], 0, tl.int64)
        tmp5 = tmp3 <= tmp4
        tmp6 = 1.0
        tmp7 = 0.0
        tmp8 = tl.where(tmp5, tmp6, tmp7)
        tmp9 = (tmp8 != 0)
        tmp10 = 768 + x1
        tmp11 = tmp10 < tmp1
        tmp12 = tmp11 & tmp2
        tmp13 = tl.full([1], 257, tl.int64)
        tmp14 = tmp0 < tmp13
        tmp15 = tmp14 & tmp12
        tmp16 = 513 + x0 + x1
        tmp17 = tmp16 <= tmp4
        tmp18 = tl.where(tmp17, tmp6, tmp7)
        tmp19 = (tmp18 != 0)
        tmp20 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp15, other=0.0)
        tmp21 = float("-inf")
        tmp22 = tl.where(tmp19, tmp21, tmp20)
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp15, tmp22, tmp23)
        tmp25 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp12, other=0.0)
        tmp26 = tl.where(tmp14, tmp24, tmp25)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp12, tmp26, tmp27)
        tmp29 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp2, other=0.0)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp31 = tl.where(tmp9, tmp21, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tmp34 = tmp14 & tmp11
        tmp35 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp34, other=0.0)
        tmp36 = tl.where(tmp19, tmp21, tmp35)
        tmp37 = tl.full(tmp36.shape, 0.0, tmp36.dtype)
        tmp38 = tl.where(tmp34, tmp36, tmp37)
        tmp39 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp11, other=0.0)
        tmp40 = tl.where(tmp14, tmp38, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp11, tmp40, tmp41)
        tmp44 = tl.where(tmp11, tmp42, tmp43)
        tmp45 = tl.where(tmp2, tmp33, tmp44)
        tl.store(out_ptr0 + (x4), tmp45, None)


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 4096}, None)]
op92.unmet_dependencies = []
op92.met_dependencies = []
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
    ]
]
op92.group.device = cuda:0
op92.group.iteration = (4096, 1)
op92.sizes = ([4096], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op92_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(1.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf92', get_index, constant, None)
        return store
op92 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = 1.0
        tl.store(out_ptr0 + (x0), tmp0, None)


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 4096}, None)]
op93.unmet_dependencies = []
op93.met_dependencies = [MemoryDep('arg7_1', c0, {c0: 4096}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf93.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
    ]
]
op93.group.device = cuda:0
op93.group.iteration = (4096, 1)
op93.sizes = ([4096], [])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[4, 1024], stride=[1024, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op93_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        constant = ops.constant(0.0, torch.float32)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        ne_1 = ops.ne(load_1, constant_1)
        to_dtype = ops.to_dtype(ne_1, torch.float32, src_dtype = torch.bool)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(ne, constant_2, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf93', get_index_2, where, None)
        return store
op93 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.0
        tmp2 = tmp0 != tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp4, tmp3)
        tl.store(out_ptr0 + (x0), tmp5, None)


op94: SchedulerNode(ComputedBuffer)
op94.writes = [   MemoryDep('buf94', 525312*c0 + 513*c1 + 131328*c2 + c3, {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op94.unmet_dependencies = 
    [   MemoryDep('buf92', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3 + 656384, 512, 513), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf92', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 512, 513) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf92', ModularIndexing(513*c1 + c3 + 787712, 512, 513) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf93', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3, 1, 512), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf93', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 1, 512) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf93', ModularIndexing(513*c1 + c3 + 787712, 1, 512) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
    ]
]
op94.group.device = cuda:0
op94.group.iteration = (2101248, 1)
op94.sizes = ([4, 256, 4, 513], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
class op94_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 4, z3: 513}
    index0 = z0
    index1 = z3
    index2 = ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index3 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index4 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3, 1, 512)
    index5 = ModularIndexing(513*z1 + z3 + 787712, 512, 513)
    index6 = ModularIndexing(513*z1 + z3 + 787712, 512, 513) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index7 = ModularIndexing(513*z1 + z3 + 787712, 1, 512) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index8 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513)
    index9 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index10 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 1, 512) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index11 = 525312*z0 + 513*z1 + 131328*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index11')
        store = ops.store('buf94', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf93', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf93', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index10')
        load_1 = ops.load('buf93', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op94 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2101248
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 525312)
        x0 = xindex % 513
        x2 = (xindex // 2052) % 256
        x1 = (xindex // 513) % 4
        tmp0 = x3
        tmp1 = tl.full([1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x0 + (513*x2)) // 512) % 513
        tmp7 = tl.full([1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + (((656384 + x0 + (513*x2)) // 512) % 513)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.load(in_ptr1 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + ((x0 + (513*x2)) % 512)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp12 = tmp10 * tmp11
        tmp13 = tl.full(tmp12.shape, 0.0, tmp12.dtype)
        tmp14 = tl.where(tmp9, tmp12, tmp13)
        tmp15 = tl.full(tmp14.shape, 0.0, tmp14.dtype)
        tmp16 = tl.where(tmp5, tmp14, tmp15)
        tmp17 = tl.full([1], 3, tl.int64)
        tmp18 = tmp17 < tmp17
        tmp19 = tmp5 & tmp18
        tmp20 = ((787712 + x0 + (513*x2)) // 512) % 513
        tmp21 = tmp20 < tmp7
        tmp22 = tmp21 & tmp19
        tmp23 = tl.load(in_ptr0 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + (((787712 + x0 + (513*x2)) // 512) % 513)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp24 = tl.load(in_ptr1 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + ((787712 + x0 + (513*x2)) % 512)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp25 = tmp23 * tmp24
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp22, tmp25, tmp26)
        tmp28 = tl.full(tmp27.shape, 0.0, tmp27.dtype)
        tmp29 = tl.where(tmp19, tmp27, tmp28)
        tmp30 = 0.0
        tmp31 = tl.where(tmp5, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp18, tmp31, tmp32)
        tmp34 = tl.where(tmp18, tmp33, tmp30)
        tmp35 = tl.where(tmp5, tmp16, tmp34)
        tmp36 = tmp0 < tmp17
        tmp37 = tmp5 & tmp36
        tmp38 = (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513
        tmp39 = tmp38 < tmp7
        tmp40 = tmp39 & tmp37
        tmp41 = tl.load(in_ptr0 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + ((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513)), tmp40, eviction_policy='evict_last', other=0.0)
        tmp42 = tl.load(in_ptr1 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) % 512)), tmp40, other=0.0)
        tmp43 = tmp41 * tmp42
        tmp44 = tl.full(tmp43.shape, 0.0, tmp43.dtype)
        tmp45 = tl.where(tmp40, tmp43, tmp44)
        tmp46 = tl.full(tmp45.shape, 0.0, tmp45.dtype)
        tmp47 = tl.where(tmp37, tmp45, tmp46)
        tmp48 = tl.where(tmp5, tmp47, tmp30)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp36, tmp48, tmp49)
        tmp51 = tl.where(tmp36, tmp50, tmp30)
        tmp52 = tl.where(tmp2, tmp35, tmp51)
        tl.store(out_ptr0 + (x0 + (513*x2) + (131328*x1) + (525312*x3)), tmp52, None)


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 525312}, None)]
op95.unmet_dependencies = 
    [   MemoryDep('buf92', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf92', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf93', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf93', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf94', c0, {c0: 525312}, None)]
op95.met_dependencies = []
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
    buf95.users = [
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
    ]
]
op95.group.device = cuda:0
op95.group.iteration = (525312, 1)
op95.sizes = ([4, 256, 513], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
class op95_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 513}
    index0 = z1
    index1 = z2
    index2 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513)
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index5 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index7 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index8 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_1 = ops.constant(0, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_1, constant_2)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf94', get_index_1)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index8')
        store = ops.store('buf95', get_index_2, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf93', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf93', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf94', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index8')
        load = ops.load('buf94', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf93', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf94', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
op95 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 256
        x2 = xindex
        y1 = (yindex // 256)
        y3 = yindex
        tmp56 = tl.load(in_ptr2 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 1, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tmp3 >= tmp1
        tmp5 = tl.full([1, 1], 256, tl.int64)
        tmp6 = tmp3 < tmp5
        tmp7 = tmp4 & tmp6
        tmp8 = tmp7 & tmp2
        tmp9 = (((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp10 = tl.full([1, 1], 512, tl.int64)
        tmp11 = tmp9 < tmp10
        tmp12 = tmp11 & tmp8
        tmp13 = tl.load(in_ptr0 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp14 = tl.load(in_ptr1 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + (((-256) + x2 + (513*y0) + (787968*y1)) % 512)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp15 = tmp13 * tmp14
        tmp16 = tl.full(tmp15.shape, 0.0, tmp15.dtype)
        tmp17 = tl.where(tmp12, tmp15, tmp16)
        tmp18 = tl.full(tmp17.shape, 0.0, tmp17.dtype)
        tmp19 = tl.where(tmp8, tmp17, tmp18)
        tmp20 = tl.full([1, 1], 0, tl.int64)
        tmp21 = tmp20 >= tmp1
        tmp22 = tmp21 & tmp2
        tmp23 = tmp6 & tmp22
        tmp24 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp25 = tmp24 < tmp10
        tmp26 = tmp25 & tmp23
        tmp27 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tmp27 * tmp28
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp26, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp23, tmp31, tmp32)
        tmp34 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp22 & xmask, eviction_policy='evict_last', other=0.0)
        tmp35 = tl.where(tmp6, tmp33, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp22, tmp35, tmp36)
        tmp38 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp39 = tl.where(tmp21, tmp37, tmp38)
        tmp40 = tl.where(tmp7, tmp19, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp2, tmp40, tmp41)
        tmp43 = tmp6 & tmp21
        tmp44 = tmp25 & tmp43
        tmp45 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp47 = tmp45 * tmp46
        tmp48 = tl.full(tmp47.shape, 0.0, tmp47.dtype)
        tmp49 = tl.where(tmp44, tmp47, tmp48)
        tmp50 = tl.full(tmp49.shape, 0.0, tmp49.dtype)
        tmp51 = tl.where(tmp43, tmp49, tmp50)
        tmp52 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp21 & xmask, eviction_policy='evict_last', other=0.0)
        tmp53 = tl.where(tmp6, tmp51, tmp52)
        tmp54 = tl.full(tmp53.shape, 0.0, tmp53.dtype)
        tmp55 = tl.where(tmp21, tmp53, tmp54)
        tmp57 = tl.where(tmp21, tmp55, tmp56)
        tmp58 = tl.where(tmp2, tmp42, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 263168}, None)]
op96.unmet_dependencies = 
    [   MemoryDep('buf92', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf93', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf94', 513*c0 + c1, {c0: 1024, c1: 257}, None),
        MemoryDep('buf95', 513*c0 + c1, {c0: 1024, c1: 257}, None)]
op96.met_dependencies = []
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
    buf96.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (263168, 1)
op96.sizes = ([4, 256, 257], [])
buf95_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
class op96_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 257}
    index0 = z1 + z2 - 255
    index1 = 131328*z0 + 513*z1 + z2
    index2 = z2
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index5 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index6 = 65792*z0 + 257*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        constant_3 = ops.constant(0, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq = ops.eq(constant_3, constant_4)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf95', get_index_1)
        constant_5 = ops.constant(0, torch.int64)
        constant_6 = ops.constant(1, torch.int64)
        ge = ops.ge(constant_5, constant_6)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf94', get_index_2)
        where_1 = ops.where(ge, masked_subblock1, load_1)
        where_2 = ops.where(eq, load, where_1)
        constant_7 = ops.constant(-inf, torch.float32)
        where_3 = ops.where(to_dtype, constant_7, where_2)
        get_index_3 = self.get_index('index6')
        store = ops.store('buf96', get_index_3, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('buf93', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf94', get_index_1)
        where = ops.where(lt, masked_subblock2, load)
        return where
op96 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 257
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 256
        y3 = yindex
        y1 = (yindex // 256)
        tmp9 = tl.load(in_ptr0 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr3 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = (-255) + x2 + y0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 <= tmp1
        tmp3 = 1.0
        tmp4 = 0.0
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tmp6 = (tmp5 != 0)
        tmp7 = tl.full([1, 1], 0, tl.int32)
        tmp8 = tmp7 == tmp7
        tmp10 = tl.full([1, 1], 1, tl.int64)
        tmp11 = tmp1 >= tmp10
        tmp12 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp13 = tl.full([1, 1], 256, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp17 = tl.full([1, 1], 512, tl.int64)
        tmp18 = tmp16 < tmp17
        tmp19 = tmp18 & tmp15
        tmp20 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tmp20 * tmp21
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp19, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp15, tmp24, tmp25)
        tmp27 = tl.load(in_ptr3 + (x2 + (513*y3)), tmp11 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.where(tmp14, tmp26, tmp27)
        tmp29 = tl.full(tmp28.shape, 0.0, tmp28.dtype)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp32 = tl.where(tmp11, tmp30, tmp31)
        tmp33 = tl.where(tmp8, tmp9, tmp32)
        tmp34 = float("-inf")
        tmp35 = tl.where(tmp6, tmp34, tmp33)
        tl.store(out_ptr0 + (x2 + (257*y3)), tmp35, xmask)


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 2101248}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf92', ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf93', ModularIndexing(c2 + 513*ModularIndexing(c1, 1, 256), 1, 512) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf94', 131328*c0 + c2 + 525312*((c1//256)) + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf95', 131328*c0 + c2 + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf96', 65792*c0 + 257*c1 + c2, {c0: 4, c1: 1024, c2: 513}, None)]
op97.met_dependencies = []
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (2101248, 1)
op97.sizes = ([4, 1024, 513], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
class op97_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 513}
    index0 = z1
    index1 = z2
    index2 = 65792*z0 + 257*z1 + z2
    index3 = (z1//256)
    index4 = 131328*z0 + z2 + 513*ModularIndexing(z1, 1, 256)
    index5 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index7 = ModularIndexing(z2 + 513*ModularIndexing(z1, 1, 256), 1, 512) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index8 = 131328*z0 + z2 + 525312*((z1//256)) + 513*ModularIndexing(z1, 1, 256)
    index9 = 525312*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf95', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock6 = self.masked_subblock6(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf94', get_index_4)
        where = ops.where(ge, masked_subblock6, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_5 = self.get_index('index9')
        store = ops.store('buf97', get_index_5, where_2, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf96', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf93', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf94', get_index_1)
        where = ops.where(lt, masked_subblock4, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf95', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf94', get_index_4)
        where = ops.where(ge, masked_subblock3, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock2, where_1)
        return where_2
    def masked_subblock8(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf93', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf94', get_index_1)
        where = ops.where(lt, masked_subblock7, load)
        return where
op97 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 11, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 4096
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 1024
        x2 = xindex
        y1 = (yindex // 1024)
        y3 = yindex
        tmp40 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), xmask, eviction_policy='evict_last')
        tmp55 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 256, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tl.full([1, 1], 257, tl.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp5 & tmp2
        tmp7 = tl.load(in_ptr0 + (x2 + (257*y0) + (65792*y1)), tmp6 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tl.broadcast_to((y0 // 256), [XBLOCK, YBLOCK])
        tmp9 = tl.full([1, 1], 0, tl.int32)
        tmp10 = tmp8 == tmp9
        tmp11 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp12 = tl.full([1, 1], 1, tl.int64)
        tmp13 = tmp8 >= tmp12
        tmp14 = tmp13 & tmp2
        tmp15 = tmp3 < tmp1
        tmp16 = tmp15 & tmp14
        tmp17 = (((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513
        tmp18 = tl.full([1, 1], 512, tl.int64)
        tmp19 = tmp17 < tmp18
        tmp20 = tmp19 & tmp16
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp23 = tmp21 * tmp22
        tmp24 = tl.full(tmp23.shape, 0.0, tmp23.dtype)
        tmp25 = tl.where(tmp20, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp16, tmp25, tmp26)
        tmp28 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp14 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tl.where(tmp15, tmp27, tmp28)
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp14, tmp29, tmp30)
        tmp32 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp33 = tl.where(tmp13, tmp31, tmp32)
        tmp34 = tl.where(tmp10, tmp11, tmp33)
        tmp35 = tl.where(tmp5, tmp7, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp2, tmp35, tmp36)
        tmp38 = (y0 // 256)
        tmp39 = tmp38 == tmp9
        tmp41 = tmp38 >= tmp12
        tmp42 = tmp15 & tmp41
        tmp43 = tmp19 & tmp42
        tmp44 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp45 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tmp44 * tmp45
        tmp47 = tl.full(tmp46.shape, 0.0, tmp46.dtype)
        tmp48 = tl.where(tmp43, tmp46, tmp47)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp42, tmp48, tmp49)
        tmp51 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp41 & xmask, eviction_policy='evict_last', other=0.0)
        tmp52 = tl.where(tmp15, tmp50, tmp51)
        tmp53 = tl.full(tmp52.shape, 0.0, tmp52.dtype)
        tmp54 = tl.where(tmp41, tmp52, tmp53)
        tmp56 = tl.where(tmp41, tmp54, tmp55)
        tmp57 = tl.where(tmp39, tmp40, tmp56)
        tmp58 = tl.where(tmp2, tmp37, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op98: SchedulerNode(ComputedBuffer)
op98.writes = [   MemoryDep('buf98', 6324224*c0 + 513*c1 + 6176*c2 + c3, {c0: 4, c1: 12, c2: 1024, c3: 513}, None)]
op98.unmet_dependencies = 
    [   MemoryDep('buf90', 525312*c0 + 513*c1 + c2 + 131328*((ModularIndexing(c1, 1, 256)//256)), {c0: 48, c1: 1024, c2: 513}, None),
        MemoryDep('buf91', 131328*c0 + c1 - 393984, {c0: 48, c1: 525312}, None),
        MemoryDep('buf97', 525312*c0 + c2, {c0: 4, c1: 12, c2: 525312}, None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
    buf98.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
    ]
]
op98.group.device = cuda:0
op98.group.iteration = (25214976, 1)
op98.sizes = ([4, 12, 1024, 513], [])
buf91_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
class op98_loop_body:
    var_ranges = {z0: 4, z1: 12, z2: 1024, z3: 513}
    index0 = z2
    index1 = 1575936*z0 + 131328*z1 + 513*z2 + z3 - 393984
    index2 = z2 + 256*((ModularIndexing(z2, 1, 256)//256))
    index3 = z3
    index4 = z2 + z3 + 256*((ModularIndexing(z2, 1, 256)//256)) - 255
    index5 = 6303744*z0 + 525312*z1 + 513*z2 + z3 + 131328*((ModularIndexing(z2, 1, 256)//256))
    index6 = -z2 - z3 + 1280
    index7 = 525312*z0 + 513*z2 + z3
    index8 = 6324224*z0 + 513*z1 + 6176*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(768, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index5')
        load = ops.load('buf90', get_index_2)
        where = ops.where(lt, masked_subblock2, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_4 = self.get_index('index7')
        load_1 = ops.load('buf97', get_index_4)
        where_2 = ops.where(ge_1, masked_subblock4, load_1)
        add = ops.add(where_1, where_2)
        get_index_5 = self.get_index('index8')
        store = ops.store('buf98', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf91', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf90', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf90', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf97', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(ge, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf97', get_index_1)
        where = ops.where(ge, masked_subblock5, load)
        return where
op98 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 513) % 1024
        x4 = xindex % 525312
        x5 = (xindex // 525312)
        x0 = xindex % 513
        x3 = (xindex // 6303744)
        x2 = (xindex // 525312) % 12
        tmp27 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), None)
        tmp44 = tl.load(in_ptr2 + (x4 + (525312*x3)), None, eviction_policy='evict_last')
        tmp0 = x1
        tmp1 = tl.full([1], 768, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.load(in_ptr0 + ((-393984) + x4 + (131328*x5)), tmp2, other=0.0)
        tmp4 = x1 + (256*((x1 % 256) // 256))
        tmp5 = tl.full([1], 256, tl.int64)
        tmp6 = tmp4 < tmp5
        tmp7 = x0
        tmp8 = tl.full([1], 257, tl.int64)
        tmp9 = tmp7 < tmp8
        tmp10 = tmp9 & tmp6
        tmp11 = (-255) + x0 + x1 + (256*((x1 % 256) // 256))
        tmp12 = tl.full([1], 0, tl.int64)
        tmp13 = tmp11 <= tmp12
        tmp14 = 1.0
        tmp15 = 0.0
        tmp16 = tl.where(tmp13, tmp14, tmp15)
        tmp17 = (tmp16 != 0)
        tmp18 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp10, other=0.0)
        tmp19 = float("-inf")
        tmp20 = tl.where(tmp17, tmp19, tmp18)
        tmp21 = tl.full(tmp20.shape, 0.0, tmp20.dtype)
        tmp22 = tl.where(tmp10, tmp20, tmp21)
        tmp23 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp6, other=0.0)
        tmp24 = tl.where(tmp9, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp6, tmp24, tmp25)
        tmp28 = tl.where(tmp6, tmp26, tmp27)
        tmp29 = tl.where(tmp2, tmp3, tmp28)
        tmp30 = tmp7 >= tmp5
        tmp31 = tmp30 & tmp2
        tmp32 = 1280 + ((-1)*x0) + ((-1)*x1)
        tmp33 = tmp32 <= tmp12
        tmp34 = tl.where(tmp33, tmp14, tmp15)
        tmp35 = (tmp34 != 0)
        tmp36 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp31, eviction_policy='evict_last', other=0.0)
        tmp37 = tl.where(tmp35, tmp19, tmp36)
        tmp38 = tl.full(tmp37.shape, 0.0, tmp37.dtype)
        tmp39 = tl.where(tmp31, tmp37, tmp38)
        tmp40 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.where(tmp30, tmp39, tmp40)
        tmp42 = tl.full(tmp41.shape, 0.0, tmp41.dtype)
        tmp43 = tl.where(tmp2, tmp41, tmp42)
        tmp45 = tl.where(tmp2, tmp43, tmp44)
        tmp46 = tmp29 + tmp45
        tl.store(out_ptr0 + (x0 + (513*x2) + (6176*x1) + (6324224*x3)), tmp46, None)


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 49152}, None)]
op99.unmet_dependencies = [MemoryDep('buf98', 6176*c0 + c1, {c0: 4096, c1: 6156}, None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
    ]
]
op99.group.device = cuda:0
op99.group.iteration = (49152, 513)
op99.sizes = ([4096, 12], [513])
buf98_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op99_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf99', get_index_1, reduction)
        return store_reduction
op99 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        x3 = xindex
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp2, None)


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 49152}, None)]
op100.unmet_dependencies = 
    [   MemoryDep('buf98', 6176*c0 + c1, {c0: 4096, c1: 6156}, None),
        MemoryDep('buf99', c0, {c0: 49152}, None)]
op100.met_dependencies = []
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf100.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (49152, 513)
op100.sizes = ([4096, 12], [513])
buf98_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf100_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op100_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf99', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf100', get_index_2, reduction)
        return store_reduction
op100 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        x3 = xindex
        tmp1 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp5, None)


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 3145728}, None)]
op101.unmet_dependencies = [MemoryDep('buf79', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (3145728, 1)
op101.sizes = ([1024, 4, 768], [])
buf79_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op101_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf101', get_index_1, load, None)
        return store
op101 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op102: ExternKernelSchedulerNode(ExternKernelOut)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op102.met_dependencies = [StarDep(name='arg39_1', mode=None)]
op102.outputs = [
    buf102: ExternKernelOut
    buf102.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf102.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op102.node.kernel = extern_kernels.mm


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 4718592}, None)]
op103.unmet_dependencies = [   MemoryDep('buf102', 64*c0 + 3072*c1 + c2 - 786432, {c0: 48, c1: 1536, c2: 64}, None)]
op103.met_dependencies = [   MemoryDep('arg40_1', c2 + 64*ModularIndexing(c0, 1, 12), {c0: 48, c1: 1536, c2: 64}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
    buf103.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (4718592, 1)
op103.sizes = ([48, 1536, 64], [])
buf102_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
class op103_loop_body:
    var_ranges = {z0: 48, z1: 1536, z2: 64}
    index0 = z1 - 256
    index1 = 64*z0 + 3072*z1 + z2 - 786432
    index2 = z2 + 64*ModularIndexing(z0, 1, 12)
    index3 = 98304*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1024, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, -1.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf103', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg40_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op103 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 1536
        x0 = xindex % 64
        x2 = (xindex // 98304)
        x3 = xindex
        tmp0 = (-256) + x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 1024, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-786432) + x0 + (64*x2) + (3072*x1)), tmp5, other=0.0)
        tmp7 = tl.load(in_ptr1 + (x0 + (64*(x2 % 12))), tmp5, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, -1.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op104: SchedulerNode(ComputedBuffer)
op104.writes = [   MemoryDep('buf104', 770*c0 + 788480*c1 + c2, {c0: 1024, c1: 48, c2: 770}, None)]
op104.unmet_dependencies = 
    [   MemoryDep('buf100', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None),
        MemoryDep('buf98', 6176*c0 + c2 + 6324224*((c1//12)) + 6324224*((ModularIndexing(c1, 1, 12)//12)) + 513*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 770}, None),
        MemoryDep('buf99', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None)]
op104.met_dependencies = [MemoryDep('arg8_1', c0 + 1024*((c1//12)), {c0: 1024, c1: 48}, None)]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
    buf104.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (37847040, 1)
op104.sizes = ([1024, 48, 770], [])
arg8_1_layout = FixedLayout('cuda', torch.bool, size=[4, 1024], stride=[1024, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf100_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf104_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
class op104_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 770}
    index0 = z2
    index1 = z0 + 1024*((z1//12))
    index2 = 6176*z0 + z2 + 6324224*((z1//12)) + 6324224*((ModularIndexing(z1, 1, 12)//12)) + 513*ModularIndexing(z1, 1, 12)
    index3 = 12*z0 + 12288*((z1//12)) + ModularIndexing(z1, 1, 12)
    index4 = 770*z0 + 788480*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(513, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index4')
        store = ops.store('buf104', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg8_1', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf98', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('buf99', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf100', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(load, constant, truediv)
        return where
op104 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 37847040
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 770
        x1 = (xindex // 770) % 48
        x2 = (xindex // 36960)
        tmp0 = x0
        tmp1 = tl.full([1], 513, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.load(in_ptr0 + (x2 + (1024*(x1 // 12))), tmp2, eviction_policy='evict_last', other=0.0).to(tl.int1)
        tmp4 = tl.load(in_ptr1 + (x0 + (513*(x1 % 12)) + (6176*x2) + (6324224*(x1 // 12)) + (6324224*((x1 % 12) // 12))), tmp2, other=0.0)
        tmp5 = tl.load(in_ptr2 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp4 - tmp5
        tmp7 = tl_math.exp(tmp6)
        tmp8 = tl.load(in_ptr3 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp9 = tmp7 / tmp8
        tmp10 = 0.0
        tmp11 = tl.where(tmp3, tmp10, tmp9)
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp2, tmp11, tmp12)
        tl.store(out_ptr0 + (x0 + (770*x2) + (788480*x1)), tmp13, None)


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 9437184}, None)]
op105.unmet_dependencies = [   MemoryDep('buf103', 98304*c0 + 16384*c1 + c2, {c0: 48, c1: 4, c2: 49152}, None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (9437184, 1)
op105.sizes = ([48, 4, 49152], [])
buf103_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
class op105_loop_body:
    var_ranges = {z0: 48, z1: 4, z2: 49152}
    index0 = 98304*z0 + 16384*z1 + z2
    index1 = 196608*z0 + 49152*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf105', get_index_1, load, None)
        return store
op105 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 9437184
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 49152
        x1 = (xindex // 49152) % 4
        x2 = (xindex // 196608)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (16384*x1) + (98304*x2)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf104', mode=None), StarDep(name='buf105', mode=None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
    buf106.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op106.node.kernel = extern_kernels.bmm


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 3145728}, None)]
op107.unmet_dependencies = [   MemoryDep('buf106', 786432*c0 + 64*c1 + 65536*((c2//64)) + ModularIndexing(c2, 1, 64), {c0: 4, c1: 1024, c2: 768}, None)]
op107.met_dependencies = []
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (3145728, 1)
op107.sizes = ([4, 1024, 768], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op107_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 768}
    index0 = 786432*z0 + 64*z1 + 65536*((z2//64)) + ModularIndexing(z2, 1, 64)
    index1 = 786432*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf107', get_index_1, load, None)
        return store
op107 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 1024
        x2 = (xindex // 786432)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + ((64*x1) + (65536*(x0 // 64)) + (786432*x2) + (x0 % 64)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op108: ExternKernelSchedulerNode(ExternKernelOut)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf107', mode=None)]
op108.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op108.outputs = [
    buf108: ExternKernelOut
    buf108.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf108.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False),
    ]
]
op108.node.kernel = extern_kernels.mm


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 4096}, None)]
op109.unmet_dependencies = 
    [   MemoryDep('buf108', c0, {c0: 3145728}, None),
        MemoryDep('buf79', c0, {c0: 3145728}, None)]
op109.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 4096, c1: 768}, None)]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf109.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (4096, 768)
op109.sizes = ([4096], [768])
buf108_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op109_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf79', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf109', get_index_3, getitem)
        return store_reduction
op109 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 4096}, None)]
op110.unmet_dependencies = 
    [   MemoryDep('buf108', c0, {c0: 3145728}, None),
        MemoryDep('buf79', c0, {c0: 3145728}, None)]
op110.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 4096, c1: 768}, None)]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf110.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (4096, 768)
op110.sizes = ([4096], [768])
buf108_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op110_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf79', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf110', get_index_3, getitem_1)
        return store_reduction
op110 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 3145728}, None)]
op112.unmet_dependencies = 
    [   MemoryDep('buf108', c0, {c0: 3145728}, None),
        MemoryDep('buf109', c0, {c0: 4096}, None),
        MemoryDep('buf110', c0, {c0: 4096}, None),
        MemoryDep('buf79', c0, {c0: 3145728}, None)]
op112.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg43_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg44_1', c1, {c0: 4096, c1: 768}, None)]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf112.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
    ]
]
op112.group.device = cuda:0
op112.group.iteration = (3145728, 1)
op112.sizes = ([4096, 768], [])
buf108_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf110_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op112_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf79', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf109', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf110', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg43_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg44_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf112', get_index_7, add_3, None)
        return store
op112 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op113: ExternKernelSchedulerNode(ExternKernelOut)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op113.met_dependencies = [StarDep(name='arg45_1', mode=None)]
op113.outputs = [
    buf113: ExternKernelOut
    buf113.layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
    buf113.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False)]
]
op113.node.kernel = extern_kernels.mm


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 12582912}, None)]
op114.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 12582912}, None)]
op114.met_dependencies = [MemoryDep('arg46_1', c1, {c0: 4096, c1: 3072}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (12582912, 1)
op114.sizes = ([4096, 3072], [])
buf113_layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
class op114_loop_body:
    var_ranges = {z0: 4096, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf113', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg46_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf114', get_index_4, mul_2, None)
        return store
op114 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op115: ExternKernelSchedulerNode(ExternKernelOut)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf114', mode=None)]
op115.met_dependencies = [StarDep(name='arg47_1', mode=None)]
op115.outputs = [
    buf115: ExternKernelOut
    buf115.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf115.users = [
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
    ]
]
op115.node.kernel = extern_kernels.mm


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 4096}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf112', c0, {c0: 3145728}, None),
        MemoryDep('buf115', c0, {c0: 3145728}, None)]
op116.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 4096, c1: 768}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf116.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (4096, 768)
op116.sizes = ([4096], [768])
buf115_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op116_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf112', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf116', get_index_3, getitem)
        return store_reduction
op116 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 4096}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf112', c0, {c0: 3145728}, None),
        MemoryDep('buf115', c0, {c0: 3145728}, None)]
op117.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 4096, c1: 768}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf117.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (4096, 768)
op117.sizes = ([4096], [768])
buf115_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op117_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf112', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf117', get_index_3, getitem_1)
        return store_reduction
op117 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 3145728}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf112', c0, {c0: 3145728}, None),
        MemoryDep('buf115', c0, {c0: 3145728}, None),
        MemoryDep('buf116', c0, {c0: 4096}, None),
        MemoryDep('buf117', c0, {c0: 4096}, None)]
op119.met_dependencies = 
    [   MemoryDep('arg48_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg49_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg50_1', c1, {c0: 4096, c1: 768}, None)]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf119.users = [
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False),
    ]
]
op119.group.device = cuda:0
op119.group.iteration = (3145728, 1)
op119.sizes = ([4096, 768], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf117_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op119_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf112', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf116', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf117', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg49_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg50_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf119', get_index_7, add_3, None)
        return store
op119 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 3145728}, None)]
op120.unmet_dependencies = [MemoryDep('buf119', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (3145728, 1)
op120.sizes = ([1024, 4, 768], [])
buf119_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op120_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf120', get_index_1, load, None)
        return store
op120 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op121: ExternKernelSchedulerNode(ExternKernelOut)
op121.writes = [StarDep(name='buf121', mode=None)]
op121.unmet_dependencies = [StarDep(name='buf120', mode=None)]
op121.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op121.outputs = [
    buf121: ExternKernelOut
    buf121.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf121.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False)]
]
op121.node.kernel = extern_kernels.mm


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 3145728}, None)]
op122.unmet_dependencies = [MemoryDep('buf121', c0, {c0: 3145728}, None)]
op122.met_dependencies = [   MemoryDep('arg52_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf122.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (3145728, 1)
op122.sizes = ([1024, 48, 64], [])
buf121_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op122_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf122', get_index_2, mul, None)
        return store
op122 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x3), tmp4, None)


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 3145728}, None)]
op123.unmet_dependencies = [MemoryDep('buf119', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op123.met_dependencies = []
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (3145728, 1)
op123.sizes = ([1024, 4, 768], [])
buf119_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op123_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf123', get_index_1, load, None)
        return store
op123 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op124: ExternKernelSchedulerNode(ExternKernelOut)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op124.outputs = [
    buf124: ExternKernelOut
    buf124.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf124.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False)]
]
op124.node.kernel = extern_kernels.mm


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 3145728}, None)]
op125.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 3145728}, None)]
op125.met_dependencies = [   MemoryDep('arg54_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf125.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (3145728, 1)
op125.sizes = ([1024, 48, 64], [])
buf124_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op125_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg54_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf125', get_index_2, add, None)
        return store
op125 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x3), tmp2, None)


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 4718592}, None)]
op126.unmet_dependencies = [   MemoryDep('buf122', 64*c0 + 786432*c1 + 3072*c2 + c3, {c0: 48, c1: 3, c2: 512, c3: 64}, None)]
op126.met_dependencies = []
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
    buf126.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (4718592, 1)
op126.sizes = ([48, 3, 512, 64], [])
buf122_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
class op126_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 512, z3: 64}
    index0 = 64*z0 + 786432*z1 + 3072*z2 + z3
    index1 = 98304*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf126', get_index_1, load, None)
        return store
op126 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 3
        x3 = (xindex // 98304)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x3) + (3072*x1) + (786432*x2)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 4718592}, None)]
op127.unmet_dependencies = [   MemoryDep('buf125', 64*c0 + 786432*c1 + c2 + 3072*c3, {c0: 48, c1: 3, c2: 64, c3: 512}, None)]
op127.met_dependencies = []
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (4718592, 1)
op127.sizes = ([48, 3, 64, 512], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
class op127_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 64, z3: 512}
    index0 = 64*z0 + 786432*z1 + z2 + 3072*z3
    index1 = 98304*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf127', get_index_1, load, None)
        return store
op127 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 9216
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 3
        y2 = (yindex // 192)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (3072*x3) + (786432*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op128: ExternKernelSchedulerNode(ExternKernelOut)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf126', mode=None), StarDep(name='buf127', mode=None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: ExternKernelOut
    buf128.layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
    buf128.users = [
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
    ]
]
op128.node.kernel = extern_kernels.bmm


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', 24640*c0 + c1, {c0: 1024, c1: 24624}, None)]
op129.unmet_dependencies = 
    [   MemoryDep('buf128', 786432*c2 + 262144*(((513*c0 + c3 + 656384)//262656)) + 786432*(((513*c0 + c3 + 656384)//787968)) + ModularIndexing(513*c0 + c3, 1, 512) + 512*ModularIndexing(513*c0 + c3 + 656384, 512, 513), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf128', ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 262656, 144), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf128', ModularIndexing(513*c0 + c3 + 787712, 1, 262656) + 262144*ModularIndexing(513*c0 + c3 + 787712, 262656, 3) + 786432*ModularIndexing(513*c0 + 787968*c2 + c3 + 787712, 787968, 48), {c0: 256, c1: 4, c2: 48, c3: 513}, None)]
op129.met_dependencies = []
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (25214976, 1)
op129.sizes = ([256, 4, 48, 513], [])
buf128_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
class op129_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 48, z3: 513}
    index0 = z1
    index1 = z3
    index2 = ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index3 = 786432*z2 + 262144*(((513*z0 + z3 + 656384)//262656)) + 786432*(((513*z0 + z3 + 656384)//787968)) + ModularIndexing(513*z0 + z3, 1, 512) + 512*ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index4 = ModularIndexing(513*z0 + z3 + 787712, 512, 513)
    index5 = ModularIndexing(513*z0 + z3 + 787712, 1, 262656) + 262144*ModularIndexing(513*z0 + z3 + 787712, 262656, 3) + 786432*ModularIndexing(513*z0 + 787968*z2 + z3 + 787712, 787968, 48)
    index6 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 512, 513)
    index7 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 262656, 144)
    index8 = 98560*z0 + 24640*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index8')
        store = ops.store('buf129', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf128', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf128', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf128', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op129 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[256, 131072], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 256
        xnumel = 98496
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = (xindex // 24624)
        x1 = xindex % 513
        y0 = yindex
        x2 = (xindex // 513) % 48
        x5 = xindex % 24624
        tmp0 = x3
        tmp1 = tl.full([1, 1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1, 1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x1 + (513*y0)) // 512) % 513
        tmp7 = tl.full([1, 1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((512*(((656384 + x1 + (513*y0)) // 512) % 513)) + (262144*((656384 + x1 + (513*y0)) // 262656)) + (786432*x2) + (786432*((656384 + x1 + (513*y0)) // 787968)) + ((x1 + (513*y0)) % 512)), tmp9 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.full(tmp10.shape, 0.0, tmp10.dtype)
        tmp12 = tl.where(tmp5, tmp10, tmp11)
        tmp13 = tl.full([1, 1], 3, tl.int64)
        tmp14 = tmp13 < tmp13
        tmp15 = tl.broadcast_to(x1, [XBLOCK, YBLOCK])
        tmp16 = tmp15 >= tmp4
        tmp17 = tmp16 & tmp14
        tmp18 = ((787712 + x1 + (513*y0)) // 512) % 513
        tmp19 = tmp18 < tmp7
        tmp20 = tmp19 & tmp17
        tmp21 = tl.load(in_ptr0 + ((262144*(((787712 + x1 + (513*y0)) // 262656) % 3)) + (786432*(((787712 + x1 + (513*y0) + (787968*x2)) // 787968) % 48)) + ((787712 + x1 + (513*y0)) % 262656)), tmp20 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.full(tmp21.shape, 0.0, tmp21.dtype)
        tmp23 = tl.where(tmp17, tmp21, tmp22)
        tmp24 = 0.0
        tmp25 = tl.where(tmp16, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp14, tmp25, tmp26)
        tmp28 = tl.where(tmp14, tmp27, tmp24)
        tmp29 = tl.where(tmp5, tmp12, tmp28)
        tmp30 = tmp0 < tmp13
        tmp31 = tmp16 & tmp30
        tmp32 = (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp33 = tmp32 < tmp7
        tmp34 = tmp33 & tmp31
        tmp35 = tl.load(in_ptr0 + ((262144*((((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 262656) % 144)) + (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) % 262656)), tmp34 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp31, tmp35, tmp36)
        tmp38 = tl.where(tmp16, tmp37, tmp24)
        tmp39 = tl.full(tmp38.shape, 0.0, tmp38.dtype)
        tmp40 = tl.where(tmp30, tmp38, tmp39)
        tmp41 = tl.where(tmp30, tmp40, tmp24)
        tmp42 = tl.where(tmp2, tmp29, tmp41)
        tl.store(out_ptr0 + (x5 + (24640*x3) + (98560*y0)), tmp42, xmask & ymask)


op130: SchedulerNode(ComputedBuffer)
op130.writes = [   MemoryDep('buf130', 131328*c0 + 525312*c1 + c2, {c0: 4, c1: 48, c2: 131328}, None)]
op130.unmet_dependencies = 
    [   MemoryDep('buf128', ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 262656, 144), {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf128', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf128', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf129', 24640*c0 + 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf129', 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None)]
op130.met_dependencies = []
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
    buf130.users = [
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
    ]
]
op130.group.device = cuda:0
op130.group.iteration = (25214976, 1)
op130.sizes = ([4, 48, 256, 513], [])
buf128_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
class op130_loop_body:
    var_ranges = {z0: 4, z1: 48, z2: 256, z3: 513}
    index0 = z0
    index1 = z2
    index2 = z3
    index3 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 512, 513)
    index4 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 262656, 144)
    index5 = ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index6 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index7 = 513*z1 + 98560*z2 + z3
    index8 = ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index9 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index10 = 24640*z0 + 513*z1 + 98560*z2 + z3
    index11 = 131328*z0 + 525312*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf129', get_index_2)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_4 = ops.constant(1, torch.int64)
        ge_2 = ops.ge(index_expr_2, constant_4)
        masked_subblock10 = self.masked_subblock10(ge_2, 0.0)
        get_index_4 = self.get_index('index10')
        load_1 = ops.load('buf129', get_index_4)
        where_2 = ops.where(ge_2, masked_subblock10, load_1)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_5 = self.get_index('index11')
        store = ops.store('buf130', get_index_5, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf128', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf128', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf129', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf129', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf128', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf129', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
    def masked_subblock12(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf128', get_index)
        return load
    def masked_subblock11(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock12 = self.masked_subblock12(lt, 0.0)
        return masked_subblock12
    def masked_subblock10(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock11 = self.masked_subblock11(lt, 0.0)
        get_index_1 = self.get_index('index10')
        load = ops.load('buf129', get_index_1)
        where = ops.where(lt, masked_subblock11, load)
        return where
op130 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 6303744)
        x1 = (xindex // 513) % 256
        x0 = xindex % 513
        x2 = (xindex // 131328) % 48
        x4 = xindex % 131328
        tmp47 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), None, eviction_policy='evict_last')
        tmp62 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), None)
        tmp0 = x3
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1], 1, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = x0
        tmp7 = tmp6 >= tmp4
        tmp8 = tl.full([1], 256, tl.int64)
        tmp9 = tmp6 < tmp8
        tmp10 = tmp7 & tmp9
        tmp11 = tmp10 & tmp5
        tmp12 = (((-256) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp13 = tl.full([1], 512, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = tl.load(in_ptr0 + ((262144*((((-256) + x0 + (513*x1) + (787968*x2)) // 262656) % 144)) + (((-256) + x0 + (513*x1) + (787968*x2)) % 262656)), tmp15, eviction_policy='evict_last', other=0.0)
        tmp17 = tl.full(tmp16.shape, 0.0, tmp16.dtype)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.full([1], 0, tl.int64)
        tmp20 = tmp19 >= tmp4
        tmp21 = tmp20 & tmp5
        tmp22 = tmp9 & tmp21
        tmp23 = (((-131584) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp24 = tmp23 < tmp13
        tmp25 = tmp24 & tmp22
        tmp26 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp25, eviction_policy='evict_last', other=0.0)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp22, tmp26, tmp27)
        tmp29 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp21, eviction_policy='evict_last', other=0.0)
        tmp30 = tl.where(tmp9, tmp28, tmp29)
        tmp31 = tl.full(tmp30.shape, 0.0, tmp30.dtype)
        tmp32 = tl.where(tmp21, tmp30, tmp31)
        tmp33 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp5, eviction_policy='evict_last', other=0.0)
        tmp34 = tl.where(tmp20, tmp32, tmp33)
        tmp35 = tl.where(tmp10, tmp18, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp5, tmp35, tmp36)
        tmp38 = tmp9 & tmp20
        tmp39 = tmp24 & tmp38
        tmp40 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp39, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp38, tmp40, tmp41)
        tmp43 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp20, eviction_policy='evict_last', other=0.0)
        tmp44 = tl.where(tmp9, tmp42, tmp43)
        tmp45 = tl.full(tmp44.shape, 0.0, tmp44.dtype)
        tmp46 = tl.where(tmp20, tmp44, tmp45)
        tmp48 = tl.where(tmp20, tmp46, tmp47)
        tmp49 = tl.where(tmp5, tmp37, tmp48)
        tmp50 = tmp0 >= tmp4
        tmp51 = tmp9 & tmp50
        tmp52 = (((-131584) + x0 + (513*x1) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp53 = tmp52 < tmp13
        tmp54 = tmp53 & tmp51
        tmp55 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp54, other=0.0)
        tmp56 = tl.full(tmp55.shape, 0.0, tmp55.dtype)
        tmp57 = tl.where(tmp51, tmp55, tmp56)
        tmp58 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), tmp50, other=0.0)
        tmp59 = tl.where(tmp9, tmp57, tmp58)
        tmp60 = tl.full(tmp59.shape, 0.0, tmp59.dtype)
        tmp61 = tl.where(tmp50, tmp59, tmp60)
        tmp63 = tl.where(tmp50, tmp61, tmp62)
        tmp64 = tl.where(tmp2, tmp49, tmp63)
        tl.store(out_ptr0 + (x4 + (131328*x3) + (525312*x2)), tmp64, None)


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 6303744}, None)]
op131.unmet_dependencies = [MemoryDep('buf130', 525312*c0 + c1 + 393984, {c0: 48, c1: 131328}, None)]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
    buf131.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (6303744, 1)
op131.sizes = ([48, 256, 513], [])
buf130_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
class op131_loop_body:
    var_ranges = {z0: 48, z1: 256, z2: 513}
    index0 = z2
    index1 = -z1 - z2 + 512
    index2 = z1 + 768
    index3 = z1 + z2 + 513
    index4 = 525312*z0 + 513*z1 + z2 + 393984
    index5 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf130', get_index_2)
        where = ops.where(lt, masked_subblock4, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index5')
        store = ops.store('buf131', get_index_3, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf130', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf130', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_3 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf130', get_index_2)
        where_1 = ops.where(lt, masked_subblock2, load)
        constant_4 = ops.constant(-inf, torch.float32)
        where_2 = ops.where(to_dtype, constant_4, where_1)
        return where_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf130', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf130', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
op131 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6303744
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 513
        x1 = (xindex // 513) % 256
        x2 = (xindex // 131328)
        x3 = xindex % 131328
        x4 = xindex
        tmp43 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), None)
        tmp0 = x0
        tmp1 = tl.full([1], 256, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = 512 + ((-1)*x0) + ((-1)*x1)
        tmp4 = tl.full([1], 0, tl.int64)
        tmp5 = tmp3 <= tmp4
        tmp6 = 1.0
        tmp7 = 0.0
        tmp8 = tl.where(tmp5, tmp6, tmp7)
        tmp9 = (tmp8 != 0)
        tmp10 = 768 + x1
        tmp11 = tmp10 < tmp1
        tmp12 = tmp11 & tmp2
        tmp13 = tl.full([1], 257, tl.int64)
        tmp14 = tmp0 < tmp13
        tmp15 = tmp14 & tmp12
        tmp16 = 513 + x0 + x1
        tmp17 = tmp16 <= tmp4
        tmp18 = tl.where(tmp17, tmp6, tmp7)
        tmp19 = (tmp18 != 0)
        tmp20 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp15, other=0.0)
        tmp21 = float("-inf")
        tmp22 = tl.where(tmp19, tmp21, tmp20)
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp15, tmp22, tmp23)
        tmp25 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp12, other=0.0)
        tmp26 = tl.where(tmp14, tmp24, tmp25)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp12, tmp26, tmp27)
        tmp29 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp2, other=0.0)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp31 = tl.where(tmp9, tmp21, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tmp34 = tmp14 & tmp11
        tmp35 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp34, other=0.0)
        tmp36 = tl.where(tmp19, tmp21, tmp35)
        tmp37 = tl.full(tmp36.shape, 0.0, tmp36.dtype)
        tmp38 = tl.where(tmp34, tmp36, tmp37)
        tmp39 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp11, other=0.0)
        tmp40 = tl.where(tmp14, tmp38, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp11, tmp40, tmp41)
        tmp44 = tl.where(tmp11, tmp42, tmp43)
        tmp45 = tl.where(tmp2, tmp33, tmp44)
        tl.store(out_ptr0 + (x4), tmp45, None)


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 4096}, None)]
op132.unmet_dependencies = []
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf132.users = [
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
    ]
]
op132.group.device = cuda:0
op132.group.iteration = (4096, 1)
op132.sizes = ([4096], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op132_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(1.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf132', get_index, constant, None)
        return store
op132 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = 1.0
        tl.store(out_ptr0 + (x0), tmp0, None)


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 4096}, None)]
op133.unmet_dependencies = []
op133.met_dependencies = [MemoryDep('arg7_1', c0, {c0: 4096}, None)]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf133.users = [
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
    ]
]
op133.group.device = cuda:0
op133.group.iteration = (4096, 1)
op133.sizes = ([4096], [])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[4, 1024], stride=[1024, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op133_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        constant = ops.constant(0.0, torch.float32)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        ne_1 = ops.ne(load_1, constant_1)
        to_dtype = ops.to_dtype(ne_1, torch.float32, src_dtype = torch.bool)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(ne, constant_2, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf133', get_index_2, where, None)
        return store
op133 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.0
        tmp2 = tmp0 != tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp4, tmp3)
        tl.store(out_ptr0 + (x0), tmp5, None)


op134: SchedulerNode(ComputedBuffer)
op134.writes = [   MemoryDep('buf134', 525312*c0 + 513*c1 + 131328*c2 + c3, {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op134.unmet_dependencies = 
    [   MemoryDep('buf132', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3 + 656384, 512, 513), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf132', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 512, 513) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf132', ModularIndexing(513*c1 + c3 + 787712, 512, 513) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf133', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3, 1, 512), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf133', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 1, 512) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf133', ModularIndexing(513*c1 + c3 + 787712, 1, 512) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op134.met_dependencies = []
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
    buf134.users = [
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
    ]
]
op134.group.device = cuda:0
op134.group.iteration = (2101248, 1)
op134.sizes = ([4, 256, 4, 513], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
class op134_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 4, z3: 513}
    index0 = z0
    index1 = z3
    index2 = ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index3 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index4 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3, 1, 512)
    index5 = ModularIndexing(513*z1 + z3 + 787712, 512, 513)
    index6 = ModularIndexing(513*z1 + z3 + 787712, 512, 513) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index7 = ModularIndexing(513*z1 + z3 + 787712, 1, 512) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index8 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513)
    index9 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index10 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 1, 512) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index11 = 525312*z0 + 513*z1 + 131328*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index11')
        store = ops.store('buf134', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf133', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf133', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index10')
        load_1 = ops.load('buf133', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op134 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2101248
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 525312)
        x0 = xindex % 513
        x2 = (xindex // 2052) % 256
        x1 = (xindex // 513) % 4
        tmp0 = x3
        tmp1 = tl.full([1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x0 + (513*x2)) // 512) % 513
        tmp7 = tl.full([1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + (((656384 + x0 + (513*x2)) // 512) % 513)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.load(in_ptr1 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + ((x0 + (513*x2)) % 512)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp12 = tmp10 * tmp11
        tmp13 = tl.full(tmp12.shape, 0.0, tmp12.dtype)
        tmp14 = tl.where(tmp9, tmp12, tmp13)
        tmp15 = tl.full(tmp14.shape, 0.0, tmp14.dtype)
        tmp16 = tl.where(tmp5, tmp14, tmp15)
        tmp17 = tl.full([1], 3, tl.int64)
        tmp18 = tmp17 < tmp17
        tmp19 = tmp5 & tmp18
        tmp20 = ((787712 + x0 + (513*x2)) // 512) % 513
        tmp21 = tmp20 < tmp7
        tmp22 = tmp21 & tmp19
        tmp23 = tl.load(in_ptr0 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + (((787712 + x0 + (513*x2)) // 512) % 513)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp24 = tl.load(in_ptr1 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + ((787712 + x0 + (513*x2)) % 512)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp25 = tmp23 * tmp24
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp22, tmp25, tmp26)
        tmp28 = tl.full(tmp27.shape, 0.0, tmp27.dtype)
        tmp29 = tl.where(tmp19, tmp27, tmp28)
        tmp30 = 0.0
        tmp31 = tl.where(tmp5, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp18, tmp31, tmp32)
        tmp34 = tl.where(tmp18, tmp33, tmp30)
        tmp35 = tl.where(tmp5, tmp16, tmp34)
        tmp36 = tmp0 < tmp17
        tmp37 = tmp5 & tmp36
        tmp38 = (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513
        tmp39 = tmp38 < tmp7
        tmp40 = tmp39 & tmp37
        tmp41 = tl.load(in_ptr0 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + ((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513)), tmp40, eviction_policy='evict_last', other=0.0)
        tmp42 = tl.load(in_ptr1 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) % 512)), tmp40, other=0.0)
        tmp43 = tmp41 * tmp42
        tmp44 = tl.full(tmp43.shape, 0.0, tmp43.dtype)
        tmp45 = tl.where(tmp40, tmp43, tmp44)
        tmp46 = tl.full(tmp45.shape, 0.0, tmp45.dtype)
        tmp47 = tl.where(tmp37, tmp45, tmp46)
        tmp48 = tl.where(tmp5, tmp47, tmp30)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp36, tmp48, tmp49)
        tmp51 = tl.where(tmp36, tmp50, tmp30)
        tmp52 = tl.where(tmp2, tmp35, tmp51)
        tl.store(out_ptr0 + (x0 + (513*x2) + (131328*x1) + (525312*x3)), tmp52, None)


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 525312}, None)]
op135.unmet_dependencies = 
    [   MemoryDep('buf132', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf132', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf133', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf133', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf134', c0, {c0: 525312}, None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
    buf135.users = [
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
    ]
]
op135.group.device = cuda:0
op135.group.iteration = (525312, 1)
op135.sizes = ([4, 256, 513], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
class op135_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 513}
    index0 = z1
    index1 = z2
    index2 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513)
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index5 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index7 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index8 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_1 = ops.constant(0, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_1, constant_2)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf134', get_index_1)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index8')
        store = ops.store('buf135', get_index_2, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf133', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf133', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf134', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index8')
        load = ops.load('buf134', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf133', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf134', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
op135 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 256
        x2 = xindex
        y1 = (yindex // 256)
        y3 = yindex
        tmp56 = tl.load(in_ptr2 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 1, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tmp3 >= tmp1
        tmp5 = tl.full([1, 1], 256, tl.int64)
        tmp6 = tmp3 < tmp5
        tmp7 = tmp4 & tmp6
        tmp8 = tmp7 & tmp2
        tmp9 = (((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp10 = tl.full([1, 1], 512, tl.int64)
        tmp11 = tmp9 < tmp10
        tmp12 = tmp11 & tmp8
        tmp13 = tl.load(in_ptr0 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp14 = tl.load(in_ptr1 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + (((-256) + x2 + (513*y0) + (787968*y1)) % 512)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp15 = tmp13 * tmp14
        tmp16 = tl.full(tmp15.shape, 0.0, tmp15.dtype)
        tmp17 = tl.where(tmp12, tmp15, tmp16)
        tmp18 = tl.full(tmp17.shape, 0.0, tmp17.dtype)
        tmp19 = tl.where(tmp8, tmp17, tmp18)
        tmp20 = tl.full([1, 1], 0, tl.int64)
        tmp21 = tmp20 >= tmp1
        tmp22 = tmp21 & tmp2
        tmp23 = tmp6 & tmp22
        tmp24 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp25 = tmp24 < tmp10
        tmp26 = tmp25 & tmp23
        tmp27 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tmp27 * tmp28
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp26, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp23, tmp31, tmp32)
        tmp34 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp22 & xmask, eviction_policy='evict_last', other=0.0)
        tmp35 = tl.where(tmp6, tmp33, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp22, tmp35, tmp36)
        tmp38 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp39 = tl.where(tmp21, tmp37, tmp38)
        tmp40 = tl.where(tmp7, tmp19, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp2, tmp40, tmp41)
        tmp43 = tmp6 & tmp21
        tmp44 = tmp25 & tmp43
        tmp45 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp47 = tmp45 * tmp46
        tmp48 = tl.full(tmp47.shape, 0.0, tmp47.dtype)
        tmp49 = tl.where(tmp44, tmp47, tmp48)
        tmp50 = tl.full(tmp49.shape, 0.0, tmp49.dtype)
        tmp51 = tl.where(tmp43, tmp49, tmp50)
        tmp52 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp21 & xmask, eviction_policy='evict_last', other=0.0)
        tmp53 = tl.where(tmp6, tmp51, tmp52)
        tmp54 = tl.full(tmp53.shape, 0.0, tmp53.dtype)
        tmp55 = tl.where(tmp21, tmp53, tmp54)
        tmp57 = tl.where(tmp21, tmp55, tmp56)
        tmp58 = tl.where(tmp2, tmp42, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 263168}, None)]
op136.unmet_dependencies = 
    [   MemoryDep('buf132', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf133', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf134', 513*c0 + c1, {c0: 1024, c1: 257}, None),
        MemoryDep('buf135', 513*c0 + c1, {c0: 1024, c1: 257}, None)]
op136.met_dependencies = []
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
    buf136.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (263168, 1)
op136.sizes = ([4, 256, 257], [])
buf135_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
class op136_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 257}
    index0 = z1 + z2 - 255
    index1 = 131328*z0 + 513*z1 + z2
    index2 = z2
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index5 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index6 = 65792*z0 + 257*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        constant_3 = ops.constant(0, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq = ops.eq(constant_3, constant_4)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf135', get_index_1)
        constant_5 = ops.constant(0, torch.int64)
        constant_6 = ops.constant(1, torch.int64)
        ge = ops.ge(constant_5, constant_6)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf134', get_index_2)
        where_1 = ops.where(ge, masked_subblock1, load_1)
        where_2 = ops.where(eq, load, where_1)
        constant_7 = ops.constant(-inf, torch.float32)
        where_3 = ops.where(to_dtype, constant_7, where_2)
        get_index_3 = self.get_index('index6')
        store = ops.store('buf136', get_index_3, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('buf133', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf134', get_index_1)
        where = ops.where(lt, masked_subblock2, load)
        return where
op136 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 257
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 256
        y3 = yindex
        y1 = (yindex // 256)
        tmp9 = tl.load(in_ptr0 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr3 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = (-255) + x2 + y0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 <= tmp1
        tmp3 = 1.0
        tmp4 = 0.0
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tmp6 = (tmp5 != 0)
        tmp7 = tl.full([1, 1], 0, tl.int32)
        tmp8 = tmp7 == tmp7
        tmp10 = tl.full([1, 1], 1, tl.int64)
        tmp11 = tmp1 >= tmp10
        tmp12 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp13 = tl.full([1, 1], 256, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp17 = tl.full([1, 1], 512, tl.int64)
        tmp18 = tmp16 < tmp17
        tmp19 = tmp18 & tmp15
        tmp20 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tmp20 * tmp21
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp19, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp15, tmp24, tmp25)
        tmp27 = tl.load(in_ptr3 + (x2 + (513*y3)), tmp11 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.where(tmp14, tmp26, tmp27)
        tmp29 = tl.full(tmp28.shape, 0.0, tmp28.dtype)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp32 = tl.where(tmp11, tmp30, tmp31)
        tmp33 = tl.where(tmp8, tmp9, tmp32)
        tmp34 = float("-inf")
        tmp35 = tl.where(tmp6, tmp34, tmp33)
        tl.store(out_ptr0 + (x2 + (257*y3)), tmp35, xmask)


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 2101248}, None)]
op137.unmet_dependencies = 
    [   MemoryDep('buf132', ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf133', ModularIndexing(c2 + 513*ModularIndexing(c1, 1, 256), 1, 512) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf134', 131328*c0 + c2 + 525312*((c1//256)) + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf135', 131328*c0 + c2 + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf136', 65792*c0 + 257*c1 + c2, {c0: 4, c1: 1024, c2: 513}, None)]
op137.met_dependencies = []
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
    buf137.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (2101248, 1)
op137.sizes = ([4, 1024, 513], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
class op137_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 513}
    index0 = z1
    index1 = z2
    index2 = 65792*z0 + 257*z1 + z2
    index3 = (z1//256)
    index4 = 131328*z0 + z2 + 513*ModularIndexing(z1, 1, 256)
    index5 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index7 = ModularIndexing(z2 + 513*ModularIndexing(z1, 1, 256), 1, 512) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index8 = 131328*z0 + z2 + 525312*((z1//256)) + 513*ModularIndexing(z1, 1, 256)
    index9 = 525312*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf135', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock6 = self.masked_subblock6(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf134', get_index_4)
        where = ops.where(ge, masked_subblock6, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_5 = self.get_index('index9')
        store = ops.store('buf137', get_index_5, where_2, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf136', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf133', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf134', get_index_1)
        where = ops.where(lt, masked_subblock4, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf135', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf134', get_index_4)
        where = ops.where(ge, masked_subblock3, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock2, where_1)
        return where_2
    def masked_subblock8(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf133', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf134', get_index_1)
        where = ops.where(lt, masked_subblock7, load)
        return where
op137 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 11, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 4096
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 1024
        x2 = xindex
        y1 = (yindex // 1024)
        y3 = yindex
        tmp40 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), xmask, eviction_policy='evict_last')
        tmp55 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 256, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tl.full([1, 1], 257, tl.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp5 & tmp2
        tmp7 = tl.load(in_ptr0 + (x2 + (257*y0) + (65792*y1)), tmp6 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tl.broadcast_to((y0 // 256), [XBLOCK, YBLOCK])
        tmp9 = tl.full([1, 1], 0, tl.int32)
        tmp10 = tmp8 == tmp9
        tmp11 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp12 = tl.full([1, 1], 1, tl.int64)
        tmp13 = tmp8 >= tmp12
        tmp14 = tmp13 & tmp2
        tmp15 = tmp3 < tmp1
        tmp16 = tmp15 & tmp14
        tmp17 = (((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513
        tmp18 = tl.full([1, 1], 512, tl.int64)
        tmp19 = tmp17 < tmp18
        tmp20 = tmp19 & tmp16
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp23 = tmp21 * tmp22
        tmp24 = tl.full(tmp23.shape, 0.0, tmp23.dtype)
        tmp25 = tl.where(tmp20, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp16, tmp25, tmp26)
        tmp28 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp14 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tl.where(tmp15, tmp27, tmp28)
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp14, tmp29, tmp30)
        tmp32 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp33 = tl.where(tmp13, tmp31, tmp32)
        tmp34 = tl.where(tmp10, tmp11, tmp33)
        tmp35 = tl.where(tmp5, tmp7, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp2, tmp35, tmp36)
        tmp38 = (y0 // 256)
        tmp39 = tmp38 == tmp9
        tmp41 = tmp38 >= tmp12
        tmp42 = tmp15 & tmp41
        tmp43 = tmp19 & tmp42
        tmp44 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp45 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tmp44 * tmp45
        tmp47 = tl.full(tmp46.shape, 0.0, tmp46.dtype)
        tmp48 = tl.where(tmp43, tmp46, tmp47)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp42, tmp48, tmp49)
        tmp51 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp41 & xmask, eviction_policy='evict_last', other=0.0)
        tmp52 = tl.where(tmp15, tmp50, tmp51)
        tmp53 = tl.full(tmp52.shape, 0.0, tmp52.dtype)
        tmp54 = tl.where(tmp41, tmp52, tmp53)
        tmp56 = tl.where(tmp41, tmp54, tmp55)
        tmp57 = tl.where(tmp39, tmp40, tmp56)
        tmp58 = tl.where(tmp2, tmp37, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op138: SchedulerNode(ComputedBuffer)
op138.writes = [   MemoryDep('buf138', 6324224*c0 + 513*c1 + 6176*c2 + c3, {c0: 4, c1: 12, c2: 1024, c3: 513}, None)]
op138.unmet_dependencies = 
    [   MemoryDep('buf130', 525312*c0 + 513*c1 + c2 + 131328*((ModularIndexing(c1, 1, 256)//256)), {c0: 48, c1: 1024, c2: 513}, None),
        MemoryDep('buf131', 131328*c0 + c1 - 393984, {c0: 48, c1: 525312}, None),
        MemoryDep('buf137', 525312*c0 + c2, {c0: 4, c1: 12, c2: 525312}, None)]
op138.met_dependencies = []
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
    buf138.users = [
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
    ]
]
op138.group.device = cuda:0
op138.group.iteration = (25214976, 1)
op138.sizes = ([4, 12, 1024, 513], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
class op138_loop_body:
    var_ranges = {z0: 4, z1: 12, z2: 1024, z3: 513}
    index0 = z2
    index1 = 1575936*z0 + 131328*z1 + 513*z2 + z3 - 393984
    index2 = z2 + 256*((ModularIndexing(z2, 1, 256)//256))
    index3 = z3
    index4 = z2 + z3 + 256*((ModularIndexing(z2, 1, 256)//256)) - 255
    index5 = 6303744*z0 + 525312*z1 + 513*z2 + z3 + 131328*((ModularIndexing(z2, 1, 256)//256))
    index6 = -z2 - z3 + 1280
    index7 = 525312*z0 + 513*z2 + z3
    index8 = 6324224*z0 + 513*z1 + 6176*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(768, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index5')
        load = ops.load('buf130', get_index_2)
        where = ops.where(lt, masked_subblock2, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_4 = self.get_index('index7')
        load_1 = ops.load('buf137', get_index_4)
        where_2 = ops.where(ge_1, masked_subblock4, load_1)
        add = ops.add(where_1, where_2)
        get_index_5 = self.get_index('index8')
        store = ops.store('buf138', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf131', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf130', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf130', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf137', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(ge, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf137', get_index_1)
        where = ops.where(ge, masked_subblock5, load)
        return where
op138 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 513) % 1024
        x4 = xindex % 525312
        x5 = (xindex // 525312)
        x0 = xindex % 513
        x3 = (xindex // 6303744)
        x2 = (xindex // 525312) % 12
        tmp27 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), None)
        tmp44 = tl.load(in_ptr2 + (x4 + (525312*x3)), None, eviction_policy='evict_last')
        tmp0 = x1
        tmp1 = tl.full([1], 768, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.load(in_ptr0 + ((-393984) + x4 + (131328*x5)), tmp2, other=0.0)
        tmp4 = x1 + (256*((x1 % 256) // 256))
        tmp5 = tl.full([1], 256, tl.int64)
        tmp6 = tmp4 < tmp5
        tmp7 = x0
        tmp8 = tl.full([1], 257, tl.int64)
        tmp9 = tmp7 < tmp8
        tmp10 = tmp9 & tmp6
        tmp11 = (-255) + x0 + x1 + (256*((x1 % 256) // 256))
        tmp12 = tl.full([1], 0, tl.int64)
        tmp13 = tmp11 <= tmp12
        tmp14 = 1.0
        tmp15 = 0.0
        tmp16 = tl.where(tmp13, tmp14, tmp15)
        tmp17 = (tmp16 != 0)
        tmp18 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp10, other=0.0)
        tmp19 = float("-inf")
        tmp20 = tl.where(tmp17, tmp19, tmp18)
        tmp21 = tl.full(tmp20.shape, 0.0, tmp20.dtype)
        tmp22 = tl.where(tmp10, tmp20, tmp21)
        tmp23 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp6, other=0.0)
        tmp24 = tl.where(tmp9, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp6, tmp24, tmp25)
        tmp28 = tl.where(tmp6, tmp26, tmp27)
        tmp29 = tl.where(tmp2, tmp3, tmp28)
        tmp30 = tmp7 >= tmp5
        tmp31 = tmp30 & tmp2
        tmp32 = 1280 + ((-1)*x0) + ((-1)*x1)
        tmp33 = tmp32 <= tmp12
        tmp34 = tl.where(tmp33, tmp14, tmp15)
        tmp35 = (tmp34 != 0)
        tmp36 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp31, eviction_policy='evict_last', other=0.0)
        tmp37 = tl.where(tmp35, tmp19, tmp36)
        tmp38 = tl.full(tmp37.shape, 0.0, tmp37.dtype)
        tmp39 = tl.where(tmp31, tmp37, tmp38)
        tmp40 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.where(tmp30, tmp39, tmp40)
        tmp42 = tl.full(tmp41.shape, 0.0, tmp41.dtype)
        tmp43 = tl.where(tmp2, tmp41, tmp42)
        tmp45 = tl.where(tmp2, tmp43, tmp44)
        tmp46 = tmp29 + tmp45
        tl.store(out_ptr0 + (x0 + (513*x2) + (6176*x1) + (6324224*x3)), tmp46, None)


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 49152}, None)]
op139.unmet_dependencies = [MemoryDep('buf138', 6176*c0 + c1, {c0: 4096, c1: 6156}, None)]
op139.met_dependencies = []
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
    ]
]
op139.group.device = cuda:0
op139.group.iteration = (49152, 513)
op139.sizes = ([4096, 12], [513])
buf138_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op139_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf139', get_index_1, reduction)
        return store_reduction
op139 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        x3 = xindex
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp2, None)


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 49152}, None)]
op140.unmet_dependencies = 
    [   MemoryDep('buf138', 6176*c0 + c1, {c0: 4096, c1: 6156}, None),
        MemoryDep('buf139', c0, {c0: 49152}, None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf140.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (49152, 513)
op140.sizes = ([4096, 12], [513])
buf138_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf140_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op140_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf139', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf140', get_index_2, reduction)
        return store_reduction
op140 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        x3 = xindex
        tmp1 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp5, None)


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 3145728}, None)]
op141.unmet_dependencies = [MemoryDep('buf119', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op141.met_dependencies = []
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (3145728, 1)
op141.sizes = ([1024, 4, 768], [])
buf119_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op141_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf141', get_index_1, load, None)
        return store
op141 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op142: ExternKernelSchedulerNode(ExternKernelOut)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf141', mode=None)]
op142.met_dependencies = [StarDep(name='arg55_1', mode=None)]
op142.outputs = [
    buf142: ExternKernelOut
    buf142.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf142.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op142.node.kernel = extern_kernels.mm


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 4718592}, None)]
op143.unmet_dependencies = [   MemoryDep('buf142', 64*c0 + 3072*c1 + c2 - 786432, {c0: 48, c1: 1536, c2: 64}, None)]
op143.met_dependencies = [   MemoryDep('arg56_1', c2 + 64*ModularIndexing(c0, 1, 12), {c0: 48, c1: 1536, c2: 64}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
    buf143.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (4718592, 1)
op143.sizes = ([48, 1536, 64], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
class op143_loop_body:
    var_ranges = {z0: 48, z1: 1536, z2: 64}
    index0 = z1 - 256
    index1 = 64*z0 + 3072*z1 + z2 - 786432
    index2 = z2 + 64*ModularIndexing(z0, 1, 12)
    index3 = 98304*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1024, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, -1.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf143', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg56_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op143 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 1536
        x0 = xindex % 64
        x2 = (xindex // 98304)
        x3 = xindex
        tmp0 = (-256) + x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 1024, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-786432) + x0 + (64*x2) + (3072*x1)), tmp5, other=0.0)
        tmp7 = tl.load(in_ptr1 + (x0 + (64*(x2 % 12))), tmp5, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, -1.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op144: SchedulerNode(ComputedBuffer)
op144.writes = [   MemoryDep('buf144', 770*c0 + 788480*c1 + c2, {c0: 1024, c1: 48, c2: 770}, None)]
op144.unmet_dependencies = 
    [   MemoryDep('buf138', 6176*c0 + c2 + 6324224*((c1//12)) + 6324224*((ModularIndexing(c1, 1, 12)//12)) + 513*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 770}, None),
        MemoryDep('buf139', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None),
        MemoryDep('buf140', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None)]
op144.met_dependencies = [MemoryDep('arg8_1', c0 + 1024*((c1//12)), {c0: 1024, c1: 48}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (37847040, 1)
op144.sizes = ([1024, 48, 770], [])
arg8_1_layout = FixedLayout('cuda', torch.bool, size=[4, 1024], stride=[1024, 1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf140_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf144_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
class op144_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 770}
    index0 = z2
    index1 = z0 + 1024*((z1//12))
    index2 = 6176*z0 + z2 + 6324224*((z1//12)) + 6324224*((ModularIndexing(z1, 1, 12)//12)) + 513*ModularIndexing(z1, 1, 12)
    index3 = 12*z0 + 12288*((z1//12)) + ModularIndexing(z1, 1, 12)
    index4 = 770*z0 + 788480*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(513, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index4')
        store = ops.store('buf144', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg8_1', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf138', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('buf139', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf140', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(load, constant, truediv)
        return where
op144 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 37847040
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 770
        x1 = (xindex // 770) % 48
        x2 = (xindex // 36960)
        tmp0 = x0
        tmp1 = tl.full([1], 513, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.load(in_ptr0 + (x2 + (1024*(x1 // 12))), tmp2, eviction_policy='evict_last', other=0.0).to(tl.int1)
        tmp4 = tl.load(in_ptr1 + (x0 + (513*(x1 % 12)) + (6176*x2) + (6324224*(x1 // 12)) + (6324224*((x1 % 12) // 12))), tmp2, other=0.0)
        tmp5 = tl.load(in_ptr2 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp4 - tmp5
        tmp7 = tl_math.exp(tmp6)
        tmp8 = tl.load(in_ptr3 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp9 = tmp7 / tmp8
        tmp10 = 0.0
        tmp11 = tl.where(tmp3, tmp10, tmp9)
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp2, tmp11, tmp12)
        tl.store(out_ptr0 + (x0 + (770*x2) + (788480*x1)), tmp13, None)


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 9437184}, None)]
op145.unmet_dependencies = [   MemoryDep('buf143', 98304*c0 + 16384*c1 + c2, {c0: 48, c1: 4, c2: 49152}, None)]
op145.met_dependencies = []
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (9437184, 1)
op145.sizes = ([48, 4, 49152], [])
buf143_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
class op145_loop_body:
    var_ranges = {z0: 48, z1: 4, z2: 49152}
    index0 = 98304*z0 + 16384*z1 + z2
    index1 = 196608*z0 + 49152*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf145', get_index_1, load, None)
        return store
op145 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 9437184
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 49152
        x1 = (xindex // 49152) % 4
        x2 = (xindex // 196608)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (16384*x1) + (98304*x2)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf144', mode=None), StarDep(name='buf145', mode=None)]
op146.met_dependencies = []
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
    buf146.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.node.kernel = extern_kernels.bmm


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 3145728}, None)]
op147.unmet_dependencies = [   MemoryDep('buf146', 786432*c0 + 64*c1 + 65536*((c2//64)) + ModularIndexing(c2, 1, 64), {c0: 4, c1: 1024, c2: 768}, None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf147.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (3145728, 1)
op147.sizes = ([4, 1024, 768], [])
buf146_layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op147_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 768}
    index0 = 786432*z0 + 64*z1 + 65536*((z2//64)) + ModularIndexing(z2, 1, 64)
    index1 = 786432*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf147', get_index_1, load, None)
        return store
op147 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 1024
        x2 = (xindex // 786432)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + ((64*x1) + (65536*(x0 // 64)) + (786432*x2) + (x0 % 64)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op148: ExternKernelSchedulerNode(ExternKernelOut)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf147', mode=None)]
op148.met_dependencies = [StarDep(name='arg57_1', mode=None)]
op148.outputs = [
    buf148: ExternKernelOut
    buf148.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf148.users = [
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False),
    ]
]
op148.node.kernel = extern_kernels.mm


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 4096}, None)]
op149.unmet_dependencies = 
    [   MemoryDep('buf119', c0, {c0: 3145728}, None),
        MemoryDep('buf148', c0, {c0: 3145728}, None)]
op149.met_dependencies = [MemoryDep('arg58_1', c1, {c0: 4096, c1: 768}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf149.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (4096, 768)
op149.sizes = ([4096], [768])
buf148_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op149_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg58_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf119', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf149', get_index_3, getitem)
        return store_reduction
op149 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 4096}, None)]
op150.unmet_dependencies = 
    [   MemoryDep('buf119', c0, {c0: 3145728}, None),
        MemoryDep('buf148', c0, {c0: 3145728}, None)]
op150.met_dependencies = [MemoryDep('arg58_1', c1, {c0: 4096, c1: 768}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf150.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (4096, 768)
op150.sizes = ([4096], [768])
buf148_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op150_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg58_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf119', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf150', get_index_3, getitem_1)
        return store_reduction
op150 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 3145728}, None)]
op152.unmet_dependencies = 
    [   MemoryDep('buf119', c0, {c0: 3145728}, None),
        MemoryDep('buf148', c0, {c0: 3145728}, None),
        MemoryDep('buf149', c0, {c0: 4096}, None),
        MemoryDep('buf150', c0, {c0: 4096}, None)]
op152.met_dependencies = 
    [   MemoryDep('arg58_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg59_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg60_1', c1, {c0: 4096, c1: 768}, None)]
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf152.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False),
    ]
]
op152.group.device = cuda:0
op152.group.iteration = (3145728, 1)
op152.sizes = ([4096, 768], [])
buf148_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf150_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op152_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg58_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf119', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf149', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf150', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg59_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg60_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf152', get_index_7, add_3, None)
        return store
op152 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op153: ExternKernelSchedulerNode(ExternKernelOut)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = [StarDep(name='buf152', mode=None)]
op153.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op153.outputs = [
    buf153: ExternKernelOut
    buf153.layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
    buf153.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False)]
]
op153.node.kernel = extern_kernels.mm


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 12582912}, None)]
op154.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 12582912}, None)]
op154.met_dependencies = [MemoryDep('arg62_1', c1, {c0: 4096, c1: 3072}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (12582912, 1)
op154.sizes = ([4096, 3072], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
class op154_loop_body:
    var_ranges = {z0: 4096, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf153', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg62_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf154', get_index_4, mul_2, None)
        return store
op154 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf154', mode=None)]
op155.met_dependencies = [StarDep(name='arg63_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf155.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False),
    ]
]
op155.node.kernel = extern_kernels.mm


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 4096}, None)]
op156.unmet_dependencies = 
    [   MemoryDep('buf152', c0, {c0: 3145728}, None),
        MemoryDep('buf155', c0, {c0: 3145728}, None)]
op156.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 4096, c1: 768}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf156.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (4096, 768)
op156.sizes = ([4096], [768])
buf155_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op156_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf152', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf156', get_index_3, getitem)
        return store_reduction
op156 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 4096}, None)]
op157.unmet_dependencies = 
    [   MemoryDep('buf152', c0, {c0: 3145728}, None),
        MemoryDep('buf155', c0, {c0: 3145728}, None)]
op157.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 4096, c1: 768}, None)]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf157.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (4096, 768)
op157.sizes = ([4096], [768])
buf155_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op157_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf152', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf157', get_index_3, getitem_1)
        return store_reduction
op157 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 3145728}, None)]
op159.unmet_dependencies = 
    [   MemoryDep('buf152', c0, {c0: 3145728}, None),
        MemoryDep('buf155', c0, {c0: 3145728}, None),
        MemoryDep('buf156', c0, {c0: 4096}, None),
        MemoryDep('buf157', c0, {c0: 4096}, None)]
op159.met_dependencies = 
    [   MemoryDep('arg64_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg65_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg66_1', c1, {c0: 4096, c1: 768}, None)]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
]
op159.group.device = cuda:0
op159.group.iteration = (3145728, 1)
op159.sizes = ([4096, 768], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf157_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op159_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf152', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf156', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf157', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg65_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg66_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf159', get_index_7, add_3, None)
        return store
op159 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 3145728}, None)]
op160.unmet_dependencies = [MemoryDep('buf159', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf160.users = [NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (3145728, 1)
op160.sizes = ([1024, 4, 768], [])
buf159_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op160_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf160', get_index_1, load, None)
        return store
op160 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op161: ExternKernelSchedulerNode(ExternKernelOut)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf160', mode=None)]
op161.met_dependencies = [StarDep(name='arg67_1', mode=None)]
op161.outputs = [
    buf161: ExternKernelOut
    buf161.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf161.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=True, is_weak=False)]
]
op161.node.kernel = extern_kernels.mm


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 3145728}, None)]
op162.unmet_dependencies = [MemoryDep('buf161', c0, {c0: 3145728}, None)]
op162.met_dependencies = [   MemoryDep('arg68_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf162.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (3145728, 1)
op162.sizes = ([1024, 48, 64], [])
buf161_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op162_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg68_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf162', get_index_2, mul, None)
        return store
op162 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x3), tmp4, None)


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 3145728}, None)]
op163.unmet_dependencies = [MemoryDep('buf159', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op163.met_dependencies = []
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (3145728, 1)
op163.sizes = ([1024, 4, 768], [])
buf159_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op163_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf163', get_index_1, load, None)
        return store
op163 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op164: ExternKernelSchedulerNode(ExternKernelOut)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf163', mode=None)]
op164.met_dependencies = [StarDep(name='arg69_1', mode=None)]
op164.outputs = [
    buf164: ExternKernelOut
    buf164.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf164.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False)]
]
op164.node.kernel = extern_kernels.mm


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 3145728}, None)]
op165.unmet_dependencies = [MemoryDep('buf164', c0, {c0: 3145728}, None)]
op165.met_dependencies = [   MemoryDep('arg70_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf165.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (3145728, 1)
op165.sizes = ([1024, 48, 64], [])
buf164_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op165_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg70_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf165', get_index_2, add, None)
        return store
op165 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x3), tmp2, None)


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 4718592}, None)]
op166.unmet_dependencies = [   MemoryDep('buf162', 64*c0 + 786432*c1 + 3072*c2 + c3, {c0: 48, c1: 3, c2: 512, c3: 64}, None)]
op166.met_dependencies = []
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (4718592, 1)
op166.sizes = ([48, 3, 512, 64], [])
buf162_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
class op166_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 512, z3: 64}
    index0 = 64*z0 + 786432*z1 + 3072*z2 + z3
    index1 = 98304*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf166', get_index_1, load, None)
        return store
op166 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 3
        x3 = (xindex // 98304)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x3) + (3072*x1) + (786432*x2)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 4718592}, None)]
op167.unmet_dependencies = [   MemoryDep('buf165', 64*c0 + 786432*c1 + c2 + 3072*c3, {c0: 48, c1: 3, c2: 64, c3: 512}, None)]
op167.met_dependencies = []
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (4718592, 1)
op167.sizes = ([48, 3, 64, 512], [])
buf165_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
class op167_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 64, z3: 512}
    index0 = 64*z0 + 786432*z1 + z2 + 3072*z3
    index1 = 98304*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf167', get_index_1, load, None)
        return store
op167 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 9216
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 3
        y2 = (yindex // 192)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (3072*x3) + (786432*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op168: ExternKernelSchedulerNode(ExternKernelOut)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf166', mode=None), StarDep(name='buf167', mode=None)]
op168.met_dependencies = []
op168.outputs = [
    buf168: ExternKernelOut
    buf168.layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
    buf168.users = [
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
    ]
]
op168.node.kernel = extern_kernels.bmm


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', 24640*c0 + c1, {c0: 1024, c1: 24624}, None)]
op169.unmet_dependencies = 
    [   MemoryDep('buf168', 786432*c2 + 262144*(((513*c0 + c3 + 656384)//262656)) + 786432*(((513*c0 + c3 + 656384)//787968)) + ModularIndexing(513*c0 + c3, 1, 512) + 512*ModularIndexing(513*c0 + c3 + 656384, 512, 513), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf168', ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 262656, 144), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf168', ModularIndexing(513*c0 + c3 + 787712, 1, 262656) + 262144*ModularIndexing(513*c0 + c3 + 787712, 262656, 3) + 786432*ModularIndexing(513*c0 + 787968*c2 + c3 + 787712, 787968, 48), {c0: 256, c1: 4, c2: 48, c3: 513}, None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
    buf169.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (25214976, 1)
op169.sizes = ([256, 4, 48, 513], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
class op169_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 48, z3: 513}
    index0 = z1
    index1 = z3
    index2 = ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index3 = 786432*z2 + 262144*(((513*z0 + z3 + 656384)//262656)) + 786432*(((513*z0 + z3 + 656384)//787968)) + ModularIndexing(513*z0 + z3, 1, 512) + 512*ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index4 = ModularIndexing(513*z0 + z3 + 787712, 512, 513)
    index5 = ModularIndexing(513*z0 + z3 + 787712, 1, 262656) + 262144*ModularIndexing(513*z0 + z3 + 787712, 262656, 3) + 786432*ModularIndexing(513*z0 + 787968*z2 + z3 + 787712, 787968, 48)
    index6 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 512, 513)
    index7 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 262656, 144)
    index8 = 98560*z0 + 24640*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index8')
        store = ops.store('buf169', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf168', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf168', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf168', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op169 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[256, 131072], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 256
        xnumel = 98496
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = (xindex // 24624)
        x1 = xindex % 513
        y0 = yindex
        x2 = (xindex // 513) % 48
        x5 = xindex % 24624
        tmp0 = x3
        tmp1 = tl.full([1, 1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1, 1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x1 + (513*y0)) // 512) % 513
        tmp7 = tl.full([1, 1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((512*(((656384 + x1 + (513*y0)) // 512) % 513)) + (262144*((656384 + x1 + (513*y0)) // 262656)) + (786432*x2) + (786432*((656384 + x1 + (513*y0)) // 787968)) + ((x1 + (513*y0)) % 512)), tmp9 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.full(tmp10.shape, 0.0, tmp10.dtype)
        tmp12 = tl.where(tmp5, tmp10, tmp11)
        tmp13 = tl.full([1, 1], 3, tl.int64)
        tmp14 = tmp13 < tmp13
        tmp15 = tl.broadcast_to(x1, [XBLOCK, YBLOCK])
        tmp16 = tmp15 >= tmp4
        tmp17 = tmp16 & tmp14
        tmp18 = ((787712 + x1 + (513*y0)) // 512) % 513
        tmp19 = tmp18 < tmp7
        tmp20 = tmp19 & tmp17
        tmp21 = tl.load(in_ptr0 + ((262144*(((787712 + x1 + (513*y0)) // 262656) % 3)) + (786432*(((787712 + x1 + (513*y0) + (787968*x2)) // 787968) % 48)) + ((787712 + x1 + (513*y0)) % 262656)), tmp20 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.full(tmp21.shape, 0.0, tmp21.dtype)
        tmp23 = tl.where(tmp17, tmp21, tmp22)
        tmp24 = 0.0
        tmp25 = tl.where(tmp16, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp14, tmp25, tmp26)
        tmp28 = tl.where(tmp14, tmp27, tmp24)
        tmp29 = tl.where(tmp5, tmp12, tmp28)
        tmp30 = tmp0 < tmp13
        tmp31 = tmp16 & tmp30
        tmp32 = (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp33 = tmp32 < tmp7
        tmp34 = tmp33 & tmp31
        tmp35 = tl.load(in_ptr0 + ((262144*((((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 262656) % 144)) + (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) % 262656)), tmp34 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp31, tmp35, tmp36)
        tmp38 = tl.where(tmp16, tmp37, tmp24)
        tmp39 = tl.full(tmp38.shape, 0.0, tmp38.dtype)
        tmp40 = tl.where(tmp30, tmp38, tmp39)
        tmp41 = tl.where(tmp30, tmp40, tmp24)
        tmp42 = tl.where(tmp2, tmp29, tmp41)
        tl.store(out_ptr0 + (x5 + (24640*x3) + (98560*y0)), tmp42, xmask & ymask)


op170: SchedulerNode(ComputedBuffer)
op170.writes = [   MemoryDep('buf170', 131328*c0 + 525312*c1 + c2, {c0: 4, c1: 48, c2: 131328}, None)]
op170.unmet_dependencies = 
    [   MemoryDep('buf168', ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 262656, 144), {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf168', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf168', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf169', 24640*c0 + 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf169', 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None)]
op170.met_dependencies = []
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
    buf170.users = [
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False),
    ]
]
op170.group.device = cuda:0
op170.group.iteration = (25214976, 1)
op170.sizes = ([4, 48, 256, 513], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
class op170_loop_body:
    var_ranges = {z0: 4, z1: 48, z2: 256, z3: 513}
    index0 = z0
    index1 = z2
    index2 = z3
    index3 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 512, 513)
    index4 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 262656, 144)
    index5 = ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index6 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index7 = 513*z1 + 98560*z2 + z3
    index8 = ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index9 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index10 = 24640*z0 + 513*z1 + 98560*z2 + z3
    index11 = 131328*z0 + 525312*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf169', get_index_2)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_4 = ops.constant(1, torch.int64)
        ge_2 = ops.ge(index_expr_2, constant_4)
        masked_subblock10 = self.masked_subblock10(ge_2, 0.0)
        get_index_4 = self.get_index('index10')
        load_1 = ops.load('buf169', get_index_4)
        where_2 = ops.where(ge_2, masked_subblock10, load_1)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_5 = self.get_index('index11')
        store = ops.store('buf170', get_index_5, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf168', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf168', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf169', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf169', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf168', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf169', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
    def masked_subblock12(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf168', get_index)
        return load
    def masked_subblock11(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock12 = self.masked_subblock12(lt, 0.0)
        return masked_subblock12
    def masked_subblock10(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock11 = self.masked_subblock11(lt, 0.0)
        get_index_1 = self.get_index('index10')
        load = ops.load('buf169', get_index_1)
        where = ops.where(lt, masked_subblock11, load)
        return where
op170 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 6303744)
        x1 = (xindex // 513) % 256
        x0 = xindex % 513
        x2 = (xindex // 131328) % 48
        x4 = xindex % 131328
        tmp47 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), None, eviction_policy='evict_last')
        tmp62 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), None)
        tmp0 = x3
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1], 1, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = x0
        tmp7 = tmp6 >= tmp4
        tmp8 = tl.full([1], 256, tl.int64)
        tmp9 = tmp6 < tmp8
        tmp10 = tmp7 & tmp9
        tmp11 = tmp10 & tmp5
        tmp12 = (((-256) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp13 = tl.full([1], 512, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = tl.load(in_ptr0 + ((262144*((((-256) + x0 + (513*x1) + (787968*x2)) // 262656) % 144)) + (((-256) + x0 + (513*x1) + (787968*x2)) % 262656)), tmp15, eviction_policy='evict_last', other=0.0)
        tmp17 = tl.full(tmp16.shape, 0.0, tmp16.dtype)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.full([1], 0, tl.int64)
        tmp20 = tmp19 >= tmp4
        tmp21 = tmp20 & tmp5
        tmp22 = tmp9 & tmp21
        tmp23 = (((-131584) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp24 = tmp23 < tmp13
        tmp25 = tmp24 & tmp22
        tmp26 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp25, eviction_policy='evict_last', other=0.0)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp22, tmp26, tmp27)
        tmp29 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp21, eviction_policy='evict_last', other=0.0)
        tmp30 = tl.where(tmp9, tmp28, tmp29)
        tmp31 = tl.full(tmp30.shape, 0.0, tmp30.dtype)
        tmp32 = tl.where(tmp21, tmp30, tmp31)
        tmp33 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp5, eviction_policy='evict_last', other=0.0)
        tmp34 = tl.where(tmp20, tmp32, tmp33)
        tmp35 = tl.where(tmp10, tmp18, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp5, tmp35, tmp36)
        tmp38 = tmp9 & tmp20
        tmp39 = tmp24 & tmp38
        tmp40 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp39, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp38, tmp40, tmp41)
        tmp43 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp20, eviction_policy='evict_last', other=0.0)
        tmp44 = tl.where(tmp9, tmp42, tmp43)
        tmp45 = tl.full(tmp44.shape, 0.0, tmp44.dtype)
        tmp46 = tl.where(tmp20, tmp44, tmp45)
        tmp48 = tl.where(tmp20, tmp46, tmp47)
        tmp49 = tl.where(tmp5, tmp37, tmp48)
        tmp50 = tmp0 >= tmp4
        tmp51 = tmp9 & tmp50
        tmp52 = (((-131584) + x0 + (513*x1) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp53 = tmp52 < tmp13
        tmp54 = tmp53 & tmp51
        tmp55 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp54, other=0.0)
        tmp56 = tl.full(tmp55.shape, 0.0, tmp55.dtype)
        tmp57 = tl.where(tmp51, tmp55, tmp56)
        tmp58 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), tmp50, other=0.0)
        tmp59 = tl.where(tmp9, tmp57, tmp58)
        tmp60 = tl.full(tmp59.shape, 0.0, tmp59.dtype)
        tmp61 = tl.where(tmp50, tmp59, tmp60)
        tmp63 = tl.where(tmp50, tmp61, tmp62)
        tmp64 = tl.where(tmp2, tmp49, tmp63)
        tl.store(out_ptr0 + (x4 + (131328*x3) + (525312*x2)), tmp64, None)


op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 6303744}, None)]
op171.unmet_dependencies = [MemoryDep('buf170', 525312*c0 + c1 + 393984, {c0: 48, c1: 131328}, None)]
op171.met_dependencies = []
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
    buf171.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (6303744, 1)
op171.sizes = ([48, 256, 513], [])
buf170_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
class op171_loop_body:
    var_ranges = {z0: 48, z1: 256, z2: 513}
    index0 = z2
    index1 = -z1 - z2 + 512
    index2 = z1 + 768
    index3 = z1 + z2 + 513
    index4 = 525312*z0 + 513*z1 + z2 + 393984
    index5 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf170', get_index_2)
        where = ops.where(lt, masked_subblock4, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index5')
        store = ops.store('buf171', get_index_3, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf170', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf170', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_3 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf170', get_index_2)
        where_1 = ops.where(lt, masked_subblock2, load)
        constant_4 = ops.constant(-inf, torch.float32)
        where_2 = ops.where(to_dtype, constant_4, where_1)
        return where_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf170', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf170', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
op171 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6303744
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 513
        x1 = (xindex // 513) % 256
        x2 = (xindex // 131328)
        x3 = xindex % 131328
        x4 = xindex
        tmp43 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), None)
        tmp0 = x0
        tmp1 = tl.full([1], 256, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = 512 + ((-1)*x0) + ((-1)*x1)
        tmp4 = tl.full([1], 0, tl.int64)
        tmp5 = tmp3 <= tmp4
        tmp6 = 1.0
        tmp7 = 0.0
        tmp8 = tl.where(tmp5, tmp6, tmp7)
        tmp9 = (tmp8 != 0)
        tmp10 = 768 + x1
        tmp11 = tmp10 < tmp1
        tmp12 = tmp11 & tmp2
        tmp13 = tl.full([1], 257, tl.int64)
        tmp14 = tmp0 < tmp13
        tmp15 = tmp14 & tmp12
        tmp16 = 513 + x0 + x1
        tmp17 = tmp16 <= tmp4
        tmp18 = tl.where(tmp17, tmp6, tmp7)
        tmp19 = (tmp18 != 0)
        tmp20 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp15, other=0.0)
        tmp21 = float("-inf")
        tmp22 = tl.where(tmp19, tmp21, tmp20)
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp15, tmp22, tmp23)
        tmp25 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp12, other=0.0)
        tmp26 = tl.where(tmp14, tmp24, tmp25)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp12, tmp26, tmp27)
        tmp29 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp2, other=0.0)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp31 = tl.where(tmp9, tmp21, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tmp34 = tmp14 & tmp11
        tmp35 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp34, other=0.0)
        tmp36 = tl.where(tmp19, tmp21, tmp35)
        tmp37 = tl.full(tmp36.shape, 0.0, tmp36.dtype)
        tmp38 = tl.where(tmp34, tmp36, tmp37)
        tmp39 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp11, other=0.0)
        tmp40 = tl.where(tmp14, tmp38, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp11, tmp40, tmp41)
        tmp44 = tl.where(tmp11, tmp42, tmp43)
        tmp45 = tl.where(tmp2, tmp33, tmp44)
        tl.store(out_ptr0 + (x4), tmp45, None)


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 4096}, None)]
op172.unmet_dependencies = []
op172.met_dependencies = []
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf172.users = [
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
    ]
]
op172.group.device = cuda:0
op172.group.iteration = (4096, 1)
op172.sizes = ([4096], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op172_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(1.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf172', get_index, constant, None)
        return store
op172 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = 1.0
        tl.store(out_ptr0 + (x0), tmp0, None)


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 4096}, None)]
op173.unmet_dependencies = []
op173.met_dependencies = [MemoryDep('arg7_1', c0, {c0: 4096}, None)]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf173.users = [
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
    ]
]
op173.group.device = cuda:0
op173.group.iteration = (4096, 1)
op173.sizes = ([4096], [])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[4, 1024], stride=[1024, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op173_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        constant = ops.constant(0.0, torch.float32)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        ne_1 = ops.ne(load_1, constant_1)
        to_dtype = ops.to_dtype(ne_1, torch.float32, src_dtype = torch.bool)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(ne, constant_2, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf173', get_index_2, where, None)
        return store
op173 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.0
        tmp2 = tmp0 != tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp4, tmp3)
        tl.store(out_ptr0 + (x0), tmp5, None)


op174: SchedulerNode(ComputedBuffer)
op174.writes = [   MemoryDep('buf174', 525312*c0 + 513*c1 + 131328*c2 + c3, {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op174.unmet_dependencies = 
    [   MemoryDep('buf172', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3 + 656384, 512, 513), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf172', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 512, 513) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf172', ModularIndexing(513*c1 + c3 + 787712, 512, 513) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf173', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3, 1, 512), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf173', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 1, 512) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf173', ModularIndexing(513*c1 + c3 + 787712, 1, 512) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op174.met_dependencies = []
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
    buf174.users = [
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
    ]
]
op174.group.device = cuda:0
op174.group.iteration = (2101248, 1)
op174.sizes = ([4, 256, 4, 513], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
class op174_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 4, z3: 513}
    index0 = z0
    index1 = z3
    index2 = ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index3 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index4 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3, 1, 512)
    index5 = ModularIndexing(513*z1 + z3 + 787712, 512, 513)
    index6 = ModularIndexing(513*z1 + z3 + 787712, 512, 513) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index7 = ModularIndexing(513*z1 + z3 + 787712, 1, 512) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index8 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513)
    index9 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index10 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 1, 512) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index11 = 525312*z0 + 513*z1 + 131328*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index11')
        store = ops.store('buf174', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf173', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf173', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index10')
        load_1 = ops.load('buf173', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op174 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2101248
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 525312)
        x0 = xindex % 513
        x2 = (xindex // 2052) % 256
        x1 = (xindex // 513) % 4
        tmp0 = x3
        tmp1 = tl.full([1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x0 + (513*x2)) // 512) % 513
        tmp7 = tl.full([1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + (((656384 + x0 + (513*x2)) // 512) % 513)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.load(in_ptr1 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + ((x0 + (513*x2)) % 512)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp12 = tmp10 * tmp11
        tmp13 = tl.full(tmp12.shape, 0.0, tmp12.dtype)
        tmp14 = tl.where(tmp9, tmp12, tmp13)
        tmp15 = tl.full(tmp14.shape, 0.0, tmp14.dtype)
        tmp16 = tl.where(tmp5, tmp14, tmp15)
        tmp17 = tl.full([1], 3, tl.int64)
        tmp18 = tmp17 < tmp17
        tmp19 = tmp5 & tmp18
        tmp20 = ((787712 + x0 + (513*x2)) // 512) % 513
        tmp21 = tmp20 < tmp7
        tmp22 = tmp21 & tmp19
        tmp23 = tl.load(in_ptr0 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + (((787712 + x0 + (513*x2)) // 512) % 513)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp24 = tl.load(in_ptr1 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + ((787712 + x0 + (513*x2)) % 512)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp25 = tmp23 * tmp24
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp22, tmp25, tmp26)
        tmp28 = tl.full(tmp27.shape, 0.0, tmp27.dtype)
        tmp29 = tl.where(tmp19, tmp27, tmp28)
        tmp30 = 0.0
        tmp31 = tl.where(tmp5, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp18, tmp31, tmp32)
        tmp34 = tl.where(tmp18, tmp33, tmp30)
        tmp35 = tl.where(tmp5, tmp16, tmp34)
        tmp36 = tmp0 < tmp17
        tmp37 = tmp5 & tmp36
        tmp38 = (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513
        tmp39 = tmp38 < tmp7
        tmp40 = tmp39 & tmp37
        tmp41 = tl.load(in_ptr0 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + ((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513)), tmp40, eviction_policy='evict_last', other=0.0)
        tmp42 = tl.load(in_ptr1 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) % 512)), tmp40, other=0.0)
        tmp43 = tmp41 * tmp42
        tmp44 = tl.full(tmp43.shape, 0.0, tmp43.dtype)
        tmp45 = tl.where(tmp40, tmp43, tmp44)
        tmp46 = tl.full(tmp45.shape, 0.0, tmp45.dtype)
        tmp47 = tl.where(tmp37, tmp45, tmp46)
        tmp48 = tl.where(tmp5, tmp47, tmp30)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp36, tmp48, tmp49)
        tmp51 = tl.where(tmp36, tmp50, tmp30)
        tmp52 = tl.where(tmp2, tmp35, tmp51)
        tl.store(out_ptr0 + (x0 + (513*x2) + (131328*x1) + (525312*x3)), tmp52, None)


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 525312}, None)]
op175.unmet_dependencies = 
    [   MemoryDep('buf172', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf172', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf173', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf173', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf174', c0, {c0: 525312}, None)]
op175.met_dependencies = []
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
    buf175.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
    ]
]
op175.group.device = cuda:0
op175.group.iteration = (525312, 1)
op175.sizes = ([4, 256, 513], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
class op175_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 513}
    index0 = z1
    index1 = z2
    index2 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513)
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index5 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index7 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index8 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_1 = ops.constant(0, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_1, constant_2)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf174', get_index_1)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index8')
        store = ops.store('buf175', get_index_2, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf173', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf173', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf174', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index8')
        load = ops.load('buf174', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf173', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf174', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
op175 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 256
        x2 = xindex
        y1 = (yindex // 256)
        y3 = yindex
        tmp56 = tl.load(in_ptr2 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 1, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tmp3 >= tmp1
        tmp5 = tl.full([1, 1], 256, tl.int64)
        tmp6 = tmp3 < tmp5
        tmp7 = tmp4 & tmp6
        tmp8 = tmp7 & tmp2
        tmp9 = (((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp10 = tl.full([1, 1], 512, tl.int64)
        tmp11 = tmp9 < tmp10
        tmp12 = tmp11 & tmp8
        tmp13 = tl.load(in_ptr0 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp14 = tl.load(in_ptr1 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + (((-256) + x2 + (513*y0) + (787968*y1)) % 512)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp15 = tmp13 * tmp14
        tmp16 = tl.full(tmp15.shape, 0.0, tmp15.dtype)
        tmp17 = tl.where(tmp12, tmp15, tmp16)
        tmp18 = tl.full(tmp17.shape, 0.0, tmp17.dtype)
        tmp19 = tl.where(tmp8, tmp17, tmp18)
        tmp20 = tl.full([1, 1], 0, tl.int64)
        tmp21 = tmp20 >= tmp1
        tmp22 = tmp21 & tmp2
        tmp23 = tmp6 & tmp22
        tmp24 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp25 = tmp24 < tmp10
        tmp26 = tmp25 & tmp23
        tmp27 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tmp27 * tmp28
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp26, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp23, tmp31, tmp32)
        tmp34 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp22 & xmask, eviction_policy='evict_last', other=0.0)
        tmp35 = tl.where(tmp6, tmp33, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp22, tmp35, tmp36)
        tmp38 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp39 = tl.where(tmp21, tmp37, tmp38)
        tmp40 = tl.where(tmp7, tmp19, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp2, tmp40, tmp41)
        tmp43 = tmp6 & tmp21
        tmp44 = tmp25 & tmp43
        tmp45 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp47 = tmp45 * tmp46
        tmp48 = tl.full(tmp47.shape, 0.0, tmp47.dtype)
        tmp49 = tl.where(tmp44, tmp47, tmp48)
        tmp50 = tl.full(tmp49.shape, 0.0, tmp49.dtype)
        tmp51 = tl.where(tmp43, tmp49, tmp50)
        tmp52 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp21 & xmask, eviction_policy='evict_last', other=0.0)
        tmp53 = tl.where(tmp6, tmp51, tmp52)
        tmp54 = tl.full(tmp53.shape, 0.0, tmp53.dtype)
        tmp55 = tl.where(tmp21, tmp53, tmp54)
        tmp57 = tl.where(tmp21, tmp55, tmp56)
        tmp58 = tl.where(tmp2, tmp42, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 263168}, None)]
op176.unmet_dependencies = 
    [   MemoryDep('buf172', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf173', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf174', 513*c0 + c1, {c0: 1024, c1: 257}, None),
        MemoryDep('buf175', 513*c0 + c1, {c0: 1024, c1: 257}, None)]
op176.met_dependencies = []
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
    buf176.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (263168, 1)
op176.sizes = ([4, 256, 257], [])
buf175_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
class op176_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 257}
    index0 = z1 + z2 - 255
    index1 = 131328*z0 + 513*z1 + z2
    index2 = z2
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index5 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index6 = 65792*z0 + 257*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        constant_3 = ops.constant(0, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq = ops.eq(constant_3, constant_4)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf175', get_index_1)
        constant_5 = ops.constant(0, torch.int64)
        constant_6 = ops.constant(1, torch.int64)
        ge = ops.ge(constant_5, constant_6)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf174', get_index_2)
        where_1 = ops.where(ge, masked_subblock1, load_1)
        where_2 = ops.where(eq, load, where_1)
        constant_7 = ops.constant(-inf, torch.float32)
        where_3 = ops.where(to_dtype, constant_7, where_2)
        get_index_3 = self.get_index('index6')
        store = ops.store('buf176', get_index_3, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('buf173', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf174', get_index_1)
        where = ops.where(lt, masked_subblock2, load)
        return where
op176 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 257
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 256
        y3 = yindex
        y1 = (yindex // 256)
        tmp9 = tl.load(in_ptr0 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr3 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = (-255) + x2 + y0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 <= tmp1
        tmp3 = 1.0
        tmp4 = 0.0
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tmp6 = (tmp5 != 0)
        tmp7 = tl.full([1, 1], 0, tl.int32)
        tmp8 = tmp7 == tmp7
        tmp10 = tl.full([1, 1], 1, tl.int64)
        tmp11 = tmp1 >= tmp10
        tmp12 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp13 = tl.full([1, 1], 256, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp17 = tl.full([1, 1], 512, tl.int64)
        tmp18 = tmp16 < tmp17
        tmp19 = tmp18 & tmp15
        tmp20 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tmp20 * tmp21
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp19, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp15, tmp24, tmp25)
        tmp27 = tl.load(in_ptr3 + (x2 + (513*y3)), tmp11 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.where(tmp14, tmp26, tmp27)
        tmp29 = tl.full(tmp28.shape, 0.0, tmp28.dtype)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp32 = tl.where(tmp11, tmp30, tmp31)
        tmp33 = tl.where(tmp8, tmp9, tmp32)
        tmp34 = float("-inf")
        tmp35 = tl.where(tmp6, tmp34, tmp33)
        tl.store(out_ptr0 + (x2 + (257*y3)), tmp35, xmask)


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 2101248}, None)]
op177.unmet_dependencies = 
    [   MemoryDep('buf172', ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf173', ModularIndexing(c2 + 513*ModularIndexing(c1, 1, 256), 1, 512) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf174', 131328*c0 + c2 + 525312*((c1//256)) + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf175', 131328*c0 + c2 + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf176', 65792*c0 + 257*c1 + c2, {c0: 4, c1: 1024, c2: 513}, None)]
op177.met_dependencies = []
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
    buf177.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (2101248, 1)
op177.sizes = ([4, 1024, 513], [])
buf176_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
class op177_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 513}
    index0 = z1
    index1 = z2
    index2 = 65792*z0 + 257*z1 + z2
    index3 = (z1//256)
    index4 = 131328*z0 + z2 + 513*ModularIndexing(z1, 1, 256)
    index5 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index7 = ModularIndexing(z2 + 513*ModularIndexing(z1, 1, 256), 1, 512) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index8 = 131328*z0 + z2 + 525312*((z1//256)) + 513*ModularIndexing(z1, 1, 256)
    index9 = 525312*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf175', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock6 = self.masked_subblock6(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf174', get_index_4)
        where = ops.where(ge, masked_subblock6, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_5 = self.get_index('index9')
        store = ops.store('buf177', get_index_5, where_2, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf176', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf173', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf174', get_index_1)
        where = ops.where(lt, masked_subblock4, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf175', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf174', get_index_4)
        where = ops.where(ge, masked_subblock3, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock2, where_1)
        return where_2
    def masked_subblock8(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf173', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf174', get_index_1)
        where = ops.where(lt, masked_subblock7, load)
        return where
op177 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 11, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 4096
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 1024
        x2 = xindex
        y1 = (yindex // 1024)
        y3 = yindex
        tmp40 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), xmask, eviction_policy='evict_last')
        tmp55 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 256, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tl.full([1, 1], 257, tl.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp5 & tmp2
        tmp7 = tl.load(in_ptr0 + (x2 + (257*y0) + (65792*y1)), tmp6 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tl.broadcast_to((y0 // 256), [XBLOCK, YBLOCK])
        tmp9 = tl.full([1, 1], 0, tl.int32)
        tmp10 = tmp8 == tmp9
        tmp11 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp12 = tl.full([1, 1], 1, tl.int64)
        tmp13 = tmp8 >= tmp12
        tmp14 = tmp13 & tmp2
        tmp15 = tmp3 < tmp1
        tmp16 = tmp15 & tmp14
        tmp17 = (((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513
        tmp18 = tl.full([1, 1], 512, tl.int64)
        tmp19 = tmp17 < tmp18
        tmp20 = tmp19 & tmp16
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp23 = tmp21 * tmp22
        tmp24 = tl.full(tmp23.shape, 0.0, tmp23.dtype)
        tmp25 = tl.where(tmp20, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp16, tmp25, tmp26)
        tmp28 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp14 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tl.where(tmp15, tmp27, tmp28)
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp14, tmp29, tmp30)
        tmp32 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp33 = tl.where(tmp13, tmp31, tmp32)
        tmp34 = tl.where(tmp10, tmp11, tmp33)
        tmp35 = tl.where(tmp5, tmp7, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp2, tmp35, tmp36)
        tmp38 = (y0 // 256)
        tmp39 = tmp38 == tmp9
        tmp41 = tmp38 >= tmp12
        tmp42 = tmp15 & tmp41
        tmp43 = tmp19 & tmp42
        tmp44 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp45 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tmp44 * tmp45
        tmp47 = tl.full(tmp46.shape, 0.0, tmp46.dtype)
        tmp48 = tl.where(tmp43, tmp46, tmp47)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp42, tmp48, tmp49)
        tmp51 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp41 & xmask, eviction_policy='evict_last', other=0.0)
        tmp52 = tl.where(tmp15, tmp50, tmp51)
        tmp53 = tl.full(tmp52.shape, 0.0, tmp52.dtype)
        tmp54 = tl.where(tmp41, tmp52, tmp53)
        tmp56 = tl.where(tmp41, tmp54, tmp55)
        tmp57 = tl.where(tmp39, tmp40, tmp56)
        tmp58 = tl.where(tmp2, tmp37, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op178: SchedulerNode(ComputedBuffer)
op178.writes = [   MemoryDep('buf178', 6324224*c0 + 513*c1 + 6176*c2 + c3, {c0: 4, c1: 12, c2: 1024, c3: 513}, None)]
op178.unmet_dependencies = 
    [   MemoryDep('buf170', 525312*c0 + 513*c1 + c2 + 131328*((ModularIndexing(c1, 1, 256)//256)), {c0: 48, c1: 1024, c2: 513}, None),
        MemoryDep('buf171', 131328*c0 + c1 - 393984, {c0: 48, c1: 525312}, None),
        MemoryDep('buf177', 525312*c0 + c2, {c0: 4, c1: 12, c2: 525312}, None)]
op178.met_dependencies = []
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
    buf178.users = [
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
    ]
]
op178.group.device = cuda:0
op178.group.iteration = (25214976, 1)
op178.sizes = ([4, 12, 1024, 513], [])
buf171_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
class op178_loop_body:
    var_ranges = {z0: 4, z1: 12, z2: 1024, z3: 513}
    index0 = z2
    index1 = 1575936*z0 + 131328*z1 + 513*z2 + z3 - 393984
    index2 = z2 + 256*((ModularIndexing(z2, 1, 256)//256))
    index3 = z3
    index4 = z2 + z3 + 256*((ModularIndexing(z2, 1, 256)//256)) - 255
    index5 = 6303744*z0 + 525312*z1 + 513*z2 + z3 + 131328*((ModularIndexing(z2, 1, 256)//256))
    index6 = -z2 - z3 + 1280
    index7 = 525312*z0 + 513*z2 + z3
    index8 = 6324224*z0 + 513*z1 + 6176*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(768, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index5')
        load = ops.load('buf170', get_index_2)
        where = ops.where(lt, masked_subblock2, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_4 = self.get_index('index7')
        load_1 = ops.load('buf177', get_index_4)
        where_2 = ops.where(ge_1, masked_subblock4, load_1)
        add = ops.add(where_1, where_2)
        get_index_5 = self.get_index('index8')
        store = ops.store('buf178', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf171', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf170', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf170', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf177', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(ge, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf177', get_index_1)
        where = ops.where(ge, masked_subblock5, load)
        return where
op178 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 513) % 1024
        x4 = xindex % 525312
        x5 = (xindex // 525312)
        x0 = xindex % 513
        x3 = (xindex // 6303744)
        x2 = (xindex // 525312) % 12
        tmp27 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), None)
        tmp44 = tl.load(in_ptr2 + (x4 + (525312*x3)), None, eviction_policy='evict_last')
        tmp0 = x1
        tmp1 = tl.full([1], 768, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.load(in_ptr0 + ((-393984) + x4 + (131328*x5)), tmp2, other=0.0)
        tmp4 = x1 + (256*((x1 % 256) // 256))
        tmp5 = tl.full([1], 256, tl.int64)
        tmp6 = tmp4 < tmp5
        tmp7 = x0
        tmp8 = tl.full([1], 257, tl.int64)
        tmp9 = tmp7 < tmp8
        tmp10 = tmp9 & tmp6
        tmp11 = (-255) + x0 + x1 + (256*((x1 % 256) // 256))
        tmp12 = tl.full([1], 0, tl.int64)
        tmp13 = tmp11 <= tmp12
        tmp14 = 1.0
        tmp15 = 0.0
        tmp16 = tl.where(tmp13, tmp14, tmp15)
        tmp17 = (tmp16 != 0)
        tmp18 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp10, other=0.0)
        tmp19 = float("-inf")
        tmp20 = tl.where(tmp17, tmp19, tmp18)
        tmp21 = tl.full(tmp20.shape, 0.0, tmp20.dtype)
        tmp22 = tl.where(tmp10, tmp20, tmp21)
        tmp23 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp6, other=0.0)
        tmp24 = tl.where(tmp9, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp6, tmp24, tmp25)
        tmp28 = tl.where(tmp6, tmp26, tmp27)
        tmp29 = tl.where(tmp2, tmp3, tmp28)
        tmp30 = tmp7 >= tmp5
        tmp31 = tmp30 & tmp2
        tmp32 = 1280 + ((-1)*x0) + ((-1)*x1)
        tmp33 = tmp32 <= tmp12
        tmp34 = tl.where(tmp33, tmp14, tmp15)
        tmp35 = (tmp34 != 0)
        tmp36 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp31, eviction_policy='evict_last', other=0.0)
        tmp37 = tl.where(tmp35, tmp19, tmp36)
        tmp38 = tl.full(tmp37.shape, 0.0, tmp37.dtype)
        tmp39 = tl.where(tmp31, tmp37, tmp38)
        tmp40 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.where(tmp30, tmp39, tmp40)
        tmp42 = tl.full(tmp41.shape, 0.0, tmp41.dtype)
        tmp43 = tl.where(tmp2, tmp41, tmp42)
        tmp45 = tl.where(tmp2, tmp43, tmp44)
        tmp46 = tmp29 + tmp45
        tl.store(out_ptr0 + (x0 + (513*x2) + (6176*x1) + (6324224*x3)), tmp46, None)


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 49152}, None)]
op179.unmet_dependencies = [MemoryDep('buf178', 6176*c0 + c1, {c0: 4096, c1: 6156}, None)]
op179.met_dependencies = []
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
    ]
]
op179.group.device = cuda:0
op179.group.iteration = (49152, 513)
op179.sizes = ([4096, 12], [513])
buf178_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op179_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf179', get_index_1, reduction)
        return store_reduction
op179 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        x3 = xindex
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp2, None)


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 49152}, None)]
op180.unmet_dependencies = 
    [   MemoryDep('buf178', 6176*c0 + c1, {c0: 4096, c1: 6156}, None),
        MemoryDep('buf179', c0, {c0: 49152}, None)]
op180.met_dependencies = []
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf180.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (49152, 513)
op180.sizes = ([4096, 12], [513])
buf178_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf180_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op180_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf179', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf180', get_index_2, reduction)
        return store_reduction
op180 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        x3 = xindex
        tmp1 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp5, None)


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 3145728}, None)]
op181.unmet_dependencies = [MemoryDep('buf159', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op181.met_dependencies = []
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (3145728, 1)
op181.sizes = ([1024, 4, 768], [])
buf159_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op181_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf181', get_index_1, load, None)
        return store
op181 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op182: ExternKernelSchedulerNode(ExternKernelOut)
op182.writes = [StarDep(name='buf182', mode=None)]
op182.unmet_dependencies = [StarDep(name='buf181', mode=None)]
op182.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op182.outputs = [
    buf182: ExternKernelOut
    buf182.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op182.node.kernel = extern_kernels.mm


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 4718592}, None)]
op183.unmet_dependencies = [   MemoryDep('buf182', 64*c0 + 3072*c1 + c2 - 786432, {c0: 48, c1: 1536, c2: 64}, None)]
op183.met_dependencies = [   MemoryDep('arg72_1', c2 + 64*ModularIndexing(c0, 1, 12), {c0: 48, c1: 1536, c2: 64}, None)]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
    buf183.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (4718592, 1)
op183.sizes = ([48, 1536, 64], [])
buf182_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
class op183_loop_body:
    var_ranges = {z0: 48, z1: 1536, z2: 64}
    index0 = z1 - 256
    index1 = 64*z0 + 3072*z1 + z2 - 786432
    index2 = z2 + 64*ModularIndexing(z0, 1, 12)
    index3 = 98304*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1024, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, -1.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf183', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg72_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op183 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 1536
        x0 = xindex % 64
        x2 = (xindex // 98304)
        x3 = xindex
        tmp0 = (-256) + x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 1024, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-786432) + x0 + (64*x2) + (3072*x1)), tmp5, other=0.0)
        tmp7 = tl.load(in_ptr1 + (x0 + (64*(x2 % 12))), tmp5, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, -1.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op184: SchedulerNode(ComputedBuffer)
op184.writes = [   MemoryDep('buf184', 770*c0 + 788480*c1 + c2, {c0: 1024, c1: 48, c2: 770}, None)]
op184.unmet_dependencies = 
    [   MemoryDep('buf178', 6176*c0 + c2 + 6324224*((c1//12)) + 6324224*((ModularIndexing(c1, 1, 12)//12)) + 513*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 770}, None),
        MemoryDep('buf179', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None),
        MemoryDep('buf180', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None)]
op184.met_dependencies = [MemoryDep('arg8_1', c0 + 1024*((c1//12)), {c0: 1024, c1: 48}, None)]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (37847040, 1)
op184.sizes = ([1024, 48, 770], [])
arg8_1_layout = FixedLayout('cuda', torch.bool, size=[4, 1024], stride=[1024, 1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf180_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf184_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
class op184_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 770}
    index0 = z2
    index1 = z0 + 1024*((z1//12))
    index2 = 6176*z0 + z2 + 6324224*((z1//12)) + 6324224*((ModularIndexing(z1, 1, 12)//12)) + 513*ModularIndexing(z1, 1, 12)
    index3 = 12*z0 + 12288*((z1//12)) + ModularIndexing(z1, 1, 12)
    index4 = 770*z0 + 788480*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(513, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index4')
        store = ops.store('buf184', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg8_1', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf178', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('buf179', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf180', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(load, constant, truediv)
        return where
op184 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 37847040
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 770
        x1 = (xindex // 770) % 48
        x2 = (xindex // 36960)
        tmp0 = x0
        tmp1 = tl.full([1], 513, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.load(in_ptr0 + (x2 + (1024*(x1 // 12))), tmp2, eviction_policy='evict_last', other=0.0).to(tl.int1)
        tmp4 = tl.load(in_ptr1 + (x0 + (513*(x1 % 12)) + (6176*x2) + (6324224*(x1 // 12)) + (6324224*((x1 % 12) // 12))), tmp2, other=0.0)
        tmp5 = tl.load(in_ptr2 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp4 - tmp5
        tmp7 = tl_math.exp(tmp6)
        tmp8 = tl.load(in_ptr3 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp9 = tmp7 / tmp8
        tmp10 = 0.0
        tmp11 = tl.where(tmp3, tmp10, tmp9)
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp2, tmp11, tmp12)
        tl.store(out_ptr0 + (x0 + (770*x2) + (788480*x1)), tmp13, None)


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 9437184}, None)]
op185.unmet_dependencies = [   MemoryDep('buf183', 98304*c0 + 16384*c1 + c2, {c0: 48, c1: 4, c2: 49152}, None)]
op185.met_dependencies = []
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (9437184, 1)
op185.sizes = ([48, 4, 49152], [])
buf183_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
class op185_loop_body:
    var_ranges = {z0: 48, z1: 4, z2: 49152}
    index0 = 98304*z0 + 16384*z1 + z2
    index1 = 196608*z0 + 49152*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf185', get_index_1, load, None)
        return store
op185 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 9437184
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 49152
        x1 = (xindex // 49152) % 4
        x2 = (xindex // 196608)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (16384*x1) + (98304*x2)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf184', mode=None), StarDep(name='buf185', mode=None)]
op186.met_dependencies = []
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op186.node.kernel = extern_kernels.bmm


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 3145728}, None)]
op187.unmet_dependencies = [   MemoryDep('buf186', 786432*c0 + 64*c1 + 65536*((c2//64)) + ModularIndexing(c2, 1, 64), {c0: 4, c1: 1024, c2: 768}, None)]
op187.met_dependencies = []
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (3145728, 1)
op187.sizes = ([4, 1024, 768], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op187_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 768}
    index0 = 786432*z0 + 64*z1 + 65536*((z2//64)) + ModularIndexing(z2, 1, 64)
    index1 = 786432*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf187', get_index_1, load, None)
        return store
op187 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 1024
        x2 = (xindex // 786432)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + ((64*x1) + (65536*(x0 // 64)) + (786432*x2) + (x0 % 64)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op188: ExternKernelSchedulerNode(ExternKernelOut)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op188.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op188.outputs = [
    buf188: ExternKernelOut
    buf188.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf188.users = [
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
]
op188.node.kernel = extern_kernels.mm


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 4096}, None)]
op189.unmet_dependencies = 
    [   MemoryDep('buf159', c0, {c0: 3145728}, None),
        MemoryDep('buf188', c0, {c0: 3145728}, None)]
op189.met_dependencies = [MemoryDep('arg74_1', c1, {c0: 4096, c1: 768}, None)]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf189.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (4096, 768)
op189.sizes = ([4096], [768])
buf188_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op189_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf159', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf189', get_index_3, getitem)
        return store_reduction
op189 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 4096}, None)]
op190.unmet_dependencies = 
    [   MemoryDep('buf159', c0, {c0: 3145728}, None),
        MemoryDep('buf188', c0, {c0: 3145728}, None)]
op190.met_dependencies = [MemoryDep('arg74_1', c1, {c0: 4096, c1: 768}, None)]
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf190.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (4096, 768)
op190.sizes = ([4096], [768])
buf188_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op190_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf159', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf190', get_index_3, getitem_1)
        return store_reduction
op190 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 3145728}, None)]
op192.unmet_dependencies = 
    [   MemoryDep('buf159', c0, {c0: 3145728}, None),
        MemoryDep('buf188', c0, {c0: 3145728}, None),
        MemoryDep('buf189', c0, {c0: 4096}, None),
        MemoryDep('buf190', c0, {c0: 4096}, None)]
op192.met_dependencies = 
    [   MemoryDep('arg74_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg75_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg76_1', c1, {c0: 4096, c1: 768}, None)]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf192.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False),
    ]
]
op192.group.device = cuda:0
op192.group.iteration = (3145728, 1)
op192.sizes = ([4096, 768], [])
buf188_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf190_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op192_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf159', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf189', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf190', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg75_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg76_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf192', get_index_7, add_3, None)
        return store
op192 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op193: ExternKernelSchedulerNode(ExternKernelOut)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf192', mode=None)]
op193.met_dependencies = [StarDep(name='arg77_1', mode=None)]
op193.outputs = [
    buf193: ExternKernelOut
    buf193.layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
    buf193.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False)]
]
op193.node.kernel = extern_kernels.mm


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 12582912}, None)]
op194.unmet_dependencies = [MemoryDep('buf193', c0, {c0: 12582912}, None)]
op194.met_dependencies = [MemoryDep('arg78_1', c1, {c0: 4096, c1: 3072}, None)]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
    buf194.users = [NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (12582912, 1)
op194.sizes = ([4096, 3072], [])
buf193_layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
class op194_loop_body:
    var_ranges = {z0: 4096, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg78_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf193', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg78_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf194', get_index_4, mul_2, None)
        return store
op194 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op195: ExternKernelSchedulerNode(ExternKernelOut)
op195.writes = [StarDep(name='buf195', mode=None)]
op195.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op195.met_dependencies = [StarDep(name='arg79_1', mode=None)]
op195.outputs = [
    buf195: ExternKernelOut
    buf195.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf195.users = [
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False),
    ]
]
op195.node.kernel = extern_kernels.mm


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 4096}, None)]
op196.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 3145728}, None),
        MemoryDep('buf195', c0, {c0: 3145728}, None)]
op196.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 4096, c1: 768}, None)]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf196.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (4096, 768)
op196.sizes = ([4096], [768])
buf195_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op196_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg80_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf192', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf196', get_index_3, getitem)
        return store_reduction
op196 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 4096}, None)]
op197.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 3145728}, None),
        MemoryDep('buf195', c0, {c0: 3145728}, None)]
op197.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 4096, c1: 768}, None)]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf197.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (4096, 768)
op197.sizes = ([4096], [768])
buf195_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op197_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg80_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf192', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf197', get_index_3, getitem_1)
        return store_reduction
op197 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 3145728}, None)]
op199.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 3145728}, None),
        MemoryDep('buf195', c0, {c0: 3145728}, None),
        MemoryDep('buf196', c0, {c0: 4096}, None),
        MemoryDep('buf197', c0, {c0: 4096}, None)]
op199.met_dependencies = 
    [   MemoryDep('arg80_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg81_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg82_1', c1, {c0: 4096, c1: 768}, None)]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf199.users = [
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False),
    ]
]
op199.group.device = cuda:0
op199.group.iteration = (3145728, 1)
op199.sizes = ([4096, 768], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf197_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op199_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg80_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf192', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf196', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf197', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg81_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg82_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf199', get_index_7, add_3, None)
        return store
op199 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 3145728}, None)]
op200.unmet_dependencies = [MemoryDep('buf199', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op200.met_dependencies = []
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (3145728, 1)
op200.sizes = ([1024, 4, 768], [])
buf199_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op200_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf200', get_index_1, load, None)
        return store
op200 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op201: ExternKernelSchedulerNode(ExternKernelOut)
op201.writes = [StarDep(name='buf201', mode=None)]
op201.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op201.met_dependencies = [StarDep(name='arg83_1', mode=None)]
op201.outputs = [
    buf201: ExternKernelOut
    buf201.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf201.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False)]
]
op201.node.kernel = extern_kernels.mm


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 3145728}, None)]
op202.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 3145728}, None)]
op202.met_dependencies = [   MemoryDep('arg84_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf202.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (3145728, 1)
op202.sizes = ([1024, 48, 64], [])
buf201_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op202_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf202', get_index_2, mul, None)
        return store
op202 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x3), tmp4, None)


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 3145728}, None)]
op203.unmet_dependencies = [MemoryDep('buf199', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op203.met_dependencies = []
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (3145728, 1)
op203.sizes = ([1024, 4, 768], [])
buf199_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op203_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf203', get_index_1, load, None)
        return store
op203 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op204: ExternKernelSchedulerNode(ExternKernelOut)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op204.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op204.outputs = [
    buf204: ExternKernelOut
    buf204.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf204.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False)]
]
op204.node.kernel = extern_kernels.mm


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 3145728}, None)]
op205.unmet_dependencies = [MemoryDep('buf204', c0, {c0: 3145728}, None)]
op205.met_dependencies = [   MemoryDep('arg86_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf205.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (3145728, 1)
op205.sizes = ([1024, 48, 64], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op205_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf205', get_index_2, add, None)
        return store
op205 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x3), tmp2, None)


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 4718592}, None)]
op206.unmet_dependencies = [   MemoryDep('buf202', 64*c0 + 786432*c1 + 3072*c2 + c3, {c0: 48, c1: 3, c2: 512, c3: 64}, None)]
op206.met_dependencies = []
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (4718592, 1)
op206.sizes = ([48, 3, 512, 64], [])
buf202_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
class op206_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 512, z3: 64}
    index0 = 64*z0 + 786432*z1 + 3072*z2 + z3
    index1 = 98304*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf206', get_index_1, load, None)
        return store
op206 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 3
        x3 = (xindex // 98304)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x3) + (3072*x1) + (786432*x2)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 4718592}, None)]
op207.unmet_dependencies = [   MemoryDep('buf205', 64*c0 + 786432*c1 + c2 + 3072*c3, {c0: 48, c1: 3, c2: 64, c3: 512}, None)]
op207.met_dependencies = []
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (4718592, 1)
op207.sizes = ([48, 3, 64, 512], [])
buf205_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
class op207_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 64, z3: 512}
    index0 = 64*z0 + 786432*z1 + z2 + 3072*z3
    index1 = 98304*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf207', get_index_1, load, None)
        return store
op207 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 9216
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 3
        y2 = (yindex // 192)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (3072*x3) + (786432*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op208: ExternKernelSchedulerNode(ExternKernelOut)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf206', mode=None), StarDep(name='buf207', mode=None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: ExternKernelOut
    buf208.layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
    buf208.users = [
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
    ]
]
op208.node.kernel = extern_kernels.bmm


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', 24640*c0 + c1, {c0: 1024, c1: 24624}, None)]
op209.unmet_dependencies = 
    [   MemoryDep('buf208', 786432*c2 + 262144*(((513*c0 + c3 + 656384)//262656)) + 786432*(((513*c0 + c3 + 656384)//787968)) + ModularIndexing(513*c0 + c3, 1, 512) + 512*ModularIndexing(513*c0 + c3 + 656384, 512, 513), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf208', ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 262656, 144), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf208', ModularIndexing(513*c0 + c3 + 787712, 1, 262656) + 262144*ModularIndexing(513*c0 + c3 + 787712, 262656, 3) + 786432*ModularIndexing(513*c0 + 787968*c2 + c3 + 787712, 787968, 48), {c0: 256, c1: 4, c2: 48, c3: 513}, None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
    buf209.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (25214976, 1)
op209.sizes = ([256, 4, 48, 513], [])
buf208_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
class op209_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 48, z3: 513}
    index0 = z1
    index1 = z3
    index2 = ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index3 = 786432*z2 + 262144*(((513*z0 + z3 + 656384)//262656)) + 786432*(((513*z0 + z3 + 656384)//787968)) + ModularIndexing(513*z0 + z3, 1, 512) + 512*ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index4 = ModularIndexing(513*z0 + z3 + 787712, 512, 513)
    index5 = ModularIndexing(513*z0 + z3 + 787712, 1, 262656) + 262144*ModularIndexing(513*z0 + z3 + 787712, 262656, 3) + 786432*ModularIndexing(513*z0 + 787968*z2 + z3 + 787712, 787968, 48)
    index6 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 512, 513)
    index7 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 262656, 144)
    index8 = 98560*z0 + 24640*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index8')
        store = ops.store('buf209', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf208', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf208', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf208', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op209 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[256, 131072], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 256
        xnumel = 98496
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = (xindex // 24624)
        x1 = xindex % 513
        y0 = yindex
        x2 = (xindex // 513) % 48
        x5 = xindex % 24624
        tmp0 = x3
        tmp1 = tl.full([1, 1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1, 1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x1 + (513*y0)) // 512) % 513
        tmp7 = tl.full([1, 1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((512*(((656384 + x1 + (513*y0)) // 512) % 513)) + (262144*((656384 + x1 + (513*y0)) // 262656)) + (786432*x2) + (786432*((656384 + x1 + (513*y0)) // 787968)) + ((x1 + (513*y0)) % 512)), tmp9 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.full(tmp10.shape, 0.0, tmp10.dtype)
        tmp12 = tl.where(tmp5, tmp10, tmp11)
        tmp13 = tl.full([1, 1], 3, tl.int64)
        tmp14 = tmp13 < tmp13
        tmp15 = tl.broadcast_to(x1, [XBLOCK, YBLOCK])
        tmp16 = tmp15 >= tmp4
        tmp17 = tmp16 & tmp14
        tmp18 = ((787712 + x1 + (513*y0)) // 512) % 513
        tmp19 = tmp18 < tmp7
        tmp20 = tmp19 & tmp17
        tmp21 = tl.load(in_ptr0 + ((262144*(((787712 + x1 + (513*y0)) // 262656) % 3)) + (786432*(((787712 + x1 + (513*y0) + (787968*x2)) // 787968) % 48)) + ((787712 + x1 + (513*y0)) % 262656)), tmp20 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.full(tmp21.shape, 0.0, tmp21.dtype)
        tmp23 = tl.where(tmp17, tmp21, tmp22)
        tmp24 = 0.0
        tmp25 = tl.where(tmp16, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp14, tmp25, tmp26)
        tmp28 = tl.where(tmp14, tmp27, tmp24)
        tmp29 = tl.where(tmp5, tmp12, tmp28)
        tmp30 = tmp0 < tmp13
        tmp31 = tmp16 & tmp30
        tmp32 = (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp33 = tmp32 < tmp7
        tmp34 = tmp33 & tmp31
        tmp35 = tl.load(in_ptr0 + ((262144*((((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 262656) % 144)) + (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) % 262656)), tmp34 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp31, tmp35, tmp36)
        tmp38 = tl.where(tmp16, tmp37, tmp24)
        tmp39 = tl.full(tmp38.shape, 0.0, tmp38.dtype)
        tmp40 = tl.where(tmp30, tmp38, tmp39)
        tmp41 = tl.where(tmp30, tmp40, tmp24)
        tmp42 = tl.where(tmp2, tmp29, tmp41)
        tl.store(out_ptr0 + (x5 + (24640*x3) + (98560*y0)), tmp42, xmask & ymask)


op210: SchedulerNode(ComputedBuffer)
op210.writes = [   MemoryDep('buf210', 131328*c0 + 525312*c1 + c2, {c0: 4, c1: 48, c2: 131328}, None)]
op210.unmet_dependencies = 
    [   MemoryDep('buf208', ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 262656, 144), {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf208', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf208', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf209', 24640*c0 + 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf209', 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
    buf210.users = [
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
    ]
]
op210.group.device = cuda:0
op210.group.iteration = (25214976, 1)
op210.sizes = ([4, 48, 256, 513], [])
buf208_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
class op210_loop_body:
    var_ranges = {z0: 4, z1: 48, z2: 256, z3: 513}
    index0 = z0
    index1 = z2
    index2 = z3
    index3 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 512, 513)
    index4 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 262656, 144)
    index5 = ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index6 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index7 = 513*z1 + 98560*z2 + z3
    index8 = ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index9 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index10 = 24640*z0 + 513*z1 + 98560*z2 + z3
    index11 = 131328*z0 + 525312*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf209', get_index_2)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_4 = ops.constant(1, torch.int64)
        ge_2 = ops.ge(index_expr_2, constant_4)
        masked_subblock10 = self.masked_subblock10(ge_2, 0.0)
        get_index_4 = self.get_index('index10')
        load_1 = ops.load('buf209', get_index_4)
        where_2 = ops.where(ge_2, masked_subblock10, load_1)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_5 = self.get_index('index11')
        store = ops.store('buf210', get_index_5, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf208', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf208', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf209', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf209', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf208', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf209', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
    def masked_subblock12(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf208', get_index)
        return load
    def masked_subblock11(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock12 = self.masked_subblock12(lt, 0.0)
        return masked_subblock12
    def masked_subblock10(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock11 = self.masked_subblock11(lt, 0.0)
        get_index_1 = self.get_index('index10')
        load = ops.load('buf209', get_index_1)
        where = ops.where(lt, masked_subblock11, load)
        return where
op210 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 6303744)
        x1 = (xindex // 513) % 256
        x0 = xindex % 513
        x2 = (xindex // 131328) % 48
        x4 = xindex % 131328
        tmp47 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), None, eviction_policy='evict_last')
        tmp62 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), None)
        tmp0 = x3
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1], 1, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = x0
        tmp7 = tmp6 >= tmp4
        tmp8 = tl.full([1], 256, tl.int64)
        tmp9 = tmp6 < tmp8
        tmp10 = tmp7 & tmp9
        tmp11 = tmp10 & tmp5
        tmp12 = (((-256) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp13 = tl.full([1], 512, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = tl.load(in_ptr0 + ((262144*((((-256) + x0 + (513*x1) + (787968*x2)) // 262656) % 144)) + (((-256) + x0 + (513*x1) + (787968*x2)) % 262656)), tmp15, eviction_policy='evict_last', other=0.0)
        tmp17 = tl.full(tmp16.shape, 0.0, tmp16.dtype)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.full([1], 0, tl.int64)
        tmp20 = tmp19 >= tmp4
        tmp21 = tmp20 & tmp5
        tmp22 = tmp9 & tmp21
        tmp23 = (((-131584) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp24 = tmp23 < tmp13
        tmp25 = tmp24 & tmp22
        tmp26 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp25, eviction_policy='evict_last', other=0.0)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp22, tmp26, tmp27)
        tmp29 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp21, eviction_policy='evict_last', other=0.0)
        tmp30 = tl.where(tmp9, tmp28, tmp29)
        tmp31 = tl.full(tmp30.shape, 0.0, tmp30.dtype)
        tmp32 = tl.where(tmp21, tmp30, tmp31)
        tmp33 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp5, eviction_policy='evict_last', other=0.0)
        tmp34 = tl.where(tmp20, tmp32, tmp33)
        tmp35 = tl.where(tmp10, tmp18, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp5, tmp35, tmp36)
        tmp38 = tmp9 & tmp20
        tmp39 = tmp24 & tmp38
        tmp40 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp39, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp38, tmp40, tmp41)
        tmp43 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp20, eviction_policy='evict_last', other=0.0)
        tmp44 = tl.where(tmp9, tmp42, tmp43)
        tmp45 = tl.full(tmp44.shape, 0.0, tmp44.dtype)
        tmp46 = tl.where(tmp20, tmp44, tmp45)
        tmp48 = tl.where(tmp20, tmp46, tmp47)
        tmp49 = tl.where(tmp5, tmp37, tmp48)
        tmp50 = tmp0 >= tmp4
        tmp51 = tmp9 & tmp50
        tmp52 = (((-131584) + x0 + (513*x1) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp53 = tmp52 < tmp13
        tmp54 = tmp53 & tmp51
        tmp55 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp54, other=0.0)
        tmp56 = tl.full(tmp55.shape, 0.0, tmp55.dtype)
        tmp57 = tl.where(tmp51, tmp55, tmp56)
        tmp58 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), tmp50, other=0.0)
        tmp59 = tl.where(tmp9, tmp57, tmp58)
        tmp60 = tl.full(tmp59.shape, 0.0, tmp59.dtype)
        tmp61 = tl.where(tmp50, tmp59, tmp60)
        tmp63 = tl.where(tmp50, tmp61, tmp62)
        tmp64 = tl.where(tmp2, tmp49, tmp63)
        tl.store(out_ptr0 + (x4 + (131328*x3) + (525312*x2)), tmp64, None)


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 6303744}, None)]
op211.unmet_dependencies = [MemoryDep('buf210', 525312*c0 + c1 + 393984, {c0: 48, c1: 131328}, None)]
op211.met_dependencies = []
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
    buf211.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (6303744, 1)
op211.sizes = ([48, 256, 513], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
class op211_loop_body:
    var_ranges = {z0: 48, z1: 256, z2: 513}
    index0 = z2
    index1 = -z1 - z2 + 512
    index2 = z1 + 768
    index3 = z1 + z2 + 513
    index4 = 525312*z0 + 513*z1 + z2 + 393984
    index5 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf210', get_index_2)
        where = ops.where(lt, masked_subblock4, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index5')
        store = ops.store('buf211', get_index_3, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf210', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf210', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_3 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf210', get_index_2)
        where_1 = ops.where(lt, masked_subblock2, load)
        constant_4 = ops.constant(-inf, torch.float32)
        where_2 = ops.where(to_dtype, constant_4, where_1)
        return where_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf210', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf210', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
op211 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6303744
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 513
        x1 = (xindex // 513) % 256
        x2 = (xindex // 131328)
        x3 = xindex % 131328
        x4 = xindex
        tmp43 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), None)
        tmp0 = x0
        tmp1 = tl.full([1], 256, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = 512 + ((-1)*x0) + ((-1)*x1)
        tmp4 = tl.full([1], 0, tl.int64)
        tmp5 = tmp3 <= tmp4
        tmp6 = 1.0
        tmp7 = 0.0
        tmp8 = tl.where(tmp5, tmp6, tmp7)
        tmp9 = (tmp8 != 0)
        tmp10 = 768 + x1
        tmp11 = tmp10 < tmp1
        tmp12 = tmp11 & tmp2
        tmp13 = tl.full([1], 257, tl.int64)
        tmp14 = tmp0 < tmp13
        tmp15 = tmp14 & tmp12
        tmp16 = 513 + x0 + x1
        tmp17 = tmp16 <= tmp4
        tmp18 = tl.where(tmp17, tmp6, tmp7)
        tmp19 = (tmp18 != 0)
        tmp20 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp15, other=0.0)
        tmp21 = float("-inf")
        tmp22 = tl.where(tmp19, tmp21, tmp20)
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp15, tmp22, tmp23)
        tmp25 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp12, other=0.0)
        tmp26 = tl.where(tmp14, tmp24, tmp25)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp12, tmp26, tmp27)
        tmp29 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp2, other=0.0)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp31 = tl.where(tmp9, tmp21, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tmp34 = tmp14 & tmp11
        tmp35 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp34, other=0.0)
        tmp36 = tl.where(tmp19, tmp21, tmp35)
        tmp37 = tl.full(tmp36.shape, 0.0, tmp36.dtype)
        tmp38 = tl.where(tmp34, tmp36, tmp37)
        tmp39 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp11, other=0.0)
        tmp40 = tl.where(tmp14, tmp38, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp11, tmp40, tmp41)
        tmp44 = tl.where(tmp11, tmp42, tmp43)
        tmp45 = tl.where(tmp2, tmp33, tmp44)
        tl.store(out_ptr0 + (x4), tmp45, None)


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 4096}, None)]
op212.unmet_dependencies = []
op212.met_dependencies = []
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
    ]
]
op212.group.device = cuda:0
op212.group.iteration = (4096, 1)
op212.sizes = ([4096], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op212_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(1.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf212', get_index, constant, None)
        return store
op212 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = 1.0
        tl.store(out_ptr0 + (x0), tmp0, None)


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 4096}, None)]
op213.unmet_dependencies = []
op213.met_dependencies = [MemoryDep('arg7_1', c0, {c0: 4096}, None)]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf213.users = [
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
    ]
]
op213.group.device = cuda:0
op213.group.iteration = (4096, 1)
op213.sizes = ([4096], [])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[4, 1024], stride=[1024, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op213_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        constant = ops.constant(0.0, torch.float32)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        ne_1 = ops.ne(load_1, constant_1)
        to_dtype = ops.to_dtype(ne_1, torch.float32, src_dtype = torch.bool)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(ne, constant_2, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf213', get_index_2, where, None)
        return store
op213 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.0
        tmp2 = tmp0 != tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp4, tmp3)
        tl.store(out_ptr0 + (x0), tmp5, None)


op214: SchedulerNode(ComputedBuffer)
op214.writes = [   MemoryDep('buf214', 525312*c0 + 513*c1 + 131328*c2 + c3, {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op214.unmet_dependencies = 
    [   MemoryDep('buf212', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3 + 656384, 512, 513), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf212', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 512, 513) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf212', ModularIndexing(513*c1 + c3 + 787712, 512, 513) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf213', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3, 1, 512), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf213', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 1, 512) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf213', ModularIndexing(513*c1 + c3 + 787712, 1, 512) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
    buf214.users = [
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
    ]
]
op214.group.device = cuda:0
op214.group.iteration = (2101248, 1)
op214.sizes = ([4, 256, 4, 513], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
class op214_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 4, z3: 513}
    index0 = z0
    index1 = z3
    index2 = ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index3 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index4 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3, 1, 512)
    index5 = ModularIndexing(513*z1 + z3 + 787712, 512, 513)
    index6 = ModularIndexing(513*z1 + z3 + 787712, 512, 513) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index7 = ModularIndexing(513*z1 + z3 + 787712, 1, 512) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index8 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513)
    index9 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index10 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 1, 512) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index11 = 525312*z0 + 513*z1 + 131328*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index11')
        store = ops.store('buf214', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf213', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf213', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index10')
        load_1 = ops.load('buf213', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op214 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2101248
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 525312)
        x0 = xindex % 513
        x2 = (xindex // 2052) % 256
        x1 = (xindex // 513) % 4
        tmp0 = x3
        tmp1 = tl.full([1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x0 + (513*x2)) // 512) % 513
        tmp7 = tl.full([1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + (((656384 + x0 + (513*x2)) // 512) % 513)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.load(in_ptr1 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + ((x0 + (513*x2)) % 512)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp12 = tmp10 * tmp11
        tmp13 = tl.full(tmp12.shape, 0.0, tmp12.dtype)
        tmp14 = tl.where(tmp9, tmp12, tmp13)
        tmp15 = tl.full(tmp14.shape, 0.0, tmp14.dtype)
        tmp16 = tl.where(tmp5, tmp14, tmp15)
        tmp17 = tl.full([1], 3, tl.int64)
        tmp18 = tmp17 < tmp17
        tmp19 = tmp5 & tmp18
        tmp20 = ((787712 + x0 + (513*x2)) // 512) % 513
        tmp21 = tmp20 < tmp7
        tmp22 = tmp21 & tmp19
        tmp23 = tl.load(in_ptr0 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + (((787712 + x0 + (513*x2)) // 512) % 513)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp24 = tl.load(in_ptr1 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + ((787712 + x0 + (513*x2)) % 512)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp25 = tmp23 * tmp24
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp22, tmp25, tmp26)
        tmp28 = tl.full(tmp27.shape, 0.0, tmp27.dtype)
        tmp29 = tl.where(tmp19, tmp27, tmp28)
        tmp30 = 0.0
        tmp31 = tl.where(tmp5, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp18, tmp31, tmp32)
        tmp34 = tl.where(tmp18, tmp33, tmp30)
        tmp35 = tl.where(tmp5, tmp16, tmp34)
        tmp36 = tmp0 < tmp17
        tmp37 = tmp5 & tmp36
        tmp38 = (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513
        tmp39 = tmp38 < tmp7
        tmp40 = tmp39 & tmp37
        tmp41 = tl.load(in_ptr0 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + ((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513)), tmp40, eviction_policy='evict_last', other=0.0)
        tmp42 = tl.load(in_ptr1 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) % 512)), tmp40, other=0.0)
        tmp43 = tmp41 * tmp42
        tmp44 = tl.full(tmp43.shape, 0.0, tmp43.dtype)
        tmp45 = tl.where(tmp40, tmp43, tmp44)
        tmp46 = tl.full(tmp45.shape, 0.0, tmp45.dtype)
        tmp47 = tl.where(tmp37, tmp45, tmp46)
        tmp48 = tl.where(tmp5, tmp47, tmp30)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp36, tmp48, tmp49)
        tmp51 = tl.where(tmp36, tmp50, tmp30)
        tmp52 = tl.where(tmp2, tmp35, tmp51)
        tl.store(out_ptr0 + (x0 + (513*x2) + (131328*x1) + (525312*x3)), tmp52, None)


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 525312}, None)]
op215.unmet_dependencies = 
    [   MemoryDep('buf212', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf212', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf213', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf213', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf214', c0, {c0: 525312}, None)]
op215.met_dependencies = []
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
    buf215.users = [
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
    ]
]
op215.group.device = cuda:0
op215.group.iteration = (525312, 1)
op215.sizes = ([4, 256, 513], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
class op215_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 513}
    index0 = z1
    index1 = z2
    index2 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513)
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index5 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index7 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index8 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_1 = ops.constant(0, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_1, constant_2)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf214', get_index_1)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index8')
        store = ops.store('buf215', get_index_2, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf213', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf213', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf214', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index8')
        load = ops.load('buf214', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf213', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf214', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
op215 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 256
        x2 = xindex
        y1 = (yindex // 256)
        y3 = yindex
        tmp56 = tl.load(in_ptr2 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 1, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tmp3 >= tmp1
        tmp5 = tl.full([1, 1], 256, tl.int64)
        tmp6 = tmp3 < tmp5
        tmp7 = tmp4 & tmp6
        tmp8 = tmp7 & tmp2
        tmp9 = (((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp10 = tl.full([1, 1], 512, tl.int64)
        tmp11 = tmp9 < tmp10
        tmp12 = tmp11 & tmp8
        tmp13 = tl.load(in_ptr0 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp14 = tl.load(in_ptr1 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + (((-256) + x2 + (513*y0) + (787968*y1)) % 512)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp15 = tmp13 * tmp14
        tmp16 = tl.full(tmp15.shape, 0.0, tmp15.dtype)
        tmp17 = tl.where(tmp12, tmp15, tmp16)
        tmp18 = tl.full(tmp17.shape, 0.0, tmp17.dtype)
        tmp19 = tl.where(tmp8, tmp17, tmp18)
        tmp20 = tl.full([1, 1], 0, tl.int64)
        tmp21 = tmp20 >= tmp1
        tmp22 = tmp21 & tmp2
        tmp23 = tmp6 & tmp22
        tmp24 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp25 = tmp24 < tmp10
        tmp26 = tmp25 & tmp23
        tmp27 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tmp27 * tmp28
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp26, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp23, tmp31, tmp32)
        tmp34 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp22 & xmask, eviction_policy='evict_last', other=0.0)
        tmp35 = tl.where(tmp6, tmp33, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp22, tmp35, tmp36)
        tmp38 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp39 = tl.where(tmp21, tmp37, tmp38)
        tmp40 = tl.where(tmp7, tmp19, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp2, tmp40, tmp41)
        tmp43 = tmp6 & tmp21
        tmp44 = tmp25 & tmp43
        tmp45 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp47 = tmp45 * tmp46
        tmp48 = tl.full(tmp47.shape, 0.0, tmp47.dtype)
        tmp49 = tl.where(tmp44, tmp47, tmp48)
        tmp50 = tl.full(tmp49.shape, 0.0, tmp49.dtype)
        tmp51 = tl.where(tmp43, tmp49, tmp50)
        tmp52 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp21 & xmask, eviction_policy='evict_last', other=0.0)
        tmp53 = tl.where(tmp6, tmp51, tmp52)
        tmp54 = tl.full(tmp53.shape, 0.0, tmp53.dtype)
        tmp55 = tl.where(tmp21, tmp53, tmp54)
        tmp57 = tl.where(tmp21, tmp55, tmp56)
        tmp58 = tl.where(tmp2, tmp42, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 263168}, None)]
op216.unmet_dependencies = 
    [   MemoryDep('buf212', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf213', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf214', 513*c0 + c1, {c0: 1024, c1: 257}, None),
        MemoryDep('buf215', 513*c0 + c1, {c0: 1024, c1: 257}, None)]
op216.met_dependencies = []
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (263168, 1)
op216.sizes = ([4, 256, 257], [])
buf215_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
class op216_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 257}
    index0 = z1 + z2 - 255
    index1 = 131328*z0 + 513*z1 + z2
    index2 = z2
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index5 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index6 = 65792*z0 + 257*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        constant_3 = ops.constant(0, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq = ops.eq(constant_3, constant_4)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf215', get_index_1)
        constant_5 = ops.constant(0, torch.int64)
        constant_6 = ops.constant(1, torch.int64)
        ge = ops.ge(constant_5, constant_6)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf214', get_index_2)
        where_1 = ops.where(ge, masked_subblock1, load_1)
        where_2 = ops.where(eq, load, where_1)
        constant_7 = ops.constant(-inf, torch.float32)
        where_3 = ops.where(to_dtype, constant_7, where_2)
        get_index_3 = self.get_index('index6')
        store = ops.store('buf216', get_index_3, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('buf213', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf214', get_index_1)
        where = ops.where(lt, masked_subblock2, load)
        return where
op216 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 257
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 256
        y3 = yindex
        y1 = (yindex // 256)
        tmp9 = tl.load(in_ptr0 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr3 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = (-255) + x2 + y0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 <= tmp1
        tmp3 = 1.0
        tmp4 = 0.0
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tmp6 = (tmp5 != 0)
        tmp7 = tl.full([1, 1], 0, tl.int32)
        tmp8 = tmp7 == tmp7
        tmp10 = tl.full([1, 1], 1, tl.int64)
        tmp11 = tmp1 >= tmp10
        tmp12 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp13 = tl.full([1, 1], 256, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp17 = tl.full([1, 1], 512, tl.int64)
        tmp18 = tmp16 < tmp17
        tmp19 = tmp18 & tmp15
        tmp20 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tmp20 * tmp21
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp19, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp15, tmp24, tmp25)
        tmp27 = tl.load(in_ptr3 + (x2 + (513*y3)), tmp11 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.where(tmp14, tmp26, tmp27)
        tmp29 = tl.full(tmp28.shape, 0.0, tmp28.dtype)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp32 = tl.where(tmp11, tmp30, tmp31)
        tmp33 = tl.where(tmp8, tmp9, tmp32)
        tmp34 = float("-inf")
        tmp35 = tl.where(tmp6, tmp34, tmp33)
        tl.store(out_ptr0 + (x2 + (257*y3)), tmp35, xmask)


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 2101248}, None)]
op217.unmet_dependencies = 
    [   MemoryDep('buf212', ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf213', ModularIndexing(c2 + 513*ModularIndexing(c1, 1, 256), 1, 512) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf214', 131328*c0 + c2 + 525312*((c1//256)) + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf215', 131328*c0 + c2 + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf216', 65792*c0 + 257*c1 + c2, {c0: 4, c1: 1024, c2: 513}, None)]
op217.met_dependencies = []
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
    buf217.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (2101248, 1)
op217.sizes = ([4, 1024, 513], [])
buf216_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
class op217_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 513}
    index0 = z1
    index1 = z2
    index2 = 65792*z0 + 257*z1 + z2
    index3 = (z1//256)
    index4 = 131328*z0 + z2 + 513*ModularIndexing(z1, 1, 256)
    index5 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index7 = ModularIndexing(z2 + 513*ModularIndexing(z1, 1, 256), 1, 512) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index8 = 131328*z0 + z2 + 525312*((z1//256)) + 513*ModularIndexing(z1, 1, 256)
    index9 = 525312*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf215', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock6 = self.masked_subblock6(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf214', get_index_4)
        where = ops.where(ge, masked_subblock6, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_5 = self.get_index('index9')
        store = ops.store('buf217', get_index_5, where_2, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf216', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf213', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf214', get_index_1)
        where = ops.where(lt, masked_subblock4, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf215', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf214', get_index_4)
        where = ops.where(ge, masked_subblock3, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock2, where_1)
        return where_2
    def masked_subblock8(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf213', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf214', get_index_1)
        where = ops.where(lt, masked_subblock7, load)
        return where
op217 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 11, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 4096
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 1024
        x2 = xindex
        y1 = (yindex // 1024)
        y3 = yindex
        tmp40 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), xmask, eviction_policy='evict_last')
        tmp55 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 256, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tl.full([1, 1], 257, tl.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp5 & tmp2
        tmp7 = tl.load(in_ptr0 + (x2 + (257*y0) + (65792*y1)), tmp6 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tl.broadcast_to((y0 // 256), [XBLOCK, YBLOCK])
        tmp9 = tl.full([1, 1], 0, tl.int32)
        tmp10 = tmp8 == tmp9
        tmp11 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp12 = tl.full([1, 1], 1, tl.int64)
        tmp13 = tmp8 >= tmp12
        tmp14 = tmp13 & tmp2
        tmp15 = tmp3 < tmp1
        tmp16 = tmp15 & tmp14
        tmp17 = (((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513
        tmp18 = tl.full([1, 1], 512, tl.int64)
        tmp19 = tmp17 < tmp18
        tmp20 = tmp19 & tmp16
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp23 = tmp21 * tmp22
        tmp24 = tl.full(tmp23.shape, 0.0, tmp23.dtype)
        tmp25 = tl.where(tmp20, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp16, tmp25, tmp26)
        tmp28 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp14 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tl.where(tmp15, tmp27, tmp28)
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp14, tmp29, tmp30)
        tmp32 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp33 = tl.where(tmp13, tmp31, tmp32)
        tmp34 = tl.where(tmp10, tmp11, tmp33)
        tmp35 = tl.where(tmp5, tmp7, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp2, tmp35, tmp36)
        tmp38 = (y0 // 256)
        tmp39 = tmp38 == tmp9
        tmp41 = tmp38 >= tmp12
        tmp42 = tmp15 & tmp41
        tmp43 = tmp19 & tmp42
        tmp44 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp45 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tmp44 * tmp45
        tmp47 = tl.full(tmp46.shape, 0.0, tmp46.dtype)
        tmp48 = tl.where(tmp43, tmp46, tmp47)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp42, tmp48, tmp49)
        tmp51 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp41 & xmask, eviction_policy='evict_last', other=0.0)
        tmp52 = tl.where(tmp15, tmp50, tmp51)
        tmp53 = tl.full(tmp52.shape, 0.0, tmp52.dtype)
        tmp54 = tl.where(tmp41, tmp52, tmp53)
        tmp56 = tl.where(tmp41, tmp54, tmp55)
        tmp57 = tl.where(tmp39, tmp40, tmp56)
        tmp58 = tl.where(tmp2, tmp37, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op218: SchedulerNode(ComputedBuffer)
op218.writes = [   MemoryDep('buf218', 6324224*c0 + 513*c1 + 6176*c2 + c3, {c0: 4, c1: 12, c2: 1024, c3: 513}, None)]
op218.unmet_dependencies = 
    [   MemoryDep('buf210', 525312*c0 + 513*c1 + c2 + 131328*((ModularIndexing(c1, 1, 256)//256)), {c0: 48, c1: 1024, c2: 513}, None),
        MemoryDep('buf211', 131328*c0 + c1 - 393984, {c0: 48, c1: 525312}, None),
        MemoryDep('buf217', 525312*c0 + c2, {c0: 4, c1: 12, c2: 525312}, None)]
op218.met_dependencies = []
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
    buf218.users = [
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
    ]
]
op218.group.device = cuda:0
op218.group.iteration = (25214976, 1)
op218.sizes = ([4, 12, 1024, 513], [])
buf211_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
class op218_loop_body:
    var_ranges = {z0: 4, z1: 12, z2: 1024, z3: 513}
    index0 = z2
    index1 = 1575936*z0 + 131328*z1 + 513*z2 + z3 - 393984
    index2 = z2 + 256*((ModularIndexing(z2, 1, 256)//256))
    index3 = z3
    index4 = z2 + z3 + 256*((ModularIndexing(z2, 1, 256)//256)) - 255
    index5 = 6303744*z0 + 525312*z1 + 513*z2 + z3 + 131328*((ModularIndexing(z2, 1, 256)//256))
    index6 = -z2 - z3 + 1280
    index7 = 525312*z0 + 513*z2 + z3
    index8 = 6324224*z0 + 513*z1 + 6176*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(768, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index5')
        load = ops.load('buf210', get_index_2)
        where = ops.where(lt, masked_subblock2, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_4 = self.get_index('index7')
        load_1 = ops.load('buf217', get_index_4)
        where_2 = ops.where(ge_1, masked_subblock4, load_1)
        add = ops.add(where_1, where_2)
        get_index_5 = self.get_index('index8')
        store = ops.store('buf218', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf211', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf210', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf210', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf217', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(ge, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf217', get_index_1)
        where = ops.where(ge, masked_subblock5, load)
        return where
op218 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 513) % 1024
        x4 = xindex % 525312
        x5 = (xindex // 525312)
        x0 = xindex % 513
        x3 = (xindex // 6303744)
        x2 = (xindex // 525312) % 12
        tmp27 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), None)
        tmp44 = tl.load(in_ptr2 + (x4 + (525312*x3)), None, eviction_policy='evict_last')
        tmp0 = x1
        tmp1 = tl.full([1], 768, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.load(in_ptr0 + ((-393984) + x4 + (131328*x5)), tmp2, other=0.0)
        tmp4 = x1 + (256*((x1 % 256) // 256))
        tmp5 = tl.full([1], 256, tl.int64)
        tmp6 = tmp4 < tmp5
        tmp7 = x0
        tmp8 = tl.full([1], 257, tl.int64)
        tmp9 = tmp7 < tmp8
        tmp10 = tmp9 & tmp6
        tmp11 = (-255) + x0 + x1 + (256*((x1 % 256) // 256))
        tmp12 = tl.full([1], 0, tl.int64)
        tmp13 = tmp11 <= tmp12
        tmp14 = 1.0
        tmp15 = 0.0
        tmp16 = tl.where(tmp13, tmp14, tmp15)
        tmp17 = (tmp16 != 0)
        tmp18 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp10, other=0.0)
        tmp19 = float("-inf")
        tmp20 = tl.where(tmp17, tmp19, tmp18)
        tmp21 = tl.full(tmp20.shape, 0.0, tmp20.dtype)
        tmp22 = tl.where(tmp10, tmp20, tmp21)
        tmp23 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp6, other=0.0)
        tmp24 = tl.where(tmp9, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp6, tmp24, tmp25)
        tmp28 = tl.where(tmp6, tmp26, tmp27)
        tmp29 = tl.where(tmp2, tmp3, tmp28)
        tmp30 = tmp7 >= tmp5
        tmp31 = tmp30 & tmp2
        tmp32 = 1280 + ((-1)*x0) + ((-1)*x1)
        tmp33 = tmp32 <= tmp12
        tmp34 = tl.where(tmp33, tmp14, tmp15)
        tmp35 = (tmp34 != 0)
        tmp36 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp31, eviction_policy='evict_last', other=0.0)
        tmp37 = tl.where(tmp35, tmp19, tmp36)
        tmp38 = tl.full(tmp37.shape, 0.0, tmp37.dtype)
        tmp39 = tl.where(tmp31, tmp37, tmp38)
        tmp40 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.where(tmp30, tmp39, tmp40)
        tmp42 = tl.full(tmp41.shape, 0.0, tmp41.dtype)
        tmp43 = tl.where(tmp2, tmp41, tmp42)
        tmp45 = tl.where(tmp2, tmp43, tmp44)
        tmp46 = tmp29 + tmp45
        tl.store(out_ptr0 + (x0 + (513*x2) + (6176*x1) + (6324224*x3)), tmp46, None)


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 49152}, None)]
op219.unmet_dependencies = [MemoryDep('buf218', 6176*c0 + c1, {c0: 4096, c1: 6156}, None)]
op219.met_dependencies = []
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf219.users = [
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
    ]
]
op219.group.device = cuda:0
op219.group.iteration = (49152, 513)
op219.sizes = ([4096, 12], [513])
buf218_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op219_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf219', get_index_1, reduction)
        return store_reduction
op219 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        x3 = xindex
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp2, None)


op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 49152}, None)]
op220.unmet_dependencies = 
    [   MemoryDep('buf218', 6176*c0 + c1, {c0: 4096, c1: 6156}, None),
        MemoryDep('buf219', c0, {c0: 49152}, None)]
op220.met_dependencies = []
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf220.users = [NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (49152, 513)
op220.sizes = ([4096, 12], [513])
buf218_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf220_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op220_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf219', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf220', get_index_2, reduction)
        return store_reduction
op220 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        x3 = xindex
        tmp1 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp5, None)


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 3145728}, None)]
op221.unmet_dependencies = [MemoryDep('buf199', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op221.met_dependencies = []
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (3145728, 1)
op221.sizes = ([1024, 4, 768], [])
buf199_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op221_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf221', get_index_1, load, None)
        return store
op221 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf222.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op222.node.kernel = extern_kernels.mm


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 4718592}, None)]
op223.unmet_dependencies = [   MemoryDep('buf222', 64*c0 + 3072*c1 + c2 - 786432, {c0: 48, c1: 1536, c2: 64}, None)]
op223.met_dependencies = [   MemoryDep('arg88_1', c2 + 64*ModularIndexing(c0, 1, 12), {c0: 48, c1: 1536, c2: 64}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
    buf223.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (4718592, 1)
op223.sizes = ([48, 1536, 64], [])
buf222_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
class op223_loop_body:
    var_ranges = {z0: 48, z1: 1536, z2: 64}
    index0 = z1 - 256
    index1 = 64*z0 + 3072*z1 + z2 - 786432
    index2 = z2 + 64*ModularIndexing(z0, 1, 12)
    index3 = 98304*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1024, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, -1.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf223', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg88_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op223 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 1536
        x0 = xindex % 64
        x2 = (xindex // 98304)
        x3 = xindex
        tmp0 = (-256) + x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 1024, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-786432) + x0 + (64*x2) + (3072*x1)), tmp5, other=0.0)
        tmp7 = tl.load(in_ptr1 + (x0 + (64*(x2 % 12))), tmp5, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, -1.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op224: SchedulerNode(ComputedBuffer)
op224.writes = [   MemoryDep('buf224', 770*c0 + 788480*c1 + c2, {c0: 1024, c1: 48, c2: 770}, None)]
op224.unmet_dependencies = 
    [   MemoryDep('buf218', 6176*c0 + c2 + 6324224*((c1//12)) + 6324224*((ModularIndexing(c1, 1, 12)//12)) + 513*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 770}, None),
        MemoryDep('buf219', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None),
        MemoryDep('buf220', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None)]
op224.met_dependencies = [MemoryDep('arg8_1', c0 + 1024*((c1//12)), {c0: 1024, c1: 48}, None)]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (37847040, 1)
op224.sizes = ([1024, 48, 770], [])
arg8_1_layout = FixedLayout('cuda', torch.bool, size=[4, 1024], stride=[1024, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf220_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf224_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
class op224_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 770}
    index0 = z2
    index1 = z0 + 1024*((z1//12))
    index2 = 6176*z0 + z2 + 6324224*((z1//12)) + 6324224*((ModularIndexing(z1, 1, 12)//12)) + 513*ModularIndexing(z1, 1, 12)
    index3 = 12*z0 + 12288*((z1//12)) + ModularIndexing(z1, 1, 12)
    index4 = 770*z0 + 788480*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(513, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index4')
        store = ops.store('buf224', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg8_1', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf218', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('buf219', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf220', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(load, constant, truediv)
        return where
op224 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 37847040
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 770
        x1 = (xindex // 770) % 48
        x2 = (xindex // 36960)
        tmp0 = x0
        tmp1 = tl.full([1], 513, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.load(in_ptr0 + (x2 + (1024*(x1 // 12))), tmp2, eviction_policy='evict_last', other=0.0).to(tl.int1)
        tmp4 = tl.load(in_ptr1 + (x0 + (513*(x1 % 12)) + (6176*x2) + (6324224*(x1 // 12)) + (6324224*((x1 % 12) // 12))), tmp2, other=0.0)
        tmp5 = tl.load(in_ptr2 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp4 - tmp5
        tmp7 = tl_math.exp(tmp6)
        tmp8 = tl.load(in_ptr3 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp9 = tmp7 / tmp8
        tmp10 = 0.0
        tmp11 = tl.where(tmp3, tmp10, tmp9)
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp2, tmp11, tmp12)
        tl.store(out_ptr0 + (x0 + (770*x2) + (788480*x1)), tmp13, None)


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 9437184}, None)]
op225.unmet_dependencies = [   MemoryDep('buf223', 98304*c0 + 16384*c1 + c2, {c0: 48, c1: 4, c2: 49152}, None)]
op225.met_dependencies = []
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
    buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (9437184, 1)
op225.sizes = ([48, 4, 49152], [])
buf223_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
class op225_loop_body:
    var_ranges = {z0: 48, z1: 4, z2: 49152}
    index0 = 98304*z0 + 16384*z1 + z2
    index1 = 196608*z0 + 49152*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf225', get_index_1, load, None)
        return store
op225 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 9437184
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 49152
        x1 = (xindex // 49152) % 4
        x2 = (xindex // 196608)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (16384*x1) + (98304*x2)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op226: ExternKernelSchedulerNode(ExternKernelOut)
op226.writes = [StarDep(name='buf226', mode=None)]
op226.unmet_dependencies = [StarDep(name='buf224', mode=None), StarDep(name='buf225', mode=None)]
op226.met_dependencies = []
op226.outputs = [
    buf226: ExternKernelOut
    buf226.layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
    buf226.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op226.node.kernel = extern_kernels.bmm


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 3145728}, None)]
op227.unmet_dependencies = [   MemoryDep('buf226', 786432*c0 + 64*c1 + 65536*((c2//64)) + ModularIndexing(c2, 1, 64), {c0: 4, c1: 1024, c2: 768}, None)]
op227.met_dependencies = []
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (3145728, 1)
op227.sizes = ([4, 1024, 768], [])
buf226_layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op227_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 768}
    index0 = 786432*z0 + 64*z1 + 65536*((z2//64)) + ModularIndexing(z2, 1, 64)
    index1 = 786432*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf227', get_index_1, load, None)
        return store
op227 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 1024
        x2 = (xindex // 786432)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + ((64*x1) + (65536*(x0 // 64)) + (786432*x2) + (x0 % 64)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op228: ExternKernelSchedulerNode(ExternKernelOut)
op228.writes = [StarDep(name='buf228', mode=None)]
op228.unmet_dependencies = [StarDep(name='buf227', mode=None)]
op228.met_dependencies = [StarDep(name='arg89_1', mode=None)]
op228.outputs = [
    buf228: ExternKernelOut
    buf228.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf228.users = [
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False),
    ]
]
op228.node.kernel = extern_kernels.mm


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 4096}, None)]
op229.unmet_dependencies = 
    [   MemoryDep('buf199', c0, {c0: 3145728}, None),
        MemoryDep('buf228', c0, {c0: 3145728}, None)]
op229.met_dependencies = [MemoryDep('arg90_1', c1, {c0: 4096, c1: 768}, None)]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf229.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (4096, 768)
op229.sizes = ([4096], [768])
buf228_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op229_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf199', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf229', get_index_3, getitem)
        return store_reduction
op229 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 4096}, None)]
op230.unmet_dependencies = 
    [   MemoryDep('buf199', c0, {c0: 3145728}, None),
        MemoryDep('buf228', c0, {c0: 3145728}, None)]
op230.met_dependencies = [MemoryDep('arg90_1', c1, {c0: 4096, c1: 768}, None)]
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf230.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (4096, 768)
op230.sizes = ([4096], [768])
buf228_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op230_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf199', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf230', get_index_3, getitem_1)
        return store_reduction
op230 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 3145728}, None)]
op232.unmet_dependencies = 
    [   MemoryDep('buf199', c0, {c0: 3145728}, None),
        MemoryDep('buf228', c0, {c0: 3145728}, None),
        MemoryDep('buf229', c0, {c0: 4096}, None),
        MemoryDep('buf230', c0, {c0: 4096}, None)]
op232.met_dependencies = 
    [   MemoryDep('arg90_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg91_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg92_1', c1, {c0: 4096, c1: 768}, None)]
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf232.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False),
    ]
]
op232.group.device = cuda:0
op232.group.iteration = (3145728, 1)
op232.sizes = ([4096, 768], [])
buf228_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf230_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op232_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf199', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf229', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf230', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg91_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg92_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf232', get_index_7, add_3, None)
        return store
op232 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op233: ExternKernelSchedulerNode(ExternKernelOut)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf232', mode=None)]
op233.met_dependencies = [StarDep(name='arg93_1', mode=None)]
op233.outputs = [
    buf233: ExternKernelOut
    buf233.layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
    buf233.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=True, is_weak=False)]
]
op233.node.kernel = extern_kernels.mm


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 12582912}, None)]
op234.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 12582912}, None)]
op234.met_dependencies = [MemoryDep('arg94_1', c1, {c0: 4096, c1: 3072}, None)]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
    buf234.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (12582912, 1)
op234.sizes = ([4096, 3072], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
class op234_loop_body:
    var_ranges = {z0: 4096, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg94_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf233', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg94_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf234', get_index_4, mul_2, None)
        return store
op234 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op235: ExternKernelSchedulerNode(ExternKernelOut)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf234', mode=None)]
op235.met_dependencies = [StarDep(name='arg95_1', mode=None)]
op235.outputs = [
    buf235: ExternKernelOut
    buf235.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf235.users = [
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False),
    ]
]
op235.node.kernel = extern_kernels.mm


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 4096}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf232', c0, {c0: 3145728}, None),
        MemoryDep('buf235', c0, {c0: 3145728}, None)]
op236.met_dependencies = [MemoryDep('arg96_1', c1, {c0: 4096, c1: 768}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf236.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (4096, 768)
op236.sizes = ([4096], [768])
buf235_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op236_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf232', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf236', get_index_3, getitem)
        return store_reduction
op236 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 4096}, None)]
op237.unmet_dependencies = 
    [   MemoryDep('buf232', c0, {c0: 3145728}, None),
        MemoryDep('buf235', c0, {c0: 3145728}, None)]
op237.met_dependencies = [MemoryDep('arg96_1', c1, {c0: 4096, c1: 768}, None)]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf237.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (4096, 768)
op237.sizes = ([4096], [768])
buf235_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op237_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf232', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf237', get_index_3, getitem_1)
        return store_reduction
op237 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 3145728}, None)]
op239.unmet_dependencies = 
    [   MemoryDep('buf232', c0, {c0: 3145728}, None),
        MemoryDep('buf235', c0, {c0: 3145728}, None),
        MemoryDep('buf236', c0, {c0: 4096}, None),
        MemoryDep('buf237', c0, {c0: 4096}, None)]
op239.met_dependencies = 
    [   MemoryDep('arg96_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg97_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg98_1', c1, {c0: 4096, c1: 768}, None)]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf239.users = [
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False),
    ]
]
op239.group.device = cuda:0
op239.group.iteration = (3145728, 1)
op239.sizes = ([4096, 768], [])
buf235_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf237_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op239_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf232', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf236', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf237', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg97_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg98_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf239', get_index_7, add_3, None)
        return store
op239 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 3145728}, None)]
op240.unmet_dependencies = [MemoryDep('buf239', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op240.met_dependencies = []
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (3145728, 1)
op240.sizes = ([1024, 4, 768], [])
buf239_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op240_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf240', get_index_1, load, None)
        return store
op240 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op241: ExternKernelSchedulerNode(ExternKernelOut)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = [StarDep(name='arg99_1', mode=None)]
op241.outputs = [
    buf241: ExternKernelOut
    buf241.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf241.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False)]
]
op241.node.kernel = extern_kernels.mm


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 3145728}, None)]
op242.unmet_dependencies = [MemoryDep('buf241', c0, {c0: 3145728}, None)]
op242.met_dependencies = [   MemoryDep('arg100_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf242.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (3145728, 1)
op242.sizes = ([1024, 48, 64], [])
buf241_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op242_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg100_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf242', get_index_2, mul, None)
        return store
op242 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x3), tmp4, None)


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 3145728}, None)]
op243.unmet_dependencies = [MemoryDep('buf239', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op243.met_dependencies = []
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf243.users = [NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (3145728, 1)
op243.sizes = ([1024, 4, 768], [])
buf239_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op243_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf243', get_index_1, load, None)
        return store
op243 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op244: ExternKernelSchedulerNode(ExternKernelOut)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf243', mode=None)]
op244.met_dependencies = [StarDep(name='arg101_1', mode=None)]
op244.outputs = [
    buf244: ExternKernelOut
    buf244.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf244.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False)]
]
op244.node.kernel = extern_kernels.mm


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 3145728}, None)]
op245.unmet_dependencies = [MemoryDep('buf244', c0, {c0: 3145728}, None)]
op245.met_dependencies = [   MemoryDep('arg102_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf245.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (3145728, 1)
op245.sizes = ([1024, 48, 64], [])
buf244_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op245_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg102_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf245', get_index_2, add, None)
        return store
op245 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x3), tmp2, None)


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 4718592}, None)]
op246.unmet_dependencies = [   MemoryDep('buf242', 64*c0 + 786432*c1 + 3072*c2 + c3, {c0: 48, c1: 3, c2: 512, c3: 64}, None)]
op246.met_dependencies = []
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (4718592, 1)
op246.sizes = ([48, 3, 512, 64], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
class op246_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 512, z3: 64}
    index0 = 64*z0 + 786432*z1 + 3072*z2 + z3
    index1 = 98304*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf246', get_index_1, load, None)
        return store
op246 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 3
        x3 = (xindex // 98304)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x3) + (3072*x1) + (786432*x2)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 4718592}, None)]
op247.unmet_dependencies = [   MemoryDep('buf245', 64*c0 + 786432*c1 + c2 + 3072*c3, {c0: 48, c1: 3, c2: 64, c3: 512}, None)]
op247.met_dependencies = []
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (4718592, 1)
op247.sizes = ([48, 3, 64, 512], [])
buf245_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
class op247_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 64, z3: 512}
    index0 = 64*z0 + 786432*z1 + z2 + 3072*z3
    index1 = 98304*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf247', get_index_1, load, None)
        return store
op247 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 9216
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 3
        y2 = (yindex // 192)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (3072*x3) + (786432*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op248: ExternKernelSchedulerNode(ExternKernelOut)
op248.writes = [StarDep(name='buf248', mode=None)]
op248.unmet_dependencies = [StarDep(name='buf246', mode=None), StarDep(name='buf247', mode=None)]
op248.met_dependencies = []
op248.outputs = [
    buf248: ExternKernelOut
    buf248.layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
    ]
]
op248.node.kernel = extern_kernels.bmm


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', 24640*c0 + c1, {c0: 1024, c1: 24624}, None)]
op249.unmet_dependencies = 
    [   MemoryDep('buf248', 786432*c2 + 262144*(((513*c0 + c3 + 656384)//262656)) + 786432*(((513*c0 + c3 + 656384)//787968)) + ModularIndexing(513*c0 + c3, 1, 512) + 512*ModularIndexing(513*c0 + c3 + 656384, 512, 513), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf248', ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 262656, 144), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf248', ModularIndexing(513*c0 + c3 + 787712, 1, 262656) + 262144*ModularIndexing(513*c0 + c3 + 787712, 262656, 3) + 786432*ModularIndexing(513*c0 + 787968*c2 + c3 + 787712, 787968, 48), {c0: 256, c1: 4, c2: 48, c3: 513}, None)]
op249.met_dependencies = []
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
    buf249.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (25214976, 1)
op249.sizes = ([256, 4, 48, 513], [])
buf248_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
class op249_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 48, z3: 513}
    index0 = z1
    index1 = z3
    index2 = ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index3 = 786432*z2 + 262144*(((513*z0 + z3 + 656384)//262656)) + 786432*(((513*z0 + z3 + 656384)//787968)) + ModularIndexing(513*z0 + z3, 1, 512) + 512*ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index4 = ModularIndexing(513*z0 + z3 + 787712, 512, 513)
    index5 = ModularIndexing(513*z0 + z3 + 787712, 1, 262656) + 262144*ModularIndexing(513*z0 + z3 + 787712, 262656, 3) + 786432*ModularIndexing(513*z0 + 787968*z2 + z3 + 787712, 787968, 48)
    index6 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 512, 513)
    index7 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 262656, 144)
    index8 = 98560*z0 + 24640*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index8')
        store = ops.store('buf249', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf248', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf248', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf248', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op249 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[256, 131072], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 256
        xnumel = 98496
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = (xindex // 24624)
        x1 = xindex % 513
        y0 = yindex
        x2 = (xindex // 513) % 48
        x5 = xindex % 24624
        tmp0 = x3
        tmp1 = tl.full([1, 1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1, 1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x1 + (513*y0)) // 512) % 513
        tmp7 = tl.full([1, 1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((512*(((656384 + x1 + (513*y0)) // 512) % 513)) + (262144*((656384 + x1 + (513*y0)) // 262656)) + (786432*x2) + (786432*((656384 + x1 + (513*y0)) // 787968)) + ((x1 + (513*y0)) % 512)), tmp9 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.full(tmp10.shape, 0.0, tmp10.dtype)
        tmp12 = tl.where(tmp5, tmp10, tmp11)
        tmp13 = tl.full([1, 1], 3, tl.int64)
        tmp14 = tmp13 < tmp13
        tmp15 = tl.broadcast_to(x1, [XBLOCK, YBLOCK])
        tmp16 = tmp15 >= tmp4
        tmp17 = tmp16 & tmp14
        tmp18 = ((787712 + x1 + (513*y0)) // 512) % 513
        tmp19 = tmp18 < tmp7
        tmp20 = tmp19 & tmp17
        tmp21 = tl.load(in_ptr0 + ((262144*(((787712 + x1 + (513*y0)) // 262656) % 3)) + (786432*(((787712 + x1 + (513*y0) + (787968*x2)) // 787968) % 48)) + ((787712 + x1 + (513*y0)) % 262656)), tmp20 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.full(tmp21.shape, 0.0, tmp21.dtype)
        tmp23 = tl.where(tmp17, tmp21, tmp22)
        tmp24 = 0.0
        tmp25 = tl.where(tmp16, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp14, tmp25, tmp26)
        tmp28 = tl.where(tmp14, tmp27, tmp24)
        tmp29 = tl.where(tmp5, tmp12, tmp28)
        tmp30 = tmp0 < tmp13
        tmp31 = tmp16 & tmp30
        tmp32 = (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp33 = tmp32 < tmp7
        tmp34 = tmp33 & tmp31
        tmp35 = tl.load(in_ptr0 + ((262144*((((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 262656) % 144)) + (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) % 262656)), tmp34 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp31, tmp35, tmp36)
        tmp38 = tl.where(tmp16, tmp37, tmp24)
        tmp39 = tl.full(tmp38.shape, 0.0, tmp38.dtype)
        tmp40 = tl.where(tmp30, tmp38, tmp39)
        tmp41 = tl.where(tmp30, tmp40, tmp24)
        tmp42 = tl.where(tmp2, tmp29, tmp41)
        tl.store(out_ptr0 + (x5 + (24640*x3) + (98560*y0)), tmp42, xmask & ymask)


op250: SchedulerNode(ComputedBuffer)
op250.writes = [   MemoryDep('buf250', 131328*c0 + 525312*c1 + c2, {c0: 4, c1: 48, c2: 131328}, None)]
op250.unmet_dependencies = 
    [   MemoryDep('buf248', ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 262656, 144), {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf248', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf248', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf249', 24640*c0 + 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf249', 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None)]
op250.met_dependencies = []
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
    buf250.users = [
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
    ]
]
op250.group.device = cuda:0
op250.group.iteration = (25214976, 1)
op250.sizes = ([4, 48, 256, 513], [])
buf248_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
class op250_loop_body:
    var_ranges = {z0: 4, z1: 48, z2: 256, z3: 513}
    index0 = z0
    index1 = z2
    index2 = z3
    index3 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 512, 513)
    index4 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 262656, 144)
    index5 = ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index6 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index7 = 513*z1 + 98560*z2 + z3
    index8 = ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index9 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index10 = 24640*z0 + 513*z1 + 98560*z2 + z3
    index11 = 131328*z0 + 525312*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf249', get_index_2)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_4 = ops.constant(1, torch.int64)
        ge_2 = ops.ge(index_expr_2, constant_4)
        masked_subblock10 = self.masked_subblock10(ge_2, 0.0)
        get_index_4 = self.get_index('index10')
        load_1 = ops.load('buf249', get_index_4)
        where_2 = ops.where(ge_2, masked_subblock10, load_1)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_5 = self.get_index('index11')
        store = ops.store('buf250', get_index_5, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf248', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf248', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf249', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf249', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf248', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf249', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
    def masked_subblock12(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf248', get_index)
        return load
    def masked_subblock11(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock12 = self.masked_subblock12(lt, 0.0)
        return masked_subblock12
    def masked_subblock10(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock11 = self.masked_subblock11(lt, 0.0)
        get_index_1 = self.get_index('index10')
        load = ops.load('buf249', get_index_1)
        where = ops.where(lt, masked_subblock11, load)
        return where
op250 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 6303744)
        x1 = (xindex // 513) % 256
        x0 = xindex % 513
        x2 = (xindex // 131328) % 48
        x4 = xindex % 131328
        tmp47 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), None, eviction_policy='evict_last')
        tmp62 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), None)
        tmp0 = x3
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1], 1, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = x0
        tmp7 = tmp6 >= tmp4
        tmp8 = tl.full([1], 256, tl.int64)
        tmp9 = tmp6 < tmp8
        tmp10 = tmp7 & tmp9
        tmp11 = tmp10 & tmp5
        tmp12 = (((-256) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp13 = tl.full([1], 512, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = tl.load(in_ptr0 + ((262144*((((-256) + x0 + (513*x1) + (787968*x2)) // 262656) % 144)) + (((-256) + x0 + (513*x1) + (787968*x2)) % 262656)), tmp15, eviction_policy='evict_last', other=0.0)
        tmp17 = tl.full(tmp16.shape, 0.0, tmp16.dtype)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.full([1], 0, tl.int64)
        tmp20 = tmp19 >= tmp4
        tmp21 = tmp20 & tmp5
        tmp22 = tmp9 & tmp21
        tmp23 = (((-131584) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp24 = tmp23 < tmp13
        tmp25 = tmp24 & tmp22
        tmp26 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp25, eviction_policy='evict_last', other=0.0)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp22, tmp26, tmp27)
        tmp29 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp21, eviction_policy='evict_last', other=0.0)
        tmp30 = tl.where(tmp9, tmp28, tmp29)
        tmp31 = tl.full(tmp30.shape, 0.0, tmp30.dtype)
        tmp32 = tl.where(tmp21, tmp30, tmp31)
        tmp33 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp5, eviction_policy='evict_last', other=0.0)
        tmp34 = tl.where(tmp20, tmp32, tmp33)
        tmp35 = tl.where(tmp10, tmp18, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp5, tmp35, tmp36)
        tmp38 = tmp9 & tmp20
        tmp39 = tmp24 & tmp38
        tmp40 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp39, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp38, tmp40, tmp41)
        tmp43 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp20, eviction_policy='evict_last', other=0.0)
        tmp44 = tl.where(tmp9, tmp42, tmp43)
        tmp45 = tl.full(tmp44.shape, 0.0, tmp44.dtype)
        tmp46 = tl.where(tmp20, tmp44, tmp45)
        tmp48 = tl.where(tmp20, tmp46, tmp47)
        tmp49 = tl.where(tmp5, tmp37, tmp48)
        tmp50 = tmp0 >= tmp4
        tmp51 = tmp9 & tmp50
        tmp52 = (((-131584) + x0 + (513*x1) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp53 = tmp52 < tmp13
        tmp54 = tmp53 & tmp51
        tmp55 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp54, other=0.0)
        tmp56 = tl.full(tmp55.shape, 0.0, tmp55.dtype)
        tmp57 = tl.where(tmp51, tmp55, tmp56)
        tmp58 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), tmp50, other=0.0)
        tmp59 = tl.where(tmp9, tmp57, tmp58)
        tmp60 = tl.full(tmp59.shape, 0.0, tmp59.dtype)
        tmp61 = tl.where(tmp50, tmp59, tmp60)
        tmp63 = tl.where(tmp50, tmp61, tmp62)
        tmp64 = tl.where(tmp2, tmp49, tmp63)
        tl.store(out_ptr0 + (x4 + (131328*x3) + (525312*x2)), tmp64, None)


op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 6303744}, None)]
op251.unmet_dependencies = [MemoryDep('buf250', 525312*c0 + c1 + 393984, {c0: 48, c1: 131328}, None)]
op251.met_dependencies = []
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
    buf251.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (6303744, 1)
op251.sizes = ([48, 256, 513], [])
buf250_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
class op251_loop_body:
    var_ranges = {z0: 48, z1: 256, z2: 513}
    index0 = z2
    index1 = -z1 - z2 + 512
    index2 = z1 + 768
    index3 = z1 + z2 + 513
    index4 = 525312*z0 + 513*z1 + z2 + 393984
    index5 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf250', get_index_2)
        where = ops.where(lt, masked_subblock4, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index5')
        store = ops.store('buf251', get_index_3, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf250', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf250', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_3 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf250', get_index_2)
        where_1 = ops.where(lt, masked_subblock2, load)
        constant_4 = ops.constant(-inf, torch.float32)
        where_2 = ops.where(to_dtype, constant_4, where_1)
        return where_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf250', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf250', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
op251 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6303744
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 513
        x1 = (xindex // 513) % 256
        x2 = (xindex // 131328)
        x3 = xindex % 131328
        x4 = xindex
        tmp43 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), None)
        tmp0 = x0
        tmp1 = tl.full([1], 256, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = 512 + ((-1)*x0) + ((-1)*x1)
        tmp4 = tl.full([1], 0, tl.int64)
        tmp5 = tmp3 <= tmp4
        tmp6 = 1.0
        tmp7 = 0.0
        tmp8 = tl.where(tmp5, tmp6, tmp7)
        tmp9 = (tmp8 != 0)
        tmp10 = 768 + x1
        tmp11 = tmp10 < tmp1
        tmp12 = tmp11 & tmp2
        tmp13 = tl.full([1], 257, tl.int64)
        tmp14 = tmp0 < tmp13
        tmp15 = tmp14 & tmp12
        tmp16 = 513 + x0 + x1
        tmp17 = tmp16 <= tmp4
        tmp18 = tl.where(tmp17, tmp6, tmp7)
        tmp19 = (tmp18 != 0)
        tmp20 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp15, other=0.0)
        tmp21 = float("-inf")
        tmp22 = tl.where(tmp19, tmp21, tmp20)
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp15, tmp22, tmp23)
        tmp25 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp12, other=0.0)
        tmp26 = tl.where(tmp14, tmp24, tmp25)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp12, tmp26, tmp27)
        tmp29 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp2, other=0.0)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp31 = tl.where(tmp9, tmp21, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tmp34 = tmp14 & tmp11
        tmp35 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp34, other=0.0)
        tmp36 = tl.where(tmp19, tmp21, tmp35)
        tmp37 = tl.full(tmp36.shape, 0.0, tmp36.dtype)
        tmp38 = tl.where(tmp34, tmp36, tmp37)
        tmp39 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp11, other=0.0)
        tmp40 = tl.where(tmp14, tmp38, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp11, tmp40, tmp41)
        tmp44 = tl.where(tmp11, tmp42, tmp43)
        tmp45 = tl.where(tmp2, tmp33, tmp44)
        tl.store(out_ptr0 + (x4), tmp45, None)


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 4096}, None)]
op252.unmet_dependencies = []
op252.met_dependencies = []
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf252.users = [
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
    ]
]
op252.group.device = cuda:0
op252.group.iteration = (4096, 1)
op252.sizes = ([4096], [])
buf252_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op252_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(1.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf252', get_index, constant, None)
        return store
op252 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = 1.0
        tl.store(out_ptr0 + (x0), tmp0, None)


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 4096}, None)]
op253.unmet_dependencies = []
op253.met_dependencies = [MemoryDep('arg7_1', c0, {c0: 4096}, None)]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf253.users = [
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
    ]
]
op253.group.device = cuda:0
op253.group.iteration = (4096, 1)
op253.sizes = ([4096], [])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[4, 1024], stride=[1024, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op253_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        constant = ops.constant(0.0, torch.float32)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        ne_1 = ops.ne(load_1, constant_1)
        to_dtype = ops.to_dtype(ne_1, torch.float32, src_dtype = torch.bool)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(ne, constant_2, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf253', get_index_2, where, None)
        return store
op253 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.0
        tmp2 = tmp0 != tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp4, tmp3)
        tl.store(out_ptr0 + (x0), tmp5, None)


op254: SchedulerNode(ComputedBuffer)
op254.writes = [   MemoryDep('buf254', 525312*c0 + 513*c1 + 131328*c2 + c3, {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op254.unmet_dependencies = 
    [   MemoryDep('buf252', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3 + 656384, 512, 513), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf252', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 512, 513) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf252', ModularIndexing(513*c1 + c3 + 787712, 512, 513) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf253', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3, 1, 512), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf253', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 1, 512) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf253', ModularIndexing(513*c1 + c3 + 787712, 1, 512) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
    buf254.users = [
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
    ]
]
op254.group.device = cuda:0
op254.group.iteration = (2101248, 1)
op254.sizes = ([4, 256, 4, 513], [])
buf252_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
class op254_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 4, z3: 513}
    index0 = z0
    index1 = z3
    index2 = ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index3 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index4 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3, 1, 512)
    index5 = ModularIndexing(513*z1 + z3 + 787712, 512, 513)
    index6 = ModularIndexing(513*z1 + z3 + 787712, 512, 513) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index7 = ModularIndexing(513*z1 + z3 + 787712, 1, 512) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index8 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513)
    index9 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index10 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 1, 512) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index11 = 525312*z0 + 513*z1 + 131328*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index11')
        store = ops.store('buf254', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf253', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf253', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index10')
        load_1 = ops.load('buf253', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op254 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2101248
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 525312)
        x0 = xindex % 513
        x2 = (xindex // 2052) % 256
        x1 = (xindex // 513) % 4
        tmp0 = x3
        tmp1 = tl.full([1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x0 + (513*x2)) // 512) % 513
        tmp7 = tl.full([1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + (((656384 + x0 + (513*x2)) // 512) % 513)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.load(in_ptr1 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + ((x0 + (513*x2)) % 512)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp12 = tmp10 * tmp11
        tmp13 = tl.full(tmp12.shape, 0.0, tmp12.dtype)
        tmp14 = tl.where(tmp9, tmp12, tmp13)
        tmp15 = tl.full(tmp14.shape, 0.0, tmp14.dtype)
        tmp16 = tl.where(tmp5, tmp14, tmp15)
        tmp17 = tl.full([1], 3, tl.int64)
        tmp18 = tmp17 < tmp17
        tmp19 = tmp5 & tmp18
        tmp20 = ((787712 + x0 + (513*x2)) // 512) % 513
        tmp21 = tmp20 < tmp7
        tmp22 = tmp21 & tmp19
        tmp23 = tl.load(in_ptr0 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + (((787712 + x0 + (513*x2)) // 512) % 513)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp24 = tl.load(in_ptr1 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + ((787712 + x0 + (513*x2)) % 512)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp25 = tmp23 * tmp24
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp22, tmp25, tmp26)
        tmp28 = tl.full(tmp27.shape, 0.0, tmp27.dtype)
        tmp29 = tl.where(tmp19, tmp27, tmp28)
        tmp30 = 0.0
        tmp31 = tl.where(tmp5, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp18, tmp31, tmp32)
        tmp34 = tl.where(tmp18, tmp33, tmp30)
        tmp35 = tl.where(tmp5, tmp16, tmp34)
        tmp36 = tmp0 < tmp17
        tmp37 = tmp5 & tmp36
        tmp38 = (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513
        tmp39 = tmp38 < tmp7
        tmp40 = tmp39 & tmp37
        tmp41 = tl.load(in_ptr0 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + ((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513)), tmp40, eviction_policy='evict_last', other=0.0)
        tmp42 = tl.load(in_ptr1 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) % 512)), tmp40, other=0.0)
        tmp43 = tmp41 * tmp42
        tmp44 = tl.full(tmp43.shape, 0.0, tmp43.dtype)
        tmp45 = tl.where(tmp40, tmp43, tmp44)
        tmp46 = tl.full(tmp45.shape, 0.0, tmp45.dtype)
        tmp47 = tl.where(tmp37, tmp45, tmp46)
        tmp48 = tl.where(tmp5, tmp47, tmp30)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp36, tmp48, tmp49)
        tmp51 = tl.where(tmp36, tmp50, tmp30)
        tmp52 = tl.where(tmp2, tmp35, tmp51)
        tl.store(out_ptr0 + (x0 + (513*x2) + (131328*x1) + (525312*x3)), tmp52, None)


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 525312}, None)]
op255.unmet_dependencies = 
    [   MemoryDep('buf252', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf252', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf253', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf253', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf254', c0, {c0: 525312}, None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
    buf255.users = [
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
    ]
]
op255.group.device = cuda:0
op255.group.iteration = (525312, 1)
op255.sizes = ([4, 256, 513], [])
buf252_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
class op255_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 513}
    index0 = z1
    index1 = z2
    index2 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513)
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index5 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index7 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index8 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_1 = ops.constant(0, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_1, constant_2)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf254', get_index_1)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index8')
        store = ops.store('buf255', get_index_2, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf253', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf253', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf254', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index8')
        load = ops.load('buf254', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf253', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf254', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
op255 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 256
        x2 = xindex
        y1 = (yindex // 256)
        y3 = yindex
        tmp56 = tl.load(in_ptr2 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 1, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tmp3 >= tmp1
        tmp5 = tl.full([1, 1], 256, tl.int64)
        tmp6 = tmp3 < tmp5
        tmp7 = tmp4 & tmp6
        tmp8 = tmp7 & tmp2
        tmp9 = (((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp10 = tl.full([1, 1], 512, tl.int64)
        tmp11 = tmp9 < tmp10
        tmp12 = tmp11 & tmp8
        tmp13 = tl.load(in_ptr0 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp14 = tl.load(in_ptr1 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + (((-256) + x2 + (513*y0) + (787968*y1)) % 512)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp15 = tmp13 * tmp14
        tmp16 = tl.full(tmp15.shape, 0.0, tmp15.dtype)
        tmp17 = tl.where(tmp12, tmp15, tmp16)
        tmp18 = tl.full(tmp17.shape, 0.0, tmp17.dtype)
        tmp19 = tl.where(tmp8, tmp17, tmp18)
        tmp20 = tl.full([1, 1], 0, tl.int64)
        tmp21 = tmp20 >= tmp1
        tmp22 = tmp21 & tmp2
        tmp23 = tmp6 & tmp22
        tmp24 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp25 = tmp24 < tmp10
        tmp26 = tmp25 & tmp23
        tmp27 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tmp27 * tmp28
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp26, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp23, tmp31, tmp32)
        tmp34 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp22 & xmask, eviction_policy='evict_last', other=0.0)
        tmp35 = tl.where(tmp6, tmp33, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp22, tmp35, tmp36)
        tmp38 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp39 = tl.where(tmp21, tmp37, tmp38)
        tmp40 = tl.where(tmp7, tmp19, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp2, tmp40, tmp41)
        tmp43 = tmp6 & tmp21
        tmp44 = tmp25 & tmp43
        tmp45 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp47 = tmp45 * tmp46
        tmp48 = tl.full(tmp47.shape, 0.0, tmp47.dtype)
        tmp49 = tl.where(tmp44, tmp47, tmp48)
        tmp50 = tl.full(tmp49.shape, 0.0, tmp49.dtype)
        tmp51 = tl.where(tmp43, tmp49, tmp50)
        tmp52 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp21 & xmask, eviction_policy='evict_last', other=0.0)
        tmp53 = tl.where(tmp6, tmp51, tmp52)
        tmp54 = tl.full(tmp53.shape, 0.0, tmp53.dtype)
        tmp55 = tl.where(tmp21, tmp53, tmp54)
        tmp57 = tl.where(tmp21, tmp55, tmp56)
        tmp58 = tl.where(tmp2, tmp42, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 263168}, None)]
op256.unmet_dependencies = 
    [   MemoryDep('buf252', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf253', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf254', 513*c0 + c1, {c0: 1024, c1: 257}, None),
        MemoryDep('buf255', 513*c0 + c1, {c0: 1024, c1: 257}, None)]
op256.met_dependencies = []
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
    buf256.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (263168, 1)
op256.sizes = ([4, 256, 257], [])
buf255_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
class op256_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 257}
    index0 = z1 + z2 - 255
    index1 = 131328*z0 + 513*z1 + z2
    index2 = z2
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index5 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index6 = 65792*z0 + 257*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        constant_3 = ops.constant(0, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq = ops.eq(constant_3, constant_4)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf255', get_index_1)
        constant_5 = ops.constant(0, torch.int64)
        constant_6 = ops.constant(1, torch.int64)
        ge = ops.ge(constant_5, constant_6)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf254', get_index_2)
        where_1 = ops.where(ge, masked_subblock1, load_1)
        where_2 = ops.where(eq, load, where_1)
        constant_7 = ops.constant(-inf, torch.float32)
        where_3 = ops.where(to_dtype, constant_7, where_2)
        get_index_3 = self.get_index('index6')
        store = ops.store('buf256', get_index_3, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('buf253', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf254', get_index_1)
        where = ops.where(lt, masked_subblock2, load)
        return where
op256 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 257
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 256
        y3 = yindex
        y1 = (yindex // 256)
        tmp9 = tl.load(in_ptr0 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr3 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = (-255) + x2 + y0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 <= tmp1
        tmp3 = 1.0
        tmp4 = 0.0
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tmp6 = (tmp5 != 0)
        tmp7 = tl.full([1, 1], 0, tl.int32)
        tmp8 = tmp7 == tmp7
        tmp10 = tl.full([1, 1], 1, tl.int64)
        tmp11 = tmp1 >= tmp10
        tmp12 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp13 = tl.full([1, 1], 256, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp17 = tl.full([1, 1], 512, tl.int64)
        tmp18 = tmp16 < tmp17
        tmp19 = tmp18 & tmp15
        tmp20 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tmp20 * tmp21
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp19, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp15, tmp24, tmp25)
        tmp27 = tl.load(in_ptr3 + (x2 + (513*y3)), tmp11 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.where(tmp14, tmp26, tmp27)
        tmp29 = tl.full(tmp28.shape, 0.0, tmp28.dtype)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp32 = tl.where(tmp11, tmp30, tmp31)
        tmp33 = tl.where(tmp8, tmp9, tmp32)
        tmp34 = float("-inf")
        tmp35 = tl.where(tmp6, tmp34, tmp33)
        tl.store(out_ptr0 + (x2 + (257*y3)), tmp35, xmask)


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 2101248}, None)]
op257.unmet_dependencies = 
    [   MemoryDep('buf252', ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf253', ModularIndexing(c2 + 513*ModularIndexing(c1, 1, 256), 1, 512) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf254', 131328*c0 + c2 + 525312*((c1//256)) + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf255', 131328*c0 + c2 + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf256', 65792*c0 + 257*c1 + c2, {c0: 4, c1: 1024, c2: 513}, None)]
op257.met_dependencies = []
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
    buf257.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (2101248, 1)
op257.sizes = ([4, 1024, 513], [])
buf256_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
class op257_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 513}
    index0 = z1
    index1 = z2
    index2 = 65792*z0 + 257*z1 + z2
    index3 = (z1//256)
    index4 = 131328*z0 + z2 + 513*ModularIndexing(z1, 1, 256)
    index5 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index7 = ModularIndexing(z2 + 513*ModularIndexing(z1, 1, 256), 1, 512) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index8 = 131328*z0 + z2 + 525312*((z1//256)) + 513*ModularIndexing(z1, 1, 256)
    index9 = 525312*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf255', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock6 = self.masked_subblock6(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf254', get_index_4)
        where = ops.where(ge, masked_subblock6, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_5 = self.get_index('index9')
        store = ops.store('buf257', get_index_5, where_2, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf256', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf253', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf254', get_index_1)
        where = ops.where(lt, masked_subblock4, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf255', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf254', get_index_4)
        where = ops.where(ge, masked_subblock3, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock2, where_1)
        return where_2
    def masked_subblock8(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf253', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf254', get_index_1)
        where = ops.where(lt, masked_subblock7, load)
        return where
op257 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 11, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 4096
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 1024
        x2 = xindex
        y1 = (yindex // 1024)
        y3 = yindex
        tmp40 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), xmask, eviction_policy='evict_last')
        tmp55 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 256, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tl.full([1, 1], 257, tl.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp5 & tmp2
        tmp7 = tl.load(in_ptr0 + (x2 + (257*y0) + (65792*y1)), tmp6 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tl.broadcast_to((y0 // 256), [XBLOCK, YBLOCK])
        tmp9 = tl.full([1, 1], 0, tl.int32)
        tmp10 = tmp8 == tmp9
        tmp11 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp12 = tl.full([1, 1], 1, tl.int64)
        tmp13 = tmp8 >= tmp12
        tmp14 = tmp13 & tmp2
        tmp15 = tmp3 < tmp1
        tmp16 = tmp15 & tmp14
        tmp17 = (((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513
        tmp18 = tl.full([1, 1], 512, tl.int64)
        tmp19 = tmp17 < tmp18
        tmp20 = tmp19 & tmp16
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp23 = tmp21 * tmp22
        tmp24 = tl.full(tmp23.shape, 0.0, tmp23.dtype)
        tmp25 = tl.where(tmp20, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp16, tmp25, tmp26)
        tmp28 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp14 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tl.where(tmp15, tmp27, tmp28)
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp14, tmp29, tmp30)
        tmp32 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp33 = tl.where(tmp13, tmp31, tmp32)
        tmp34 = tl.where(tmp10, tmp11, tmp33)
        tmp35 = tl.where(tmp5, tmp7, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp2, tmp35, tmp36)
        tmp38 = (y0 // 256)
        tmp39 = tmp38 == tmp9
        tmp41 = tmp38 >= tmp12
        tmp42 = tmp15 & tmp41
        tmp43 = tmp19 & tmp42
        tmp44 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp45 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tmp44 * tmp45
        tmp47 = tl.full(tmp46.shape, 0.0, tmp46.dtype)
        tmp48 = tl.where(tmp43, tmp46, tmp47)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp42, tmp48, tmp49)
        tmp51 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp41 & xmask, eviction_policy='evict_last', other=0.0)
        tmp52 = tl.where(tmp15, tmp50, tmp51)
        tmp53 = tl.full(tmp52.shape, 0.0, tmp52.dtype)
        tmp54 = tl.where(tmp41, tmp52, tmp53)
        tmp56 = tl.where(tmp41, tmp54, tmp55)
        tmp57 = tl.where(tmp39, tmp40, tmp56)
        tmp58 = tl.where(tmp2, tmp37, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op258: SchedulerNode(ComputedBuffer)
op258.writes = [   MemoryDep('buf258', 6324224*c0 + 513*c1 + 6176*c2 + c3, {c0: 4, c1: 12, c2: 1024, c3: 513}, None)]
op258.unmet_dependencies = 
    [   MemoryDep('buf250', 525312*c0 + 513*c1 + c2 + 131328*((ModularIndexing(c1, 1, 256)//256)), {c0: 48, c1: 1024, c2: 513}, None),
        MemoryDep('buf251', 131328*c0 + c1 - 393984, {c0: 48, c1: 525312}, None),
        MemoryDep('buf257', 525312*c0 + c2, {c0: 4, c1: 12, c2: 525312}, None)]
op258.met_dependencies = []
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
    buf258.users = [
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
    ]
]
op258.group.device = cuda:0
op258.group.iteration = (25214976, 1)
op258.sizes = ([4, 12, 1024, 513], [])
buf251_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
class op258_loop_body:
    var_ranges = {z0: 4, z1: 12, z2: 1024, z3: 513}
    index0 = z2
    index1 = 1575936*z0 + 131328*z1 + 513*z2 + z3 - 393984
    index2 = z2 + 256*((ModularIndexing(z2, 1, 256)//256))
    index3 = z3
    index4 = z2 + z3 + 256*((ModularIndexing(z2, 1, 256)//256)) - 255
    index5 = 6303744*z0 + 525312*z1 + 513*z2 + z3 + 131328*((ModularIndexing(z2, 1, 256)//256))
    index6 = -z2 - z3 + 1280
    index7 = 525312*z0 + 513*z2 + z3
    index8 = 6324224*z0 + 513*z1 + 6176*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(768, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index5')
        load = ops.load('buf250', get_index_2)
        where = ops.where(lt, masked_subblock2, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_4 = self.get_index('index7')
        load_1 = ops.load('buf257', get_index_4)
        where_2 = ops.where(ge_1, masked_subblock4, load_1)
        add = ops.add(where_1, where_2)
        get_index_5 = self.get_index('index8')
        store = ops.store('buf258', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf251', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf250', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf250', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf257', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(ge, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf257', get_index_1)
        where = ops.where(ge, masked_subblock5, load)
        return where
op258 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 513) % 1024
        x4 = xindex % 525312
        x5 = (xindex // 525312)
        x0 = xindex % 513
        x3 = (xindex // 6303744)
        x2 = (xindex // 525312) % 12
        tmp27 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), None)
        tmp44 = tl.load(in_ptr2 + (x4 + (525312*x3)), None, eviction_policy='evict_last')
        tmp0 = x1
        tmp1 = tl.full([1], 768, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.load(in_ptr0 + ((-393984) + x4 + (131328*x5)), tmp2, other=0.0)
        tmp4 = x1 + (256*((x1 % 256) // 256))
        tmp5 = tl.full([1], 256, tl.int64)
        tmp6 = tmp4 < tmp5
        tmp7 = x0
        tmp8 = tl.full([1], 257, tl.int64)
        tmp9 = tmp7 < tmp8
        tmp10 = tmp9 & tmp6
        tmp11 = (-255) + x0 + x1 + (256*((x1 % 256) // 256))
        tmp12 = tl.full([1], 0, tl.int64)
        tmp13 = tmp11 <= tmp12
        tmp14 = 1.0
        tmp15 = 0.0
        tmp16 = tl.where(tmp13, tmp14, tmp15)
        tmp17 = (tmp16 != 0)
        tmp18 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp10, other=0.0)
        tmp19 = float("-inf")
        tmp20 = tl.where(tmp17, tmp19, tmp18)
        tmp21 = tl.full(tmp20.shape, 0.0, tmp20.dtype)
        tmp22 = tl.where(tmp10, tmp20, tmp21)
        tmp23 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp6, other=0.0)
        tmp24 = tl.where(tmp9, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp6, tmp24, tmp25)
        tmp28 = tl.where(tmp6, tmp26, tmp27)
        tmp29 = tl.where(tmp2, tmp3, tmp28)
        tmp30 = tmp7 >= tmp5
        tmp31 = tmp30 & tmp2
        tmp32 = 1280 + ((-1)*x0) + ((-1)*x1)
        tmp33 = tmp32 <= tmp12
        tmp34 = tl.where(tmp33, tmp14, tmp15)
        tmp35 = (tmp34 != 0)
        tmp36 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp31, eviction_policy='evict_last', other=0.0)
        tmp37 = tl.where(tmp35, tmp19, tmp36)
        tmp38 = tl.full(tmp37.shape, 0.0, tmp37.dtype)
        tmp39 = tl.where(tmp31, tmp37, tmp38)
        tmp40 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.where(tmp30, tmp39, tmp40)
        tmp42 = tl.full(tmp41.shape, 0.0, tmp41.dtype)
        tmp43 = tl.where(tmp2, tmp41, tmp42)
        tmp45 = tl.where(tmp2, tmp43, tmp44)
        tmp46 = tmp29 + tmp45
        tl.store(out_ptr0 + (x0 + (513*x2) + (6176*x1) + (6324224*x3)), tmp46, None)


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 49152}, None)]
op259.unmet_dependencies = [MemoryDep('buf258', 6176*c0 + c1, {c0: 4096, c1: 6156}, None)]
op259.met_dependencies = []
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
    ]
]
op259.group.device = cuda:0
op259.group.iteration = (49152, 513)
op259.sizes = ([4096, 12], [513])
buf258_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op259_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf259', get_index_1, reduction)
        return store_reduction
op259 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        x3 = xindex
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp2, None)


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 49152}, None)]
op260.unmet_dependencies = 
    [   MemoryDep('buf258', 6176*c0 + c1, {c0: 4096, c1: 6156}, None),
        MemoryDep('buf259', c0, {c0: 49152}, None)]
op260.met_dependencies = []
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf260.users = [NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (49152, 513)
op260.sizes = ([4096, 12], [513])
buf258_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf260_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op260_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf259', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf260', get_index_2, reduction)
        return store_reduction
op260 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        x3 = xindex
        tmp1 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp5, None)


op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 3145728}, None)]
op261.unmet_dependencies = [MemoryDep('buf239', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op261.met_dependencies = []
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf261.users = [NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (3145728, 1)
op261.sizes = ([1024, 4, 768], [])
buf239_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op261_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf261', get_index_1, load, None)
        return store
op261 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op262: ExternKernelSchedulerNode(ExternKernelOut)
op262.writes = [StarDep(name='buf262', mode=None)]
op262.unmet_dependencies = [StarDep(name='buf261', mode=None)]
op262.met_dependencies = [StarDep(name='arg103_1', mode=None)]
op262.outputs = [
    buf262: ExternKernelOut
    buf262.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf262.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op262.node.kernel = extern_kernels.mm


op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 4718592}, None)]
op263.unmet_dependencies = [   MemoryDep('buf262', 64*c0 + 3072*c1 + c2 - 786432, {c0: 48, c1: 1536, c2: 64}, None)]
op263.met_dependencies = [   MemoryDep('arg104_1', c2 + 64*ModularIndexing(c0, 1, 12), {c0: 48, c1: 1536, c2: 64}, None)]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
    buf263.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (4718592, 1)
op263.sizes = ([48, 1536, 64], [])
buf262_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
class op263_loop_body:
    var_ranges = {z0: 48, z1: 1536, z2: 64}
    index0 = z1 - 256
    index1 = 64*z0 + 3072*z1 + z2 - 786432
    index2 = z2 + 64*ModularIndexing(z0, 1, 12)
    index3 = 98304*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1024, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, -1.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf263', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf262', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg104_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op263 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 1536
        x0 = xindex % 64
        x2 = (xindex // 98304)
        x3 = xindex
        tmp0 = (-256) + x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 1024, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-786432) + x0 + (64*x2) + (3072*x1)), tmp5, other=0.0)
        tmp7 = tl.load(in_ptr1 + (x0 + (64*(x2 % 12))), tmp5, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, -1.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op264: SchedulerNode(ComputedBuffer)
op264.writes = [   MemoryDep('buf264', 770*c0 + 788480*c1 + c2, {c0: 1024, c1: 48, c2: 770}, None)]
op264.unmet_dependencies = 
    [   MemoryDep('buf258', 6176*c0 + c2 + 6324224*((c1//12)) + 6324224*((ModularIndexing(c1, 1, 12)//12)) + 513*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 770}, None),
        MemoryDep('buf259', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None),
        MemoryDep('buf260', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None)]
op264.met_dependencies = [MemoryDep('arg8_1', c0 + 1024*((c1//12)), {c0: 1024, c1: 48}, None)]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
    buf264.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (37847040, 1)
op264.sizes = ([1024, 48, 770], [])
arg8_1_layout = FixedLayout('cuda', torch.bool, size=[4, 1024], stride=[1024, 1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf260_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf264_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
class op264_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 770}
    index0 = z2
    index1 = z0 + 1024*((z1//12))
    index2 = 6176*z0 + z2 + 6324224*((z1//12)) + 6324224*((ModularIndexing(z1, 1, 12)//12)) + 513*ModularIndexing(z1, 1, 12)
    index3 = 12*z0 + 12288*((z1//12)) + ModularIndexing(z1, 1, 12)
    index4 = 770*z0 + 788480*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(513, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index4')
        store = ops.store('buf264', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg8_1', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf258', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('buf259', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf260', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(load, constant, truediv)
        return where
op264 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 37847040
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 770
        x1 = (xindex // 770) % 48
        x2 = (xindex // 36960)
        tmp0 = x0
        tmp1 = tl.full([1], 513, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.load(in_ptr0 + (x2 + (1024*(x1 // 12))), tmp2, eviction_policy='evict_last', other=0.0).to(tl.int1)
        tmp4 = tl.load(in_ptr1 + (x0 + (513*(x1 % 12)) + (6176*x2) + (6324224*(x1 // 12)) + (6324224*((x1 % 12) // 12))), tmp2, other=0.0)
        tmp5 = tl.load(in_ptr2 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp4 - tmp5
        tmp7 = tl_math.exp(tmp6)
        tmp8 = tl.load(in_ptr3 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp9 = tmp7 / tmp8
        tmp10 = 0.0
        tmp11 = tl.where(tmp3, tmp10, tmp9)
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp2, tmp11, tmp12)
        tl.store(out_ptr0 + (x0 + (770*x2) + (788480*x1)), tmp13, None)


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 9437184}, None)]
op265.unmet_dependencies = [   MemoryDep('buf263', 98304*c0 + 16384*c1 + c2, {c0: 48, c1: 4, c2: 49152}, None)]
op265.met_dependencies = []
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (9437184, 1)
op265.sizes = ([48, 4, 49152], [])
buf263_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
class op265_loop_body:
    var_ranges = {z0: 48, z1: 4, z2: 49152}
    index0 = 98304*z0 + 16384*z1 + z2
    index1 = 196608*z0 + 49152*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf265', get_index_1, load, None)
        return store
op265 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 9437184
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 49152
        x1 = (xindex // 49152) % 4
        x2 = (xindex // 196608)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (16384*x1) + (98304*x2)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op266: ExternKernelSchedulerNode(ExternKernelOut)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf264', mode=None), StarDep(name='buf265', mode=None)]
op266.met_dependencies = []
op266.outputs = [
    buf266: ExternKernelOut
    buf266.layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
    buf266.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op266.node.kernel = extern_kernels.bmm


op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 3145728}, None)]
op267.unmet_dependencies = [   MemoryDep('buf266', 786432*c0 + 64*c1 + 65536*((c2//64)) + ModularIndexing(c2, 1, 64), {c0: 4, c1: 1024, c2: 768}, None)]
op267.met_dependencies = []
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf267.users = [NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
]
op267.group.device = cuda:0
op267.group.iteration = (3145728, 1)
op267.sizes = ([4, 1024, 768], [])
buf266_layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op267_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 768}
    index0 = 786432*z0 + 64*z1 + 65536*((z2//64)) + ModularIndexing(z2, 1, 64)
    index1 = 786432*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf267', get_index_1, load, None)
        return store
op267 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 1024
        x2 = (xindex // 786432)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + ((64*x1) + (65536*(x0 // 64)) + (786432*x2) + (x0 % 64)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op268: ExternKernelSchedulerNode(ExternKernelOut)
op268.writes = [StarDep(name='buf268', mode=None)]
op268.unmet_dependencies = [StarDep(name='buf267', mode=None)]
op268.met_dependencies = [StarDep(name='arg105_1', mode=None)]
op268.outputs = [
    buf268: ExternKernelOut
    buf268.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf268.users = [
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False),
    ]
]
op268.node.kernel = extern_kernels.mm


op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 4096}, None)]
op269.unmet_dependencies = 
    [   MemoryDep('buf239', c0, {c0: 3145728}, None),
        MemoryDep('buf268', c0, {c0: 3145728}, None)]
op269.met_dependencies = [MemoryDep('arg106_1', c1, {c0: 4096, c1: 768}, None)]
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf269.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (4096, 768)
op269.sizes = ([4096], [768])
buf268_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op269_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf239', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf269', get_index_3, getitem)
        return store_reduction
op269 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 4096}, None)]
op270.unmet_dependencies = 
    [   MemoryDep('buf239', c0, {c0: 3145728}, None),
        MemoryDep('buf268', c0, {c0: 3145728}, None)]
op270.met_dependencies = [MemoryDep('arg106_1', c1, {c0: 4096, c1: 768}, None)]
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf270.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (4096, 768)
op270.sizes = ([4096], [768])
buf268_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf270_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op270_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf239', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf270', get_index_3, getitem_1)
        return store_reduction
op270 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 3145728}, None)]
op272.unmet_dependencies = 
    [   MemoryDep('buf239', c0, {c0: 3145728}, None),
        MemoryDep('buf268', c0, {c0: 3145728}, None),
        MemoryDep('buf269', c0, {c0: 4096}, None),
        MemoryDep('buf270', c0, {c0: 4096}, None)]
op272.met_dependencies = 
    [   MemoryDep('arg106_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg107_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg108_1', c1, {c0: 4096, c1: 768}, None)]
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf272.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False),
    ]
]
op272.group.device = cuda:0
op272.group.iteration = (3145728, 1)
op272.sizes = ([4096, 768], [])
buf268_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf270_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op272_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf239', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf269', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf270', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg107_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg108_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf272', get_index_7, add_3, None)
        return store
op272 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op273: ExternKernelSchedulerNode(ExternKernelOut)
op273.writes = [StarDep(name='buf273', mode=None)]
op273.unmet_dependencies = [StarDep(name='buf272', mode=None)]
op273.met_dependencies = [StarDep(name='arg109_1', mode=None)]
op273.outputs = [
    buf273: ExternKernelOut
    buf273.layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
    buf273.users = [NodeUser(node=SchedulerNode(name='op274'), can_inplace=True, is_weak=False)]
]
op273.node.kernel = extern_kernels.mm


op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 12582912}, None)]
op274.unmet_dependencies = [MemoryDep('buf273', c0, {c0: 12582912}, None)]
op274.met_dependencies = [MemoryDep('arg110_1', c1, {c0: 4096, c1: 3072}, None)]
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
    buf274.users = [NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (12582912, 1)
op274.sizes = ([4096, 3072], [])
buf273_layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
class op274_loop_body:
    var_ranges = {z0: 4096, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg110_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf273', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg110_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf274', get_index_4, mul_2, None)
        return store
op274 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op275: ExternKernelSchedulerNode(ExternKernelOut)
op275.writes = [StarDep(name='buf275', mode=None)]
op275.unmet_dependencies = [StarDep(name='buf274', mode=None)]
op275.met_dependencies = [StarDep(name='arg111_1', mode=None)]
op275.outputs = [
    buf275: ExternKernelOut
    buf275.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf275.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False),
    ]
]
op275.node.kernel = extern_kernels.mm


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 4096}, None)]
op276.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 3145728}, None),
        MemoryDep('buf275', c0, {c0: 3145728}, None)]
op276.met_dependencies = [MemoryDep('arg112_1', c1, {c0: 4096, c1: 768}, None)]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf276.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (4096, 768)
op276.sizes = ([4096], [768])
buf275_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op276_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg112_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf272', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf276', get_index_3, getitem)
        return store_reduction
op276 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 4096}, None)]
op277.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 3145728}, None),
        MemoryDep('buf275', c0, {c0: 3145728}, None)]
op277.met_dependencies = [MemoryDep('arg112_1', c1, {c0: 4096, c1: 768}, None)]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf277.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (4096, 768)
op277.sizes = ([4096], [768])
buf275_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op277_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg112_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf272', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf277', get_index_3, getitem_1)
        return store_reduction
op277 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 3145728}, None)]
op279.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 3145728}, None),
        MemoryDep('buf275', c0, {c0: 3145728}, None),
        MemoryDep('buf276', c0, {c0: 4096}, None),
        MemoryDep('buf277', c0, {c0: 4096}, None)]
op279.met_dependencies = 
    [   MemoryDep('arg112_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg113_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg114_1', c1, {c0: 4096, c1: 768}, None)]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf279.users = [
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False),
    ]
]
op279.group.device = cuda:0
op279.group.iteration = (3145728, 1)
op279.sizes = ([4096, 768], [])
buf275_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf277_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op279_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg112_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf272', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf276', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf277', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg113_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg114_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf279', get_index_7, add_3, None)
        return store
op279 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 3145728}, None)]
op280.unmet_dependencies = [MemoryDep('buf279', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op280.met_dependencies = []
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf280.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op280.group.device = cuda:0
op280.group.iteration = (3145728, 1)
op280.sizes = ([1024, 4, 768], [])
buf279_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf280_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op280_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf280', get_index_1, load, None)
        return store
op280 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op281: ExternKernelSchedulerNode(ExternKernelOut)
op281.writes = [StarDep(name='buf281', mode=None)]
op281.unmet_dependencies = [StarDep(name='buf280', mode=None)]
op281.met_dependencies = [StarDep(name='arg115_1', mode=None)]
op281.outputs = [
    buf281: ExternKernelOut
    buf281.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf281.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=True, is_weak=False)]
]
op281.node.kernel = extern_kernels.mm


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 3145728}, None)]
op282.unmet_dependencies = [MemoryDep('buf281', c0, {c0: 3145728}, None)]
op282.met_dependencies = [   MemoryDep('arg116_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf282.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (3145728, 1)
op282.sizes = ([1024, 48, 64], [])
buf281_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op282_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg116_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf282', get_index_2, mul, None)
        return store
op282 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x3), tmp4, None)


op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 3145728}, None)]
op283.unmet_dependencies = [MemoryDep('buf279', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op283.met_dependencies = []
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf283.users = [NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op283.group.device = cuda:0
op283.group.iteration = (3145728, 1)
op283.sizes = ([1024, 4, 768], [])
buf279_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op283_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf283', get_index_1, load, None)
        return store
op283 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op284: ExternKernelSchedulerNode(ExternKernelOut)
op284.writes = [StarDep(name='buf284', mode=None)]
op284.unmet_dependencies = [StarDep(name='buf283', mode=None)]
op284.met_dependencies = [StarDep(name='arg117_1', mode=None)]
op284.outputs = [
    buf284: ExternKernelOut
    buf284.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf284.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False)]
]
op284.node.kernel = extern_kernels.mm


op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 3145728}, None)]
op285.unmet_dependencies = [MemoryDep('buf284', c0, {c0: 3145728}, None)]
op285.met_dependencies = [   MemoryDep('arg118_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf285.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (3145728, 1)
op285.sizes = ([1024, 48, 64], [])
buf284_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op285_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf285', get_index_2, add, None)
        return store
op285 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x3), tmp2, None)


op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 4718592}, None)]
op286.unmet_dependencies = [   MemoryDep('buf282', 64*c0 + 786432*c1 + 3072*c2 + c3, {c0: 48, c1: 3, c2: 512, c3: 64}, None)]
op286.met_dependencies = []
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
    buf286.users = [NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op286.group.device = cuda:0
op286.group.iteration = (4718592, 1)
op286.sizes = ([48, 3, 512, 64], [])
buf282_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf286_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
class op286_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 512, z3: 64}
    index0 = 64*z0 + 786432*z1 + 3072*z2 + z3
    index1 = 98304*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf282', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf286', get_index_1, load, None)
        return store
op286 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 3
        x3 = (xindex // 98304)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x3) + (3072*x1) + (786432*x2)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 4718592}, None)]
op287.unmet_dependencies = [   MemoryDep('buf285', 64*c0 + 786432*c1 + c2 + 3072*c3, {c0: 48, c1: 3, c2: 64, c3: 512}, None)]
op287.met_dependencies = []
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
    buf287.users = [NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (4718592, 1)
op287.sizes = ([48, 3, 64, 512], [])
buf285_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
class op287_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 64, z3: 512}
    index0 = 64*z0 + 786432*z1 + z2 + 3072*z3
    index1 = 98304*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf287', get_index_1, load, None)
        return store
op287 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 9216
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 3
        y2 = (yindex // 192)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (3072*x3) + (786432*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op288: ExternKernelSchedulerNode(ExternKernelOut)
op288.writes = [StarDep(name='buf288', mode=None)]
op288.unmet_dependencies = [StarDep(name='buf286', mode=None), StarDep(name='buf287', mode=None)]
op288.met_dependencies = []
op288.outputs = [
    buf288: ExternKernelOut
    buf288.layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
    buf288.users = [
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
    ]
]
op288.node.kernel = extern_kernels.bmm


op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', 24640*c0 + c1, {c0: 1024, c1: 24624}, None)]
op289.unmet_dependencies = 
    [   MemoryDep('buf288', 786432*c2 + 262144*(((513*c0 + c3 + 656384)//262656)) + 786432*(((513*c0 + c3 + 656384)//787968)) + ModularIndexing(513*c0 + c3, 1, 512) + 512*ModularIndexing(513*c0 + c3 + 656384, 512, 513), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf288', ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 262656, 144), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf288', ModularIndexing(513*c0 + c3 + 787712, 1, 262656) + 262144*ModularIndexing(513*c0 + c3 + 787712, 262656, 3) + 786432*ModularIndexing(513*c0 + 787968*c2 + c3 + 787712, 787968, 48), {c0: 256, c1: 4, c2: 48, c3: 513}, None)]
op289.met_dependencies = []
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
    buf289.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op289.group.device = cuda:0
op289.group.iteration = (25214976, 1)
op289.sizes = ([256, 4, 48, 513], [])
buf288_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf289_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
class op289_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 48, z3: 513}
    index0 = z1
    index1 = z3
    index2 = ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index3 = 786432*z2 + 262144*(((513*z0 + z3 + 656384)//262656)) + 786432*(((513*z0 + z3 + 656384)//787968)) + ModularIndexing(513*z0 + z3, 1, 512) + 512*ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index4 = ModularIndexing(513*z0 + z3 + 787712, 512, 513)
    index5 = ModularIndexing(513*z0 + z3 + 787712, 1, 262656) + 262144*ModularIndexing(513*z0 + z3 + 787712, 262656, 3) + 786432*ModularIndexing(513*z0 + 787968*z2 + z3 + 787712, 787968, 48)
    index6 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 512, 513)
    index7 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 262656, 144)
    index8 = 98560*z0 + 24640*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index8')
        store = ops.store('buf289', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf288', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf288', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf288', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op289 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[256, 131072], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 256
        xnumel = 98496
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = (xindex // 24624)
        x1 = xindex % 513
        y0 = yindex
        x2 = (xindex // 513) % 48
        x5 = xindex % 24624
        tmp0 = x3
        tmp1 = tl.full([1, 1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1, 1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x1 + (513*y0)) // 512) % 513
        tmp7 = tl.full([1, 1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((512*(((656384 + x1 + (513*y0)) // 512) % 513)) + (262144*((656384 + x1 + (513*y0)) // 262656)) + (786432*x2) + (786432*((656384 + x1 + (513*y0)) // 787968)) + ((x1 + (513*y0)) % 512)), tmp9 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.full(tmp10.shape, 0.0, tmp10.dtype)
        tmp12 = tl.where(tmp5, tmp10, tmp11)
        tmp13 = tl.full([1, 1], 3, tl.int64)
        tmp14 = tmp13 < tmp13
        tmp15 = tl.broadcast_to(x1, [XBLOCK, YBLOCK])
        tmp16 = tmp15 >= tmp4
        tmp17 = tmp16 & tmp14
        tmp18 = ((787712 + x1 + (513*y0)) // 512) % 513
        tmp19 = tmp18 < tmp7
        tmp20 = tmp19 & tmp17
        tmp21 = tl.load(in_ptr0 + ((262144*(((787712 + x1 + (513*y0)) // 262656) % 3)) + (786432*(((787712 + x1 + (513*y0) + (787968*x2)) // 787968) % 48)) + ((787712 + x1 + (513*y0)) % 262656)), tmp20 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.full(tmp21.shape, 0.0, tmp21.dtype)
        tmp23 = tl.where(tmp17, tmp21, tmp22)
        tmp24 = 0.0
        tmp25 = tl.where(tmp16, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp14, tmp25, tmp26)
        tmp28 = tl.where(tmp14, tmp27, tmp24)
        tmp29 = tl.where(tmp5, tmp12, tmp28)
        tmp30 = tmp0 < tmp13
        tmp31 = tmp16 & tmp30
        tmp32 = (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp33 = tmp32 < tmp7
        tmp34 = tmp33 & tmp31
        tmp35 = tl.load(in_ptr0 + ((262144*((((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 262656) % 144)) + (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) % 262656)), tmp34 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp31, tmp35, tmp36)
        tmp38 = tl.where(tmp16, tmp37, tmp24)
        tmp39 = tl.full(tmp38.shape, 0.0, tmp38.dtype)
        tmp40 = tl.where(tmp30, tmp38, tmp39)
        tmp41 = tl.where(tmp30, tmp40, tmp24)
        tmp42 = tl.where(tmp2, tmp29, tmp41)
        tl.store(out_ptr0 + (x5 + (24640*x3) + (98560*y0)), tmp42, xmask & ymask)


op290: SchedulerNode(ComputedBuffer)
op290.writes = [   MemoryDep('buf290', 131328*c0 + 525312*c1 + c2, {c0: 4, c1: 48, c2: 131328}, None)]
op290.unmet_dependencies = 
    [   MemoryDep('buf288', ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 262656, 144), {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf288', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf288', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf289', 24640*c0 + 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf289', 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None)]
op290.met_dependencies = []
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
    buf290.users = [
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
    ]
]
op290.group.device = cuda:0
op290.group.iteration = (25214976, 1)
op290.sizes = ([4, 48, 256, 513], [])
buf288_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf289_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf289_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
class op290_loop_body:
    var_ranges = {z0: 4, z1: 48, z2: 256, z3: 513}
    index0 = z0
    index1 = z2
    index2 = z3
    index3 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 512, 513)
    index4 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 262656, 144)
    index5 = ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index6 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index7 = 513*z1 + 98560*z2 + z3
    index8 = ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index9 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index10 = 24640*z0 + 513*z1 + 98560*z2 + z3
    index11 = 131328*z0 + 525312*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf289', get_index_2)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_4 = ops.constant(1, torch.int64)
        ge_2 = ops.ge(index_expr_2, constant_4)
        masked_subblock10 = self.masked_subblock10(ge_2, 0.0)
        get_index_4 = self.get_index('index10')
        load_1 = ops.load('buf289', get_index_4)
        where_2 = ops.where(ge_2, masked_subblock10, load_1)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_5 = self.get_index('index11')
        store = ops.store('buf290', get_index_5, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf288', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf288', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf289', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf289', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf288', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf289', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
    def masked_subblock12(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf288', get_index)
        return load
    def masked_subblock11(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock12 = self.masked_subblock12(lt, 0.0)
        return masked_subblock12
    def masked_subblock10(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock11 = self.masked_subblock11(lt, 0.0)
        get_index_1 = self.get_index('index10')
        load = ops.load('buf289', get_index_1)
        where = ops.where(lt, masked_subblock11, load)
        return where
op290 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 6303744)
        x1 = (xindex // 513) % 256
        x0 = xindex % 513
        x2 = (xindex // 131328) % 48
        x4 = xindex % 131328
        tmp47 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), None, eviction_policy='evict_last')
        tmp62 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), None)
        tmp0 = x3
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1], 1, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = x0
        tmp7 = tmp6 >= tmp4
        tmp8 = tl.full([1], 256, tl.int64)
        tmp9 = tmp6 < tmp8
        tmp10 = tmp7 & tmp9
        tmp11 = tmp10 & tmp5
        tmp12 = (((-256) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp13 = tl.full([1], 512, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = tl.load(in_ptr0 + ((262144*((((-256) + x0 + (513*x1) + (787968*x2)) // 262656) % 144)) + (((-256) + x0 + (513*x1) + (787968*x2)) % 262656)), tmp15, eviction_policy='evict_last', other=0.0)
        tmp17 = tl.full(tmp16.shape, 0.0, tmp16.dtype)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.full([1], 0, tl.int64)
        tmp20 = tmp19 >= tmp4
        tmp21 = tmp20 & tmp5
        tmp22 = tmp9 & tmp21
        tmp23 = (((-131584) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp24 = tmp23 < tmp13
        tmp25 = tmp24 & tmp22
        tmp26 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp25, eviction_policy='evict_last', other=0.0)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp22, tmp26, tmp27)
        tmp29 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp21, eviction_policy='evict_last', other=0.0)
        tmp30 = tl.where(tmp9, tmp28, tmp29)
        tmp31 = tl.full(tmp30.shape, 0.0, tmp30.dtype)
        tmp32 = tl.where(tmp21, tmp30, tmp31)
        tmp33 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp5, eviction_policy='evict_last', other=0.0)
        tmp34 = tl.where(tmp20, tmp32, tmp33)
        tmp35 = tl.where(tmp10, tmp18, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp5, tmp35, tmp36)
        tmp38 = tmp9 & tmp20
        tmp39 = tmp24 & tmp38
        tmp40 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp39, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp38, tmp40, tmp41)
        tmp43 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp20, eviction_policy='evict_last', other=0.0)
        tmp44 = tl.where(tmp9, tmp42, tmp43)
        tmp45 = tl.full(tmp44.shape, 0.0, tmp44.dtype)
        tmp46 = tl.where(tmp20, tmp44, tmp45)
        tmp48 = tl.where(tmp20, tmp46, tmp47)
        tmp49 = tl.where(tmp5, tmp37, tmp48)
        tmp50 = tmp0 >= tmp4
        tmp51 = tmp9 & tmp50
        tmp52 = (((-131584) + x0 + (513*x1) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp53 = tmp52 < tmp13
        tmp54 = tmp53 & tmp51
        tmp55 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp54, other=0.0)
        tmp56 = tl.full(tmp55.shape, 0.0, tmp55.dtype)
        tmp57 = tl.where(tmp51, tmp55, tmp56)
        tmp58 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), tmp50, other=0.0)
        tmp59 = tl.where(tmp9, tmp57, tmp58)
        tmp60 = tl.full(tmp59.shape, 0.0, tmp59.dtype)
        tmp61 = tl.where(tmp50, tmp59, tmp60)
        tmp63 = tl.where(tmp50, tmp61, tmp62)
        tmp64 = tl.where(tmp2, tmp49, tmp63)
        tl.store(out_ptr0 + (x4 + (131328*x3) + (525312*x2)), tmp64, None)


op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 6303744}, None)]
op291.unmet_dependencies = [MemoryDep('buf290', 525312*c0 + c1 + 393984, {c0: 48, c1: 131328}, None)]
op291.met_dependencies = []
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
    buf291.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op291.group.device = cuda:0
op291.group.iteration = (6303744, 1)
op291.sizes = ([48, 256, 513], [])
buf290_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
class op291_loop_body:
    var_ranges = {z0: 48, z1: 256, z2: 513}
    index0 = z2
    index1 = -z1 - z2 + 512
    index2 = z1 + 768
    index3 = z1 + z2 + 513
    index4 = 525312*z0 + 513*z1 + z2 + 393984
    index5 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf290', get_index_2)
        where = ops.where(lt, masked_subblock4, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index5')
        store = ops.store('buf291', get_index_3, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf290', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf290', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_3 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf290', get_index_2)
        where_1 = ops.where(lt, masked_subblock2, load)
        constant_4 = ops.constant(-inf, torch.float32)
        where_2 = ops.where(to_dtype, constant_4, where_1)
        return where_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf290', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf290', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
op291 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6303744
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 513
        x1 = (xindex // 513) % 256
        x2 = (xindex // 131328)
        x3 = xindex % 131328
        x4 = xindex
        tmp43 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), None)
        tmp0 = x0
        tmp1 = tl.full([1], 256, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = 512 + ((-1)*x0) + ((-1)*x1)
        tmp4 = tl.full([1], 0, tl.int64)
        tmp5 = tmp3 <= tmp4
        tmp6 = 1.0
        tmp7 = 0.0
        tmp8 = tl.where(tmp5, tmp6, tmp7)
        tmp9 = (tmp8 != 0)
        tmp10 = 768 + x1
        tmp11 = tmp10 < tmp1
        tmp12 = tmp11 & tmp2
        tmp13 = tl.full([1], 257, tl.int64)
        tmp14 = tmp0 < tmp13
        tmp15 = tmp14 & tmp12
        tmp16 = 513 + x0 + x1
        tmp17 = tmp16 <= tmp4
        tmp18 = tl.where(tmp17, tmp6, tmp7)
        tmp19 = (tmp18 != 0)
        tmp20 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp15, other=0.0)
        tmp21 = float("-inf")
        tmp22 = tl.where(tmp19, tmp21, tmp20)
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp15, tmp22, tmp23)
        tmp25 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp12, other=0.0)
        tmp26 = tl.where(tmp14, tmp24, tmp25)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp12, tmp26, tmp27)
        tmp29 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp2, other=0.0)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp31 = tl.where(tmp9, tmp21, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tmp34 = tmp14 & tmp11
        tmp35 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp34, other=0.0)
        tmp36 = tl.where(tmp19, tmp21, tmp35)
        tmp37 = tl.full(tmp36.shape, 0.0, tmp36.dtype)
        tmp38 = tl.where(tmp34, tmp36, tmp37)
        tmp39 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp11, other=0.0)
        tmp40 = tl.where(tmp14, tmp38, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp11, tmp40, tmp41)
        tmp44 = tl.where(tmp11, tmp42, tmp43)
        tmp45 = tl.where(tmp2, tmp33, tmp44)
        tl.store(out_ptr0 + (x4), tmp45, None)


op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 4096}, None)]
op292.unmet_dependencies = []
op292.met_dependencies = []
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf292.users = [
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
    ]
]
op292.group.device = cuda:0
op292.group.iteration = (4096, 1)
op292.sizes = ([4096], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op292_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(1.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf292', get_index, constant, None)
        return store
op292 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = 1.0
        tl.store(out_ptr0 + (x0), tmp0, None)


op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 4096}, None)]
op293.unmet_dependencies = []
op293.met_dependencies = [MemoryDep('arg7_1', c0, {c0: 4096}, None)]
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf293.users = [
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
    ]
]
op293.group.device = cuda:0
op293.group.iteration = (4096, 1)
op293.sizes = ([4096], [])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[4, 1024], stride=[1024, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op293_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        constant = ops.constant(0.0, torch.float32)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        ne_1 = ops.ne(load_1, constant_1)
        to_dtype = ops.to_dtype(ne_1, torch.float32, src_dtype = torch.bool)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(ne, constant_2, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf293', get_index_2, where, None)
        return store
op293 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.0
        tmp2 = tmp0 != tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp4, tmp3)
        tl.store(out_ptr0 + (x0), tmp5, None)


op294: SchedulerNode(ComputedBuffer)
op294.writes = [   MemoryDep('buf294', 525312*c0 + 513*c1 + 131328*c2 + c3, {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op294.unmet_dependencies = 
    [   MemoryDep('buf292', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3 + 656384, 512, 513), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf292', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 512, 513) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf292', ModularIndexing(513*c1 + c3 + 787712, 512, 513) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf293', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3, 1, 512), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf293', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 1, 512) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf293', ModularIndexing(513*c1 + c3 + 787712, 1, 512) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op294.met_dependencies = []
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
    buf294.users = [
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
    ]
]
op294.group.device = cuda:0
op294.group.iteration = (2101248, 1)
op294.sizes = ([4, 256, 4, 513], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
class op294_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 4, z3: 513}
    index0 = z0
    index1 = z3
    index2 = ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index3 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index4 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3, 1, 512)
    index5 = ModularIndexing(513*z1 + z3 + 787712, 512, 513)
    index6 = ModularIndexing(513*z1 + z3 + 787712, 512, 513) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index7 = ModularIndexing(513*z1 + z3 + 787712, 1, 512) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index8 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513)
    index9 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index10 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 1, 512) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index11 = 525312*z0 + 513*z1 + 131328*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index11')
        store = ops.store('buf294', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf293', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf293', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index10')
        load_1 = ops.load('buf293', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op294 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2101248
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 525312)
        x0 = xindex % 513
        x2 = (xindex // 2052) % 256
        x1 = (xindex // 513) % 4
        tmp0 = x3
        tmp1 = tl.full([1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x0 + (513*x2)) // 512) % 513
        tmp7 = tl.full([1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + (((656384 + x0 + (513*x2)) // 512) % 513)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.load(in_ptr1 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + ((x0 + (513*x2)) % 512)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp12 = tmp10 * tmp11
        tmp13 = tl.full(tmp12.shape, 0.0, tmp12.dtype)
        tmp14 = tl.where(tmp9, tmp12, tmp13)
        tmp15 = tl.full(tmp14.shape, 0.0, tmp14.dtype)
        tmp16 = tl.where(tmp5, tmp14, tmp15)
        tmp17 = tl.full([1], 3, tl.int64)
        tmp18 = tmp17 < tmp17
        tmp19 = tmp5 & tmp18
        tmp20 = ((787712 + x0 + (513*x2)) // 512) % 513
        tmp21 = tmp20 < tmp7
        tmp22 = tmp21 & tmp19
        tmp23 = tl.load(in_ptr0 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + (((787712 + x0 + (513*x2)) // 512) % 513)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp24 = tl.load(in_ptr1 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + ((787712 + x0 + (513*x2)) % 512)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp25 = tmp23 * tmp24
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp22, tmp25, tmp26)
        tmp28 = tl.full(tmp27.shape, 0.0, tmp27.dtype)
        tmp29 = tl.where(tmp19, tmp27, tmp28)
        tmp30 = 0.0
        tmp31 = tl.where(tmp5, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp18, tmp31, tmp32)
        tmp34 = tl.where(tmp18, tmp33, tmp30)
        tmp35 = tl.where(tmp5, tmp16, tmp34)
        tmp36 = tmp0 < tmp17
        tmp37 = tmp5 & tmp36
        tmp38 = (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513
        tmp39 = tmp38 < tmp7
        tmp40 = tmp39 & tmp37
        tmp41 = tl.load(in_ptr0 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + ((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513)), tmp40, eviction_policy='evict_last', other=0.0)
        tmp42 = tl.load(in_ptr1 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) % 512)), tmp40, other=0.0)
        tmp43 = tmp41 * tmp42
        tmp44 = tl.full(tmp43.shape, 0.0, tmp43.dtype)
        tmp45 = tl.where(tmp40, tmp43, tmp44)
        tmp46 = tl.full(tmp45.shape, 0.0, tmp45.dtype)
        tmp47 = tl.where(tmp37, tmp45, tmp46)
        tmp48 = tl.where(tmp5, tmp47, tmp30)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp36, tmp48, tmp49)
        tmp51 = tl.where(tmp36, tmp50, tmp30)
        tmp52 = tl.where(tmp2, tmp35, tmp51)
        tl.store(out_ptr0 + (x0 + (513*x2) + (131328*x1) + (525312*x3)), tmp52, None)


op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 525312}, None)]
op295.unmet_dependencies = 
    [   MemoryDep('buf292', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf292', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf293', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf293', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf294', c0, {c0: 525312}, None)]
op295.met_dependencies = []
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
    buf295.users = [
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
    ]
]
op295.group.device = cuda:0
op295.group.iteration = (525312, 1)
op295.sizes = ([4, 256, 513], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf295_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
class op295_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 513}
    index0 = z1
    index1 = z2
    index2 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513)
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index5 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index7 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index8 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_1 = ops.constant(0, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_1, constant_2)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf294', get_index_1)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index8')
        store = ops.store('buf295', get_index_2, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf293', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf293', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf294', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index8')
        load = ops.load('buf294', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf293', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf294', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
op295 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 256
        x2 = xindex
        y1 = (yindex // 256)
        y3 = yindex
        tmp56 = tl.load(in_ptr2 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 1, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tmp3 >= tmp1
        tmp5 = tl.full([1, 1], 256, tl.int64)
        tmp6 = tmp3 < tmp5
        tmp7 = tmp4 & tmp6
        tmp8 = tmp7 & tmp2
        tmp9 = (((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp10 = tl.full([1, 1], 512, tl.int64)
        tmp11 = tmp9 < tmp10
        tmp12 = tmp11 & tmp8
        tmp13 = tl.load(in_ptr0 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp14 = tl.load(in_ptr1 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + (((-256) + x2 + (513*y0) + (787968*y1)) % 512)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp15 = tmp13 * tmp14
        tmp16 = tl.full(tmp15.shape, 0.0, tmp15.dtype)
        tmp17 = tl.where(tmp12, tmp15, tmp16)
        tmp18 = tl.full(tmp17.shape, 0.0, tmp17.dtype)
        tmp19 = tl.where(tmp8, tmp17, tmp18)
        tmp20 = tl.full([1, 1], 0, tl.int64)
        tmp21 = tmp20 >= tmp1
        tmp22 = tmp21 & tmp2
        tmp23 = tmp6 & tmp22
        tmp24 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp25 = tmp24 < tmp10
        tmp26 = tmp25 & tmp23
        tmp27 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tmp27 * tmp28
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp26, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp23, tmp31, tmp32)
        tmp34 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp22 & xmask, eviction_policy='evict_last', other=0.0)
        tmp35 = tl.where(tmp6, tmp33, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp22, tmp35, tmp36)
        tmp38 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp39 = tl.where(tmp21, tmp37, tmp38)
        tmp40 = tl.where(tmp7, tmp19, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp2, tmp40, tmp41)
        tmp43 = tmp6 & tmp21
        tmp44 = tmp25 & tmp43
        tmp45 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp47 = tmp45 * tmp46
        tmp48 = tl.full(tmp47.shape, 0.0, tmp47.dtype)
        tmp49 = tl.where(tmp44, tmp47, tmp48)
        tmp50 = tl.full(tmp49.shape, 0.0, tmp49.dtype)
        tmp51 = tl.where(tmp43, tmp49, tmp50)
        tmp52 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp21 & xmask, eviction_policy='evict_last', other=0.0)
        tmp53 = tl.where(tmp6, tmp51, tmp52)
        tmp54 = tl.full(tmp53.shape, 0.0, tmp53.dtype)
        tmp55 = tl.where(tmp21, tmp53, tmp54)
        tmp57 = tl.where(tmp21, tmp55, tmp56)
        tmp58 = tl.where(tmp2, tmp42, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 263168}, None)]
op296.unmet_dependencies = 
    [   MemoryDep('buf292', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf293', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf294', 513*c0 + c1, {c0: 1024, c1: 257}, None),
        MemoryDep('buf295', 513*c0 + c1, {c0: 1024, c1: 257}, None)]
op296.met_dependencies = []
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
    buf296.users = [NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op296.group.device = cuda:0
op296.group.iteration = (263168, 1)
op296.sizes = ([4, 256, 257], [])
buf295_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf296_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
class op296_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 257}
    index0 = z1 + z2 - 255
    index1 = 131328*z0 + 513*z1 + z2
    index2 = z2
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index5 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index6 = 65792*z0 + 257*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        constant_3 = ops.constant(0, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq = ops.eq(constant_3, constant_4)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf295', get_index_1)
        constant_5 = ops.constant(0, torch.int64)
        constant_6 = ops.constant(1, torch.int64)
        ge = ops.ge(constant_5, constant_6)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf294', get_index_2)
        where_1 = ops.where(ge, masked_subblock1, load_1)
        where_2 = ops.where(eq, load, where_1)
        constant_7 = ops.constant(-inf, torch.float32)
        where_3 = ops.where(to_dtype, constant_7, where_2)
        get_index_3 = self.get_index('index6')
        store = ops.store('buf296', get_index_3, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('buf293', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf294', get_index_1)
        where = ops.where(lt, masked_subblock2, load)
        return where
op296 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 257
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 256
        y3 = yindex
        y1 = (yindex // 256)
        tmp9 = tl.load(in_ptr0 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr3 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = (-255) + x2 + y0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 <= tmp1
        tmp3 = 1.0
        tmp4 = 0.0
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tmp6 = (tmp5 != 0)
        tmp7 = tl.full([1, 1], 0, tl.int32)
        tmp8 = tmp7 == tmp7
        tmp10 = tl.full([1, 1], 1, tl.int64)
        tmp11 = tmp1 >= tmp10
        tmp12 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp13 = tl.full([1, 1], 256, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp17 = tl.full([1, 1], 512, tl.int64)
        tmp18 = tmp16 < tmp17
        tmp19 = tmp18 & tmp15
        tmp20 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tmp20 * tmp21
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp19, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp15, tmp24, tmp25)
        tmp27 = tl.load(in_ptr3 + (x2 + (513*y3)), tmp11 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.where(tmp14, tmp26, tmp27)
        tmp29 = tl.full(tmp28.shape, 0.0, tmp28.dtype)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp32 = tl.where(tmp11, tmp30, tmp31)
        tmp33 = tl.where(tmp8, tmp9, tmp32)
        tmp34 = float("-inf")
        tmp35 = tl.where(tmp6, tmp34, tmp33)
        tl.store(out_ptr0 + (x2 + (257*y3)), tmp35, xmask)


op297: SchedulerNode(ComputedBuffer)
op297.writes = [MemoryDep('buf297', c0, {c0: 2101248}, None)]
op297.unmet_dependencies = 
    [   MemoryDep('buf292', ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf293', ModularIndexing(c2 + 513*ModularIndexing(c1, 1, 256), 1, 512) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf294', 131328*c0 + c2 + 525312*((c1//256)) + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf295', 131328*c0 + c2 + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf296', 65792*c0 + 257*c1 + c2, {c0: 4, c1: 1024, c2: 513}, None)]
op297.met_dependencies = []
op297.outputs = [
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
    buf297.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op297.group.device = cuda:0
op297.group.iteration = (2101248, 1)
op297.sizes = ([4, 1024, 513], [])
buf296_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
buf295_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
class op297_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 513}
    index0 = z1
    index1 = z2
    index2 = 65792*z0 + 257*z1 + z2
    index3 = (z1//256)
    index4 = 131328*z0 + z2 + 513*ModularIndexing(z1, 1, 256)
    index5 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index7 = ModularIndexing(z2 + 513*ModularIndexing(z1, 1, 256), 1, 512) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index8 = 131328*z0 + z2 + 525312*((z1//256)) + 513*ModularIndexing(z1, 1, 256)
    index9 = 525312*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf295', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock6 = self.masked_subblock6(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf294', get_index_4)
        where = ops.where(ge, masked_subblock6, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_5 = self.get_index('index9')
        store = ops.store('buf297', get_index_5, where_2, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf296', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf293', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf294', get_index_1)
        where = ops.where(lt, masked_subblock4, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf295', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf294', get_index_4)
        where = ops.where(ge, masked_subblock3, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock2, where_1)
        return where_2
    def masked_subblock8(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf293', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf294', get_index_1)
        where = ops.where(lt, masked_subblock7, load)
        return where
op297 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 11, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 4096
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 1024
        x2 = xindex
        y1 = (yindex // 1024)
        y3 = yindex
        tmp40 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), xmask, eviction_policy='evict_last')
        tmp55 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 256, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tl.full([1, 1], 257, tl.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp5 & tmp2
        tmp7 = tl.load(in_ptr0 + (x2 + (257*y0) + (65792*y1)), tmp6 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tl.broadcast_to((y0 // 256), [XBLOCK, YBLOCK])
        tmp9 = tl.full([1, 1], 0, tl.int32)
        tmp10 = tmp8 == tmp9
        tmp11 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp12 = tl.full([1, 1], 1, tl.int64)
        tmp13 = tmp8 >= tmp12
        tmp14 = tmp13 & tmp2
        tmp15 = tmp3 < tmp1
        tmp16 = tmp15 & tmp14
        tmp17 = (((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513
        tmp18 = tl.full([1, 1], 512, tl.int64)
        tmp19 = tmp17 < tmp18
        tmp20 = tmp19 & tmp16
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp23 = tmp21 * tmp22
        tmp24 = tl.full(tmp23.shape, 0.0, tmp23.dtype)
        tmp25 = tl.where(tmp20, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp16, tmp25, tmp26)
        tmp28 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp14 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tl.where(tmp15, tmp27, tmp28)
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp14, tmp29, tmp30)
        tmp32 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp33 = tl.where(tmp13, tmp31, tmp32)
        tmp34 = tl.where(tmp10, tmp11, tmp33)
        tmp35 = tl.where(tmp5, tmp7, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp2, tmp35, tmp36)
        tmp38 = (y0 // 256)
        tmp39 = tmp38 == tmp9
        tmp41 = tmp38 >= tmp12
        tmp42 = tmp15 & tmp41
        tmp43 = tmp19 & tmp42
        tmp44 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp45 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tmp44 * tmp45
        tmp47 = tl.full(tmp46.shape, 0.0, tmp46.dtype)
        tmp48 = tl.where(tmp43, tmp46, tmp47)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp42, tmp48, tmp49)
        tmp51 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp41 & xmask, eviction_policy='evict_last', other=0.0)
        tmp52 = tl.where(tmp15, tmp50, tmp51)
        tmp53 = tl.full(tmp52.shape, 0.0, tmp52.dtype)
        tmp54 = tl.where(tmp41, tmp52, tmp53)
        tmp56 = tl.where(tmp41, tmp54, tmp55)
        tmp57 = tl.where(tmp39, tmp40, tmp56)
        tmp58 = tl.where(tmp2, tmp37, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op298: SchedulerNode(ComputedBuffer)
op298.writes = [   MemoryDep('buf298', 6324224*c0 + 513*c1 + 6176*c2 + c3, {c0: 4, c1: 12, c2: 1024, c3: 513}, None)]
op298.unmet_dependencies = 
    [   MemoryDep('buf290', 525312*c0 + 513*c1 + c2 + 131328*((ModularIndexing(c1, 1, 256)//256)), {c0: 48, c1: 1024, c2: 513}, None),
        MemoryDep('buf291', 131328*c0 + c1 - 393984, {c0: 48, c1: 525312}, None),
        MemoryDep('buf297', 525312*c0 + c2, {c0: 4, c1: 12, c2: 525312}, None)]
op298.met_dependencies = []
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
    buf298.users = [
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
    ]
]
op298.group.device = cuda:0
op298.group.iteration = (25214976, 1)
op298.sizes = ([4, 12, 1024, 513], [])
buf291_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
class op298_loop_body:
    var_ranges = {z0: 4, z1: 12, z2: 1024, z3: 513}
    index0 = z2
    index1 = 1575936*z0 + 131328*z1 + 513*z2 + z3 - 393984
    index2 = z2 + 256*((ModularIndexing(z2, 1, 256)//256))
    index3 = z3
    index4 = z2 + z3 + 256*((ModularIndexing(z2, 1, 256)//256)) - 255
    index5 = 6303744*z0 + 525312*z1 + 513*z2 + z3 + 131328*((ModularIndexing(z2, 1, 256)//256))
    index6 = -z2 - z3 + 1280
    index7 = 525312*z0 + 513*z2 + z3
    index8 = 6324224*z0 + 513*z1 + 6176*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(768, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index5')
        load = ops.load('buf290', get_index_2)
        where = ops.where(lt, masked_subblock2, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_4 = self.get_index('index7')
        load_1 = ops.load('buf297', get_index_4)
        where_2 = ops.where(ge_1, masked_subblock4, load_1)
        add = ops.add(where_1, where_2)
        get_index_5 = self.get_index('index8')
        store = ops.store('buf298', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf291', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf290', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf290', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf297', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(ge, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf297', get_index_1)
        where = ops.where(ge, masked_subblock5, load)
        return where
op298 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 513) % 1024
        x4 = xindex % 525312
        x5 = (xindex // 525312)
        x0 = xindex % 513
        x3 = (xindex // 6303744)
        x2 = (xindex // 525312) % 12
        tmp27 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), None)
        tmp44 = tl.load(in_ptr2 + (x4 + (525312*x3)), None, eviction_policy='evict_last')
        tmp0 = x1
        tmp1 = tl.full([1], 768, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.load(in_ptr0 + ((-393984) + x4 + (131328*x5)), tmp2, other=0.0)
        tmp4 = x1 + (256*((x1 % 256) // 256))
        tmp5 = tl.full([1], 256, tl.int64)
        tmp6 = tmp4 < tmp5
        tmp7 = x0
        tmp8 = tl.full([1], 257, tl.int64)
        tmp9 = tmp7 < tmp8
        tmp10 = tmp9 & tmp6
        tmp11 = (-255) + x0 + x1 + (256*((x1 % 256) // 256))
        tmp12 = tl.full([1], 0, tl.int64)
        tmp13 = tmp11 <= tmp12
        tmp14 = 1.0
        tmp15 = 0.0
        tmp16 = tl.where(tmp13, tmp14, tmp15)
        tmp17 = (tmp16 != 0)
        tmp18 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp10, other=0.0)
        tmp19 = float("-inf")
        tmp20 = tl.where(tmp17, tmp19, tmp18)
        tmp21 = tl.full(tmp20.shape, 0.0, tmp20.dtype)
        tmp22 = tl.where(tmp10, tmp20, tmp21)
        tmp23 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp6, other=0.0)
        tmp24 = tl.where(tmp9, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp6, tmp24, tmp25)
        tmp28 = tl.where(tmp6, tmp26, tmp27)
        tmp29 = tl.where(tmp2, tmp3, tmp28)
        tmp30 = tmp7 >= tmp5
        tmp31 = tmp30 & tmp2
        tmp32 = 1280 + ((-1)*x0) + ((-1)*x1)
        tmp33 = tmp32 <= tmp12
        tmp34 = tl.where(tmp33, tmp14, tmp15)
        tmp35 = (tmp34 != 0)
        tmp36 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp31, eviction_policy='evict_last', other=0.0)
        tmp37 = tl.where(tmp35, tmp19, tmp36)
        tmp38 = tl.full(tmp37.shape, 0.0, tmp37.dtype)
        tmp39 = tl.where(tmp31, tmp37, tmp38)
        tmp40 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.where(tmp30, tmp39, tmp40)
        tmp42 = tl.full(tmp41.shape, 0.0, tmp41.dtype)
        tmp43 = tl.where(tmp2, tmp41, tmp42)
        tmp45 = tl.where(tmp2, tmp43, tmp44)
        tmp46 = tmp29 + tmp45
        tl.store(out_ptr0 + (x0 + (513*x2) + (6176*x1) + (6324224*x3)), tmp46, None)


op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 49152}, None)]
op299.unmet_dependencies = [MemoryDep('buf298', 6176*c0 + c1, {c0: 4096, c1: 6156}, None)]
op299.met_dependencies = []
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf299.users = [
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
    ]
]
op299.group.device = cuda:0
op299.group.iteration = (49152, 513)
op299.sizes = ([4096, 12], [513])
buf298_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op299_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf299', get_index_1, reduction)
        return store_reduction
op299 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        x3 = xindex
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp2, None)


op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 49152}, None)]
op300.unmet_dependencies = 
    [   MemoryDep('buf298', 6176*c0 + c1, {c0: 4096, c1: 6156}, None),
        MemoryDep('buf299', c0, {c0: 49152}, None)]
op300.met_dependencies = []
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf300.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op300.group.device = cuda:0
op300.group.iteration = (49152, 513)
op300.sizes = ([4096, 12], [513])
buf298_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf300_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op300_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf299', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf300', get_index_2, reduction)
        return store_reduction
op300 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        x3 = xindex
        tmp1 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp5, None)


op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 3145728}, None)]
op301.unmet_dependencies = [MemoryDep('buf279', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op301.met_dependencies = []
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf301.users = [NodeUser(node=ExternKernelSchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (3145728, 1)
op301.sizes = ([1024, 4, 768], [])
buf279_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op301_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf301', get_index_1, load, None)
        return store
op301 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op302: ExternKernelSchedulerNode(ExternKernelOut)
op302.writes = [StarDep(name='buf302', mode=None)]
op302.unmet_dependencies = [StarDep(name='buf301', mode=None)]
op302.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op302.outputs = [
    buf302: ExternKernelOut
    buf302.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf302.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op302.node.kernel = extern_kernels.mm


op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 4718592}, None)]
op303.unmet_dependencies = [   MemoryDep('buf302', 64*c0 + 3072*c1 + c2 - 786432, {c0: 48, c1: 1536, c2: 64}, None)]
op303.met_dependencies = [   MemoryDep('arg120_1', c2 + 64*ModularIndexing(c0, 1, 12), {c0: 48, c1: 1536, c2: 64}, None)]
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
    buf303.users = [NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
]
op303.group.device = cuda:0
op303.group.iteration = (4718592, 1)
op303.sizes = ([48, 1536, 64], [])
buf302_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
class op303_loop_body:
    var_ranges = {z0: 48, z1: 1536, z2: 64}
    index0 = z1 - 256
    index1 = 64*z0 + 3072*z1 + z2 - 786432
    index2 = z2 + 64*ModularIndexing(z0, 1, 12)
    index3 = 98304*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1024, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, -1.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf303', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg120_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op303 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 1536
        x0 = xindex % 64
        x2 = (xindex // 98304)
        x3 = xindex
        tmp0 = (-256) + x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 1024, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-786432) + x0 + (64*x2) + (3072*x1)), tmp5, other=0.0)
        tmp7 = tl.load(in_ptr1 + (x0 + (64*(x2 % 12))), tmp5, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, -1.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op304: SchedulerNode(ComputedBuffer)
op304.writes = [   MemoryDep('buf304', 770*c0 + 788480*c1 + c2, {c0: 1024, c1: 48, c2: 770}, None)]
op304.unmet_dependencies = 
    [   MemoryDep('buf298', 6176*c0 + c2 + 6324224*((c1//12)) + 6324224*((ModularIndexing(c1, 1, 12)//12)) + 513*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 770}, None),
        MemoryDep('buf299', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None),
        MemoryDep('buf300', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None)]
op304.met_dependencies = [MemoryDep('arg8_1', c0 + 1024*((c1//12)), {c0: 1024, c1: 48}, None)]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
    buf304.users = [NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (37847040, 1)
op304.sizes = ([1024, 48, 770], [])
arg8_1_layout = FixedLayout('cuda', torch.bool, size=[4, 1024], stride=[1024, 1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf300_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf304_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
class op304_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 770}
    index0 = z2
    index1 = z0 + 1024*((z1//12))
    index2 = 6176*z0 + z2 + 6324224*((z1//12)) + 6324224*((ModularIndexing(z1, 1, 12)//12)) + 513*ModularIndexing(z1, 1, 12)
    index3 = 12*z0 + 12288*((z1//12)) + ModularIndexing(z1, 1, 12)
    index4 = 770*z0 + 788480*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(513, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index4')
        store = ops.store('buf304', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg8_1', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf298', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('buf299', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf300', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(load, constant, truediv)
        return where
op304 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 37847040
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 770
        x1 = (xindex // 770) % 48
        x2 = (xindex // 36960)
        tmp0 = x0
        tmp1 = tl.full([1], 513, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.load(in_ptr0 + (x2 + (1024*(x1 // 12))), tmp2, eviction_policy='evict_last', other=0.0).to(tl.int1)
        tmp4 = tl.load(in_ptr1 + (x0 + (513*(x1 % 12)) + (6176*x2) + (6324224*(x1 // 12)) + (6324224*((x1 % 12) // 12))), tmp2, other=0.0)
        tmp5 = tl.load(in_ptr2 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp4 - tmp5
        tmp7 = tl_math.exp(tmp6)
        tmp8 = tl.load(in_ptr3 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp9 = tmp7 / tmp8
        tmp10 = 0.0
        tmp11 = tl.where(tmp3, tmp10, tmp9)
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp2, tmp11, tmp12)
        tl.store(out_ptr0 + (x0 + (770*x2) + (788480*x1)), tmp13, None)


op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', c0, {c0: 9437184}, None)]
op305.unmet_dependencies = [   MemoryDep('buf303', 98304*c0 + 16384*c1 + c2, {c0: 48, c1: 4, c2: 49152}, None)]
op305.met_dependencies = []
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
    buf305.users = [NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op305.group.device = cuda:0
op305.group.iteration = (9437184, 1)
op305.sizes = ([48, 4, 49152], [])
buf303_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
buf305_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
class op305_loop_body:
    var_ranges = {z0: 48, z1: 4, z2: 49152}
    index0 = 98304*z0 + 16384*z1 + z2
    index1 = 196608*z0 + 49152*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf303', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf305', get_index_1, load, None)
        return store
op305 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 9437184
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 49152
        x1 = (xindex // 49152) % 4
        x2 = (xindex // 196608)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (16384*x1) + (98304*x2)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op306: ExternKernelSchedulerNode(ExternKernelOut)
op306.writes = [StarDep(name='buf306', mode=None)]
op306.unmet_dependencies = [StarDep(name='buf304', mode=None), StarDep(name='buf305', mode=None)]
op306.met_dependencies = []
op306.outputs = [
    buf306: ExternKernelOut
    buf306.layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
    buf306.users = [NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op306.node.kernel = extern_kernels.bmm


op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', c0, {c0: 3145728}, None)]
op307.unmet_dependencies = [   MemoryDep('buf306', 786432*c0 + 64*c1 + 65536*((c2//64)) + ModularIndexing(c2, 1, 64), {c0: 4, c1: 1024, c2: 768}, None)]
op307.met_dependencies = []
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf307.users = [NodeUser(node=ExternKernelSchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op307.group.device = cuda:0
op307.group.iteration = (3145728, 1)
op307.sizes = ([4, 1024, 768], [])
buf306_layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op307_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 768}
    index0 = 786432*z0 + 64*z1 + 65536*((z2//64)) + ModularIndexing(z2, 1, 64)
    index1 = 786432*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf307', get_index_1, load, None)
        return store
op307 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 1024
        x2 = (xindex // 786432)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + ((64*x1) + (65536*(x0 // 64)) + (786432*x2) + (x0 % 64)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op308: ExternKernelSchedulerNode(ExternKernelOut)
op308.writes = [StarDep(name='buf308', mode=None)]
op308.unmet_dependencies = [StarDep(name='buf307', mode=None)]
op308.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op308.outputs = [
    buf308: ExternKernelOut
    buf308.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf308.users = [
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False),
    ]
]
op308.node.kernel = extern_kernels.mm


op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 4096}, None)]
op309.unmet_dependencies = 
    [   MemoryDep('buf279', c0, {c0: 3145728}, None),
        MemoryDep('buf308', c0, {c0: 3145728}, None)]
op309.met_dependencies = [MemoryDep('arg122_1', c1, {c0: 4096, c1: 768}, None)]
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf309.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op309.group.device = cuda:0
op309.group.iteration = (4096, 768)
op309.sizes = ([4096], [768])
buf308_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op309_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf279', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf309', get_index_3, getitem)
        return store_reduction
op309 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 4096}, None)]
op310.unmet_dependencies = 
    [   MemoryDep('buf279', c0, {c0: 3145728}, None),
        MemoryDep('buf308', c0, {c0: 3145728}, None)]
op310.met_dependencies = [MemoryDep('arg122_1', c1, {c0: 4096, c1: 768}, None)]
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf310.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op310.group.device = cuda:0
op310.group.iteration = (4096, 768)
op310.sizes = ([4096], [768])
buf308_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op310_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf279', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf310', get_index_3, getitem_1)
        return store_reduction
op310 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 3145728}, None)]
op312.unmet_dependencies = 
    [   MemoryDep('buf279', c0, {c0: 3145728}, None),
        MemoryDep('buf308', c0, {c0: 3145728}, None),
        MemoryDep('buf309', c0, {c0: 4096}, None),
        MemoryDep('buf310', c0, {c0: 4096}, None)]
op312.met_dependencies = 
    [   MemoryDep('arg122_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg123_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg124_1', c1, {c0: 4096, c1: 768}, None)]
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf312.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=True, is_weak=False),
    ]
]
op312.group.device = cuda:0
op312.group.iteration = (3145728, 1)
op312.sizes = ([4096, 768], [])
buf308_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf310_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op312_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf279', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf309', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf310', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg123_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg124_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf312', get_index_7, add_3, None)
        return store
op312 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op313: ExternKernelSchedulerNode(ExternKernelOut)
op313.writes = [StarDep(name='buf313', mode=None)]
op313.unmet_dependencies = [StarDep(name='buf312', mode=None)]
op313.met_dependencies = [StarDep(name='arg125_1', mode=None)]
op313.outputs = [
    buf313: ExternKernelOut
    buf313.layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
    buf313.users = [NodeUser(node=SchedulerNode(name='op314'), can_inplace=True, is_weak=False)]
]
op313.node.kernel = extern_kernels.mm


op314: SchedulerNode(ComputedBuffer)
op314.writes = [MemoryDep('buf314', c0, {c0: 12582912}, None)]
op314.unmet_dependencies = [MemoryDep('buf313', c0, {c0: 12582912}, None)]
op314.met_dependencies = [MemoryDep('arg126_1', c1, {c0: 4096, c1: 3072}, None)]
op314.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
    buf314.users = [NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op314.group.device = cuda:0
op314.group.iteration = (12582912, 1)
op314.sizes = ([4096, 3072], [])
buf313_layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
class op314_loop_body:
    var_ranges = {z0: 4096, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf313', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg126_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf314', get_index_4, mul_2, None)
        return store
op314 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op315: ExternKernelSchedulerNode(ExternKernelOut)
op315.writes = [StarDep(name='buf315', mode=None)]
op315.unmet_dependencies = [StarDep(name='buf314', mode=None)]
op315.met_dependencies = [StarDep(name='arg127_1', mode=None)]
op315.outputs = [
    buf315: ExternKernelOut
    buf315.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf315.users = [
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=True, is_weak=False),
    ]
]
op315.node.kernel = extern_kernels.mm


op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 4096}, None)]
op316.unmet_dependencies = 
    [   MemoryDep('buf312', c0, {c0: 3145728}, None),
        MemoryDep('buf315', c0, {c0: 3145728}, None)]
op316.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 4096, c1: 768}, None)]
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf316.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op316.group.device = cuda:0
op316.group.iteration = (4096, 768)
op316.sizes = ([4096], [768])
buf315_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op316_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg128_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf312', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf316', get_index_3, getitem)
        return store_reduction
op316 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', c0, {c0: 4096}, None)]
op317.unmet_dependencies = 
    [   MemoryDep('buf312', c0, {c0: 3145728}, None),
        MemoryDep('buf315', c0, {c0: 3145728}, None)]
op317.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 4096, c1: 768}, None)]
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf317.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op317.group.device = cuda:0
op317.group.iteration = (4096, 768)
op317.sizes = ([4096], [768])
buf315_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op317_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg128_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf312', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf317', get_index_3, getitem_1)
        return store_reduction
op317 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 3145728}, None)]
op319.unmet_dependencies = 
    [   MemoryDep('buf312', c0, {c0: 3145728}, None),
        MemoryDep('buf315', c0, {c0: 3145728}, None),
        MemoryDep('buf316', c0, {c0: 4096}, None),
        MemoryDep('buf317', c0, {c0: 4096}, None)]
op319.met_dependencies = 
    [   MemoryDep('arg128_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg129_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg130_1', c1, {c0: 4096, c1: 768}, None)]
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf319.users = [
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False),
    ]
]
op319.group.device = cuda:0
op319.group.iteration = (3145728, 1)
op319.sizes = ([4096, 768], [])
buf315_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf317_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op319_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg128_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf312', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf316', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf317', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg129_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg130_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf319', get_index_7, add_3, None)
        return store
op319 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', c0, {c0: 3145728}, None)]
op320.unmet_dependencies = [MemoryDep('buf319', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op320.met_dependencies = []
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf320.users = [NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
]
op320.group.device = cuda:0
op320.group.iteration = (3145728, 1)
op320.sizes = ([1024, 4, 768], [])
buf319_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf320_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op320_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf319', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf320', get_index_1, load, None)
        return store
op320 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op321: ExternKernelSchedulerNode(ExternKernelOut)
op321.writes = [StarDep(name='buf321', mode=None)]
op321.unmet_dependencies = [StarDep(name='buf320', mode=None)]
op321.met_dependencies = [StarDep(name='arg131_1', mode=None)]
op321.outputs = [
    buf321: ExternKernelOut
    buf321.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf321.users = [NodeUser(node=SchedulerNode(name='op322'), can_inplace=True, is_weak=False)]
]
op321.node.kernel = extern_kernels.mm


op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 3145728}, None)]
op322.unmet_dependencies = [MemoryDep('buf321', c0, {c0: 3145728}, None)]
op322.met_dependencies = [   MemoryDep('arg132_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf322.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op322.group.device = cuda:0
op322.group.iteration = (3145728, 1)
op322.sizes = ([1024, 48, 64], [])
buf321_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf322_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op322_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf321', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf322', get_index_2, mul, None)
        return store
op322 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x3), tmp4, None)


op323: SchedulerNode(ComputedBuffer)
op323.writes = [MemoryDep('buf323', c0, {c0: 3145728}, None)]
op323.unmet_dependencies = [MemoryDep('buf319', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op323.met_dependencies = []
op323.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf323.users = [NodeUser(node=ExternKernelSchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op323.group.device = cuda:0
op323.group.iteration = (3145728, 1)
op323.sizes = ([1024, 4, 768], [])
buf319_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op323_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf319', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf323', get_index_1, load, None)
        return store
op323 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op324: ExternKernelSchedulerNode(ExternKernelOut)
op324.writes = [StarDep(name='buf324', mode=None)]
op324.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op324.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op324.outputs = [
    buf324: ExternKernelOut
    buf324.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf324.users = [NodeUser(node=SchedulerNode(name='op325'), can_inplace=True, is_weak=False)]
]
op324.node.kernel = extern_kernels.mm


op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 3145728}, None)]
op325.unmet_dependencies = [MemoryDep('buf324', c0, {c0: 3145728}, None)]
op325.met_dependencies = [   MemoryDep('arg134_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf325.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op325.group.device = cuda:0
op325.group.iteration = (3145728, 1)
op325.sizes = ([1024, 48, 64], [])
buf324_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op325_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf324', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg134_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf325', get_index_2, add, None)
        return store
op325 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x3), tmp2, None)


op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', c0, {c0: 4718592}, None)]
op326.unmet_dependencies = [   MemoryDep('buf322', 64*c0 + 786432*c1 + 3072*c2 + c3, {c0: 48, c1: 3, c2: 512, c3: 64}, None)]
op326.met_dependencies = []
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
    buf326.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op326.group.device = cuda:0
op326.group.iteration = (4718592, 1)
op326.sizes = ([48, 3, 512, 64], [])
buf322_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
class op326_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 512, z3: 64}
    index0 = 64*z0 + 786432*z1 + 3072*z2 + z3
    index1 = 98304*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf326', get_index_1, load, None)
        return store
op326 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 3
        x3 = (xindex // 98304)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x3) + (3072*x1) + (786432*x2)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', c0, {c0: 4718592}, None)]
op327.unmet_dependencies = [   MemoryDep('buf325', 64*c0 + 786432*c1 + c2 + 3072*c3, {c0: 48, c1: 3, c2: 64, c3: 512}, None)]
op327.met_dependencies = []
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
    buf327.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op327.group.device = cuda:0
op327.group.iteration = (4718592, 1)
op327.sizes = ([48, 3, 64, 512], [])
buf325_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
class op327_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 64, z3: 512}
    index0 = 64*z0 + 786432*z1 + z2 + 3072*z3
    index1 = 98304*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf325', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf327', get_index_1, load, None)
        return store
op327 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 9216
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 3
        y2 = (yindex // 192)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (3072*x3) + (786432*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op328: ExternKernelSchedulerNode(ExternKernelOut)
op328.writes = [StarDep(name='buf328', mode=None)]
op328.unmet_dependencies = [StarDep(name='buf326', mode=None), StarDep(name='buf327', mode=None)]
op328.met_dependencies = []
op328.outputs = [
    buf328: ExternKernelOut
    buf328.layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
    buf328.users = [
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
    ]
]
op328.node.kernel = extern_kernels.bmm


op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', 24640*c0 + c1, {c0: 1024, c1: 24624}, None)]
op329.unmet_dependencies = 
    [   MemoryDep('buf328', 786432*c2 + 262144*(((513*c0 + c3 + 656384)//262656)) + 786432*(((513*c0 + c3 + 656384)//787968)) + ModularIndexing(513*c0 + c3, 1, 512) + 512*ModularIndexing(513*c0 + c3 + 656384, 512, 513), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf328', ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 262656, 144), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf328', ModularIndexing(513*c0 + c3 + 787712, 1, 262656) + 262144*ModularIndexing(513*c0 + c3 + 787712, 262656, 3) + 786432*ModularIndexing(513*c0 + 787968*c2 + c3 + 787712, 787968, 48), {c0: 256, c1: 4, c2: 48, c3: 513}, None)]
op329.met_dependencies = []
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
    buf329.users = [NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False)]
]
op329.group.device = cuda:0
op329.group.iteration = (25214976, 1)
op329.sizes = ([256, 4, 48, 513], [])
buf328_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
class op329_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 48, z3: 513}
    index0 = z1
    index1 = z3
    index2 = ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index3 = 786432*z2 + 262144*(((513*z0 + z3 + 656384)//262656)) + 786432*(((513*z0 + z3 + 656384)//787968)) + ModularIndexing(513*z0 + z3, 1, 512) + 512*ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index4 = ModularIndexing(513*z0 + z3 + 787712, 512, 513)
    index5 = ModularIndexing(513*z0 + z3 + 787712, 1, 262656) + 262144*ModularIndexing(513*z0 + z3 + 787712, 262656, 3) + 786432*ModularIndexing(513*z0 + 787968*z2 + z3 + 787712, 787968, 48)
    index6 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 512, 513)
    index7 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 262656, 144)
    index8 = 98560*z0 + 24640*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index8')
        store = ops.store('buf329', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf328', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf328', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf328', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op329 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[256, 131072], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 256
        xnumel = 98496
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = (xindex // 24624)
        x1 = xindex % 513
        y0 = yindex
        x2 = (xindex // 513) % 48
        x5 = xindex % 24624
        tmp0 = x3
        tmp1 = tl.full([1, 1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1, 1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x1 + (513*y0)) // 512) % 513
        tmp7 = tl.full([1, 1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((512*(((656384 + x1 + (513*y0)) // 512) % 513)) + (262144*((656384 + x1 + (513*y0)) // 262656)) + (786432*x2) + (786432*((656384 + x1 + (513*y0)) // 787968)) + ((x1 + (513*y0)) % 512)), tmp9 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.full(tmp10.shape, 0.0, tmp10.dtype)
        tmp12 = tl.where(tmp5, tmp10, tmp11)
        tmp13 = tl.full([1, 1], 3, tl.int64)
        tmp14 = tmp13 < tmp13
        tmp15 = tl.broadcast_to(x1, [XBLOCK, YBLOCK])
        tmp16 = tmp15 >= tmp4
        tmp17 = tmp16 & tmp14
        tmp18 = ((787712 + x1 + (513*y0)) // 512) % 513
        tmp19 = tmp18 < tmp7
        tmp20 = tmp19 & tmp17
        tmp21 = tl.load(in_ptr0 + ((262144*(((787712 + x1 + (513*y0)) // 262656) % 3)) + (786432*(((787712 + x1 + (513*y0) + (787968*x2)) // 787968) % 48)) + ((787712 + x1 + (513*y0)) % 262656)), tmp20 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.full(tmp21.shape, 0.0, tmp21.dtype)
        tmp23 = tl.where(tmp17, tmp21, tmp22)
        tmp24 = 0.0
        tmp25 = tl.where(tmp16, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp14, tmp25, tmp26)
        tmp28 = tl.where(tmp14, tmp27, tmp24)
        tmp29 = tl.where(tmp5, tmp12, tmp28)
        tmp30 = tmp0 < tmp13
        tmp31 = tmp16 & tmp30
        tmp32 = (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp33 = tmp32 < tmp7
        tmp34 = tmp33 & tmp31
        tmp35 = tl.load(in_ptr0 + ((262144*((((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 262656) % 144)) + (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) % 262656)), tmp34 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp31, tmp35, tmp36)
        tmp38 = tl.where(tmp16, tmp37, tmp24)
        tmp39 = tl.full(tmp38.shape, 0.0, tmp38.dtype)
        tmp40 = tl.where(tmp30, tmp38, tmp39)
        tmp41 = tl.where(tmp30, tmp40, tmp24)
        tmp42 = tl.where(tmp2, tmp29, tmp41)
        tl.store(out_ptr0 + (x5 + (24640*x3) + (98560*y0)), tmp42, xmask & ymask)


op330: SchedulerNode(ComputedBuffer)
op330.writes = [   MemoryDep('buf330', 131328*c0 + 525312*c1 + c2, {c0: 4, c1: 48, c2: 131328}, None)]
op330.unmet_dependencies = 
    [   MemoryDep('buf328', ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 262656, 144), {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf328', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf328', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf329', 24640*c0 + 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf329', 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None)]
op330.met_dependencies = []
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
    buf330.users = [
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
    ]
]
op330.group.device = cuda:0
op330.group.iteration = (25214976, 1)
op330.sizes = ([4, 48, 256, 513], [])
buf328_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
class op330_loop_body:
    var_ranges = {z0: 4, z1: 48, z2: 256, z3: 513}
    index0 = z0
    index1 = z2
    index2 = z3
    index3 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 512, 513)
    index4 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 262656, 144)
    index5 = ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index6 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index7 = 513*z1 + 98560*z2 + z3
    index8 = ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index9 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index10 = 24640*z0 + 513*z1 + 98560*z2 + z3
    index11 = 131328*z0 + 525312*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf329', get_index_2)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_4 = ops.constant(1, torch.int64)
        ge_2 = ops.ge(index_expr_2, constant_4)
        masked_subblock10 = self.masked_subblock10(ge_2, 0.0)
        get_index_4 = self.get_index('index10')
        load_1 = ops.load('buf329', get_index_4)
        where_2 = ops.where(ge_2, masked_subblock10, load_1)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_5 = self.get_index('index11')
        store = ops.store('buf330', get_index_5, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf328', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf328', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf329', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf329', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf328', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf329', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
    def masked_subblock12(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf328', get_index)
        return load
    def masked_subblock11(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock12 = self.masked_subblock12(lt, 0.0)
        return masked_subblock12
    def masked_subblock10(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock11 = self.masked_subblock11(lt, 0.0)
        get_index_1 = self.get_index('index10')
        load = ops.load('buf329', get_index_1)
        where = ops.where(lt, masked_subblock11, load)
        return where
op330 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 6303744)
        x1 = (xindex // 513) % 256
        x0 = xindex % 513
        x2 = (xindex // 131328) % 48
        x4 = xindex % 131328
        tmp47 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), None, eviction_policy='evict_last')
        tmp62 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), None)
        tmp0 = x3
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1], 1, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = x0
        tmp7 = tmp6 >= tmp4
        tmp8 = tl.full([1], 256, tl.int64)
        tmp9 = tmp6 < tmp8
        tmp10 = tmp7 & tmp9
        tmp11 = tmp10 & tmp5
        tmp12 = (((-256) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp13 = tl.full([1], 512, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = tl.load(in_ptr0 + ((262144*((((-256) + x0 + (513*x1) + (787968*x2)) // 262656) % 144)) + (((-256) + x0 + (513*x1) + (787968*x2)) % 262656)), tmp15, eviction_policy='evict_last', other=0.0)
        tmp17 = tl.full(tmp16.shape, 0.0, tmp16.dtype)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.full([1], 0, tl.int64)
        tmp20 = tmp19 >= tmp4
        tmp21 = tmp20 & tmp5
        tmp22 = tmp9 & tmp21
        tmp23 = (((-131584) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp24 = tmp23 < tmp13
        tmp25 = tmp24 & tmp22
        tmp26 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp25, eviction_policy='evict_last', other=0.0)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp22, tmp26, tmp27)
        tmp29 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp21, eviction_policy='evict_last', other=0.0)
        tmp30 = tl.where(tmp9, tmp28, tmp29)
        tmp31 = tl.full(tmp30.shape, 0.0, tmp30.dtype)
        tmp32 = tl.where(tmp21, tmp30, tmp31)
        tmp33 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp5, eviction_policy='evict_last', other=0.0)
        tmp34 = tl.where(tmp20, tmp32, tmp33)
        tmp35 = tl.where(tmp10, tmp18, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp5, tmp35, tmp36)
        tmp38 = tmp9 & tmp20
        tmp39 = tmp24 & tmp38
        tmp40 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp39, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp38, tmp40, tmp41)
        tmp43 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp20, eviction_policy='evict_last', other=0.0)
        tmp44 = tl.where(tmp9, tmp42, tmp43)
        tmp45 = tl.full(tmp44.shape, 0.0, tmp44.dtype)
        tmp46 = tl.where(tmp20, tmp44, tmp45)
        tmp48 = tl.where(tmp20, tmp46, tmp47)
        tmp49 = tl.where(tmp5, tmp37, tmp48)
        tmp50 = tmp0 >= tmp4
        tmp51 = tmp9 & tmp50
        tmp52 = (((-131584) + x0 + (513*x1) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp53 = tmp52 < tmp13
        tmp54 = tmp53 & tmp51
        tmp55 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp54, other=0.0)
        tmp56 = tl.full(tmp55.shape, 0.0, tmp55.dtype)
        tmp57 = tl.where(tmp51, tmp55, tmp56)
        tmp58 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), tmp50, other=0.0)
        tmp59 = tl.where(tmp9, tmp57, tmp58)
        tmp60 = tl.full(tmp59.shape, 0.0, tmp59.dtype)
        tmp61 = tl.where(tmp50, tmp59, tmp60)
        tmp63 = tl.where(tmp50, tmp61, tmp62)
        tmp64 = tl.where(tmp2, tmp49, tmp63)
        tl.store(out_ptr0 + (x4 + (131328*x3) + (525312*x2)), tmp64, None)


op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 6303744}, None)]
op331.unmet_dependencies = [MemoryDep('buf330', 525312*c0 + c1 + 393984, {c0: 48, c1: 131328}, None)]
op331.met_dependencies = []
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
    buf331.users = [NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False)]
]
op331.group.device = cuda:0
op331.group.iteration = (6303744, 1)
op331.sizes = ([48, 256, 513], [])
buf330_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
class op331_loop_body:
    var_ranges = {z0: 48, z1: 256, z2: 513}
    index0 = z2
    index1 = -z1 - z2 + 512
    index2 = z1 + 768
    index3 = z1 + z2 + 513
    index4 = 525312*z0 + 513*z1 + z2 + 393984
    index5 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf330', get_index_2)
        where = ops.where(lt, masked_subblock4, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index5')
        store = ops.store('buf331', get_index_3, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf330', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf330', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_3 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf330', get_index_2)
        where_1 = ops.where(lt, masked_subblock2, load)
        constant_4 = ops.constant(-inf, torch.float32)
        where_2 = ops.where(to_dtype, constant_4, where_1)
        return where_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf330', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf330', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
op331 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6303744
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 513
        x1 = (xindex // 513) % 256
        x2 = (xindex // 131328)
        x3 = xindex % 131328
        x4 = xindex
        tmp43 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), None)
        tmp0 = x0
        tmp1 = tl.full([1], 256, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = 512 + ((-1)*x0) + ((-1)*x1)
        tmp4 = tl.full([1], 0, tl.int64)
        tmp5 = tmp3 <= tmp4
        tmp6 = 1.0
        tmp7 = 0.0
        tmp8 = tl.where(tmp5, tmp6, tmp7)
        tmp9 = (tmp8 != 0)
        tmp10 = 768 + x1
        tmp11 = tmp10 < tmp1
        tmp12 = tmp11 & tmp2
        tmp13 = tl.full([1], 257, tl.int64)
        tmp14 = tmp0 < tmp13
        tmp15 = tmp14 & tmp12
        tmp16 = 513 + x0 + x1
        tmp17 = tmp16 <= tmp4
        tmp18 = tl.where(tmp17, tmp6, tmp7)
        tmp19 = (tmp18 != 0)
        tmp20 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp15, other=0.0)
        tmp21 = float("-inf")
        tmp22 = tl.where(tmp19, tmp21, tmp20)
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp15, tmp22, tmp23)
        tmp25 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp12, other=0.0)
        tmp26 = tl.where(tmp14, tmp24, tmp25)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp12, tmp26, tmp27)
        tmp29 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp2, other=0.0)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp31 = tl.where(tmp9, tmp21, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tmp34 = tmp14 & tmp11
        tmp35 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp34, other=0.0)
        tmp36 = tl.where(tmp19, tmp21, tmp35)
        tmp37 = tl.full(tmp36.shape, 0.0, tmp36.dtype)
        tmp38 = tl.where(tmp34, tmp36, tmp37)
        tmp39 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp11, other=0.0)
        tmp40 = tl.where(tmp14, tmp38, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp11, tmp40, tmp41)
        tmp44 = tl.where(tmp11, tmp42, tmp43)
        tmp45 = tl.where(tmp2, tmp33, tmp44)
        tl.store(out_ptr0 + (x4), tmp45, None)


op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 4096}, None)]
op332.unmet_dependencies = []
op332.met_dependencies = []
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf332.users = [
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
    ]
]
op332.group.device = cuda:0
op332.group.iteration = (4096, 1)
op332.sizes = ([4096], [])
buf332_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op332_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(1.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf332', get_index, constant, None)
        return store
op332 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = 1.0
        tl.store(out_ptr0 + (x0), tmp0, None)


op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 4096}, None)]
op333.unmet_dependencies = []
op333.met_dependencies = [MemoryDep('arg7_1', c0, {c0: 4096}, None)]
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf333.users = [
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
    ]
]
op333.group.device = cuda:0
op333.group.iteration = (4096, 1)
op333.sizes = ([4096], [])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[4, 1024], stride=[1024, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op333_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        constant = ops.constant(0.0, torch.float32)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        ne_1 = ops.ne(load_1, constant_1)
        to_dtype = ops.to_dtype(ne_1, torch.float32, src_dtype = torch.bool)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(ne, constant_2, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf333', get_index_2, where, None)
        return store
op333 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.0
        tmp2 = tmp0 != tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp4, tmp3)
        tl.store(out_ptr0 + (x0), tmp5, None)


op334: SchedulerNode(ComputedBuffer)
op334.writes = [   MemoryDep('buf334', 525312*c0 + 513*c1 + 131328*c2 + c3, {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op334.unmet_dependencies = 
    [   MemoryDep('buf332', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3 + 656384, 512, 513), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf332', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 512, 513) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf332', ModularIndexing(513*c1 + c3 + 787712, 512, 513) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf333', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3, 1, 512), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf333', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 1, 512) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf333', ModularIndexing(513*c1 + c3 + 787712, 1, 512) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op334.met_dependencies = []
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
    buf334.users = [
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
    ]
]
op334.group.device = cuda:0
op334.group.iteration = (2101248, 1)
op334.sizes = ([4, 256, 4, 513], [])
buf332_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
class op334_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 4, z3: 513}
    index0 = z0
    index1 = z3
    index2 = ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index3 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index4 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3, 1, 512)
    index5 = ModularIndexing(513*z1 + z3 + 787712, 512, 513)
    index6 = ModularIndexing(513*z1 + z3 + 787712, 512, 513) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index7 = ModularIndexing(513*z1 + z3 + 787712, 1, 512) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index8 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513)
    index9 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index10 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 1, 512) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index11 = 525312*z0 + 513*z1 + 131328*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index11')
        store = ops.store('buf334', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf333', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf333', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index10')
        load_1 = ops.load('buf333', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op334 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2101248
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 525312)
        x0 = xindex % 513
        x2 = (xindex // 2052) % 256
        x1 = (xindex // 513) % 4
        tmp0 = x3
        tmp1 = tl.full([1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x0 + (513*x2)) // 512) % 513
        tmp7 = tl.full([1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + (((656384 + x0 + (513*x2)) // 512) % 513)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.load(in_ptr1 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + ((x0 + (513*x2)) % 512)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp12 = tmp10 * tmp11
        tmp13 = tl.full(tmp12.shape, 0.0, tmp12.dtype)
        tmp14 = tl.where(tmp9, tmp12, tmp13)
        tmp15 = tl.full(tmp14.shape, 0.0, tmp14.dtype)
        tmp16 = tl.where(tmp5, tmp14, tmp15)
        tmp17 = tl.full([1], 3, tl.int64)
        tmp18 = tmp17 < tmp17
        tmp19 = tmp5 & tmp18
        tmp20 = ((787712 + x0 + (513*x2)) // 512) % 513
        tmp21 = tmp20 < tmp7
        tmp22 = tmp21 & tmp19
        tmp23 = tl.load(in_ptr0 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + (((787712 + x0 + (513*x2)) // 512) % 513)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp24 = tl.load(in_ptr1 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + ((787712 + x0 + (513*x2)) % 512)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp25 = tmp23 * tmp24
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp22, tmp25, tmp26)
        tmp28 = tl.full(tmp27.shape, 0.0, tmp27.dtype)
        tmp29 = tl.where(tmp19, tmp27, tmp28)
        tmp30 = 0.0
        tmp31 = tl.where(tmp5, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp18, tmp31, tmp32)
        tmp34 = tl.where(tmp18, tmp33, tmp30)
        tmp35 = tl.where(tmp5, tmp16, tmp34)
        tmp36 = tmp0 < tmp17
        tmp37 = tmp5 & tmp36
        tmp38 = (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513
        tmp39 = tmp38 < tmp7
        tmp40 = tmp39 & tmp37
        tmp41 = tl.load(in_ptr0 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + ((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513)), tmp40, eviction_policy='evict_last', other=0.0)
        tmp42 = tl.load(in_ptr1 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) % 512)), tmp40, other=0.0)
        tmp43 = tmp41 * tmp42
        tmp44 = tl.full(tmp43.shape, 0.0, tmp43.dtype)
        tmp45 = tl.where(tmp40, tmp43, tmp44)
        tmp46 = tl.full(tmp45.shape, 0.0, tmp45.dtype)
        tmp47 = tl.where(tmp37, tmp45, tmp46)
        tmp48 = tl.where(tmp5, tmp47, tmp30)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp36, tmp48, tmp49)
        tmp51 = tl.where(tmp36, tmp50, tmp30)
        tmp52 = tl.where(tmp2, tmp35, tmp51)
        tl.store(out_ptr0 + (x0 + (513*x2) + (131328*x1) + (525312*x3)), tmp52, None)


op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 525312}, None)]
op335.unmet_dependencies = 
    [   MemoryDep('buf332', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf332', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf333', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf333', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf334', c0, {c0: 525312}, None)]
op335.met_dependencies = []
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
    buf335.users = [
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
    ]
]
op335.group.device = cuda:0
op335.group.iteration = (525312, 1)
op335.sizes = ([4, 256, 513], [])
buf332_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
class op335_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 513}
    index0 = z1
    index1 = z2
    index2 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513)
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index5 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index7 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index8 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_1 = ops.constant(0, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_1, constant_2)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf334', get_index_1)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index8')
        store = ops.store('buf335', get_index_2, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf333', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf333', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf334', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index8')
        load = ops.load('buf334', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf333', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf334', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
op335 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 256
        x2 = xindex
        y1 = (yindex // 256)
        y3 = yindex
        tmp56 = tl.load(in_ptr2 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 1, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tmp3 >= tmp1
        tmp5 = tl.full([1, 1], 256, tl.int64)
        tmp6 = tmp3 < tmp5
        tmp7 = tmp4 & tmp6
        tmp8 = tmp7 & tmp2
        tmp9 = (((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp10 = tl.full([1, 1], 512, tl.int64)
        tmp11 = tmp9 < tmp10
        tmp12 = tmp11 & tmp8
        tmp13 = tl.load(in_ptr0 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp14 = tl.load(in_ptr1 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + (((-256) + x2 + (513*y0) + (787968*y1)) % 512)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp15 = tmp13 * tmp14
        tmp16 = tl.full(tmp15.shape, 0.0, tmp15.dtype)
        tmp17 = tl.where(tmp12, tmp15, tmp16)
        tmp18 = tl.full(tmp17.shape, 0.0, tmp17.dtype)
        tmp19 = tl.where(tmp8, tmp17, tmp18)
        tmp20 = tl.full([1, 1], 0, tl.int64)
        tmp21 = tmp20 >= tmp1
        tmp22 = tmp21 & tmp2
        tmp23 = tmp6 & tmp22
        tmp24 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp25 = tmp24 < tmp10
        tmp26 = tmp25 & tmp23
        tmp27 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tmp27 * tmp28
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp26, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp23, tmp31, tmp32)
        tmp34 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp22 & xmask, eviction_policy='evict_last', other=0.0)
        tmp35 = tl.where(tmp6, tmp33, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp22, tmp35, tmp36)
        tmp38 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp39 = tl.where(tmp21, tmp37, tmp38)
        tmp40 = tl.where(tmp7, tmp19, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp2, tmp40, tmp41)
        tmp43 = tmp6 & tmp21
        tmp44 = tmp25 & tmp43
        tmp45 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp47 = tmp45 * tmp46
        tmp48 = tl.full(tmp47.shape, 0.0, tmp47.dtype)
        tmp49 = tl.where(tmp44, tmp47, tmp48)
        tmp50 = tl.full(tmp49.shape, 0.0, tmp49.dtype)
        tmp51 = tl.where(tmp43, tmp49, tmp50)
        tmp52 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp21 & xmask, eviction_policy='evict_last', other=0.0)
        tmp53 = tl.where(tmp6, tmp51, tmp52)
        tmp54 = tl.full(tmp53.shape, 0.0, tmp53.dtype)
        tmp55 = tl.where(tmp21, tmp53, tmp54)
        tmp57 = tl.where(tmp21, tmp55, tmp56)
        tmp58 = tl.where(tmp2, tmp42, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op336: SchedulerNode(ComputedBuffer)
op336.writes = [MemoryDep('buf336', c0, {c0: 263168}, None)]
op336.unmet_dependencies = 
    [   MemoryDep('buf332', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf333', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf334', 513*c0 + c1, {c0: 1024, c1: 257}, None),
        MemoryDep('buf335', 513*c0 + c1, {c0: 1024, c1: 257}, None)]
op336.met_dependencies = []
op336.outputs = [
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
    buf336.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op336.group.device = cuda:0
op336.group.iteration = (263168, 1)
op336.sizes = ([4, 256, 257], [])
buf335_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
class op336_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 257}
    index0 = z1 + z2 - 255
    index1 = 131328*z0 + 513*z1 + z2
    index2 = z2
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index5 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index6 = 65792*z0 + 257*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        constant_3 = ops.constant(0, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq = ops.eq(constant_3, constant_4)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf335', get_index_1)
        constant_5 = ops.constant(0, torch.int64)
        constant_6 = ops.constant(1, torch.int64)
        ge = ops.ge(constant_5, constant_6)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf334', get_index_2)
        where_1 = ops.where(ge, masked_subblock1, load_1)
        where_2 = ops.where(eq, load, where_1)
        constant_7 = ops.constant(-inf, torch.float32)
        where_3 = ops.where(to_dtype, constant_7, where_2)
        get_index_3 = self.get_index('index6')
        store = ops.store('buf336', get_index_3, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('buf333', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf334', get_index_1)
        where = ops.where(lt, masked_subblock2, load)
        return where
op336 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 257
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 256
        y3 = yindex
        y1 = (yindex // 256)
        tmp9 = tl.load(in_ptr0 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr3 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = (-255) + x2 + y0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 <= tmp1
        tmp3 = 1.0
        tmp4 = 0.0
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tmp6 = (tmp5 != 0)
        tmp7 = tl.full([1, 1], 0, tl.int32)
        tmp8 = tmp7 == tmp7
        tmp10 = tl.full([1, 1], 1, tl.int64)
        tmp11 = tmp1 >= tmp10
        tmp12 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp13 = tl.full([1, 1], 256, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp17 = tl.full([1, 1], 512, tl.int64)
        tmp18 = tmp16 < tmp17
        tmp19 = tmp18 & tmp15
        tmp20 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tmp20 * tmp21
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp19, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp15, tmp24, tmp25)
        tmp27 = tl.load(in_ptr3 + (x2 + (513*y3)), tmp11 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.where(tmp14, tmp26, tmp27)
        tmp29 = tl.full(tmp28.shape, 0.0, tmp28.dtype)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp32 = tl.where(tmp11, tmp30, tmp31)
        tmp33 = tl.where(tmp8, tmp9, tmp32)
        tmp34 = float("-inf")
        tmp35 = tl.where(tmp6, tmp34, tmp33)
        tl.store(out_ptr0 + (x2 + (257*y3)), tmp35, xmask)


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 2101248}, None)]
op337.unmet_dependencies = 
    [   MemoryDep('buf332', ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf333', ModularIndexing(c2 + 513*ModularIndexing(c1, 1, 256), 1, 512) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf334', 131328*c0 + c2 + 525312*((c1//256)) + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf335', 131328*c0 + c2 + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf336', 65792*c0 + 257*c1 + c2, {c0: 4, c1: 1024, c2: 513}, None)]
op337.met_dependencies = []
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
    buf337.users = [NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False)]
]
op337.group.device = cuda:0
op337.group.iteration = (2101248, 1)
op337.sizes = ([4, 1024, 513], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
class op337_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 513}
    index0 = z1
    index1 = z2
    index2 = 65792*z0 + 257*z1 + z2
    index3 = (z1//256)
    index4 = 131328*z0 + z2 + 513*ModularIndexing(z1, 1, 256)
    index5 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index7 = ModularIndexing(z2 + 513*ModularIndexing(z1, 1, 256), 1, 512) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index8 = 131328*z0 + z2 + 525312*((z1//256)) + 513*ModularIndexing(z1, 1, 256)
    index9 = 525312*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf335', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock6 = self.masked_subblock6(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf334', get_index_4)
        where = ops.where(ge, masked_subblock6, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_5 = self.get_index('index9')
        store = ops.store('buf337', get_index_5, where_2, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf336', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf333', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf334', get_index_1)
        where = ops.where(lt, masked_subblock4, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf335', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf334', get_index_4)
        where = ops.where(ge, masked_subblock3, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock2, where_1)
        return where_2
    def masked_subblock8(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf333', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf334', get_index_1)
        where = ops.where(lt, masked_subblock7, load)
        return where
op337 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 11, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 4096
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 1024
        x2 = xindex
        y1 = (yindex // 1024)
        y3 = yindex
        tmp40 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), xmask, eviction_policy='evict_last')
        tmp55 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 256, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tl.full([1, 1], 257, tl.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp5 & tmp2
        tmp7 = tl.load(in_ptr0 + (x2 + (257*y0) + (65792*y1)), tmp6 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tl.broadcast_to((y0 // 256), [XBLOCK, YBLOCK])
        tmp9 = tl.full([1, 1], 0, tl.int32)
        tmp10 = tmp8 == tmp9
        tmp11 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp12 = tl.full([1, 1], 1, tl.int64)
        tmp13 = tmp8 >= tmp12
        tmp14 = tmp13 & tmp2
        tmp15 = tmp3 < tmp1
        tmp16 = tmp15 & tmp14
        tmp17 = (((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513
        tmp18 = tl.full([1, 1], 512, tl.int64)
        tmp19 = tmp17 < tmp18
        tmp20 = tmp19 & tmp16
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp23 = tmp21 * tmp22
        tmp24 = tl.full(tmp23.shape, 0.0, tmp23.dtype)
        tmp25 = tl.where(tmp20, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp16, tmp25, tmp26)
        tmp28 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp14 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tl.where(tmp15, tmp27, tmp28)
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp14, tmp29, tmp30)
        tmp32 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp33 = tl.where(tmp13, tmp31, tmp32)
        tmp34 = tl.where(tmp10, tmp11, tmp33)
        tmp35 = tl.where(tmp5, tmp7, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp2, tmp35, tmp36)
        tmp38 = (y0 // 256)
        tmp39 = tmp38 == tmp9
        tmp41 = tmp38 >= tmp12
        tmp42 = tmp15 & tmp41
        tmp43 = tmp19 & tmp42
        tmp44 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp45 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tmp44 * tmp45
        tmp47 = tl.full(tmp46.shape, 0.0, tmp46.dtype)
        tmp48 = tl.where(tmp43, tmp46, tmp47)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp42, tmp48, tmp49)
        tmp51 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp41 & xmask, eviction_policy='evict_last', other=0.0)
        tmp52 = tl.where(tmp15, tmp50, tmp51)
        tmp53 = tl.full(tmp52.shape, 0.0, tmp52.dtype)
        tmp54 = tl.where(tmp41, tmp52, tmp53)
        tmp56 = tl.where(tmp41, tmp54, tmp55)
        tmp57 = tl.where(tmp39, tmp40, tmp56)
        tmp58 = tl.where(tmp2, tmp37, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op338: SchedulerNode(ComputedBuffer)
op338.writes = [   MemoryDep('buf338', 6324224*c0 + 513*c1 + 6176*c2 + c3, {c0: 4, c1: 12, c2: 1024, c3: 513}, None)]
op338.unmet_dependencies = 
    [   MemoryDep('buf330', 525312*c0 + 513*c1 + c2 + 131328*((ModularIndexing(c1, 1, 256)//256)), {c0: 48, c1: 1024, c2: 513}, None),
        MemoryDep('buf331', 131328*c0 + c1 - 393984, {c0: 48, c1: 525312}, None),
        MemoryDep('buf337', 525312*c0 + c2, {c0: 4, c1: 12, c2: 525312}, None)]
op338.met_dependencies = []
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
    buf338.users = [
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
    ]
]
op338.group.device = cuda:0
op338.group.iteration = (25214976, 1)
op338.sizes = ([4, 12, 1024, 513], [])
buf331_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
class op338_loop_body:
    var_ranges = {z0: 4, z1: 12, z2: 1024, z3: 513}
    index0 = z2
    index1 = 1575936*z0 + 131328*z1 + 513*z2 + z3 - 393984
    index2 = z2 + 256*((ModularIndexing(z2, 1, 256)//256))
    index3 = z3
    index4 = z2 + z3 + 256*((ModularIndexing(z2, 1, 256)//256)) - 255
    index5 = 6303744*z0 + 525312*z1 + 513*z2 + z3 + 131328*((ModularIndexing(z2, 1, 256)//256))
    index6 = -z2 - z3 + 1280
    index7 = 525312*z0 + 513*z2 + z3
    index8 = 6324224*z0 + 513*z1 + 6176*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(768, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index5')
        load = ops.load('buf330', get_index_2)
        where = ops.where(lt, masked_subblock2, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_4 = self.get_index('index7')
        load_1 = ops.load('buf337', get_index_4)
        where_2 = ops.where(ge_1, masked_subblock4, load_1)
        add = ops.add(where_1, where_2)
        get_index_5 = self.get_index('index8')
        store = ops.store('buf338', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf331', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf330', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf330', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf337', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(ge, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf337', get_index_1)
        where = ops.where(ge, masked_subblock5, load)
        return where
op338 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 513) % 1024
        x4 = xindex % 525312
        x5 = (xindex // 525312)
        x0 = xindex % 513
        x3 = (xindex // 6303744)
        x2 = (xindex // 525312) % 12
        tmp27 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), None)
        tmp44 = tl.load(in_ptr2 + (x4 + (525312*x3)), None, eviction_policy='evict_last')
        tmp0 = x1
        tmp1 = tl.full([1], 768, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.load(in_ptr0 + ((-393984) + x4 + (131328*x5)), tmp2, other=0.0)
        tmp4 = x1 + (256*((x1 % 256) // 256))
        tmp5 = tl.full([1], 256, tl.int64)
        tmp6 = tmp4 < tmp5
        tmp7 = x0
        tmp8 = tl.full([1], 257, tl.int64)
        tmp9 = tmp7 < tmp8
        tmp10 = tmp9 & tmp6
        tmp11 = (-255) + x0 + x1 + (256*((x1 % 256) // 256))
        tmp12 = tl.full([1], 0, tl.int64)
        tmp13 = tmp11 <= tmp12
        tmp14 = 1.0
        tmp15 = 0.0
        tmp16 = tl.where(tmp13, tmp14, tmp15)
        tmp17 = (tmp16 != 0)
        tmp18 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp10, other=0.0)
        tmp19 = float("-inf")
        tmp20 = tl.where(tmp17, tmp19, tmp18)
        tmp21 = tl.full(tmp20.shape, 0.0, tmp20.dtype)
        tmp22 = tl.where(tmp10, tmp20, tmp21)
        tmp23 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp6, other=0.0)
        tmp24 = tl.where(tmp9, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp6, tmp24, tmp25)
        tmp28 = tl.where(tmp6, tmp26, tmp27)
        tmp29 = tl.where(tmp2, tmp3, tmp28)
        tmp30 = tmp7 >= tmp5
        tmp31 = tmp30 & tmp2
        tmp32 = 1280 + ((-1)*x0) + ((-1)*x1)
        tmp33 = tmp32 <= tmp12
        tmp34 = tl.where(tmp33, tmp14, tmp15)
        tmp35 = (tmp34 != 0)
        tmp36 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp31, eviction_policy='evict_last', other=0.0)
        tmp37 = tl.where(tmp35, tmp19, tmp36)
        tmp38 = tl.full(tmp37.shape, 0.0, tmp37.dtype)
        tmp39 = tl.where(tmp31, tmp37, tmp38)
        tmp40 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.where(tmp30, tmp39, tmp40)
        tmp42 = tl.full(tmp41.shape, 0.0, tmp41.dtype)
        tmp43 = tl.where(tmp2, tmp41, tmp42)
        tmp45 = tl.where(tmp2, tmp43, tmp44)
        tmp46 = tmp29 + tmp45
        tl.store(out_ptr0 + (x0 + (513*x2) + (6176*x1) + (6324224*x3)), tmp46, None)


op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 49152}, None)]
op339.unmet_dependencies = [MemoryDep('buf338', 6176*c0 + c1, {c0: 4096, c1: 6156}, None)]
op339.met_dependencies = []
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf339.users = [
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
    ]
]
op339.group.device = cuda:0
op339.group.iteration = (49152, 513)
op339.sizes = ([4096, 12], [513])
buf338_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op339_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf338', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf339', get_index_1, reduction)
        return store_reduction
op339 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        x3 = xindex
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp2, None)


op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 49152}, None)]
op340.unmet_dependencies = 
    [   MemoryDep('buf338', 6176*c0 + c1, {c0: 4096, c1: 6156}, None),
        MemoryDep('buf339', c0, {c0: 49152}, None)]
op340.met_dependencies = []
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf340.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op340.group.device = cuda:0
op340.group.iteration = (49152, 513)
op340.sizes = ([4096, 12], [513])
buf338_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf340_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op340_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf338', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf339', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf340', get_index_2, reduction)
        return store_reduction
op340 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        x3 = xindex
        tmp1 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp5, None)


op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 3145728}, None)]
op341.unmet_dependencies = [MemoryDep('buf319', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op341.met_dependencies = []
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf341.users = [NodeUser(node=ExternKernelSchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
]
op341.group.device = cuda:0
op341.group.iteration = (3145728, 1)
op341.sizes = ([1024, 4, 768], [])
buf319_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op341_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf319', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf341', get_index_1, load, None)
        return store
op341 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op342: ExternKernelSchedulerNode(ExternKernelOut)
op342.writes = [StarDep(name='buf342', mode=None)]
op342.unmet_dependencies = [StarDep(name='buf341', mode=None)]
op342.met_dependencies = [StarDep(name='arg135_1', mode=None)]
op342.outputs = [
    buf342: ExternKernelOut
    buf342.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf342.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op342.node.kernel = extern_kernels.mm


op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 4718592}, None)]
op343.unmet_dependencies = [   MemoryDep('buf342', 64*c0 + 3072*c1 + c2 - 786432, {c0: 48, c1: 1536, c2: 64}, None)]
op343.met_dependencies = [   MemoryDep('arg136_1', c2 + 64*ModularIndexing(c0, 1, 12), {c0: 48, c1: 1536, c2: 64}, None)]
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
    buf343.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op343.group.device = cuda:0
op343.group.iteration = (4718592, 1)
op343.sizes = ([48, 1536, 64], [])
buf342_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
class op343_loop_body:
    var_ranges = {z0: 48, z1: 1536, z2: 64}
    index0 = z1 - 256
    index1 = 64*z0 + 3072*z1 + z2 - 786432
    index2 = z2 + 64*ModularIndexing(z0, 1, 12)
    index3 = 98304*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1024, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, -1.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf343', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf342', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op343 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 1536
        x0 = xindex % 64
        x2 = (xindex // 98304)
        x3 = xindex
        tmp0 = (-256) + x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 1024, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-786432) + x0 + (64*x2) + (3072*x1)), tmp5, other=0.0)
        tmp7 = tl.load(in_ptr1 + (x0 + (64*(x2 % 12))), tmp5, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, -1.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op344: SchedulerNode(ComputedBuffer)
op344.writes = [   MemoryDep('buf344', 770*c0 + 788480*c1 + c2, {c0: 1024, c1: 48, c2: 770}, None)]
op344.unmet_dependencies = 
    [   MemoryDep('buf338', 6176*c0 + c2 + 6324224*((c1//12)) + 6324224*((ModularIndexing(c1, 1, 12)//12)) + 513*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 770}, None),
        MemoryDep('buf339', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None),
        MemoryDep('buf340', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None)]
op344.met_dependencies = [MemoryDep('arg8_1', c0 + 1024*((c1//12)), {c0: 1024, c1: 48}, None)]
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
    buf344.users = [NodeUser(node=ExternKernelSchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op344.group.device = cuda:0
op344.group.iteration = (37847040, 1)
op344.sizes = ([1024, 48, 770], [])
arg8_1_layout = FixedLayout('cuda', torch.bool, size=[4, 1024], stride=[1024, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf340_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf344_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
class op344_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 770}
    index0 = z2
    index1 = z0 + 1024*((z1//12))
    index2 = 6176*z0 + z2 + 6324224*((z1//12)) + 6324224*((ModularIndexing(z1, 1, 12)//12)) + 513*ModularIndexing(z1, 1, 12)
    index3 = 12*z0 + 12288*((z1//12)) + ModularIndexing(z1, 1, 12)
    index4 = 770*z0 + 788480*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(513, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index4')
        store = ops.store('buf344', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg8_1', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf338', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('buf339', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf340', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(load, constant, truediv)
        return where
op344 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 37847040
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 770
        x1 = (xindex // 770) % 48
        x2 = (xindex // 36960)
        tmp0 = x0
        tmp1 = tl.full([1], 513, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.load(in_ptr0 + (x2 + (1024*(x1 // 12))), tmp2, eviction_policy='evict_last', other=0.0).to(tl.int1)
        tmp4 = tl.load(in_ptr1 + (x0 + (513*(x1 % 12)) + (6176*x2) + (6324224*(x1 // 12)) + (6324224*((x1 % 12) // 12))), tmp2, other=0.0)
        tmp5 = tl.load(in_ptr2 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp4 - tmp5
        tmp7 = tl_math.exp(tmp6)
        tmp8 = tl.load(in_ptr3 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp9 = tmp7 / tmp8
        tmp10 = 0.0
        tmp11 = tl.where(tmp3, tmp10, tmp9)
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp2, tmp11, tmp12)
        tl.store(out_ptr0 + (x0 + (770*x2) + (788480*x1)), tmp13, None)


op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 9437184}, None)]
op345.unmet_dependencies = [   MemoryDep('buf343', 98304*c0 + 16384*c1 + c2, {c0: 48, c1: 4, c2: 49152}, None)]
op345.met_dependencies = []
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
    buf345.users = [NodeUser(node=ExternKernelSchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op345.group.device = cuda:0
op345.group.iteration = (9437184, 1)
op345.sizes = ([48, 4, 49152], [])
buf343_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
class op345_loop_body:
    var_ranges = {z0: 48, z1: 4, z2: 49152}
    index0 = 98304*z0 + 16384*z1 + z2
    index1 = 196608*z0 + 49152*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf343', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf345', get_index_1, load, None)
        return store
op345 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 9437184
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 49152
        x1 = (xindex // 49152) % 4
        x2 = (xindex // 196608)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (16384*x1) + (98304*x2)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op346: ExternKernelSchedulerNode(ExternKernelOut)
op346.writes = [StarDep(name='buf346', mode=None)]
op346.unmet_dependencies = [StarDep(name='buf344', mode=None), StarDep(name='buf345', mode=None)]
op346.met_dependencies = []
op346.outputs = [
    buf346: ExternKernelOut
    buf346.layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
    buf346.users = [NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
]
op346.node.kernel = extern_kernels.bmm


op347: SchedulerNode(ComputedBuffer)
op347.writes = [MemoryDep('buf347', c0, {c0: 3145728}, None)]
op347.unmet_dependencies = [   MemoryDep('buf346', 786432*c0 + 64*c1 + 65536*((c2//64)) + ModularIndexing(c2, 1, 64), {c0: 4, c1: 1024, c2: 768}, None)]
op347.met_dependencies = []
op347.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf347.users = [NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op347.group.device = cuda:0
op347.group.iteration = (3145728, 1)
op347.sizes = ([4, 1024, 768], [])
buf346_layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
buf347_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op347_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 768}
    index0 = 786432*z0 + 64*z1 + 65536*((z2//64)) + ModularIndexing(z2, 1, 64)
    index1 = 786432*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf347', get_index_1, load, None)
        return store
op347 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 1024
        x2 = (xindex // 786432)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + ((64*x1) + (65536*(x0 // 64)) + (786432*x2) + (x0 % 64)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op348: ExternKernelSchedulerNode(ExternKernelOut)
op348.writes = [StarDep(name='buf348', mode=None)]
op348.unmet_dependencies = [StarDep(name='buf347', mode=None)]
op348.met_dependencies = [StarDep(name='arg137_1', mode=None)]
op348.outputs = [
    buf348: ExternKernelOut
    buf348.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf348.users = [
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False),
    ]
]
op348.node.kernel = extern_kernels.mm


op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 4096}, None)]
op349.unmet_dependencies = 
    [   MemoryDep('buf319', c0, {c0: 3145728}, None),
        MemoryDep('buf348', c0, {c0: 3145728}, None)]
op349.met_dependencies = [MemoryDep('arg138_1', c1, {c0: 4096, c1: 768}, None)]
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf349.users = [NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
]
op349.group.device = cuda:0
op349.group.iteration = (4096, 768)
op349.sizes = ([4096], [768])
buf348_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op349_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg138_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf319', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf349', get_index_3, getitem)
        return store_reduction
op349 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', c0, {c0: 4096}, None)]
op350.unmet_dependencies = 
    [   MemoryDep('buf319', c0, {c0: 3145728}, None),
        MemoryDep('buf348', c0, {c0: 3145728}, None)]
op350.met_dependencies = [MemoryDep('arg138_1', c1, {c0: 4096, c1: 768}, None)]
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf350.users = [NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
]
op350.group.device = cuda:0
op350.group.iteration = (4096, 768)
op350.sizes = ([4096], [768])
buf348_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op350_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg138_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf319', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf350', get_index_3, getitem_1)
        return store_reduction
op350 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', c0, {c0: 3145728}, None)]
op352.unmet_dependencies = 
    [   MemoryDep('buf319', c0, {c0: 3145728}, None),
        MemoryDep('buf348', c0, {c0: 3145728}, None),
        MemoryDep('buf349', c0, {c0: 4096}, None),
        MemoryDep('buf350', c0, {c0: 4096}, None)]
op352.met_dependencies = 
    [   MemoryDep('arg138_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg139_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg140_1', c1, {c0: 4096, c1: 768}, None)]
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf352.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=True, is_weak=False),
    ]
]
op352.group.device = cuda:0
op352.group.iteration = (3145728, 1)
op352.sizes = ([4096, 768], [])
buf348_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf350_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf352_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op352_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg138_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf319', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf349', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf350', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg139_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg140_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf352', get_index_7, add_3, None)
        return store
op352 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op353: ExternKernelSchedulerNode(ExternKernelOut)
op353.writes = [StarDep(name='buf353', mode=None)]
op353.unmet_dependencies = [StarDep(name='buf352', mode=None)]
op353.met_dependencies = [StarDep(name='arg141_1', mode=None)]
op353.outputs = [
    buf353: ExternKernelOut
    buf353.layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
    buf353.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=True, is_weak=False)]
]
op353.node.kernel = extern_kernels.mm


op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 12582912}, None)]
op354.unmet_dependencies = [MemoryDep('buf353', c0, {c0: 12582912}, None)]
op354.met_dependencies = [MemoryDep('arg142_1', c1, {c0: 4096, c1: 3072}, None)]
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
    buf354.users = [NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
]
op354.group.device = cuda:0
op354.group.iteration = (12582912, 1)
op354.sizes = ([4096, 3072], [])
buf353_layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
class op354_loop_body:
    var_ranges = {z0: 4096, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg142_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf353', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg142_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf354', get_index_4, mul_2, None)
        return store
op354 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op355: ExternKernelSchedulerNode(ExternKernelOut)
op355.writes = [StarDep(name='buf355', mode=None)]
op355.unmet_dependencies = [StarDep(name='buf354', mode=None)]
op355.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op355.outputs = [
    buf355: ExternKernelOut
    buf355.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf355.users = [
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=True, is_weak=False),
    ]
]
op355.node.kernel = extern_kernels.mm


op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 4096}, None)]
op356.unmet_dependencies = 
    [   MemoryDep('buf352', c0, {c0: 3145728}, None),
        MemoryDep('buf355', c0, {c0: 3145728}, None)]
op356.met_dependencies = [MemoryDep('arg144_1', c1, {c0: 4096, c1: 768}, None)]
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf356.users = [NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
]
op356.group.device = cuda:0
op356.group.iteration = (4096, 768)
op356.sizes = ([4096], [768])
buf355_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf352_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op356_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf352', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf356', get_index_3, getitem)
        return store_reduction
op356 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', c0, {c0: 4096}, None)]
op357.unmet_dependencies = 
    [   MemoryDep('buf352', c0, {c0: 3145728}, None),
        MemoryDep('buf355', c0, {c0: 3145728}, None)]
op357.met_dependencies = [MemoryDep('arg144_1', c1, {c0: 4096, c1: 768}, None)]
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf357.users = [NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
]
op357.group.device = cuda:0
op357.group.iteration = (4096, 768)
op357.sizes = ([4096], [768])
buf355_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf352_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf357_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op357_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf352', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf357', get_index_3, getitem_1)
        return store_reduction
op357 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', c0, {c0: 3145728}, None)]
op359.unmet_dependencies = 
    [   MemoryDep('buf352', c0, {c0: 3145728}, None),
        MemoryDep('buf355', c0, {c0: 3145728}, None),
        MemoryDep('buf356', c0, {c0: 4096}, None),
        MemoryDep('buf357', c0, {c0: 4096}, None)]
op359.met_dependencies = 
    [   MemoryDep('arg144_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg145_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg146_1', c1, {c0: 4096, c1: 768}, None)]
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf359.users = [
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=True, is_weak=False),
    ]
]
op359.group.device = cuda:0
op359.group.iteration = (3145728, 1)
op359.sizes = ([4096, 768], [])
buf355_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf352_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf357_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op359_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf352', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf356', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf357', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg145_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg146_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf359', get_index_7, add_3, None)
        return store
op359 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', c0, {c0: 3145728}, None)]
op360.unmet_dependencies = [MemoryDep('buf359', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op360.met_dependencies = []
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf360.users = [NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op360.group.device = cuda:0
op360.group.iteration = (3145728, 1)
op360.sizes = ([1024, 4, 768], [])
buf359_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op360_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf360', get_index_1, load, None)
        return store
op360 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op361: ExternKernelSchedulerNode(ExternKernelOut)
op361.writes = [StarDep(name='buf361', mode=None)]
op361.unmet_dependencies = [StarDep(name='buf360', mode=None)]
op361.met_dependencies = [StarDep(name='arg147_1', mode=None)]
op361.outputs = [
    buf361: ExternKernelOut
    buf361.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf361.users = [NodeUser(node=SchedulerNode(name='op362'), can_inplace=True, is_weak=False)]
]
op361.node.kernel = extern_kernels.mm


op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', c0, {c0: 3145728}, None)]
op362.unmet_dependencies = [MemoryDep('buf361', c0, {c0: 3145728}, None)]
op362.met_dependencies = [   MemoryDep('arg148_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf362.users = [NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False)]
]
op362.group.device = cuda:0
op362.group.iteration = (3145728, 1)
op362.sizes = ([1024, 48, 64], [])
buf361_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op362_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg148_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf362', get_index_2, mul, None)
        return store
op362 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x3), tmp4, None)


op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 3145728}, None)]
op363.unmet_dependencies = [MemoryDep('buf359', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op363.met_dependencies = []
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf363.users = [NodeUser(node=ExternKernelSchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
]
op363.group.device = cuda:0
op363.group.iteration = (3145728, 1)
op363.sizes = ([1024, 4, 768], [])
buf359_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op363_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf363', get_index_1, load, None)
        return store
op363 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op364: ExternKernelSchedulerNode(ExternKernelOut)
op364.writes = [StarDep(name='buf364', mode=None)]
op364.unmet_dependencies = [StarDep(name='buf363', mode=None)]
op364.met_dependencies = [StarDep(name='arg149_1', mode=None)]
op364.outputs = [
    buf364: ExternKernelOut
    buf364.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf364.users = [NodeUser(node=SchedulerNode(name='op365'), can_inplace=True, is_weak=False)]
]
op364.node.kernel = extern_kernels.mm


op365: SchedulerNode(ComputedBuffer)
op365.writes = [MemoryDep('buf365', c0, {c0: 3145728}, None)]
op365.unmet_dependencies = [MemoryDep('buf364', c0, {c0: 3145728}, None)]
op365.met_dependencies = [   MemoryDep('arg150_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op365.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf365.users = [NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
]
op365.group.device = cuda:0
op365.group.iteration = (3145728, 1)
op365.sizes = ([1024, 48, 64], [])
buf364_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op365_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf364', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg150_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf365', get_index_2, add, None)
        return store
op365 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x3), tmp2, None)


op366: SchedulerNode(ComputedBuffer)
op366.writes = [MemoryDep('buf366', c0, {c0: 4718592}, None)]
op366.unmet_dependencies = [   MemoryDep('buf362', 64*c0 + 786432*c1 + 3072*c2 + c3, {c0: 48, c1: 3, c2: 512, c3: 64}, None)]
op366.met_dependencies = []
op366.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
    buf366.users = [NodeUser(node=ExternKernelSchedulerNode(name='op368'), can_inplace=False, is_weak=False)]
]
op366.group.device = cuda:0
op366.group.iteration = (4718592, 1)
op366.sizes = ([48, 3, 512, 64], [])
buf362_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf366_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
class op366_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 512, z3: 64}
    index0 = 64*z0 + 786432*z1 + 3072*z2 + z3
    index1 = 98304*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf362', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf366', get_index_1, load, None)
        return store
op366 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 3
        x3 = (xindex // 98304)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x3) + (3072*x1) + (786432*x2)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', c0, {c0: 4718592}, None)]
op367.unmet_dependencies = [   MemoryDep('buf365', 64*c0 + 786432*c1 + c2 + 3072*c3, {c0: 48, c1: 3, c2: 64, c3: 512}, None)]
op367.met_dependencies = []
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
    buf367.users = [NodeUser(node=ExternKernelSchedulerNode(name='op368'), can_inplace=False, is_weak=False)]
]
op367.group.device = cuda:0
op367.group.iteration = (4718592, 1)
op367.sizes = ([48, 3, 64, 512], [])
buf365_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf367_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
class op367_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 64, z3: 512}
    index0 = 64*z0 + 786432*z1 + z2 + 3072*z3
    index1 = 98304*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf365', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf367', get_index_1, load, None)
        return store
op367 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 9216
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 3
        y2 = (yindex // 192)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (3072*x3) + (786432*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op368: ExternKernelSchedulerNode(ExternKernelOut)
op368.writes = [StarDep(name='buf368', mode=None)]
op368.unmet_dependencies = [StarDep(name='buf366', mode=None), StarDep(name='buf367', mode=None)]
op368.met_dependencies = []
op368.outputs = [
    buf368: ExternKernelOut
    buf368.layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
    buf368.users = [
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
    ]
]
op368.node.kernel = extern_kernels.bmm


op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', 24640*c0 + c1, {c0: 1024, c1: 24624}, None)]
op369.unmet_dependencies = 
    [   MemoryDep('buf368', 786432*c2 + 262144*(((513*c0 + c3 + 656384)//262656)) + 786432*(((513*c0 + c3 + 656384)//787968)) + ModularIndexing(513*c0 + c3, 1, 512) + 512*ModularIndexing(513*c0 + c3 + 656384, 512, 513), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf368', ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 262656, 144), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf368', ModularIndexing(513*c0 + c3 + 787712, 1, 262656) + 262144*ModularIndexing(513*c0 + c3 + 787712, 262656, 3) + 786432*ModularIndexing(513*c0 + 787968*c2 + c3 + 787712, 787968, 48), {c0: 256, c1: 4, c2: 48, c3: 513}, None)]
op369.met_dependencies = []
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
    buf369.users = [NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False)]
]
op369.group.device = cuda:0
op369.group.iteration = (25214976, 1)
op369.sizes = ([256, 4, 48, 513], [])
buf368_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
class op369_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 48, z3: 513}
    index0 = z1
    index1 = z3
    index2 = ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index3 = 786432*z2 + 262144*(((513*z0 + z3 + 656384)//262656)) + 786432*(((513*z0 + z3 + 656384)//787968)) + ModularIndexing(513*z0 + z3, 1, 512) + 512*ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index4 = ModularIndexing(513*z0 + z3 + 787712, 512, 513)
    index5 = ModularIndexing(513*z0 + z3 + 787712, 1, 262656) + 262144*ModularIndexing(513*z0 + z3 + 787712, 262656, 3) + 786432*ModularIndexing(513*z0 + 787968*z2 + z3 + 787712, 787968, 48)
    index6 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 512, 513)
    index7 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 262656, 144)
    index8 = 98560*z0 + 24640*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index8')
        store = ops.store('buf369', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf368', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf368', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf368', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op369 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[256, 131072], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 256
        xnumel = 98496
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = (xindex // 24624)
        x1 = xindex % 513
        y0 = yindex
        x2 = (xindex // 513) % 48
        x5 = xindex % 24624
        tmp0 = x3
        tmp1 = tl.full([1, 1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1, 1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x1 + (513*y0)) // 512) % 513
        tmp7 = tl.full([1, 1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((512*(((656384 + x1 + (513*y0)) // 512) % 513)) + (262144*((656384 + x1 + (513*y0)) // 262656)) + (786432*x2) + (786432*((656384 + x1 + (513*y0)) // 787968)) + ((x1 + (513*y0)) % 512)), tmp9 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.full(tmp10.shape, 0.0, tmp10.dtype)
        tmp12 = tl.where(tmp5, tmp10, tmp11)
        tmp13 = tl.full([1, 1], 3, tl.int64)
        tmp14 = tmp13 < tmp13
        tmp15 = tl.broadcast_to(x1, [XBLOCK, YBLOCK])
        tmp16 = tmp15 >= tmp4
        tmp17 = tmp16 & tmp14
        tmp18 = ((787712 + x1 + (513*y0)) // 512) % 513
        tmp19 = tmp18 < tmp7
        tmp20 = tmp19 & tmp17
        tmp21 = tl.load(in_ptr0 + ((262144*(((787712 + x1 + (513*y0)) // 262656) % 3)) + (786432*(((787712 + x1 + (513*y0) + (787968*x2)) // 787968) % 48)) + ((787712 + x1 + (513*y0)) % 262656)), tmp20 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.full(tmp21.shape, 0.0, tmp21.dtype)
        tmp23 = tl.where(tmp17, tmp21, tmp22)
        tmp24 = 0.0
        tmp25 = tl.where(tmp16, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp14, tmp25, tmp26)
        tmp28 = tl.where(tmp14, tmp27, tmp24)
        tmp29 = tl.where(tmp5, tmp12, tmp28)
        tmp30 = tmp0 < tmp13
        tmp31 = tmp16 & tmp30
        tmp32 = (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp33 = tmp32 < tmp7
        tmp34 = tmp33 & tmp31
        tmp35 = tl.load(in_ptr0 + ((262144*((((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 262656) % 144)) + (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) % 262656)), tmp34 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp31, tmp35, tmp36)
        tmp38 = tl.where(tmp16, tmp37, tmp24)
        tmp39 = tl.full(tmp38.shape, 0.0, tmp38.dtype)
        tmp40 = tl.where(tmp30, tmp38, tmp39)
        tmp41 = tl.where(tmp30, tmp40, tmp24)
        tmp42 = tl.where(tmp2, tmp29, tmp41)
        tl.store(out_ptr0 + (x5 + (24640*x3) + (98560*y0)), tmp42, xmask & ymask)


op370: SchedulerNode(ComputedBuffer)
op370.writes = [   MemoryDep('buf370', 131328*c0 + 525312*c1 + c2, {c0: 4, c1: 48, c2: 131328}, None)]
op370.unmet_dependencies = 
    [   MemoryDep('buf368', ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 262656, 144), {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf368', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf368', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf369', 24640*c0 + 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf369', 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None)]
op370.met_dependencies = []
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
    buf370.users = [
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
    ]
]
op370.group.device = cuda:0
op370.group.iteration = (25214976, 1)
op370.sizes = ([4, 48, 256, 513], [])
buf368_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
class op370_loop_body:
    var_ranges = {z0: 4, z1: 48, z2: 256, z3: 513}
    index0 = z0
    index1 = z2
    index2 = z3
    index3 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 512, 513)
    index4 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 262656, 144)
    index5 = ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index6 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index7 = 513*z1 + 98560*z2 + z3
    index8 = ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index9 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index10 = 24640*z0 + 513*z1 + 98560*z2 + z3
    index11 = 131328*z0 + 525312*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf369', get_index_2)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_4 = ops.constant(1, torch.int64)
        ge_2 = ops.ge(index_expr_2, constant_4)
        masked_subblock10 = self.masked_subblock10(ge_2, 0.0)
        get_index_4 = self.get_index('index10')
        load_1 = ops.load('buf369', get_index_4)
        where_2 = ops.where(ge_2, masked_subblock10, load_1)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_5 = self.get_index('index11')
        store = ops.store('buf370', get_index_5, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf368', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf368', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf369', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf369', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf368', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf369', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
    def masked_subblock12(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf368', get_index)
        return load
    def masked_subblock11(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock12 = self.masked_subblock12(lt, 0.0)
        return masked_subblock12
    def masked_subblock10(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock11 = self.masked_subblock11(lt, 0.0)
        get_index_1 = self.get_index('index10')
        load = ops.load('buf369', get_index_1)
        where = ops.where(lt, masked_subblock11, load)
        return where
op370 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 6303744)
        x1 = (xindex // 513) % 256
        x0 = xindex % 513
        x2 = (xindex // 131328) % 48
        x4 = xindex % 131328
        tmp47 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), None, eviction_policy='evict_last')
        tmp62 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), None)
        tmp0 = x3
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1], 1, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = x0
        tmp7 = tmp6 >= tmp4
        tmp8 = tl.full([1], 256, tl.int64)
        tmp9 = tmp6 < tmp8
        tmp10 = tmp7 & tmp9
        tmp11 = tmp10 & tmp5
        tmp12 = (((-256) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp13 = tl.full([1], 512, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = tl.load(in_ptr0 + ((262144*((((-256) + x0 + (513*x1) + (787968*x2)) // 262656) % 144)) + (((-256) + x0 + (513*x1) + (787968*x2)) % 262656)), tmp15, eviction_policy='evict_last', other=0.0)
        tmp17 = tl.full(tmp16.shape, 0.0, tmp16.dtype)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.full([1], 0, tl.int64)
        tmp20 = tmp19 >= tmp4
        tmp21 = tmp20 & tmp5
        tmp22 = tmp9 & tmp21
        tmp23 = (((-131584) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp24 = tmp23 < tmp13
        tmp25 = tmp24 & tmp22
        tmp26 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp25, eviction_policy='evict_last', other=0.0)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp22, tmp26, tmp27)
        tmp29 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp21, eviction_policy='evict_last', other=0.0)
        tmp30 = tl.where(tmp9, tmp28, tmp29)
        tmp31 = tl.full(tmp30.shape, 0.0, tmp30.dtype)
        tmp32 = tl.where(tmp21, tmp30, tmp31)
        tmp33 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp5, eviction_policy='evict_last', other=0.0)
        tmp34 = tl.where(tmp20, tmp32, tmp33)
        tmp35 = tl.where(tmp10, tmp18, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp5, tmp35, tmp36)
        tmp38 = tmp9 & tmp20
        tmp39 = tmp24 & tmp38
        tmp40 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp39, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp38, tmp40, tmp41)
        tmp43 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp20, eviction_policy='evict_last', other=0.0)
        tmp44 = tl.where(tmp9, tmp42, tmp43)
        tmp45 = tl.full(tmp44.shape, 0.0, tmp44.dtype)
        tmp46 = tl.where(tmp20, tmp44, tmp45)
        tmp48 = tl.where(tmp20, tmp46, tmp47)
        tmp49 = tl.where(tmp5, tmp37, tmp48)
        tmp50 = tmp0 >= tmp4
        tmp51 = tmp9 & tmp50
        tmp52 = (((-131584) + x0 + (513*x1) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp53 = tmp52 < tmp13
        tmp54 = tmp53 & tmp51
        tmp55 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp54, other=0.0)
        tmp56 = tl.full(tmp55.shape, 0.0, tmp55.dtype)
        tmp57 = tl.where(tmp51, tmp55, tmp56)
        tmp58 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), tmp50, other=0.0)
        tmp59 = tl.where(tmp9, tmp57, tmp58)
        tmp60 = tl.full(tmp59.shape, 0.0, tmp59.dtype)
        tmp61 = tl.where(tmp50, tmp59, tmp60)
        tmp63 = tl.where(tmp50, tmp61, tmp62)
        tmp64 = tl.where(tmp2, tmp49, tmp63)
        tl.store(out_ptr0 + (x4 + (131328*x3) + (525312*x2)), tmp64, None)


op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', c0, {c0: 6303744}, None)]
op371.unmet_dependencies = [MemoryDep('buf370', 525312*c0 + c1 + 393984, {c0: 48, c1: 131328}, None)]
op371.met_dependencies = []
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
    buf371.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op371.group.device = cuda:0
op371.group.iteration = (6303744, 1)
op371.sizes = ([48, 256, 513], [])
buf370_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
class op371_loop_body:
    var_ranges = {z0: 48, z1: 256, z2: 513}
    index0 = z2
    index1 = -z1 - z2 + 512
    index2 = z1 + 768
    index3 = z1 + z2 + 513
    index4 = 525312*z0 + 513*z1 + z2 + 393984
    index5 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf370', get_index_2)
        where = ops.where(lt, masked_subblock4, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index5')
        store = ops.store('buf371', get_index_3, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf370', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf370', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_3 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf370', get_index_2)
        where_1 = ops.where(lt, masked_subblock2, load)
        constant_4 = ops.constant(-inf, torch.float32)
        where_2 = ops.where(to_dtype, constant_4, where_1)
        return where_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf370', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf370', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
op371 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6303744
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 513
        x1 = (xindex // 513) % 256
        x2 = (xindex // 131328)
        x3 = xindex % 131328
        x4 = xindex
        tmp43 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), None)
        tmp0 = x0
        tmp1 = tl.full([1], 256, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = 512 + ((-1)*x0) + ((-1)*x1)
        tmp4 = tl.full([1], 0, tl.int64)
        tmp5 = tmp3 <= tmp4
        tmp6 = 1.0
        tmp7 = 0.0
        tmp8 = tl.where(tmp5, tmp6, tmp7)
        tmp9 = (tmp8 != 0)
        tmp10 = 768 + x1
        tmp11 = tmp10 < tmp1
        tmp12 = tmp11 & tmp2
        tmp13 = tl.full([1], 257, tl.int64)
        tmp14 = tmp0 < tmp13
        tmp15 = tmp14 & tmp12
        tmp16 = 513 + x0 + x1
        tmp17 = tmp16 <= tmp4
        tmp18 = tl.where(tmp17, tmp6, tmp7)
        tmp19 = (tmp18 != 0)
        tmp20 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp15, other=0.0)
        tmp21 = float("-inf")
        tmp22 = tl.where(tmp19, tmp21, tmp20)
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp15, tmp22, tmp23)
        tmp25 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp12, other=0.0)
        tmp26 = tl.where(tmp14, tmp24, tmp25)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp12, tmp26, tmp27)
        tmp29 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp2, other=0.0)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp31 = tl.where(tmp9, tmp21, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tmp34 = tmp14 & tmp11
        tmp35 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp34, other=0.0)
        tmp36 = tl.where(tmp19, tmp21, tmp35)
        tmp37 = tl.full(tmp36.shape, 0.0, tmp36.dtype)
        tmp38 = tl.where(tmp34, tmp36, tmp37)
        tmp39 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp11, other=0.0)
        tmp40 = tl.where(tmp14, tmp38, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp11, tmp40, tmp41)
        tmp44 = tl.where(tmp11, tmp42, tmp43)
        tmp45 = tl.where(tmp2, tmp33, tmp44)
        tl.store(out_ptr0 + (x4), tmp45, None)


op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 4096}, None)]
op372.unmet_dependencies = []
op372.met_dependencies = []
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf372.users = [
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
    ]
]
op372.group.device = cuda:0
op372.group.iteration = (4096, 1)
op372.sizes = ([4096], [])
buf372_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op372_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(1.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf372', get_index, constant, None)
        return store
op372 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = 1.0
        tl.store(out_ptr0 + (x0), tmp0, None)


op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', c0, {c0: 4096}, None)]
op373.unmet_dependencies = []
op373.met_dependencies = [MemoryDep('arg7_1', c0, {c0: 4096}, None)]
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf373.users = [
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
    ]
]
op373.group.device = cuda:0
op373.group.iteration = (4096, 1)
op373.sizes = ([4096], [])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[4, 1024], stride=[1024, 1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op373_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        constant = ops.constant(0.0, torch.float32)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        ne_1 = ops.ne(load_1, constant_1)
        to_dtype = ops.to_dtype(ne_1, torch.float32, src_dtype = torch.bool)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(ne, constant_2, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf373', get_index_2, where, None)
        return store
op373 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.0
        tmp2 = tmp0 != tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp4, tmp3)
        tl.store(out_ptr0 + (x0), tmp5, None)


op374: SchedulerNode(ComputedBuffer)
op374.writes = [   MemoryDep('buf374', 525312*c0 + 513*c1 + 131328*c2 + c3, {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op374.unmet_dependencies = 
    [   MemoryDep('buf372', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3 + 656384, 512, 513), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf372', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 512, 513) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf372', ModularIndexing(513*c1 + c3 + 787712, 512, 513) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf373', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3, 1, 512), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf373', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 1, 512) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf373', ModularIndexing(513*c1 + c3 + 787712, 1, 512) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op374.met_dependencies = []
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
    buf374.users = [
        NodeUser(node=SchedulerNode(name='op375'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
    ]
]
op374.group.device = cuda:0
op374.group.iteration = (2101248, 1)
op374.sizes = ([4, 256, 4, 513], [])
buf372_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf372_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf372_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
class op374_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 4, z3: 513}
    index0 = z0
    index1 = z3
    index2 = ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index3 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index4 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3, 1, 512)
    index5 = ModularIndexing(513*z1 + z3 + 787712, 512, 513)
    index6 = ModularIndexing(513*z1 + z3 + 787712, 512, 513) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index7 = ModularIndexing(513*z1 + z3 + 787712, 1, 512) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index8 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513)
    index9 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index10 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 1, 512) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index11 = 525312*z0 + 513*z1 + 131328*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index11')
        store = ops.store('buf374', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf373', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf373', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index10')
        load_1 = ops.load('buf373', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op374 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2101248
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 525312)
        x0 = xindex % 513
        x2 = (xindex // 2052) % 256
        x1 = (xindex // 513) % 4
        tmp0 = x3
        tmp1 = tl.full([1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x0 + (513*x2)) // 512) % 513
        tmp7 = tl.full([1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + (((656384 + x0 + (513*x2)) // 512) % 513)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.load(in_ptr1 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + ((x0 + (513*x2)) % 512)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp12 = tmp10 * tmp11
        tmp13 = tl.full(tmp12.shape, 0.0, tmp12.dtype)
        tmp14 = tl.where(tmp9, tmp12, tmp13)
        tmp15 = tl.full(tmp14.shape, 0.0, tmp14.dtype)
        tmp16 = tl.where(tmp5, tmp14, tmp15)
        tmp17 = tl.full([1], 3, tl.int64)
        tmp18 = tmp17 < tmp17
        tmp19 = tmp5 & tmp18
        tmp20 = ((787712 + x0 + (513*x2)) // 512) % 513
        tmp21 = tmp20 < tmp7
        tmp22 = tmp21 & tmp19
        tmp23 = tl.load(in_ptr0 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + (((787712 + x0 + (513*x2)) // 512) % 513)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp24 = tl.load(in_ptr1 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + ((787712 + x0 + (513*x2)) % 512)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp25 = tmp23 * tmp24
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp22, tmp25, tmp26)
        tmp28 = tl.full(tmp27.shape, 0.0, tmp27.dtype)
        tmp29 = tl.where(tmp19, tmp27, tmp28)
        tmp30 = 0.0
        tmp31 = tl.where(tmp5, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp18, tmp31, tmp32)
        tmp34 = tl.where(tmp18, tmp33, tmp30)
        tmp35 = tl.where(tmp5, tmp16, tmp34)
        tmp36 = tmp0 < tmp17
        tmp37 = tmp5 & tmp36
        tmp38 = (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513
        tmp39 = tmp38 < tmp7
        tmp40 = tmp39 & tmp37
        tmp41 = tl.load(in_ptr0 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + ((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513)), tmp40, eviction_policy='evict_last', other=0.0)
        tmp42 = tl.load(in_ptr1 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) % 512)), tmp40, other=0.0)
        tmp43 = tmp41 * tmp42
        tmp44 = tl.full(tmp43.shape, 0.0, tmp43.dtype)
        tmp45 = tl.where(tmp40, tmp43, tmp44)
        tmp46 = tl.full(tmp45.shape, 0.0, tmp45.dtype)
        tmp47 = tl.where(tmp37, tmp45, tmp46)
        tmp48 = tl.where(tmp5, tmp47, tmp30)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp36, tmp48, tmp49)
        tmp51 = tl.where(tmp36, tmp50, tmp30)
        tmp52 = tl.where(tmp2, tmp35, tmp51)
        tl.store(out_ptr0 + (x0 + (513*x2) + (131328*x1) + (525312*x3)), tmp52, None)


op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', c0, {c0: 525312}, None)]
op375.unmet_dependencies = 
    [   MemoryDep('buf372', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf372', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf373', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf373', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf374', c0, {c0: 525312}, None)]
op375.met_dependencies = []
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
    buf375.users = [
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
    ]
]
op375.group.device = cuda:0
op375.group.iteration = (525312, 1)
op375.sizes = ([4, 256, 513], [])
buf372_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf372_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
class op375_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 513}
    index0 = z1
    index1 = z2
    index2 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513)
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index5 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index7 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index8 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_1 = ops.constant(0, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_1, constant_2)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf374', get_index_1)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index8')
        store = ops.store('buf375', get_index_2, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf373', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf373', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf374', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index8')
        load = ops.load('buf374', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf373', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf374', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
op375 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 256
        x2 = xindex
        y1 = (yindex // 256)
        y3 = yindex
        tmp56 = tl.load(in_ptr2 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 1, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tmp3 >= tmp1
        tmp5 = tl.full([1, 1], 256, tl.int64)
        tmp6 = tmp3 < tmp5
        tmp7 = tmp4 & tmp6
        tmp8 = tmp7 & tmp2
        tmp9 = (((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp10 = tl.full([1, 1], 512, tl.int64)
        tmp11 = tmp9 < tmp10
        tmp12 = tmp11 & tmp8
        tmp13 = tl.load(in_ptr0 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp14 = tl.load(in_ptr1 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + (((-256) + x2 + (513*y0) + (787968*y1)) % 512)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp15 = tmp13 * tmp14
        tmp16 = tl.full(tmp15.shape, 0.0, tmp15.dtype)
        tmp17 = tl.where(tmp12, tmp15, tmp16)
        tmp18 = tl.full(tmp17.shape, 0.0, tmp17.dtype)
        tmp19 = tl.where(tmp8, tmp17, tmp18)
        tmp20 = tl.full([1, 1], 0, tl.int64)
        tmp21 = tmp20 >= tmp1
        tmp22 = tmp21 & tmp2
        tmp23 = tmp6 & tmp22
        tmp24 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp25 = tmp24 < tmp10
        tmp26 = tmp25 & tmp23
        tmp27 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tmp27 * tmp28
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp26, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp23, tmp31, tmp32)
        tmp34 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp22 & xmask, eviction_policy='evict_last', other=0.0)
        tmp35 = tl.where(tmp6, tmp33, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp22, tmp35, tmp36)
        tmp38 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp39 = tl.where(tmp21, tmp37, tmp38)
        tmp40 = tl.where(tmp7, tmp19, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp2, tmp40, tmp41)
        tmp43 = tmp6 & tmp21
        tmp44 = tmp25 & tmp43
        tmp45 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp47 = tmp45 * tmp46
        tmp48 = tl.full(tmp47.shape, 0.0, tmp47.dtype)
        tmp49 = tl.where(tmp44, tmp47, tmp48)
        tmp50 = tl.full(tmp49.shape, 0.0, tmp49.dtype)
        tmp51 = tl.where(tmp43, tmp49, tmp50)
        tmp52 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp21 & xmask, eviction_policy='evict_last', other=0.0)
        tmp53 = tl.where(tmp6, tmp51, tmp52)
        tmp54 = tl.full(tmp53.shape, 0.0, tmp53.dtype)
        tmp55 = tl.where(tmp21, tmp53, tmp54)
        tmp57 = tl.where(tmp21, tmp55, tmp56)
        tmp58 = tl.where(tmp2, tmp42, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op376: SchedulerNode(ComputedBuffer)
op376.writes = [MemoryDep('buf376', c0, {c0: 263168}, None)]
op376.unmet_dependencies = 
    [   MemoryDep('buf372', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf373', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf374', 513*c0 + c1, {c0: 1024, c1: 257}, None),
        MemoryDep('buf375', 513*c0 + c1, {c0: 1024, c1: 257}, None)]
op376.met_dependencies = []
op376.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
    buf376.users = [NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False)]
]
op376.group.device = cuda:0
op376.group.iteration = (263168, 1)
op376.sizes = ([4, 256, 257], [])
buf375_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf372_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
class op376_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 257}
    index0 = z1 + z2 - 255
    index1 = 131328*z0 + 513*z1 + z2
    index2 = z2
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index5 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index6 = 65792*z0 + 257*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        constant_3 = ops.constant(0, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq = ops.eq(constant_3, constant_4)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf375', get_index_1)
        constant_5 = ops.constant(0, torch.int64)
        constant_6 = ops.constant(1, torch.int64)
        ge = ops.ge(constant_5, constant_6)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf374', get_index_2)
        where_1 = ops.where(ge, masked_subblock1, load_1)
        where_2 = ops.where(eq, load, where_1)
        constant_7 = ops.constant(-inf, torch.float32)
        where_3 = ops.where(to_dtype, constant_7, where_2)
        get_index_3 = self.get_index('index6')
        store = ops.store('buf376', get_index_3, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('buf373', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf374', get_index_1)
        where = ops.where(lt, masked_subblock2, load)
        return where
op376 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 257
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 256
        y3 = yindex
        y1 = (yindex // 256)
        tmp9 = tl.load(in_ptr0 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr3 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = (-255) + x2 + y0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 <= tmp1
        tmp3 = 1.0
        tmp4 = 0.0
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tmp6 = (tmp5 != 0)
        tmp7 = tl.full([1, 1], 0, tl.int32)
        tmp8 = tmp7 == tmp7
        tmp10 = tl.full([1, 1], 1, tl.int64)
        tmp11 = tmp1 >= tmp10
        tmp12 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp13 = tl.full([1, 1], 256, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp17 = tl.full([1, 1], 512, tl.int64)
        tmp18 = tmp16 < tmp17
        tmp19 = tmp18 & tmp15
        tmp20 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tmp20 * tmp21
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp19, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp15, tmp24, tmp25)
        tmp27 = tl.load(in_ptr3 + (x2 + (513*y3)), tmp11 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.where(tmp14, tmp26, tmp27)
        tmp29 = tl.full(tmp28.shape, 0.0, tmp28.dtype)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp32 = tl.where(tmp11, tmp30, tmp31)
        tmp33 = tl.where(tmp8, tmp9, tmp32)
        tmp34 = float("-inf")
        tmp35 = tl.where(tmp6, tmp34, tmp33)
        tl.store(out_ptr0 + (x2 + (257*y3)), tmp35, xmask)


op377: SchedulerNode(ComputedBuffer)
op377.writes = [MemoryDep('buf377', c0, {c0: 2101248}, None)]
op377.unmet_dependencies = 
    [   MemoryDep('buf372', ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf373', ModularIndexing(c2 + 513*ModularIndexing(c1, 1, 256), 1, 512) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf374', 131328*c0 + c2 + 525312*((c1//256)) + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf375', 131328*c0 + c2 + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf376', 65792*c0 + 257*c1 + c2, {c0: 4, c1: 1024, c2: 513}, None)]
op377.met_dependencies = []
op377.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
    buf377.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op377.group.device = cuda:0
op377.group.iteration = (2101248, 1)
op377.sizes = ([4, 1024, 513], [])
buf376_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf372_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
class op377_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 513}
    index0 = z1
    index1 = z2
    index2 = 65792*z0 + 257*z1 + z2
    index3 = (z1//256)
    index4 = 131328*z0 + z2 + 513*ModularIndexing(z1, 1, 256)
    index5 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index7 = ModularIndexing(z2 + 513*ModularIndexing(z1, 1, 256), 1, 512) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index8 = 131328*z0 + z2 + 525312*((z1//256)) + 513*ModularIndexing(z1, 1, 256)
    index9 = 525312*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf375', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock6 = self.masked_subblock6(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf374', get_index_4)
        where = ops.where(ge, masked_subblock6, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_5 = self.get_index('index9')
        store = ops.store('buf377', get_index_5, where_2, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf376', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf373', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf374', get_index_1)
        where = ops.where(lt, masked_subblock4, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf375', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf374', get_index_4)
        where = ops.where(ge, masked_subblock3, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock2, where_1)
        return where_2
    def masked_subblock8(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf373', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf374', get_index_1)
        where = ops.where(lt, masked_subblock7, load)
        return where
op377 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 11, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 4096
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 1024
        x2 = xindex
        y1 = (yindex // 1024)
        y3 = yindex
        tmp40 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), xmask, eviction_policy='evict_last')
        tmp55 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 256, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tl.full([1, 1], 257, tl.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp5 & tmp2
        tmp7 = tl.load(in_ptr0 + (x2 + (257*y0) + (65792*y1)), tmp6 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tl.broadcast_to((y0 // 256), [XBLOCK, YBLOCK])
        tmp9 = tl.full([1, 1], 0, tl.int32)
        tmp10 = tmp8 == tmp9
        tmp11 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp12 = tl.full([1, 1], 1, tl.int64)
        tmp13 = tmp8 >= tmp12
        tmp14 = tmp13 & tmp2
        tmp15 = tmp3 < tmp1
        tmp16 = tmp15 & tmp14
        tmp17 = (((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513
        tmp18 = tl.full([1, 1], 512, tl.int64)
        tmp19 = tmp17 < tmp18
        tmp20 = tmp19 & tmp16
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp23 = tmp21 * tmp22
        tmp24 = tl.full(tmp23.shape, 0.0, tmp23.dtype)
        tmp25 = tl.where(tmp20, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp16, tmp25, tmp26)
        tmp28 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp14 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tl.where(tmp15, tmp27, tmp28)
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp14, tmp29, tmp30)
        tmp32 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp33 = tl.where(tmp13, tmp31, tmp32)
        tmp34 = tl.where(tmp10, tmp11, tmp33)
        tmp35 = tl.where(tmp5, tmp7, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp2, tmp35, tmp36)
        tmp38 = (y0 // 256)
        tmp39 = tmp38 == tmp9
        tmp41 = tmp38 >= tmp12
        tmp42 = tmp15 & tmp41
        tmp43 = tmp19 & tmp42
        tmp44 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp45 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tmp44 * tmp45
        tmp47 = tl.full(tmp46.shape, 0.0, tmp46.dtype)
        tmp48 = tl.where(tmp43, tmp46, tmp47)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp42, tmp48, tmp49)
        tmp51 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp41 & xmask, eviction_policy='evict_last', other=0.0)
        tmp52 = tl.where(tmp15, tmp50, tmp51)
        tmp53 = tl.full(tmp52.shape, 0.0, tmp52.dtype)
        tmp54 = tl.where(tmp41, tmp52, tmp53)
        tmp56 = tl.where(tmp41, tmp54, tmp55)
        tmp57 = tl.where(tmp39, tmp40, tmp56)
        tmp58 = tl.where(tmp2, tmp37, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op378: SchedulerNode(ComputedBuffer)
op378.writes = [   MemoryDep('buf378', 6324224*c0 + 513*c1 + 6176*c2 + c3, {c0: 4, c1: 12, c2: 1024, c3: 513}, None)]
op378.unmet_dependencies = 
    [   MemoryDep('buf370', 525312*c0 + 513*c1 + c2 + 131328*((ModularIndexing(c1, 1, 256)//256)), {c0: 48, c1: 1024, c2: 513}, None),
        MemoryDep('buf371', 131328*c0 + c1 - 393984, {c0: 48, c1: 525312}, None),
        MemoryDep('buf377', 525312*c0 + c2, {c0: 4, c1: 12, c2: 525312}, None)]
op378.met_dependencies = []
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
    buf378.users = [
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
    ]
]
op378.group.device = cuda:0
op378.group.iteration = (25214976, 1)
op378.sizes = ([4, 12, 1024, 513], [])
buf371_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
buf378_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
class op378_loop_body:
    var_ranges = {z0: 4, z1: 12, z2: 1024, z3: 513}
    index0 = z2
    index1 = 1575936*z0 + 131328*z1 + 513*z2 + z3 - 393984
    index2 = z2 + 256*((ModularIndexing(z2, 1, 256)//256))
    index3 = z3
    index4 = z2 + z3 + 256*((ModularIndexing(z2, 1, 256)//256)) - 255
    index5 = 6303744*z0 + 525312*z1 + 513*z2 + z3 + 131328*((ModularIndexing(z2, 1, 256)//256))
    index6 = -z2 - z3 + 1280
    index7 = 525312*z0 + 513*z2 + z3
    index8 = 6324224*z0 + 513*z1 + 6176*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(768, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index5')
        load = ops.load('buf370', get_index_2)
        where = ops.where(lt, masked_subblock2, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_4 = self.get_index('index7')
        load_1 = ops.load('buf377', get_index_4)
        where_2 = ops.where(ge_1, masked_subblock4, load_1)
        add = ops.add(where_1, where_2)
        get_index_5 = self.get_index('index8')
        store = ops.store('buf378', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf371', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf370', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf370', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf377', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(ge, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf377', get_index_1)
        where = ops.where(ge, masked_subblock5, load)
        return where
op378 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 513) % 1024
        x4 = xindex % 525312
        x5 = (xindex // 525312)
        x0 = xindex % 513
        x3 = (xindex // 6303744)
        x2 = (xindex // 525312) % 12
        tmp27 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), None)
        tmp44 = tl.load(in_ptr2 + (x4 + (525312*x3)), None, eviction_policy='evict_last')
        tmp0 = x1
        tmp1 = tl.full([1], 768, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.load(in_ptr0 + ((-393984) + x4 + (131328*x5)), tmp2, other=0.0)
        tmp4 = x1 + (256*((x1 % 256) // 256))
        tmp5 = tl.full([1], 256, tl.int64)
        tmp6 = tmp4 < tmp5
        tmp7 = x0
        tmp8 = tl.full([1], 257, tl.int64)
        tmp9 = tmp7 < tmp8
        tmp10 = tmp9 & tmp6
        tmp11 = (-255) + x0 + x1 + (256*((x1 % 256) // 256))
        tmp12 = tl.full([1], 0, tl.int64)
        tmp13 = tmp11 <= tmp12
        tmp14 = 1.0
        tmp15 = 0.0
        tmp16 = tl.where(tmp13, tmp14, tmp15)
        tmp17 = (tmp16 != 0)
        tmp18 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp10, other=0.0)
        tmp19 = float("-inf")
        tmp20 = tl.where(tmp17, tmp19, tmp18)
        tmp21 = tl.full(tmp20.shape, 0.0, tmp20.dtype)
        tmp22 = tl.where(tmp10, tmp20, tmp21)
        tmp23 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp6, other=0.0)
        tmp24 = tl.where(tmp9, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp6, tmp24, tmp25)
        tmp28 = tl.where(tmp6, tmp26, tmp27)
        tmp29 = tl.where(tmp2, tmp3, tmp28)
        tmp30 = tmp7 >= tmp5
        tmp31 = tmp30 & tmp2
        tmp32 = 1280 + ((-1)*x0) + ((-1)*x1)
        tmp33 = tmp32 <= tmp12
        tmp34 = tl.where(tmp33, tmp14, tmp15)
        tmp35 = (tmp34 != 0)
        tmp36 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp31, eviction_policy='evict_last', other=0.0)
        tmp37 = tl.where(tmp35, tmp19, tmp36)
        tmp38 = tl.full(tmp37.shape, 0.0, tmp37.dtype)
        tmp39 = tl.where(tmp31, tmp37, tmp38)
        tmp40 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.where(tmp30, tmp39, tmp40)
        tmp42 = tl.full(tmp41.shape, 0.0, tmp41.dtype)
        tmp43 = tl.where(tmp2, tmp41, tmp42)
        tmp45 = tl.where(tmp2, tmp43, tmp44)
        tmp46 = tmp29 + tmp45
        tl.store(out_ptr0 + (x0 + (513*x2) + (6176*x1) + (6324224*x3)), tmp46, None)


op379: SchedulerNode(ComputedBuffer)
op379.writes = [MemoryDep('buf379', c0, {c0: 49152}, None)]
op379.unmet_dependencies = [MemoryDep('buf378', 6176*c0 + c1, {c0: 4096, c1: 6156}, None)]
op379.met_dependencies = []
op379.outputs = [
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf379.users = [
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
    ]
]
op379.group.device = cuda:0
op379.group.iteration = (49152, 513)
op379.sizes = ([4096, 12], [513])
buf378_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op379_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf379', get_index_1, reduction)
        return store_reduction
op379 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        x3 = xindex
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp2, None)


op380: SchedulerNode(ComputedBuffer)
op380.writes = [MemoryDep('buf380', c0, {c0: 49152}, None)]
op380.unmet_dependencies = 
    [   MemoryDep('buf378', 6176*c0 + c1, {c0: 4096, c1: 6156}, None),
        MemoryDep('buf379', c0, {c0: 49152}, None)]
op380.met_dependencies = []
op380.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf380.users = [NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False)]
]
op380.group.device = cuda:0
op380.group.iteration = (49152, 513)
op380.sizes = ([4096, 12], [513])
buf378_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf380_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op380_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf379', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf380', get_index_2, reduction)
        return store_reduction
op380 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        x3 = xindex
        tmp1 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp5, None)


op381: SchedulerNode(ComputedBuffer)
op381.writes = [MemoryDep('buf381', c0, {c0: 3145728}, None)]
op381.unmet_dependencies = [MemoryDep('buf359', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op381.met_dependencies = []
op381.outputs = [
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf381.users = [NodeUser(node=ExternKernelSchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
]
op381.group.device = cuda:0
op381.group.iteration = (3145728, 1)
op381.sizes = ([1024, 4, 768], [])
buf359_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op381_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf381', get_index_1, load, None)
        return store
op381 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op382: ExternKernelSchedulerNode(ExternKernelOut)
op382.writes = [StarDep(name='buf382', mode=None)]
op382.unmet_dependencies = [StarDep(name='buf381', mode=None)]
op382.met_dependencies = [StarDep(name='arg151_1', mode=None)]
op382.outputs = [
    buf382: ExternKernelOut
    buf382.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf382.users = [NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False)]
]
op382.node.kernel = extern_kernels.mm


op383: SchedulerNode(ComputedBuffer)
op383.writes = [MemoryDep('buf383', c0, {c0: 4718592}, None)]
op383.unmet_dependencies = [   MemoryDep('buf382', 64*c0 + 3072*c1 + c2 - 786432, {c0: 48, c1: 1536, c2: 64}, None)]
op383.met_dependencies = [   MemoryDep('arg152_1', c2 + 64*ModularIndexing(c0, 1, 12), {c0: 48, c1: 1536, c2: 64}, None)]
op383.outputs = [
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
    buf383.users = [NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False)]
]
op383.group.device = cuda:0
op383.group.iteration = (4718592, 1)
op383.sizes = ([48, 1536, 64], [])
buf382_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf383_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
class op383_loop_body:
    var_ranges = {z0: 48, z1: 1536, z2: 64}
    index0 = z1 - 256
    index1 = 64*z0 + 3072*z1 + z2 - 786432
    index2 = z2 + 64*ModularIndexing(z0, 1, 12)
    index3 = 98304*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1024, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, -1.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf383', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf382', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg152_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op383 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 1536
        x0 = xindex % 64
        x2 = (xindex // 98304)
        x3 = xindex
        tmp0 = (-256) + x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 1024, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-786432) + x0 + (64*x2) + (3072*x1)), tmp5, other=0.0)
        tmp7 = tl.load(in_ptr1 + (x0 + (64*(x2 % 12))), tmp5, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, -1.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op384: SchedulerNode(ComputedBuffer)
op384.writes = [   MemoryDep('buf384', 770*c0 + 788480*c1 + c2, {c0: 1024, c1: 48, c2: 770}, None)]
op384.unmet_dependencies = 
    [   MemoryDep('buf378', 6176*c0 + c2 + 6324224*((c1//12)) + 6324224*((ModularIndexing(c1, 1, 12)//12)) + 513*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 770}, None),
        MemoryDep('buf379', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None),
        MemoryDep('buf380', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None)]
op384.met_dependencies = [MemoryDep('arg8_1', c0 + 1024*((c1//12)), {c0: 1024, c1: 48}, None)]
op384.outputs = [
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
    buf384.users = [NodeUser(node=ExternKernelSchedulerNode(name='op386'), can_inplace=False, is_weak=False)]
]
op384.group.device = cuda:0
op384.group.iteration = (37847040, 1)
op384.sizes = ([1024, 48, 770], [])
arg8_1_layout = FixedLayout('cuda', torch.bool, size=[4, 1024], stride=[1024, 1])
buf378_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf380_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf384_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
class op384_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 770}
    index0 = z2
    index1 = z0 + 1024*((z1//12))
    index2 = 6176*z0 + z2 + 6324224*((z1//12)) + 6324224*((ModularIndexing(z1, 1, 12)//12)) + 513*ModularIndexing(z1, 1, 12)
    index3 = 12*z0 + 12288*((z1//12)) + ModularIndexing(z1, 1, 12)
    index4 = 770*z0 + 788480*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(513, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index4')
        store = ops.store('buf384', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg8_1', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf378', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('buf379', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf380', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(load, constant, truediv)
        return where
op384 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 37847040
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 770
        x1 = (xindex // 770) % 48
        x2 = (xindex // 36960)
        tmp0 = x0
        tmp1 = tl.full([1], 513, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.load(in_ptr0 + (x2 + (1024*(x1 // 12))), tmp2, eviction_policy='evict_last', other=0.0).to(tl.int1)
        tmp4 = tl.load(in_ptr1 + (x0 + (513*(x1 % 12)) + (6176*x2) + (6324224*(x1 // 12)) + (6324224*((x1 % 12) // 12))), tmp2, other=0.0)
        tmp5 = tl.load(in_ptr2 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp4 - tmp5
        tmp7 = tl_math.exp(tmp6)
        tmp8 = tl.load(in_ptr3 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp9 = tmp7 / tmp8
        tmp10 = 0.0
        tmp11 = tl.where(tmp3, tmp10, tmp9)
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp2, tmp11, tmp12)
        tl.store(out_ptr0 + (x0 + (770*x2) + (788480*x1)), tmp13, None)


op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 9437184}, None)]
op385.unmet_dependencies = [   MemoryDep('buf383', 98304*c0 + 16384*c1 + c2, {c0: 48, c1: 4, c2: 49152}, None)]
op385.met_dependencies = []
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
    buf385.users = [NodeUser(node=ExternKernelSchedulerNode(name='op386'), can_inplace=False, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (9437184, 1)
op385.sizes = ([48, 4, 49152], [])
buf383_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
class op385_loop_body:
    var_ranges = {z0: 48, z1: 4, z2: 49152}
    index0 = 98304*z0 + 16384*z1 + z2
    index1 = 196608*z0 + 49152*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf385', get_index_1, load, None)
        return store
op385 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 9437184
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 49152
        x1 = (xindex // 49152) % 4
        x2 = (xindex // 196608)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (16384*x1) + (98304*x2)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op386: ExternKernelSchedulerNode(ExternKernelOut)
op386.writes = [StarDep(name='buf386', mode=None)]
op386.unmet_dependencies = [StarDep(name='buf384', mode=None), StarDep(name='buf385', mode=None)]
op386.met_dependencies = []
op386.outputs = [
    buf386: ExternKernelOut
    buf386.layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
    buf386.users = [NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False)]
]
op386.node.kernel = extern_kernels.bmm


op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', c0, {c0: 3145728}, None)]
op387.unmet_dependencies = [   MemoryDep('buf386', 786432*c0 + 64*c1 + 65536*((c2//64)) + ModularIndexing(c2, 1, 64), {c0: 4, c1: 1024, c2: 768}, None)]
op387.met_dependencies = []
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf387.users = [NodeUser(node=ExternKernelSchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
]
op387.group.device = cuda:0
op387.group.iteration = (3145728, 1)
op387.sizes = ([4, 1024, 768], [])
buf386_layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op387_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 768}
    index0 = 786432*z0 + 64*z1 + 65536*((z2//64)) + ModularIndexing(z2, 1, 64)
    index1 = 786432*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf386', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf387', get_index_1, load, None)
        return store
op387 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 1024
        x2 = (xindex // 786432)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + ((64*x1) + (65536*(x0 // 64)) + (786432*x2) + (x0 % 64)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op388: ExternKernelSchedulerNode(ExternKernelOut)
op388.writes = [StarDep(name='buf388', mode=None)]
op388.unmet_dependencies = [StarDep(name='buf387', mode=None)]
op388.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op388.outputs = [
    buf388: ExternKernelOut
    buf388.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf388.users = [
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=True, is_weak=False),
    ]
]
op388.node.kernel = extern_kernels.mm


op389: SchedulerNode(ComputedBuffer)
op389.writes = [MemoryDep('buf389', c0, {c0: 4096}, None)]
op389.unmet_dependencies = 
    [   MemoryDep('buf359', c0, {c0: 3145728}, None),
        MemoryDep('buf388', c0, {c0: 3145728}, None)]
op389.met_dependencies = [MemoryDep('arg154_1', c1, {c0: 4096, c1: 768}, None)]
op389.outputs = [
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf389.users = [NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
]
op389.group.device = cuda:0
op389.group.iteration = (4096, 768)
op389.sizes = ([4096], [768])
buf388_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf389_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op389_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf388', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf359', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf389', get_index_3, getitem)
        return store_reduction
op389 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op390: SchedulerNode(ComputedBuffer)
op390.writes = [MemoryDep('buf390', c0, {c0: 4096}, None)]
op390.unmet_dependencies = 
    [   MemoryDep('buf359', c0, {c0: 3145728}, None),
        MemoryDep('buf388', c0, {c0: 3145728}, None)]
op390.met_dependencies = [MemoryDep('arg154_1', c1, {c0: 4096, c1: 768}, None)]
op390.outputs = [
    buf390: ComputedBuffer
    buf390.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf390.users = [NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
]
op390.group.device = cuda:0
op390.group.iteration = (4096, 768)
op390.sizes = ([4096], [768])
buf388_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf390_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op390_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf388', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf359', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf390', get_index_3, getitem_1)
        return store_reduction
op390 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op392: SchedulerNode(ComputedBuffer)
op392.writes = [MemoryDep('buf392', c0, {c0: 3145728}, None)]
op392.unmet_dependencies = 
    [   MemoryDep('buf359', c0, {c0: 3145728}, None),
        MemoryDep('buf388', c0, {c0: 3145728}, None),
        MemoryDep('buf389', c0, {c0: 4096}, None),
        MemoryDep('buf390', c0, {c0: 4096}, None)]
op392.met_dependencies = 
    [   MemoryDep('arg154_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg155_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg156_1', c1, {c0: 4096, c1: 768}, None)]
op392.outputs = [
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf392.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=True, is_weak=False),
    ]
]
op392.group.device = cuda:0
op392.group.iteration = (3145728, 1)
op392.sizes = ([4096, 768], [])
buf388_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf389_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf390_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op392_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf388', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf359', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf389', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf390', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg155_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg156_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf392', get_index_7, add_3, None)
        return store
op392 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op393: ExternKernelSchedulerNode(ExternKernelOut)
op393.writes = [StarDep(name='buf393', mode=None)]
op393.unmet_dependencies = [StarDep(name='buf392', mode=None)]
op393.met_dependencies = [StarDep(name='arg157_1', mode=None)]
op393.outputs = [
    buf393: ExternKernelOut
    buf393.layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
    buf393.users = [NodeUser(node=SchedulerNode(name='op394'), can_inplace=True, is_weak=False)]
]
op393.node.kernel = extern_kernels.mm


op394: SchedulerNode(ComputedBuffer)
op394.writes = [MemoryDep('buf394', c0, {c0: 12582912}, None)]
op394.unmet_dependencies = [MemoryDep('buf393', c0, {c0: 12582912}, None)]
op394.met_dependencies = [MemoryDep('arg158_1', c1, {c0: 4096, c1: 3072}, None)]
op394.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
    buf394.users = [NodeUser(node=ExternKernelSchedulerNode(name='op395'), can_inplace=False, is_weak=False)]
]
op394.group.device = cuda:0
op394.group.iteration = (12582912, 1)
op394.sizes = ([4096, 3072], [])
buf393_layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf394_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
class op394_loop_body:
    var_ranges = {z0: 4096, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf393', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg158_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf393', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg158_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf394', get_index_4, mul_2, None)
        return store
op394 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op395: ExternKernelSchedulerNode(ExternKernelOut)
op395.writes = [StarDep(name='buf395', mode=None)]
op395.unmet_dependencies = [StarDep(name='buf394', mode=None)]
op395.met_dependencies = [StarDep(name='arg159_1', mode=None)]
op395.outputs = [
    buf395: ExternKernelOut
    buf395.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf395.users = [
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=True, is_weak=False),
    ]
]
op395.node.kernel = extern_kernels.mm


op396: SchedulerNode(ComputedBuffer)
op396.writes = [MemoryDep('buf396', c0, {c0: 4096}, None)]
op396.unmet_dependencies = 
    [   MemoryDep('buf392', c0, {c0: 3145728}, None),
        MemoryDep('buf395', c0, {c0: 3145728}, None)]
op396.met_dependencies = [MemoryDep('arg160_1', c1, {c0: 4096, c1: 768}, None)]
op396.outputs = [
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf396.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op396.group.device = cuda:0
op396.group.iteration = (4096, 768)
op396.sizes = ([4096], [768])
buf395_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf396_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op396_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf395', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg160_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf392', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf396', get_index_3, getitem)
        return store_reduction
op396 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op397: SchedulerNode(ComputedBuffer)
op397.writes = [MemoryDep('buf397', c0, {c0: 4096}, None)]
op397.unmet_dependencies = 
    [   MemoryDep('buf392', c0, {c0: 3145728}, None),
        MemoryDep('buf395', c0, {c0: 3145728}, None)]
op397.met_dependencies = [MemoryDep('arg160_1', c1, {c0: 4096, c1: 768}, None)]
op397.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf397.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op397.group.device = cuda:0
op397.group.iteration = (4096, 768)
op397.sizes = ([4096], [768])
buf395_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op397_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf395', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg160_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf392', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf397', get_index_3, getitem_1)
        return store_reduction
op397 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op399: SchedulerNode(ComputedBuffer)
op399.writes = [MemoryDep('buf399', c0, {c0: 3145728}, None)]
op399.unmet_dependencies = 
    [   MemoryDep('buf392', c0, {c0: 3145728}, None),
        MemoryDep('buf395', c0, {c0: 3145728}, None),
        MemoryDep('buf396', c0, {c0: 4096}, None),
        MemoryDep('buf397', c0, {c0: 4096}, None)]
op399.met_dependencies = 
    [   MemoryDep('arg160_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg161_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg162_1', c1, {c0: 4096, c1: 768}, None)]
op399.outputs = [
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf399.users = [
        NodeUser(node=SchedulerNode(name='op400'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=True, is_weak=False),
    ]
]
op399.group.device = cuda:0
op399.group.iteration = (3145728, 1)
op399.sizes = ([4096, 768], [])
buf395_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf396_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf397_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op399_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf395', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg160_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf392', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf396', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf397', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg161_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg162_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf399', get_index_7, add_3, None)
        return store
op399 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op400: SchedulerNode(ComputedBuffer)
op400.writes = [MemoryDep('buf400', c0, {c0: 3145728}, None)]
op400.unmet_dependencies = [MemoryDep('buf399', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op400.met_dependencies = []
op400.outputs = [
    buf400: ComputedBuffer
    buf400.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf400.users = [NodeUser(node=ExternKernelSchedulerNode(name='op401'), can_inplace=False, is_weak=False)]
]
op400.group.device = cuda:0
op400.group.iteration = (3145728, 1)
op400.sizes = ([1024, 4, 768], [])
buf399_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf400_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op400_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf400', get_index_1, load, None)
        return store
op400 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op401: ExternKernelSchedulerNode(ExternKernelOut)
op401.writes = [StarDep(name='buf401', mode=None)]
op401.unmet_dependencies = [StarDep(name='buf400', mode=None)]
op401.met_dependencies = [StarDep(name='arg163_1', mode=None)]
op401.outputs = [
    buf401: ExternKernelOut
    buf401.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf401.users = [NodeUser(node=SchedulerNode(name='op402'), can_inplace=True, is_weak=False)]
]
op401.node.kernel = extern_kernels.mm


op402: SchedulerNode(ComputedBuffer)
op402.writes = [MemoryDep('buf402', c0, {c0: 3145728}, None)]
op402.unmet_dependencies = [MemoryDep('buf401', c0, {c0: 3145728}, None)]
op402.met_dependencies = [   MemoryDep('arg164_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op402.outputs = [
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf402.users = [NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False)]
]
op402.group.device = cuda:0
op402.group.iteration = (3145728, 1)
op402.sizes = ([1024, 48, 64], [])
buf401_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op402_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf401', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg164_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf402', get_index_2, mul, None)
        return store
op402 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x3), tmp4, None)


op403: SchedulerNode(ComputedBuffer)
op403.writes = [MemoryDep('buf403', c0, {c0: 3145728}, None)]
op403.unmet_dependencies = [MemoryDep('buf399', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op403.met_dependencies = []
op403.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf403.users = [NodeUser(node=ExternKernelSchedulerNode(name='op404'), can_inplace=False, is_weak=False)]
]
op403.group.device = cuda:0
op403.group.iteration = (3145728, 1)
op403.sizes = ([1024, 4, 768], [])
buf399_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op403_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf403', get_index_1, load, None)
        return store
op403 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op404: ExternKernelSchedulerNode(ExternKernelOut)
op404.writes = [StarDep(name='buf404', mode=None)]
op404.unmet_dependencies = [StarDep(name='buf403', mode=None)]
op404.met_dependencies = [StarDep(name='arg165_1', mode=None)]
op404.outputs = [
    buf404: ExternKernelOut
    buf404.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf404.users = [NodeUser(node=SchedulerNode(name='op405'), can_inplace=True, is_weak=False)]
]
op404.node.kernel = extern_kernels.mm


op405: SchedulerNode(ComputedBuffer)
op405.writes = [MemoryDep('buf405', c0, {c0: 3145728}, None)]
op405.unmet_dependencies = [MemoryDep('buf404', c0, {c0: 3145728}, None)]
op405.met_dependencies = [   MemoryDep('arg166_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op405.outputs = [
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf405.users = [NodeUser(node=SchedulerNode(name='op407'), can_inplace=False, is_weak=False)]
]
op405.group.device = cuda:0
op405.group.iteration = (3145728, 1)
op405.sizes = ([1024, 48, 64], [])
buf404_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf405_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op405_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf404', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg166_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf405', get_index_2, add, None)
        return store
op405 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x3), tmp2, None)


op406: SchedulerNode(ComputedBuffer)
op406.writes = [MemoryDep('buf406', c0, {c0: 4718592}, None)]
op406.unmet_dependencies = [   MemoryDep('buf402', 64*c0 + 786432*c1 + 3072*c2 + c3, {c0: 48, c1: 3, c2: 512, c3: 64}, None)]
op406.met_dependencies = []
op406.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
    buf406.users = [NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False)]
]
op406.group.device = cuda:0
op406.group.iteration = (4718592, 1)
op406.sizes = ([48, 3, 512, 64], [])
buf402_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
class op406_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 512, z3: 64}
    index0 = 64*z0 + 786432*z1 + 3072*z2 + z3
    index1 = 98304*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf402', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf406', get_index_1, load, None)
        return store
op406 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 3
        x3 = (xindex // 98304)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x3) + (3072*x1) + (786432*x2)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op407: SchedulerNode(ComputedBuffer)
op407.writes = [MemoryDep('buf407', c0, {c0: 4718592}, None)]
op407.unmet_dependencies = [   MemoryDep('buf405', 64*c0 + 786432*c1 + c2 + 3072*c3, {c0: 48, c1: 3, c2: 64, c3: 512}, None)]
op407.met_dependencies = []
op407.outputs = [
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
    buf407.users = [NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False)]
]
op407.group.device = cuda:0
op407.group.iteration = (4718592, 1)
op407.sizes = ([48, 3, 64, 512], [])
buf405_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
class op407_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 64, z3: 512}
    index0 = 64*z0 + 786432*z1 + z2 + 3072*z3
    index1 = 98304*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf405', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf407', get_index_1, load, None)
        return store
op407 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 9216
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 3
        y2 = (yindex // 192)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (3072*x3) + (786432*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op408: ExternKernelSchedulerNode(ExternKernelOut)
op408.writes = [StarDep(name='buf408', mode=None)]
op408.unmet_dependencies = [StarDep(name='buf406', mode=None), StarDep(name='buf407', mode=None)]
op408.met_dependencies = []
op408.outputs = [
    buf408: ExternKernelOut
    buf408.layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
    buf408.users = [
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
    ]
]
op408.node.kernel = extern_kernels.bmm


op409: SchedulerNode(ComputedBuffer)
op409.writes = [MemoryDep('buf409', 24640*c0 + c1, {c0: 1024, c1: 24624}, None)]
op409.unmet_dependencies = 
    [   MemoryDep('buf408', 786432*c2 + 262144*(((513*c0 + c3 + 656384)//262656)) + 786432*(((513*c0 + c3 + 656384)//787968)) + ModularIndexing(513*c0 + c3, 1, 512) + 512*ModularIndexing(513*c0 + c3 + 656384, 512, 513), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf408', ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 262656, 144), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf408', ModularIndexing(513*c0 + c3 + 787712, 1, 262656) + 262144*ModularIndexing(513*c0 + c3 + 787712, 262656, 3) + 786432*ModularIndexing(513*c0 + 787968*c2 + c3 + 787712, 787968, 48), {c0: 256, c1: 4, c2: 48, c3: 513}, None)]
op409.met_dependencies = []
op409.outputs = [
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
    buf409.users = [NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False)]
]
op409.group.device = cuda:0
op409.group.iteration = (25214976, 1)
op409.sizes = ([256, 4, 48, 513], [])
buf408_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
class op409_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 48, z3: 513}
    index0 = z1
    index1 = z3
    index2 = ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index3 = 786432*z2 + 262144*(((513*z0 + z3 + 656384)//262656)) + 786432*(((513*z0 + z3 + 656384)//787968)) + ModularIndexing(513*z0 + z3, 1, 512) + 512*ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index4 = ModularIndexing(513*z0 + z3 + 787712, 512, 513)
    index5 = ModularIndexing(513*z0 + z3 + 787712, 1, 262656) + 262144*ModularIndexing(513*z0 + z3 + 787712, 262656, 3) + 786432*ModularIndexing(513*z0 + 787968*z2 + z3 + 787712, 787968, 48)
    index6 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 512, 513)
    index7 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 262656, 144)
    index8 = 98560*z0 + 24640*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index8')
        store = ops.store('buf409', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf408', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf408', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf408', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op409 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[256, 131072], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 256
        xnumel = 98496
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = (xindex // 24624)
        x1 = xindex % 513
        y0 = yindex
        x2 = (xindex // 513) % 48
        x5 = xindex % 24624
        tmp0 = x3
        tmp1 = tl.full([1, 1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1, 1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x1 + (513*y0)) // 512) % 513
        tmp7 = tl.full([1, 1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((512*(((656384 + x1 + (513*y0)) // 512) % 513)) + (262144*((656384 + x1 + (513*y0)) // 262656)) + (786432*x2) + (786432*((656384 + x1 + (513*y0)) // 787968)) + ((x1 + (513*y0)) % 512)), tmp9 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.full(tmp10.shape, 0.0, tmp10.dtype)
        tmp12 = tl.where(tmp5, tmp10, tmp11)
        tmp13 = tl.full([1, 1], 3, tl.int64)
        tmp14 = tmp13 < tmp13
        tmp15 = tl.broadcast_to(x1, [XBLOCK, YBLOCK])
        tmp16 = tmp15 >= tmp4
        tmp17 = tmp16 & tmp14
        tmp18 = ((787712 + x1 + (513*y0)) // 512) % 513
        tmp19 = tmp18 < tmp7
        tmp20 = tmp19 & tmp17
        tmp21 = tl.load(in_ptr0 + ((262144*(((787712 + x1 + (513*y0)) // 262656) % 3)) + (786432*(((787712 + x1 + (513*y0) + (787968*x2)) // 787968) % 48)) + ((787712 + x1 + (513*y0)) % 262656)), tmp20 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.full(tmp21.shape, 0.0, tmp21.dtype)
        tmp23 = tl.where(tmp17, tmp21, tmp22)
        tmp24 = 0.0
        tmp25 = tl.where(tmp16, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp14, tmp25, tmp26)
        tmp28 = tl.where(tmp14, tmp27, tmp24)
        tmp29 = tl.where(tmp5, tmp12, tmp28)
        tmp30 = tmp0 < tmp13
        tmp31 = tmp16 & tmp30
        tmp32 = (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp33 = tmp32 < tmp7
        tmp34 = tmp33 & tmp31
        tmp35 = tl.load(in_ptr0 + ((262144*((((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 262656) % 144)) + (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) % 262656)), tmp34 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp31, tmp35, tmp36)
        tmp38 = tl.where(tmp16, tmp37, tmp24)
        tmp39 = tl.full(tmp38.shape, 0.0, tmp38.dtype)
        tmp40 = tl.where(tmp30, tmp38, tmp39)
        tmp41 = tl.where(tmp30, tmp40, tmp24)
        tmp42 = tl.where(tmp2, tmp29, tmp41)
        tl.store(out_ptr0 + (x5 + (24640*x3) + (98560*y0)), tmp42, xmask & ymask)


op410: SchedulerNode(ComputedBuffer)
op410.writes = [   MemoryDep('buf410', 131328*c0 + 525312*c1 + c2, {c0: 4, c1: 48, c2: 131328}, None)]
op410.unmet_dependencies = 
    [   MemoryDep('buf408', ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 262656, 144), {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf408', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf408', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf409', 24640*c0 + 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf409', 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None)]
op410.met_dependencies = []
op410.outputs = [
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
    buf410.users = [
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
    ]
]
op410.group.device = cuda:0
op410.group.iteration = (25214976, 1)
op410.sizes = ([4, 48, 256, 513], [])
buf408_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
class op410_loop_body:
    var_ranges = {z0: 4, z1: 48, z2: 256, z3: 513}
    index0 = z0
    index1 = z2
    index2 = z3
    index3 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 512, 513)
    index4 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 262656, 144)
    index5 = ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index6 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index7 = 513*z1 + 98560*z2 + z3
    index8 = ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index9 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index10 = 24640*z0 + 513*z1 + 98560*z2 + z3
    index11 = 131328*z0 + 525312*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf409', get_index_2)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_4 = ops.constant(1, torch.int64)
        ge_2 = ops.ge(index_expr_2, constant_4)
        masked_subblock10 = self.masked_subblock10(ge_2, 0.0)
        get_index_4 = self.get_index('index10')
        load_1 = ops.load('buf409', get_index_4)
        where_2 = ops.where(ge_2, masked_subblock10, load_1)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_5 = self.get_index('index11')
        store = ops.store('buf410', get_index_5, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf408', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf408', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf409', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf409', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf408', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf409', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
    def masked_subblock12(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf408', get_index)
        return load
    def masked_subblock11(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock12 = self.masked_subblock12(lt, 0.0)
        return masked_subblock12
    def masked_subblock10(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock11 = self.masked_subblock11(lt, 0.0)
        get_index_1 = self.get_index('index10')
        load = ops.load('buf409', get_index_1)
        where = ops.where(lt, masked_subblock11, load)
        return where
op410 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 6303744)
        x1 = (xindex // 513) % 256
        x0 = xindex % 513
        x2 = (xindex // 131328) % 48
        x4 = xindex % 131328
        tmp47 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), None, eviction_policy='evict_last')
        tmp62 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), None)
        tmp0 = x3
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1], 1, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = x0
        tmp7 = tmp6 >= tmp4
        tmp8 = tl.full([1], 256, tl.int64)
        tmp9 = tmp6 < tmp8
        tmp10 = tmp7 & tmp9
        tmp11 = tmp10 & tmp5
        tmp12 = (((-256) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp13 = tl.full([1], 512, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = tl.load(in_ptr0 + ((262144*((((-256) + x0 + (513*x1) + (787968*x2)) // 262656) % 144)) + (((-256) + x0 + (513*x1) + (787968*x2)) % 262656)), tmp15, eviction_policy='evict_last', other=0.0)
        tmp17 = tl.full(tmp16.shape, 0.0, tmp16.dtype)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.full([1], 0, tl.int64)
        tmp20 = tmp19 >= tmp4
        tmp21 = tmp20 & tmp5
        tmp22 = tmp9 & tmp21
        tmp23 = (((-131584) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp24 = tmp23 < tmp13
        tmp25 = tmp24 & tmp22
        tmp26 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp25, eviction_policy='evict_last', other=0.0)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp22, tmp26, tmp27)
        tmp29 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp21, eviction_policy='evict_last', other=0.0)
        tmp30 = tl.where(tmp9, tmp28, tmp29)
        tmp31 = tl.full(tmp30.shape, 0.0, tmp30.dtype)
        tmp32 = tl.where(tmp21, tmp30, tmp31)
        tmp33 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp5, eviction_policy='evict_last', other=0.0)
        tmp34 = tl.where(tmp20, tmp32, tmp33)
        tmp35 = tl.where(tmp10, tmp18, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp5, tmp35, tmp36)
        tmp38 = tmp9 & tmp20
        tmp39 = tmp24 & tmp38
        tmp40 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp39, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp38, tmp40, tmp41)
        tmp43 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp20, eviction_policy='evict_last', other=0.0)
        tmp44 = tl.where(tmp9, tmp42, tmp43)
        tmp45 = tl.full(tmp44.shape, 0.0, tmp44.dtype)
        tmp46 = tl.where(tmp20, tmp44, tmp45)
        tmp48 = tl.where(tmp20, tmp46, tmp47)
        tmp49 = tl.where(tmp5, tmp37, tmp48)
        tmp50 = tmp0 >= tmp4
        tmp51 = tmp9 & tmp50
        tmp52 = (((-131584) + x0 + (513*x1) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp53 = tmp52 < tmp13
        tmp54 = tmp53 & tmp51
        tmp55 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp54, other=0.0)
        tmp56 = tl.full(tmp55.shape, 0.0, tmp55.dtype)
        tmp57 = tl.where(tmp51, tmp55, tmp56)
        tmp58 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), tmp50, other=0.0)
        tmp59 = tl.where(tmp9, tmp57, tmp58)
        tmp60 = tl.full(tmp59.shape, 0.0, tmp59.dtype)
        tmp61 = tl.where(tmp50, tmp59, tmp60)
        tmp63 = tl.where(tmp50, tmp61, tmp62)
        tmp64 = tl.where(tmp2, tmp49, tmp63)
        tl.store(out_ptr0 + (x4 + (131328*x3) + (525312*x2)), tmp64, None)


op411: SchedulerNode(ComputedBuffer)
op411.writes = [MemoryDep('buf411', c0, {c0: 6303744}, None)]
op411.unmet_dependencies = [MemoryDep('buf410', 525312*c0 + c1 + 393984, {c0: 48, c1: 131328}, None)]
op411.met_dependencies = []
op411.outputs = [
    buf411: ComputedBuffer
    buf411.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
    buf411.users = [NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False)]
]
op411.group.device = cuda:0
op411.group.iteration = (6303744, 1)
op411.sizes = ([48, 256, 513], [])
buf410_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf411_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
class op411_loop_body:
    var_ranges = {z0: 48, z1: 256, z2: 513}
    index0 = z2
    index1 = -z1 - z2 + 512
    index2 = z1 + 768
    index3 = z1 + z2 + 513
    index4 = 525312*z0 + 513*z1 + z2 + 393984
    index5 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf410', get_index_2)
        where = ops.where(lt, masked_subblock4, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index5')
        store = ops.store('buf411', get_index_3, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf410', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf410', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_3 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf410', get_index_2)
        where_1 = ops.where(lt, masked_subblock2, load)
        constant_4 = ops.constant(-inf, torch.float32)
        where_2 = ops.where(to_dtype, constant_4, where_1)
        return where_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf410', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf410', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
op411 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6303744
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 513
        x1 = (xindex // 513) % 256
        x2 = (xindex // 131328)
        x3 = xindex % 131328
        x4 = xindex
        tmp43 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), None)
        tmp0 = x0
        tmp1 = tl.full([1], 256, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = 512 + ((-1)*x0) + ((-1)*x1)
        tmp4 = tl.full([1], 0, tl.int64)
        tmp5 = tmp3 <= tmp4
        tmp6 = 1.0
        tmp7 = 0.0
        tmp8 = tl.where(tmp5, tmp6, tmp7)
        tmp9 = (tmp8 != 0)
        tmp10 = 768 + x1
        tmp11 = tmp10 < tmp1
        tmp12 = tmp11 & tmp2
        tmp13 = tl.full([1], 257, tl.int64)
        tmp14 = tmp0 < tmp13
        tmp15 = tmp14 & tmp12
        tmp16 = 513 + x0 + x1
        tmp17 = tmp16 <= tmp4
        tmp18 = tl.where(tmp17, tmp6, tmp7)
        tmp19 = (tmp18 != 0)
        tmp20 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp15, other=0.0)
        tmp21 = float("-inf")
        tmp22 = tl.where(tmp19, tmp21, tmp20)
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp15, tmp22, tmp23)
        tmp25 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp12, other=0.0)
        tmp26 = tl.where(tmp14, tmp24, tmp25)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp12, tmp26, tmp27)
        tmp29 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp2, other=0.0)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp31 = tl.where(tmp9, tmp21, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tmp34 = tmp14 & tmp11
        tmp35 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp34, other=0.0)
        tmp36 = tl.where(tmp19, tmp21, tmp35)
        tmp37 = tl.full(tmp36.shape, 0.0, tmp36.dtype)
        tmp38 = tl.where(tmp34, tmp36, tmp37)
        tmp39 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp11, other=0.0)
        tmp40 = tl.where(tmp14, tmp38, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp11, tmp40, tmp41)
        tmp44 = tl.where(tmp11, tmp42, tmp43)
        tmp45 = tl.where(tmp2, tmp33, tmp44)
        tl.store(out_ptr0 + (x4), tmp45, None)


op412: SchedulerNode(ComputedBuffer)
op412.writes = [MemoryDep('buf412', c0, {c0: 4096}, None)]
op412.unmet_dependencies = []
op412.met_dependencies = []
op412.outputs = [
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf412.users = [
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False),
    ]
]
op412.group.device = cuda:0
op412.group.iteration = (4096, 1)
op412.sizes = ([4096], [])
buf412_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op412_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(1.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf412', get_index, constant, None)
        return store
op412 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = 1.0
        tl.store(out_ptr0 + (x0), tmp0, None)


op413: SchedulerNode(ComputedBuffer)
op413.writes = [MemoryDep('buf413', c0, {c0: 4096}, None)]
op413.unmet_dependencies = []
op413.met_dependencies = [MemoryDep('arg7_1', c0, {c0: 4096}, None)]
op413.outputs = [
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf413.users = [
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False),
    ]
]
op413.group.device = cuda:0
op413.group.iteration = (4096, 1)
op413.sizes = ([4096], [])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[4, 1024], stride=[1024, 1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op413_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        constant = ops.constant(0.0, torch.float32)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        ne_1 = ops.ne(load_1, constant_1)
        to_dtype = ops.to_dtype(ne_1, torch.float32, src_dtype = torch.bool)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(ne, constant_2, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf413', get_index_2, where, None)
        return store
op413 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.0
        tmp2 = tmp0 != tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp4, tmp3)
        tl.store(out_ptr0 + (x0), tmp5, None)


op414: SchedulerNode(ComputedBuffer)
op414.writes = [   MemoryDep('buf414', 525312*c0 + 513*c1 + 131328*c2 + c3, {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op414.unmet_dependencies = 
    [   MemoryDep('buf412', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3 + 656384, 512, 513), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf412', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 512, 513) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf412', ModularIndexing(513*c1 + c3 + 787712, 512, 513) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf413', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3, 1, 512), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf413', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 1, 512) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf413', ModularIndexing(513*c1 + c3 + 787712, 1, 512) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op414.met_dependencies = []
op414.outputs = [
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
    buf414.users = [
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False),
    ]
]
op414.group.device = cuda:0
op414.group.iteration = (2101248, 1)
op414.sizes = ([4, 256, 4, 513], [])
buf412_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
class op414_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 4, z3: 513}
    index0 = z0
    index1 = z3
    index2 = ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index3 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index4 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3, 1, 512)
    index5 = ModularIndexing(513*z1 + z3 + 787712, 512, 513)
    index6 = ModularIndexing(513*z1 + z3 + 787712, 512, 513) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index7 = ModularIndexing(513*z1 + z3 + 787712, 1, 512) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index8 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513)
    index9 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index10 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 1, 512) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index11 = 525312*z0 + 513*z1 + 131328*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index11')
        store = ops.store('buf414', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf413', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf413', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index10')
        load_1 = ops.load('buf413', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op414 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2101248
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 525312)
        x0 = xindex % 513
        x2 = (xindex // 2052) % 256
        x1 = (xindex // 513) % 4
        tmp0 = x3
        tmp1 = tl.full([1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x0 + (513*x2)) // 512) % 513
        tmp7 = tl.full([1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + (((656384 + x0 + (513*x2)) // 512) % 513)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.load(in_ptr1 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + ((x0 + (513*x2)) % 512)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp12 = tmp10 * tmp11
        tmp13 = tl.full(tmp12.shape, 0.0, tmp12.dtype)
        tmp14 = tl.where(tmp9, tmp12, tmp13)
        tmp15 = tl.full(tmp14.shape, 0.0, tmp14.dtype)
        tmp16 = tl.where(tmp5, tmp14, tmp15)
        tmp17 = tl.full([1], 3, tl.int64)
        tmp18 = tmp17 < tmp17
        tmp19 = tmp5 & tmp18
        tmp20 = ((787712 + x0 + (513*x2)) // 512) % 513
        tmp21 = tmp20 < tmp7
        tmp22 = tmp21 & tmp19
        tmp23 = tl.load(in_ptr0 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + (((787712 + x0 + (513*x2)) // 512) % 513)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp24 = tl.load(in_ptr1 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + ((787712 + x0 + (513*x2)) % 512)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp25 = tmp23 * tmp24
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp22, tmp25, tmp26)
        tmp28 = tl.full(tmp27.shape, 0.0, tmp27.dtype)
        tmp29 = tl.where(tmp19, tmp27, tmp28)
        tmp30 = 0.0
        tmp31 = tl.where(tmp5, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp18, tmp31, tmp32)
        tmp34 = tl.where(tmp18, tmp33, tmp30)
        tmp35 = tl.where(tmp5, tmp16, tmp34)
        tmp36 = tmp0 < tmp17
        tmp37 = tmp5 & tmp36
        tmp38 = (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513
        tmp39 = tmp38 < tmp7
        tmp40 = tmp39 & tmp37
        tmp41 = tl.load(in_ptr0 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + ((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513)), tmp40, eviction_policy='evict_last', other=0.0)
        tmp42 = tl.load(in_ptr1 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) % 512)), tmp40, other=0.0)
        tmp43 = tmp41 * tmp42
        tmp44 = tl.full(tmp43.shape, 0.0, tmp43.dtype)
        tmp45 = tl.where(tmp40, tmp43, tmp44)
        tmp46 = tl.full(tmp45.shape, 0.0, tmp45.dtype)
        tmp47 = tl.where(tmp37, tmp45, tmp46)
        tmp48 = tl.where(tmp5, tmp47, tmp30)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp36, tmp48, tmp49)
        tmp51 = tl.where(tmp36, tmp50, tmp30)
        tmp52 = tl.where(tmp2, tmp35, tmp51)
        tl.store(out_ptr0 + (x0 + (513*x2) + (131328*x1) + (525312*x3)), tmp52, None)


op415: SchedulerNode(ComputedBuffer)
op415.writes = [MemoryDep('buf415', c0, {c0: 525312}, None)]
op415.unmet_dependencies = 
    [   MemoryDep('buf412', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf412', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf413', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf413', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf414', c0, {c0: 525312}, None)]
op415.met_dependencies = []
op415.outputs = [
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
    buf415.users = [
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False),
    ]
]
op415.group.device = cuda:0
op415.group.iteration = (525312, 1)
op415.sizes = ([4, 256, 513], [])
buf412_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf415_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
class op415_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 513}
    index0 = z1
    index1 = z2
    index2 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513)
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index5 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index7 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index8 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_1 = ops.constant(0, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_1, constant_2)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf414', get_index_1)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index8')
        store = ops.store('buf415', get_index_2, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf413', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf413', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf414', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index8')
        load = ops.load('buf414', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf413', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf414', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
op415 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 256
        x2 = xindex
        y1 = (yindex // 256)
        y3 = yindex
        tmp56 = tl.load(in_ptr2 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 1, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tmp3 >= tmp1
        tmp5 = tl.full([1, 1], 256, tl.int64)
        tmp6 = tmp3 < tmp5
        tmp7 = tmp4 & tmp6
        tmp8 = tmp7 & tmp2
        tmp9 = (((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp10 = tl.full([1, 1], 512, tl.int64)
        tmp11 = tmp9 < tmp10
        tmp12 = tmp11 & tmp8
        tmp13 = tl.load(in_ptr0 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp14 = tl.load(in_ptr1 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + (((-256) + x2 + (513*y0) + (787968*y1)) % 512)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp15 = tmp13 * tmp14
        tmp16 = tl.full(tmp15.shape, 0.0, tmp15.dtype)
        tmp17 = tl.where(tmp12, tmp15, tmp16)
        tmp18 = tl.full(tmp17.shape, 0.0, tmp17.dtype)
        tmp19 = tl.where(tmp8, tmp17, tmp18)
        tmp20 = tl.full([1, 1], 0, tl.int64)
        tmp21 = tmp20 >= tmp1
        tmp22 = tmp21 & tmp2
        tmp23 = tmp6 & tmp22
        tmp24 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp25 = tmp24 < tmp10
        tmp26 = tmp25 & tmp23
        tmp27 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tmp27 * tmp28
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp26, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp23, tmp31, tmp32)
        tmp34 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp22 & xmask, eviction_policy='evict_last', other=0.0)
        tmp35 = tl.where(tmp6, tmp33, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp22, tmp35, tmp36)
        tmp38 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp39 = tl.where(tmp21, tmp37, tmp38)
        tmp40 = tl.where(tmp7, tmp19, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp2, tmp40, tmp41)
        tmp43 = tmp6 & tmp21
        tmp44 = tmp25 & tmp43
        tmp45 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp47 = tmp45 * tmp46
        tmp48 = tl.full(tmp47.shape, 0.0, tmp47.dtype)
        tmp49 = tl.where(tmp44, tmp47, tmp48)
        tmp50 = tl.full(tmp49.shape, 0.0, tmp49.dtype)
        tmp51 = tl.where(tmp43, tmp49, tmp50)
        tmp52 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp21 & xmask, eviction_policy='evict_last', other=0.0)
        tmp53 = tl.where(tmp6, tmp51, tmp52)
        tmp54 = tl.full(tmp53.shape, 0.0, tmp53.dtype)
        tmp55 = tl.where(tmp21, tmp53, tmp54)
        tmp57 = tl.where(tmp21, tmp55, tmp56)
        tmp58 = tl.where(tmp2, tmp42, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op416: SchedulerNode(ComputedBuffer)
op416.writes = [MemoryDep('buf416', c0, {c0: 263168}, None)]
op416.unmet_dependencies = 
    [   MemoryDep('buf412', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf413', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf414', 513*c0 + c1, {c0: 1024, c1: 257}, None),
        MemoryDep('buf415', 513*c0 + c1, {c0: 1024, c1: 257}, None)]
op416.met_dependencies = []
op416.outputs = [
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
    buf416.users = [NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
]
op416.group.device = cuda:0
op416.group.iteration = (263168, 1)
op416.sizes = ([4, 256, 257], [])
buf415_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf416_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
class op416_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 257}
    index0 = z1 + z2 - 255
    index1 = 131328*z0 + 513*z1 + z2
    index2 = z2
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index5 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index6 = 65792*z0 + 257*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        constant_3 = ops.constant(0, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq = ops.eq(constant_3, constant_4)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf415', get_index_1)
        constant_5 = ops.constant(0, torch.int64)
        constant_6 = ops.constant(1, torch.int64)
        ge = ops.ge(constant_5, constant_6)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf414', get_index_2)
        where_1 = ops.where(ge, masked_subblock1, load_1)
        where_2 = ops.where(eq, load, where_1)
        constant_7 = ops.constant(-inf, torch.float32)
        where_3 = ops.where(to_dtype, constant_7, where_2)
        get_index_3 = self.get_index('index6')
        store = ops.store('buf416', get_index_3, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('buf413', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf414', get_index_1)
        where = ops.where(lt, masked_subblock2, load)
        return where
op416 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 257
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 256
        y3 = yindex
        y1 = (yindex // 256)
        tmp9 = tl.load(in_ptr0 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr3 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = (-255) + x2 + y0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 <= tmp1
        tmp3 = 1.0
        tmp4 = 0.0
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tmp6 = (tmp5 != 0)
        tmp7 = tl.full([1, 1], 0, tl.int32)
        tmp8 = tmp7 == tmp7
        tmp10 = tl.full([1, 1], 1, tl.int64)
        tmp11 = tmp1 >= tmp10
        tmp12 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp13 = tl.full([1, 1], 256, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp17 = tl.full([1, 1], 512, tl.int64)
        tmp18 = tmp16 < tmp17
        tmp19 = tmp18 & tmp15
        tmp20 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tmp20 * tmp21
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp19, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp15, tmp24, tmp25)
        tmp27 = tl.load(in_ptr3 + (x2 + (513*y3)), tmp11 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.where(tmp14, tmp26, tmp27)
        tmp29 = tl.full(tmp28.shape, 0.0, tmp28.dtype)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp32 = tl.where(tmp11, tmp30, tmp31)
        tmp33 = tl.where(tmp8, tmp9, tmp32)
        tmp34 = float("-inf")
        tmp35 = tl.where(tmp6, tmp34, tmp33)
        tl.store(out_ptr0 + (x2 + (257*y3)), tmp35, xmask)


op417: SchedulerNode(ComputedBuffer)
op417.writes = [MemoryDep('buf417', c0, {c0: 2101248}, None)]
op417.unmet_dependencies = 
    [   MemoryDep('buf412', ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf413', ModularIndexing(c2 + 513*ModularIndexing(c1, 1, 256), 1, 512) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf414', 131328*c0 + c2 + 525312*((c1//256)) + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf415', 131328*c0 + c2 + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf416', 65792*c0 + 257*c1 + c2, {c0: 4, c1: 1024, c2: 513}, None)]
op417.met_dependencies = []
op417.outputs = [
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
    buf417.users = [NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False)]
]
op417.group.device = cuda:0
op417.group.iteration = (2101248, 1)
op417.sizes = ([4, 1024, 513], [])
buf416_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
buf415_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
class op417_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 513}
    index0 = z1
    index1 = z2
    index2 = 65792*z0 + 257*z1 + z2
    index3 = (z1//256)
    index4 = 131328*z0 + z2 + 513*ModularIndexing(z1, 1, 256)
    index5 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index7 = ModularIndexing(z2 + 513*ModularIndexing(z1, 1, 256), 1, 512) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index8 = 131328*z0 + z2 + 525312*((z1//256)) + 513*ModularIndexing(z1, 1, 256)
    index9 = 525312*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf415', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock6 = self.masked_subblock6(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf414', get_index_4)
        where = ops.where(ge, masked_subblock6, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_5 = self.get_index('index9')
        store = ops.store('buf417', get_index_5, where_2, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf416', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf413', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf414', get_index_1)
        where = ops.where(lt, masked_subblock4, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf415', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf414', get_index_4)
        where = ops.where(ge, masked_subblock3, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock2, where_1)
        return where_2
    def masked_subblock8(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf413', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf414', get_index_1)
        where = ops.where(lt, masked_subblock7, load)
        return where
op417 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 11, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 4096
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 1024
        x2 = xindex
        y1 = (yindex // 1024)
        y3 = yindex
        tmp40 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), xmask, eviction_policy='evict_last')
        tmp55 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 256, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tl.full([1, 1], 257, tl.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp5 & tmp2
        tmp7 = tl.load(in_ptr0 + (x2 + (257*y0) + (65792*y1)), tmp6 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tl.broadcast_to((y0 // 256), [XBLOCK, YBLOCK])
        tmp9 = tl.full([1, 1], 0, tl.int32)
        tmp10 = tmp8 == tmp9
        tmp11 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp12 = tl.full([1, 1], 1, tl.int64)
        tmp13 = tmp8 >= tmp12
        tmp14 = tmp13 & tmp2
        tmp15 = tmp3 < tmp1
        tmp16 = tmp15 & tmp14
        tmp17 = (((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513
        tmp18 = tl.full([1, 1], 512, tl.int64)
        tmp19 = tmp17 < tmp18
        tmp20 = tmp19 & tmp16
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp23 = tmp21 * tmp22
        tmp24 = tl.full(tmp23.shape, 0.0, tmp23.dtype)
        tmp25 = tl.where(tmp20, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp16, tmp25, tmp26)
        tmp28 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp14 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tl.where(tmp15, tmp27, tmp28)
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp14, tmp29, tmp30)
        tmp32 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp33 = tl.where(tmp13, tmp31, tmp32)
        tmp34 = tl.where(tmp10, tmp11, tmp33)
        tmp35 = tl.where(tmp5, tmp7, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp2, tmp35, tmp36)
        tmp38 = (y0 // 256)
        tmp39 = tmp38 == tmp9
        tmp41 = tmp38 >= tmp12
        tmp42 = tmp15 & tmp41
        tmp43 = tmp19 & tmp42
        tmp44 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp45 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tmp44 * tmp45
        tmp47 = tl.full(tmp46.shape, 0.0, tmp46.dtype)
        tmp48 = tl.where(tmp43, tmp46, tmp47)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp42, tmp48, tmp49)
        tmp51 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp41 & xmask, eviction_policy='evict_last', other=0.0)
        tmp52 = tl.where(tmp15, tmp50, tmp51)
        tmp53 = tl.full(tmp52.shape, 0.0, tmp52.dtype)
        tmp54 = tl.where(tmp41, tmp52, tmp53)
        tmp56 = tl.where(tmp41, tmp54, tmp55)
        tmp57 = tl.where(tmp39, tmp40, tmp56)
        tmp58 = tl.where(tmp2, tmp37, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op418: SchedulerNode(ComputedBuffer)
op418.writes = [   MemoryDep('buf418', 6324224*c0 + 513*c1 + 6176*c2 + c3, {c0: 4, c1: 12, c2: 1024, c3: 513}, None)]
op418.unmet_dependencies = 
    [   MemoryDep('buf410', 525312*c0 + 513*c1 + c2 + 131328*((ModularIndexing(c1, 1, 256)//256)), {c0: 48, c1: 1024, c2: 513}, None),
        MemoryDep('buf411', 131328*c0 + c1 - 393984, {c0: 48, c1: 525312}, None),
        MemoryDep('buf417', 525312*c0 + c2, {c0: 4, c1: 12, c2: 525312}, None)]
op418.met_dependencies = []
op418.outputs = [
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
    buf418.users = [
        NodeUser(node=SchedulerNode(name='op419'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=False, is_weak=False),
    ]
]
op418.group.device = cuda:0
op418.group.iteration = (25214976, 1)
op418.sizes = ([4, 12, 1024, 513], [])
buf411_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
buf418_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
class op418_loop_body:
    var_ranges = {z0: 4, z1: 12, z2: 1024, z3: 513}
    index0 = z2
    index1 = 1575936*z0 + 131328*z1 + 513*z2 + z3 - 393984
    index2 = z2 + 256*((ModularIndexing(z2, 1, 256)//256))
    index3 = z3
    index4 = z2 + z3 + 256*((ModularIndexing(z2, 1, 256)//256)) - 255
    index5 = 6303744*z0 + 525312*z1 + 513*z2 + z3 + 131328*((ModularIndexing(z2, 1, 256)//256))
    index6 = -z2 - z3 + 1280
    index7 = 525312*z0 + 513*z2 + z3
    index8 = 6324224*z0 + 513*z1 + 6176*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(768, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index5')
        load = ops.load('buf410', get_index_2)
        where = ops.where(lt, masked_subblock2, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_4 = self.get_index('index7')
        load_1 = ops.load('buf417', get_index_4)
        where_2 = ops.where(ge_1, masked_subblock4, load_1)
        add = ops.add(where_1, where_2)
        get_index_5 = self.get_index('index8')
        store = ops.store('buf418', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf411', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf410', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf410', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf417', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(ge, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf417', get_index_1)
        where = ops.where(ge, masked_subblock5, load)
        return where
op418 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 513) % 1024
        x4 = xindex % 525312
        x5 = (xindex // 525312)
        x0 = xindex % 513
        x3 = (xindex // 6303744)
        x2 = (xindex // 525312) % 12
        tmp27 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), None)
        tmp44 = tl.load(in_ptr2 + (x4 + (525312*x3)), None, eviction_policy='evict_last')
        tmp0 = x1
        tmp1 = tl.full([1], 768, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.load(in_ptr0 + ((-393984) + x4 + (131328*x5)), tmp2, other=0.0)
        tmp4 = x1 + (256*((x1 % 256) // 256))
        tmp5 = tl.full([1], 256, tl.int64)
        tmp6 = tmp4 < tmp5
        tmp7 = x0
        tmp8 = tl.full([1], 257, tl.int64)
        tmp9 = tmp7 < tmp8
        tmp10 = tmp9 & tmp6
        tmp11 = (-255) + x0 + x1 + (256*((x1 % 256) // 256))
        tmp12 = tl.full([1], 0, tl.int64)
        tmp13 = tmp11 <= tmp12
        tmp14 = 1.0
        tmp15 = 0.0
        tmp16 = tl.where(tmp13, tmp14, tmp15)
        tmp17 = (tmp16 != 0)
        tmp18 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp10, other=0.0)
        tmp19 = float("-inf")
        tmp20 = tl.where(tmp17, tmp19, tmp18)
        tmp21 = tl.full(tmp20.shape, 0.0, tmp20.dtype)
        tmp22 = tl.where(tmp10, tmp20, tmp21)
        tmp23 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp6, other=0.0)
        tmp24 = tl.where(tmp9, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp6, tmp24, tmp25)
        tmp28 = tl.where(tmp6, tmp26, tmp27)
        tmp29 = tl.where(tmp2, tmp3, tmp28)
        tmp30 = tmp7 >= tmp5
        tmp31 = tmp30 & tmp2
        tmp32 = 1280 + ((-1)*x0) + ((-1)*x1)
        tmp33 = tmp32 <= tmp12
        tmp34 = tl.where(tmp33, tmp14, tmp15)
        tmp35 = (tmp34 != 0)
        tmp36 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp31, eviction_policy='evict_last', other=0.0)
        tmp37 = tl.where(tmp35, tmp19, tmp36)
        tmp38 = tl.full(tmp37.shape, 0.0, tmp37.dtype)
        tmp39 = tl.where(tmp31, tmp37, tmp38)
        tmp40 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.where(tmp30, tmp39, tmp40)
        tmp42 = tl.full(tmp41.shape, 0.0, tmp41.dtype)
        tmp43 = tl.where(tmp2, tmp41, tmp42)
        tmp45 = tl.where(tmp2, tmp43, tmp44)
        tmp46 = tmp29 + tmp45
        tl.store(out_ptr0 + (x0 + (513*x2) + (6176*x1) + (6324224*x3)), tmp46, None)


op419: SchedulerNode(ComputedBuffer)
op419.writes = [MemoryDep('buf419', c0, {c0: 49152}, None)]
op419.unmet_dependencies = [MemoryDep('buf418', 6176*c0 + c1, {c0: 4096, c1: 6156}, None)]
op419.met_dependencies = []
op419.outputs = [
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf419.users = [
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=False, is_weak=False),
    ]
]
op419.group.device = cuda:0
op419.group.iteration = (49152, 513)
op419.sizes = ([4096, 12], [513])
buf418_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op419_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf418', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf419', get_index_1, reduction)
        return store_reduction
op419 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        x3 = xindex
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp2, None)


op420: SchedulerNode(ComputedBuffer)
op420.writes = [MemoryDep('buf420', c0, {c0: 49152}, None)]
op420.unmet_dependencies = 
    [   MemoryDep('buf418', 6176*c0 + c1, {c0: 4096, c1: 6156}, None),
        MemoryDep('buf419', c0, {c0: 49152}, None)]
op420.met_dependencies = []
op420.outputs = [
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf420.users = [NodeUser(node=SchedulerNode(name='op424'), can_inplace=False, is_weak=False)]
]
op420.group.device = cuda:0
op420.group.iteration = (49152, 513)
op420.sizes = ([4096, 12], [513])
buf418_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf420_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op420_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf418', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf419', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf420', get_index_2, reduction)
        return store_reduction
op420 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        x3 = xindex
        tmp1 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp5, None)


op421: SchedulerNode(ComputedBuffer)
op421.writes = [MemoryDep('buf421', c0, {c0: 3145728}, None)]
op421.unmet_dependencies = [MemoryDep('buf399', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op421.met_dependencies = []
op421.outputs = [
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf421.users = [NodeUser(node=ExternKernelSchedulerNode(name='op422'), can_inplace=False, is_weak=False)]
]
op421.group.device = cuda:0
op421.group.iteration = (3145728, 1)
op421.sizes = ([1024, 4, 768], [])
buf399_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf421_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op421_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf421', get_index_1, load, None)
        return store
op421 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op422: ExternKernelSchedulerNode(ExternKernelOut)
op422.writes = [StarDep(name='buf422', mode=None)]
op422.unmet_dependencies = [StarDep(name='buf421', mode=None)]
op422.met_dependencies = [StarDep(name='arg167_1', mode=None)]
op422.outputs = [
    buf422: ExternKernelOut
    buf422.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf422.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
]
op422.node.kernel = extern_kernels.mm


op423: SchedulerNode(ComputedBuffer)
op423.writes = [MemoryDep('buf423', c0, {c0: 4718592}, None)]
op423.unmet_dependencies = [   MemoryDep('buf422', 64*c0 + 3072*c1 + c2 - 786432, {c0: 48, c1: 1536, c2: 64}, None)]
op423.met_dependencies = [   MemoryDep('arg168_1', c2 + 64*ModularIndexing(c0, 1, 12), {c0: 48, c1: 1536, c2: 64}, None)]
op423.outputs = [
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
    buf423.users = [NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False)]
]
op423.group.device = cuda:0
op423.group.iteration = (4718592, 1)
op423.sizes = ([48, 1536, 64], [])
buf422_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf423_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
class op423_loop_body:
    var_ranges = {z0: 48, z1: 1536, z2: 64}
    index0 = z1 - 256
    index1 = 64*z0 + 3072*z1 + z2 - 786432
    index2 = z2 + 64*ModularIndexing(z0, 1, 12)
    index3 = 98304*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1024, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, -1.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf423', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf422', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg168_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op423 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 1536
        x0 = xindex % 64
        x2 = (xindex // 98304)
        x3 = xindex
        tmp0 = (-256) + x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 1024, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-786432) + x0 + (64*x2) + (3072*x1)), tmp5, other=0.0)
        tmp7 = tl.load(in_ptr1 + (x0 + (64*(x2 % 12))), tmp5, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, -1.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op424: SchedulerNode(ComputedBuffer)
op424.writes = [   MemoryDep('buf424', 770*c0 + 788480*c1 + c2, {c0: 1024, c1: 48, c2: 770}, None)]
op424.unmet_dependencies = 
    [   MemoryDep('buf418', 6176*c0 + c2 + 6324224*((c1//12)) + 6324224*((ModularIndexing(c1, 1, 12)//12)) + 513*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 770}, None),
        MemoryDep('buf419', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None),
        MemoryDep('buf420', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None)]
op424.met_dependencies = [MemoryDep('arg8_1', c0 + 1024*((c1//12)), {c0: 1024, c1: 48}, None)]
op424.outputs = [
    buf424: ComputedBuffer
    buf424.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
    buf424.users = [NodeUser(node=ExternKernelSchedulerNode(name='op426'), can_inplace=False, is_weak=False)]
]
op424.group.device = cuda:0
op424.group.iteration = (37847040, 1)
op424.sizes = ([1024, 48, 770], [])
arg8_1_layout = FixedLayout('cuda', torch.bool, size=[4, 1024], stride=[1024, 1])
buf418_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf420_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf424_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
class op424_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 770}
    index0 = z2
    index1 = z0 + 1024*((z1//12))
    index2 = 6176*z0 + z2 + 6324224*((z1//12)) + 6324224*((ModularIndexing(z1, 1, 12)//12)) + 513*ModularIndexing(z1, 1, 12)
    index3 = 12*z0 + 12288*((z1//12)) + ModularIndexing(z1, 1, 12)
    index4 = 770*z0 + 788480*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(513, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index4')
        store = ops.store('buf424', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg8_1', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf418', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('buf419', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf420', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(load, constant, truediv)
        return where
op424 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 37847040
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 770
        x1 = (xindex // 770) % 48
        x2 = (xindex // 36960)
        tmp0 = x0
        tmp1 = tl.full([1], 513, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.load(in_ptr0 + (x2 + (1024*(x1 // 12))), tmp2, eviction_policy='evict_last', other=0.0).to(tl.int1)
        tmp4 = tl.load(in_ptr1 + (x0 + (513*(x1 % 12)) + (6176*x2) + (6324224*(x1 // 12)) + (6324224*((x1 % 12) // 12))), tmp2, other=0.0)
        tmp5 = tl.load(in_ptr2 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp4 - tmp5
        tmp7 = tl_math.exp(tmp6)
        tmp8 = tl.load(in_ptr3 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp9 = tmp7 / tmp8
        tmp10 = 0.0
        tmp11 = tl.where(tmp3, tmp10, tmp9)
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp2, tmp11, tmp12)
        tl.store(out_ptr0 + (x0 + (770*x2) + (788480*x1)), tmp13, None)


op425: SchedulerNode(ComputedBuffer)
op425.writes = [MemoryDep('buf425', c0, {c0: 9437184}, None)]
op425.unmet_dependencies = [   MemoryDep('buf423', 98304*c0 + 16384*c1 + c2, {c0: 48, c1: 4, c2: 49152}, None)]
op425.met_dependencies = []
op425.outputs = [
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
    buf425.users = [NodeUser(node=ExternKernelSchedulerNode(name='op426'), can_inplace=False, is_weak=False)]
]
op425.group.device = cuda:0
op425.group.iteration = (9437184, 1)
op425.sizes = ([48, 4, 49152], [])
buf423_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
class op425_loop_body:
    var_ranges = {z0: 48, z1: 4, z2: 49152}
    index0 = 98304*z0 + 16384*z1 + z2
    index1 = 196608*z0 + 49152*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf423', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf425', get_index_1, load, None)
        return store
op425 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 9437184
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 49152
        x1 = (xindex // 49152) % 4
        x2 = (xindex // 196608)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (16384*x1) + (98304*x2)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op426: ExternKernelSchedulerNode(ExternKernelOut)
op426.writes = [StarDep(name='buf426', mode=None)]
op426.unmet_dependencies = [StarDep(name='buf424', mode=None), StarDep(name='buf425', mode=None)]
op426.met_dependencies = []
op426.outputs = [
    buf426: ExternKernelOut
    buf426.layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
    buf426.users = [NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False)]
]
op426.node.kernel = extern_kernels.bmm


op427: SchedulerNode(ComputedBuffer)
op427.writes = [MemoryDep('buf427', c0, {c0: 3145728}, None)]
op427.unmet_dependencies = [   MemoryDep('buf426', 786432*c0 + 64*c1 + 65536*((c2//64)) + ModularIndexing(c2, 1, 64), {c0: 4, c1: 1024, c2: 768}, None)]
op427.met_dependencies = []
op427.outputs = [
    buf427: ComputedBuffer
    buf427.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf427.users = [NodeUser(node=ExternKernelSchedulerNode(name='op428'), can_inplace=False, is_weak=False)]
]
op427.group.device = cuda:0
op427.group.iteration = (3145728, 1)
op427.sizes = ([4, 1024, 768], [])
buf426_layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
buf427_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op427_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 768}
    index0 = 786432*z0 + 64*z1 + 65536*((z2//64)) + ModularIndexing(z2, 1, 64)
    index1 = 786432*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf426', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf427', get_index_1, load, None)
        return store
op427 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 1024
        x2 = (xindex // 786432)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + ((64*x1) + (65536*(x0 // 64)) + (786432*x2) + (x0 % 64)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op428: ExternKernelSchedulerNode(ExternKernelOut)
op428.writes = [StarDep(name='buf428', mode=None)]
op428.unmet_dependencies = [StarDep(name='buf427', mode=None)]
op428.met_dependencies = [StarDep(name='arg169_1', mode=None)]
op428.outputs = [
    buf428: ExternKernelOut
    buf428.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf428.users = [
        NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=True, is_weak=False),
    ]
]
op428.node.kernel = extern_kernels.mm


op429: SchedulerNode(ComputedBuffer)
op429.writes = [MemoryDep('buf429', c0, {c0: 4096}, None)]
op429.unmet_dependencies = 
    [   MemoryDep('buf399', c0, {c0: 3145728}, None),
        MemoryDep('buf428', c0, {c0: 3145728}, None)]
op429.met_dependencies = [MemoryDep('arg170_1', c1, {c0: 4096, c1: 768}, None)]
op429.outputs = [
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf429.users = [NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False)]
]
op429.group.device = cuda:0
op429.group.iteration = (4096, 768)
op429.sizes = ([4096], [768])
buf428_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op429_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf399', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf429', get_index_3, getitem)
        return store_reduction
op429 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op430: SchedulerNode(ComputedBuffer)
op430.writes = [MemoryDep('buf430', c0, {c0: 4096}, None)]
op430.unmet_dependencies = 
    [   MemoryDep('buf399', c0, {c0: 3145728}, None),
        MemoryDep('buf428', c0, {c0: 3145728}, None)]
op430.met_dependencies = [MemoryDep('arg170_1', c1, {c0: 4096, c1: 768}, None)]
op430.outputs = [
    buf430: ComputedBuffer
    buf430.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf430.users = [NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False)]
]
op430.group.device = cuda:0
op430.group.iteration = (4096, 768)
op430.sizes = ([4096], [768])
buf428_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf430_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op430_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf399', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf430', get_index_3, getitem_1)
        return store_reduction
op430 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op432: SchedulerNode(ComputedBuffer)
op432.writes = [MemoryDep('buf432', c0, {c0: 3145728}, None)]
op432.unmet_dependencies = 
    [   MemoryDep('buf399', c0, {c0: 3145728}, None),
        MemoryDep('buf428', c0, {c0: 3145728}, None),
        MemoryDep('buf429', c0, {c0: 4096}, None),
        MemoryDep('buf430', c0, {c0: 4096}, None)]
op432.met_dependencies = 
    [   MemoryDep('arg170_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg171_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg172_1', c1, {c0: 4096, c1: 768}, None)]
op432.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf432.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op439'), can_inplace=True, is_weak=False),
    ]
]
op432.group.device = cuda:0
op432.group.iteration = (3145728, 1)
op432.sizes = ([4096, 768], [])
buf428_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf430_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op432_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf399', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf429', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf430', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg171_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg172_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf432', get_index_7, add_3, None)
        return store
op432 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op433: ExternKernelSchedulerNode(ExternKernelOut)
op433.writes = [StarDep(name='buf433', mode=None)]
op433.unmet_dependencies = [StarDep(name='buf432', mode=None)]
op433.met_dependencies = [StarDep(name='arg173_1', mode=None)]
op433.outputs = [
    buf433: ExternKernelOut
    buf433.layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
    buf433.users = [NodeUser(node=SchedulerNode(name='op434'), can_inplace=True, is_weak=False)]
]
op433.node.kernel = extern_kernels.mm


op434: SchedulerNode(ComputedBuffer)
op434.writes = [MemoryDep('buf434', c0, {c0: 12582912}, None)]
op434.unmet_dependencies = [MemoryDep('buf433', c0, {c0: 12582912}, None)]
op434.met_dependencies = [MemoryDep('arg174_1', c1, {c0: 4096, c1: 3072}, None)]
op434.outputs = [
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
    buf434.users = [NodeUser(node=ExternKernelSchedulerNode(name='op435'), can_inplace=False, is_weak=False)]
]
op434.group.device = cuda:0
op434.group.iteration = (12582912, 1)
op434.sizes = ([4096, 3072], [])
buf433_layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf434_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
class op434_loop_body:
    var_ranges = {z0: 4096, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf433', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg174_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf433', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg174_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf434', get_index_4, mul_2, None)
        return store
op434 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op435: ExternKernelSchedulerNode(ExternKernelOut)
op435.writes = [StarDep(name='buf435', mode=None)]
op435.unmet_dependencies = [StarDep(name='buf434', mode=None)]
op435.met_dependencies = [StarDep(name='arg175_1', mode=None)]
op435.outputs = [
    buf435: ExternKernelOut
    buf435.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf435.users = [
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op439'), can_inplace=True, is_weak=False),
    ]
]
op435.node.kernel = extern_kernels.mm


op436: SchedulerNode(ComputedBuffer)
op436.writes = [MemoryDep('buf436', c0, {c0: 4096}, None)]
op436.unmet_dependencies = 
    [   MemoryDep('buf432', c0, {c0: 3145728}, None),
        MemoryDep('buf435', c0, {c0: 3145728}, None)]
op436.met_dependencies = [MemoryDep('arg176_1', c1, {c0: 4096, c1: 768}, None)]
op436.outputs = [
    buf436: ComputedBuffer
    buf436.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf436.users = [NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
]
op436.group.device = cuda:0
op436.group.iteration = (4096, 768)
op436.sizes = ([4096], [768])
buf435_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op436_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf435', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg176_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf432', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf436', get_index_3, getitem)
        return store_reduction
op436 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op437: SchedulerNode(ComputedBuffer)
op437.writes = [MemoryDep('buf437', c0, {c0: 4096}, None)]
op437.unmet_dependencies = 
    [   MemoryDep('buf432', c0, {c0: 3145728}, None),
        MemoryDep('buf435', c0, {c0: 3145728}, None)]
op437.met_dependencies = [MemoryDep('arg176_1', c1, {c0: 4096, c1: 768}, None)]
op437.outputs = [
    buf437: ComputedBuffer
    buf437.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf437.users = [NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
]
op437.group.device = cuda:0
op437.group.iteration = (4096, 768)
op437.sizes = ([4096], [768])
buf435_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf437_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op437_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf435', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg176_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf432', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf437', get_index_3, getitem_1)
        return store_reduction
op437 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op439: SchedulerNode(ComputedBuffer)
op439.writes = [MemoryDep('buf439', c0, {c0: 3145728}, None)]
op439.unmet_dependencies = 
    [   MemoryDep('buf432', c0, {c0: 3145728}, None),
        MemoryDep('buf435', c0, {c0: 3145728}, None),
        MemoryDep('buf436', c0, {c0: 4096}, None),
        MemoryDep('buf437', c0, {c0: 4096}, None)]
op439.met_dependencies = 
    [   MemoryDep('arg176_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg177_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg178_1', c1, {c0: 4096, c1: 768}, None)]
op439.outputs = [
    buf439: ComputedBuffer
    buf439.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf439.users = [
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op461'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op472'), can_inplace=True, is_weak=False),
    ]
]
op439.group.device = cuda:0
op439.group.iteration = (3145728, 1)
op439.sizes = ([4096, 768], [])
buf435_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf437_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op439_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf435', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg176_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf432', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf436', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf437', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg177_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg178_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf439', get_index_7, add_3, None)
        return store
op439 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op440: SchedulerNode(ComputedBuffer)
op440.writes = [MemoryDep('buf440', c0, {c0: 3145728}, None)]
op440.unmet_dependencies = [MemoryDep('buf439', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op440.met_dependencies = []
op440.outputs = [
    buf440: ComputedBuffer
    buf440.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf440.users = [NodeUser(node=ExternKernelSchedulerNode(name='op441'), can_inplace=False, is_weak=False)]
]
op440.group.device = cuda:0
op440.group.iteration = (3145728, 1)
op440.sizes = ([1024, 4, 768], [])
buf439_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op440_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf439', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf440', get_index_1, load, None)
        return store
op440 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op441: ExternKernelSchedulerNode(ExternKernelOut)
op441.writes = [StarDep(name='buf441', mode=None)]
op441.unmet_dependencies = [StarDep(name='buf440', mode=None)]
op441.met_dependencies = [StarDep(name='arg179_1', mode=None)]
op441.outputs = [
    buf441: ExternKernelOut
    buf441.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf441.users = [NodeUser(node=SchedulerNode(name='op442'), can_inplace=True, is_weak=False)]
]
op441.node.kernel = extern_kernels.mm


op442: SchedulerNode(ComputedBuffer)
op442.writes = [MemoryDep('buf442', c0, {c0: 3145728}, None)]
op442.unmet_dependencies = [MemoryDep('buf441', c0, {c0: 3145728}, None)]
op442.met_dependencies = [   MemoryDep('arg180_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op442.outputs = [
    buf442: ComputedBuffer
    buf442.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf442.users = [NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False)]
]
op442.group.device = cuda:0
op442.group.iteration = (3145728, 1)
op442.sizes = ([1024, 48, 64], [])
buf441_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf442_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op442_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf441', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg180_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf442', get_index_2, mul, None)
        return store
op442 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(in_out_ptr0 + (x3), tmp4, None)


op443: SchedulerNode(ComputedBuffer)
op443.writes = [MemoryDep('buf443', c0, {c0: 3145728}, None)]
op443.unmet_dependencies = [MemoryDep('buf439', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op443.met_dependencies = []
op443.outputs = [
    buf443: ComputedBuffer
    buf443.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf443.users = [NodeUser(node=ExternKernelSchedulerNode(name='op444'), can_inplace=False, is_weak=False)]
]
op443.group.device = cuda:0
op443.group.iteration = (3145728, 1)
op443.sizes = ([1024, 4, 768], [])
buf439_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf443_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op443_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf439', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf443', get_index_1, load, None)
        return store
op443 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op444: ExternKernelSchedulerNode(ExternKernelOut)
op444.writes = [StarDep(name='buf444', mode=None)]
op444.unmet_dependencies = [StarDep(name='buf443', mode=None)]
op444.met_dependencies = [StarDep(name='arg181_1', mode=None)]
op444.outputs = [
    buf444: ExternKernelOut
    buf444.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf444.users = [NodeUser(node=SchedulerNode(name='op445'), can_inplace=True, is_weak=False)]
]
op444.node.kernel = extern_kernels.mm


op445: SchedulerNode(ComputedBuffer)
op445.writes = [MemoryDep('buf445', c0, {c0: 3145728}, None)]
op445.unmet_dependencies = [MemoryDep('buf444', c0, {c0: 3145728}, None)]
op445.met_dependencies = [   MemoryDep('arg182_1', c2 + 64*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 64}, None)]
op445.outputs = [
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
    buf445.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
]
op445.group.device = cuda:0
op445.group.iteration = (3145728, 1)
op445.sizes = ([1024, 48, 64], [])
buf444_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
class op445_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 64}
    index0 = 3072*z0 + 64*z1 + z2
    index1 = z2 + 64*ModularIndexing(z1, 1, 12)
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf444', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg182_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf445', get_index_2, add, None)
        return store
op445 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 64
        x1 = (xindex // 64) % 48
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0 + (64*(x1 % 12))), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x3), tmp2, None)


op446: SchedulerNode(ComputedBuffer)
op446.writes = [MemoryDep('buf446', c0, {c0: 4718592}, None)]
op446.unmet_dependencies = [   MemoryDep('buf442', 64*c0 + 786432*c1 + 3072*c2 + c3, {c0: 48, c1: 3, c2: 512, c3: 64}, None)]
op446.met_dependencies = []
op446.outputs = [
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
    buf446.users = [NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False)]
]
op446.group.device = cuda:0
op446.group.iteration = (4718592, 1)
op446.sizes = ([48, 3, 512, 64], [])
buf442_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf446_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 512, 64, 1], stride=[98304, 32768, 64, 1, 1])
class op446_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 512, z3: 64}
    index0 = 64*z0 + 786432*z1 + 3072*z2 + z3
    index1 = 98304*z0 + 32768*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf442', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf446', get_index_1, load, None)
        return store
op446 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 512
        x2 = (xindex // 32768) % 3
        x3 = (xindex // 98304)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x3) + (3072*x1) + (786432*x2)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op447: SchedulerNode(ComputedBuffer)
op447.writes = [MemoryDep('buf447', c0, {c0: 4718592}, None)]
op447.unmet_dependencies = [   MemoryDep('buf445', 64*c0 + 786432*c1 + c2 + 3072*c3, {c0: 48, c1: 3, c2: 64, c3: 512}, None)]
op447.met_dependencies = []
op447.outputs = [
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
    buf447.users = [NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False)]
]
op447.group.device = cuda:0
op447.group.iteration = (4718592, 1)
op447.sizes = ([48, 3, 64, 512], [])
buf445_layout = FixedLayout('cuda', torch.float32, size=[48, 2, 512, 64], stride=[64, 1572864, 3072, 1])
buf447_layout = FixedLayout('cuda', torch.float32, size=[48, 3, 64, 512, 1], stride=[98304, 32768, 512, 1, 1])
class op447_loop_body:
    var_ranges = {z0: 48, z1: 3, z2: 64, z3: 512}
    index0 = 64*z0 + 786432*z1 + z2 + 3072*z3
    index1 = 98304*z0 + 32768*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf445', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf447', get_index_1, load, None)
        return store
op447 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 9216
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 3
        y2 = (yindex // 192)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (3072*x3) + (786432*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (512*y4)), tmp0, xmask)


op448: ExternKernelSchedulerNode(ExternKernelOut)
op448.writes = [StarDep(name='buf448', mode=None)]
op448.unmet_dependencies = [StarDep(name='buf446', mode=None), StarDep(name='buf447', mode=None)]
op448.met_dependencies = []
op448.outputs = [
    buf448: ExternKernelOut
    buf448.layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
    buf448.users = [
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False),
    ]
]
op448.node.kernel = extern_kernels.bmm


op449: SchedulerNode(ComputedBuffer)
op449.writes = [MemoryDep('buf449', 24640*c0 + c1, {c0: 1024, c1: 24624}, None)]
op449.unmet_dependencies = 
    [   MemoryDep('buf448', 786432*c2 + 262144*(((513*c0 + c3 + 656384)//262656)) + 786432*(((513*c0 + c3 + 656384)//787968)) + ModularIndexing(513*c0 + c3, 1, 512) + 512*ModularIndexing(513*c0 + c3 + 656384, 512, 513), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf448', ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(513*c0 + 262656*c1 + 787968*c2 + c3 - 256, 262656, 144), {c0: 256, c1: 4, c2: 48, c3: 513}, None),
        MemoryDep('buf448', ModularIndexing(513*c0 + c3 + 787712, 1, 262656) + 262144*ModularIndexing(513*c0 + c3 + 787712, 262656, 3) + 786432*ModularIndexing(513*c0 + 787968*c2 + c3 + 787712, 787968, 48), {c0: 256, c1: 4, c2: 48, c3: 513}, None)]
op449.met_dependencies = []
op449.outputs = [
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
    buf449.users = [NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False)]
]
op449.group.device = cuda:0
op449.group.iteration = (25214976, 1)
op449.sizes = ([256, 4, 48, 513], [])
buf448_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
class op449_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 48, z3: 513}
    index0 = z1
    index1 = z3
    index2 = ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index3 = 786432*z2 + 262144*(((513*z0 + z3 + 656384)//262656)) + 786432*(((513*z0 + z3 + 656384)//787968)) + ModularIndexing(513*z0 + z3, 1, 512) + 512*ModularIndexing(513*z0 + z3 + 656384, 512, 513)
    index4 = ModularIndexing(513*z0 + z3 + 787712, 512, 513)
    index5 = ModularIndexing(513*z0 + z3 + 787712, 1, 262656) + 262144*ModularIndexing(513*z0 + z3 + 787712, 262656, 3) + 786432*ModularIndexing(513*z0 + 787968*z2 + z3 + 787712, 787968, 48)
    index6 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 512, 513)
    index7 = ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(513*z0 + 262656*z1 + 787968*z2 + z3 - 256, 262656, 144)
    index8 = 98560*z0 + 24640*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index8')
        store = ops.store('buf449', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf448', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf448', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf448', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op449 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[256, 131072], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 256
        xnumel = 98496
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = (xindex // 24624)
        x1 = xindex % 513
        y0 = yindex
        x2 = (xindex // 513) % 48
        x5 = xindex % 24624
        tmp0 = x3
        tmp1 = tl.full([1, 1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1, 1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x1 + (513*y0)) // 512) % 513
        tmp7 = tl.full([1, 1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((512*(((656384 + x1 + (513*y0)) // 512) % 513)) + (262144*((656384 + x1 + (513*y0)) // 262656)) + (786432*x2) + (786432*((656384 + x1 + (513*y0)) // 787968)) + ((x1 + (513*y0)) % 512)), tmp9 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.full(tmp10.shape, 0.0, tmp10.dtype)
        tmp12 = tl.where(tmp5, tmp10, tmp11)
        tmp13 = tl.full([1, 1], 3, tl.int64)
        tmp14 = tmp13 < tmp13
        tmp15 = tl.broadcast_to(x1, [XBLOCK, YBLOCK])
        tmp16 = tmp15 >= tmp4
        tmp17 = tmp16 & tmp14
        tmp18 = ((787712 + x1 + (513*y0)) // 512) % 513
        tmp19 = tmp18 < tmp7
        tmp20 = tmp19 & tmp17
        tmp21 = tl.load(in_ptr0 + ((262144*(((787712 + x1 + (513*y0)) // 262656) % 3)) + (786432*(((787712 + x1 + (513*y0) + (787968*x2)) // 787968) % 48)) + ((787712 + x1 + (513*y0)) % 262656)), tmp20 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.full(tmp21.shape, 0.0, tmp21.dtype)
        tmp23 = tl.where(tmp17, tmp21, tmp22)
        tmp24 = 0.0
        tmp25 = tl.where(tmp16, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp14, tmp25, tmp26)
        tmp28 = tl.where(tmp14, tmp27, tmp24)
        tmp29 = tl.where(tmp5, tmp12, tmp28)
        tmp30 = tmp0 < tmp13
        tmp31 = tmp16 & tmp30
        tmp32 = (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp33 = tmp32 < tmp7
        tmp34 = tmp33 & tmp31
        tmp35 = tl.load(in_ptr0 + ((262144*((((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) // 262656) % 144)) + (((-256) + x1 + (513*y0) + (262656*x3) + (787968*x2)) % 262656)), tmp34 & xmask & ymask, eviction_policy='evict_last', other=0.0)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp31, tmp35, tmp36)
        tmp38 = tl.where(tmp16, tmp37, tmp24)
        tmp39 = tl.full(tmp38.shape, 0.0, tmp38.dtype)
        tmp40 = tl.where(tmp30, tmp38, tmp39)
        tmp41 = tl.where(tmp30, tmp40, tmp24)
        tmp42 = tl.where(tmp2, tmp29, tmp41)
        tl.store(out_ptr0 + (x5 + (24640*x3) + (98560*y0)), tmp42, xmask & ymask)


op450: SchedulerNode(ComputedBuffer)
op450.writes = [   MemoryDep('buf450', 131328*c0 + 525312*c1 + c2, {c0: 4, c1: 48, c2: 131328}, None)]
op450.unmet_dependencies = 
    [   MemoryDep('buf448', ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 1, 262656) + 262144*ModularIndexing(787968*c1 + 513*c2 + c3 - 256, 262656, 144), {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf448', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(262656*c0 + 787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf448', ModularIndexing(c2, 1, 512) + 512*ModularIndexing(787968*c1 + c2 - 131584, 512, 513) + 262144*ModularIndexing(787968*c1 + c2 - 131584, 262656, 144), {c0: 4, c1: 48, c2: 131328}, None),
        MemoryDep('buf449', 24640*c0 + 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None),
        MemoryDep('buf449', 513*c1 + 98560*c2 + c3, {c0: 4, c1: 48, c2: 256, c3: 513}, None)]
op450.met_dependencies = []
op450.outputs = [
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
    buf450.users = [
        NodeUser(node=SchedulerNode(name='op451'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False),
    ]
]
op450.group.device = cuda:0
op450.group.iteration = (25214976, 1)
op450.sizes = ([4, 48, 256, 513], [])
buf448_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[144, 512, 512], stride=[262144, 512, 1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[513, 24640, 98560, 1])
buf450_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
class op450_loop_body:
    var_ranges = {z0: 4, z1: 48, z2: 256, z3: 513}
    index0 = z0
    index1 = z2
    index2 = z3
    index3 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 512, 513)
    index4 = ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 1, 262656) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 256, 262656, 144)
    index5 = ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index6 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index7 = 513*z1 + 98560*z2 + z3
    index8 = ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513)
    index9 = ModularIndexing(513*z2 + z3, 1, 512) + 512*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 512, 513) + 262144*ModularIndexing(262656*z0 + 787968*z1 + 513*z2 + z3 - 131584, 262656, 144)
    index10 = 24640*z0 + 513*z1 + 98560*z2 + z3
    index11 = 131328*z0 + 525312*z1 + 513*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf449', get_index_2)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_4 = ops.constant(1, torch.int64)
        ge_2 = ops.ge(index_expr_2, constant_4)
        masked_subblock10 = self.masked_subblock10(ge_2, 0.0)
        get_index_4 = self.get_index('index10')
        load_1 = ops.load('buf449', get_index_4)
        where_2 = ops.where(ge_2, masked_subblock10, load_1)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_5 = self.get_index('index11')
        store = ops.store('buf450', get_index_5, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf448', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf448', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf449', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index7')
        load = ops.load('buf449', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf448', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf449', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
    def masked_subblock12(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf448', get_index)
        return load
    def masked_subblock11(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock12 = self.masked_subblock12(lt, 0.0)
        return masked_subblock12
    def masked_subblock10(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock11 = self.masked_subblock11(lt, 0.0)
        get_index_1 = self.get_index('index10')
        load = ops.load('buf449', get_index_1)
        where = ops.where(lt, masked_subblock11, load)
        return where
op450 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 6303744)
        x1 = (xindex // 513) % 256
        x0 = xindex % 513
        x2 = (xindex // 131328) % 48
        x4 = xindex % 131328
        tmp47 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), None, eviction_policy='evict_last')
        tmp62 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), None)
        tmp0 = x3
        tmp1 = tl.full([1], 0, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x1
        tmp4 = tl.full([1], 1, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = x0
        tmp7 = tmp6 >= tmp4
        tmp8 = tl.full([1], 256, tl.int64)
        tmp9 = tmp6 < tmp8
        tmp10 = tmp7 & tmp9
        tmp11 = tmp10 & tmp5
        tmp12 = (((-256) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp13 = tl.full([1], 512, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = tl.load(in_ptr0 + ((262144*((((-256) + x0 + (513*x1) + (787968*x2)) // 262656) % 144)) + (((-256) + x0 + (513*x1) + (787968*x2)) % 262656)), tmp15, eviction_policy='evict_last', other=0.0)
        tmp17 = tl.full(tmp16.shape, 0.0, tmp16.dtype)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.full([1], 0, tl.int64)
        tmp20 = tmp19 >= tmp4
        tmp21 = tmp20 & tmp5
        tmp22 = tmp9 & tmp21
        tmp23 = (((-131584) + x0 + (513*x1) + (787968*x2)) // 512) % 513
        tmp24 = tmp23 < tmp13
        tmp25 = tmp24 & tmp22
        tmp26 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp25, eviction_policy='evict_last', other=0.0)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp22, tmp26, tmp27)
        tmp29 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp21, eviction_policy='evict_last', other=0.0)
        tmp30 = tl.where(tmp9, tmp28, tmp29)
        tmp31 = tl.full(tmp30.shape, 0.0, tmp30.dtype)
        tmp32 = tl.where(tmp21, tmp30, tmp31)
        tmp33 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp5, eviction_policy='evict_last', other=0.0)
        tmp34 = tl.where(tmp20, tmp32, tmp33)
        tmp35 = tl.where(tmp10, tmp18, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp5, tmp35, tmp36)
        tmp38 = tmp9 & tmp20
        tmp39 = tmp24 & tmp38
        tmp40 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp39, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp38, tmp40, tmp41)
        tmp43 = tl.load(in_ptr1 + (x0 + (513*x2) + (98560*x1)), tmp20, eviction_policy='evict_last', other=0.0)
        tmp44 = tl.where(tmp9, tmp42, tmp43)
        tmp45 = tl.full(tmp44.shape, 0.0, tmp44.dtype)
        tmp46 = tl.where(tmp20, tmp44, tmp45)
        tmp48 = tl.where(tmp20, tmp46, tmp47)
        tmp49 = tl.where(tmp5, tmp37, tmp48)
        tmp50 = tmp0 >= tmp4
        tmp51 = tmp9 & tmp50
        tmp52 = (((-131584) + x0 + (513*x1) + (262656*x3) + (787968*x2)) // 512) % 513
        tmp53 = tmp52 < tmp13
        tmp54 = tmp53 & tmp51
        tmp55 = tl.load(in_ptr0 + ((512*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 512) % 513)) + (262144*((((-131584) + x4 + (262656*x3) + (787968*x2)) // 262656) % 144)) + (x4 % 512)), tmp54, other=0.0)
        tmp56 = tl.full(tmp55.shape, 0.0, tmp55.dtype)
        tmp57 = tl.where(tmp51, tmp55, tmp56)
        tmp58 = tl.load(in_ptr1 + (x0 + (513*x2) + (24640*x3) + (98560*x1)), tmp50, other=0.0)
        tmp59 = tl.where(tmp9, tmp57, tmp58)
        tmp60 = tl.full(tmp59.shape, 0.0, tmp59.dtype)
        tmp61 = tl.where(tmp50, tmp59, tmp60)
        tmp63 = tl.where(tmp50, tmp61, tmp62)
        tmp64 = tl.where(tmp2, tmp49, tmp63)
        tl.store(out_ptr0 + (x4 + (131328*x3) + (525312*x2)), tmp64, None)


op451: SchedulerNode(ComputedBuffer)
op451.writes = [MemoryDep('buf451', c0, {c0: 6303744}, None)]
op451.unmet_dependencies = [MemoryDep('buf450', 525312*c0 + c1 + 393984, {c0: 48, c1: 131328}, None)]
op451.met_dependencies = []
op451.outputs = [
    buf451: ComputedBuffer
    buf451.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
    buf451.users = [NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False)]
]
op451.group.device = cuda:0
op451.group.iteration = (6303744, 1)
op451.sizes = ([48, 256, 513], [])
buf450_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf451_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
class op451_loop_body:
    var_ranges = {z0: 48, z1: 256, z2: 513}
    index0 = z2
    index1 = -z1 - z2 + 512
    index2 = z1 + 768
    index3 = z1 + z2 + 513
    index4 = 525312*z0 + 513*z1 + z2 + 393984
    index5 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf450', get_index_2)
        where = ops.where(lt, masked_subblock4, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index5')
        store = ops.store('buf451', get_index_3, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf450', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf450', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_3 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf450', get_index_2)
        where_1 = ops.where(lt, masked_subblock2, load)
        constant_4 = ops.constant(-inf, torch.float32)
        where_2 = ops.where(to_dtype, constant_4, where_1)
        return where_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf450', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index4')
        load = ops.load('buf450', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
op451 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6303744
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 513
        x1 = (xindex // 513) % 256
        x2 = (xindex // 131328)
        x3 = xindex % 131328
        x4 = xindex
        tmp43 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), None)
        tmp0 = x0
        tmp1 = tl.full([1], 256, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = 512 + ((-1)*x0) + ((-1)*x1)
        tmp4 = tl.full([1], 0, tl.int64)
        tmp5 = tmp3 <= tmp4
        tmp6 = 1.0
        tmp7 = 0.0
        tmp8 = tl.where(tmp5, tmp6, tmp7)
        tmp9 = (tmp8 != 0)
        tmp10 = 768 + x1
        tmp11 = tmp10 < tmp1
        tmp12 = tmp11 & tmp2
        tmp13 = tl.full([1], 257, tl.int64)
        tmp14 = tmp0 < tmp13
        tmp15 = tmp14 & tmp12
        tmp16 = 513 + x0 + x1
        tmp17 = tmp16 <= tmp4
        tmp18 = tl.where(tmp17, tmp6, tmp7)
        tmp19 = (tmp18 != 0)
        tmp20 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp15, other=0.0)
        tmp21 = float("-inf")
        tmp22 = tl.where(tmp19, tmp21, tmp20)
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp15, tmp22, tmp23)
        tmp25 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp12, other=0.0)
        tmp26 = tl.where(tmp14, tmp24, tmp25)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp12, tmp26, tmp27)
        tmp29 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp2, other=0.0)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp31 = tl.where(tmp9, tmp21, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tmp34 = tmp14 & tmp11
        tmp35 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp34, other=0.0)
        tmp36 = tl.where(tmp19, tmp21, tmp35)
        tmp37 = tl.full(tmp36.shape, 0.0, tmp36.dtype)
        tmp38 = tl.where(tmp34, tmp36, tmp37)
        tmp39 = tl.load(in_ptr0 + (393984 + x3 + (525312*x2)), tmp11, other=0.0)
        tmp40 = tl.where(tmp14, tmp38, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp11, tmp40, tmp41)
        tmp44 = tl.where(tmp11, tmp42, tmp43)
        tmp45 = tl.where(tmp2, tmp33, tmp44)
        tl.store(out_ptr0 + (x4), tmp45, None)


op452: SchedulerNode(ComputedBuffer)
op452.writes = [MemoryDep('buf452', c0, {c0: 4096}, None)]
op452.unmet_dependencies = []
op452.met_dependencies = []
op452.outputs = [
    buf452: ComputedBuffer
    buf452.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf452.users = [
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
    ]
]
op452.group.device = cuda:0
op452.group.iteration = (4096, 1)
op452.sizes = ([4096], [])
buf452_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op452_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(1.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf452', get_index, constant, None)
        return store
op452 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = 1.0
        tl.store(out_ptr0 + (x0), tmp0, None)


op453: SchedulerNode(ComputedBuffer)
op453.writes = [MemoryDep('buf453', c0, {c0: 4096}, None)]
op453.unmet_dependencies = []
op453.met_dependencies = [MemoryDep('arg7_1', c0, {c0: 4096}, None)]
op453.outputs = [
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
    buf453.users = [
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
    ]
]
op453.group.device = cuda:0
op453.group.iteration = (4096, 1)
op453.sizes = ([4096], [])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[4, 1024], stride=[1024, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
class op453_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        constant = ops.constant(0.0, torch.float32)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        ne_1 = ops.ne(load_1, constant_1)
        to_dtype = ops.to_dtype(ne_1, torch.float32, src_dtype = torch.bool)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(ne, constant_2, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf453', get_index_2, where, None)
        return store
op453 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.0
        tmp2 = tmp0 != tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp4, tmp3)
        tl.store(out_ptr0 + (x0), tmp5, None)


op454: SchedulerNode(ComputedBuffer)
op454.writes = [   MemoryDep('buf454', 525312*c0 + 513*c1 + 131328*c2 + c3, {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op454.unmet_dependencies = 
    [   MemoryDep('buf452', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3 + 656384, 512, 513), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf452', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 512, 513) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf452', ModularIndexing(513*c1 + c3 + 787712, 512, 513) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf453', 1024*c2 + 256*(((513*c1 + c3 + 656384)//262656)) + 1024*(((513*c1 + c3 + 656384)//787968)) + ModularIndexing(513*c1 + c3, 1, 512), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf453', ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 1, 512) + 256*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 262656, 3) + 1024*ModularIndexing(262656*c0 + 513*c1 + 787968*c2 + c3 - 256, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None),
        MemoryDep('buf453', ModularIndexing(513*c1 + c3 + 787712, 1, 512) + 256*ModularIndexing(513*c1 + c3 + 787712, 262656, 3) + 1024*ModularIndexing(513*c1 + 787968*c2 + c3 + 787712, 787968, 4), {c0: 4, c1: 256, c2: 4, c3: 513}, None)]
op454.met_dependencies = []
op454.outputs = [
    buf454: ComputedBuffer
    buf454.layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
    buf454.users = [
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
    ]
]
op454.group.device = cuda:0
op454.group.iteration = (2101248, 1)
op454.sizes = ([4, 256, 4, 513], [])
buf452_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf454_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
class op454_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 4, z3: 513}
    index0 = z0
    index1 = z3
    index2 = ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index3 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3 + 656384, 512, 513)
    index4 = 1024*z2 + 256*(((513*z1 + z3 + 656384)//262656)) + 1024*(((513*z1 + z3 + 656384)//787968)) + ModularIndexing(513*z1 + z3, 1, 512)
    index5 = ModularIndexing(513*z1 + z3 + 787712, 512, 513)
    index6 = ModularIndexing(513*z1 + z3 + 787712, 512, 513) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index7 = ModularIndexing(513*z1 + z3 + 787712, 1, 512) + 256*ModularIndexing(513*z1 + z3 + 787712, 262656, 3) + 1024*ModularIndexing(513*z1 + 787968*z2 + z3 + 787712, 787968, 4)
    index8 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513)
    index9 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 512, 513) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index10 = ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 1, 512) + 256*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 262656, 3) + 1024*ModularIndexing(262656*z0 + 513*z1 + 787968*z2 + z3 - 256, 787968, 4)
    index11 = 525312*z0 + 513*z1 + 131328*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_2 = ops.constant(3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        constant_4 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, masked_subblock3, constant_4)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_5 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_5)
        masked_subblock6 = self.masked_subblock6(lt_1, 0.0)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_1, masked_subblock6, constant_6)
        where_3 = ops.where(eq, where_1, where_2)
        get_index_3 = self.get_index('index11')
        store = ops.store('buf454', get_index_3, where_3, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf452', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf453', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf452', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf453', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock4, constant_1)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf452', get_index)
        get_index_1 = self.get_index('index10')
        load_1 = ops.load('buf453', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index8')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock7, constant_1)
        return where
op454 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2101248
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 525312)
        x0 = xindex % 513
        x2 = (xindex // 2052) % 256
        x1 = (xindex // 513) % 4
        tmp0 = x3
        tmp1 = tl.full([1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 256, tl.int64)
        tmp5 = tmp3 >= tmp4
        tmp6 = ((656384 + x0 + (513*x2)) // 512) % 513
        tmp7 = tl.full([1], 512, tl.int64)
        tmp8 = tmp6 < tmp7
        tmp9 = tmp8 & tmp5
        tmp10 = tl.load(in_ptr0 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + (((656384 + x0 + (513*x2)) // 512) % 513)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.load(in_ptr1 + ((256*((656384 + x0 + (513*x2)) // 262656)) + (1024*x1) + (1024*((656384 + x0 + (513*x2)) // 787968)) + ((x0 + (513*x2)) % 512)), tmp9, eviction_policy='evict_last', other=0.0)
        tmp12 = tmp10 * tmp11
        tmp13 = tl.full(tmp12.shape, 0.0, tmp12.dtype)
        tmp14 = tl.where(tmp9, tmp12, tmp13)
        tmp15 = tl.full(tmp14.shape, 0.0, tmp14.dtype)
        tmp16 = tl.where(tmp5, tmp14, tmp15)
        tmp17 = tl.full([1], 3, tl.int64)
        tmp18 = tmp17 < tmp17
        tmp19 = tmp5 & tmp18
        tmp20 = ((787712 + x0 + (513*x2)) // 512) % 513
        tmp21 = tmp20 < tmp7
        tmp22 = tmp21 & tmp19
        tmp23 = tl.load(in_ptr0 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + (((787712 + x0 + (513*x2)) // 512) % 513)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp24 = tl.load(in_ptr1 + ((256*(((787712 + x0 + (513*x2)) // 262656) % 3)) + (1024*(((787712 + x0 + (513*x2) + (787968*x1)) // 787968) % 4)) + ((787712 + x0 + (513*x2)) % 512)), tmp22, eviction_policy='evict_last', other=0.0)
        tmp25 = tmp23 * tmp24
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp22, tmp25, tmp26)
        tmp28 = tl.full(tmp27.shape, 0.0, tmp27.dtype)
        tmp29 = tl.where(tmp19, tmp27, tmp28)
        tmp30 = 0.0
        tmp31 = tl.where(tmp5, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp18, tmp31, tmp32)
        tmp34 = tl.where(tmp18, tmp33, tmp30)
        tmp35 = tl.where(tmp5, tmp16, tmp34)
        tmp36 = tmp0 < tmp17
        tmp37 = tmp5 & tmp36
        tmp38 = (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513
        tmp39 = tmp38 < tmp7
        tmp40 = tmp39 & tmp37
        tmp41 = tl.load(in_ptr0 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + ((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 512) % 513)), tmp40, eviction_policy='evict_last', other=0.0)
        tmp42 = tl.load(in_ptr1 + ((256*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 262656) % 3)) + (1024*((((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) // 787968) % 4)) + (((-256) + x0 + (513*x2) + (262656*x3) + (787968*x1)) % 512)), tmp40, other=0.0)
        tmp43 = tmp41 * tmp42
        tmp44 = tl.full(tmp43.shape, 0.0, tmp43.dtype)
        tmp45 = tl.where(tmp40, tmp43, tmp44)
        tmp46 = tl.full(tmp45.shape, 0.0, tmp45.dtype)
        tmp47 = tl.where(tmp37, tmp45, tmp46)
        tmp48 = tl.where(tmp5, tmp47, tmp30)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp36, tmp48, tmp49)
        tmp51 = tl.where(tmp36, tmp50, tmp30)
        tmp52 = tl.where(tmp2, tmp35, tmp51)
        tl.store(out_ptr0 + (x0 + (513*x2) + (131328*x1) + (525312*x3)), tmp52, None)


op455: SchedulerNode(ComputedBuffer)
op455.writes = [MemoryDep('buf455', c0, {c0: 525312}, None)]
op455.unmet_dependencies = 
    [   MemoryDep('buf452', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf452', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf453', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf453', ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 256, 787968, 4), {c0: 4, c1: 256, c2: 513}, None),
        MemoryDep('buf454', c0, {c0: 525312}, None)]
op455.met_dependencies = []
op455.outputs = [
    buf455: ComputedBuffer
    buf455.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
    buf455.users = [
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
    ]
]
op455.group.device = cuda:0
op455.group.iteration = (525312, 1)
op455.sizes = ([4, 256, 513], [])
buf452_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf454_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf455_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
class op455_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 513}
    index0 = z1
    index1 = z2
    index2 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513)
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 256, 787968, 4)
    index5 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index7 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index8 = 131328*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_1 = ops.constant(0, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_1, constant_2)
        masked_subblock7 = self.masked_subblock7(ge_1, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf454', get_index_1)
        where = ops.where(ge_1, masked_subblock7, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_2 = self.get_index('index8')
        store = ops.store('buf455', get_index_2, where_1, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf452', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf453', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf452', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf453', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock5(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0.0)
        return masked_subblock6
    def masked_subblock4(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf454', get_index_1)
        where = ops.where(lt, masked_subblock5, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_2, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_2 = self.get_index('index8')
        load = ops.load('buf454', get_index_2)
        where = ops.where(ge_1, masked_subblock4, load)
        where_1 = ops.where(and_, masked_subblock2, where)
        return where_1
    def masked_subblock9(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf452', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf453', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock8(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock9 = self.masked_subblock9(lt, 0.0)
        return masked_subblock9
    def masked_subblock7(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf454', get_index_1)
        where = ops.where(lt, masked_subblock8, load)
        return where
op455 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 10, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 256
        x2 = xindex
        y1 = (yindex // 256)
        y3 = yindex
        tmp56 = tl.load(in_ptr2 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 1, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tmp3 >= tmp1
        tmp5 = tl.full([1, 1], 256, tl.int64)
        tmp6 = tmp3 < tmp5
        tmp7 = tmp4 & tmp6
        tmp8 = tmp7 & tmp2
        tmp9 = (((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp10 = tl.full([1, 1], 512, tl.int64)
        tmp11 = tmp9 < tmp10
        tmp12 = tmp11 & tmp8
        tmp13 = tl.load(in_ptr0 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-256) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp14 = tl.load(in_ptr1 + ((256*((((-256) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-256) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + (((-256) + x2 + (513*y0) + (787968*y1)) % 512)), tmp12 & xmask, eviction_policy='evict_last', other=0.0)
        tmp15 = tmp13 * tmp14
        tmp16 = tl.full(tmp15.shape, 0.0, tmp15.dtype)
        tmp17 = tl.where(tmp12, tmp15, tmp16)
        tmp18 = tl.full(tmp17.shape, 0.0, tmp17.dtype)
        tmp19 = tl.where(tmp8, tmp17, tmp18)
        tmp20 = tl.full([1, 1], 0, tl.int64)
        tmp21 = tmp20 >= tmp1
        tmp22 = tmp21 & tmp2
        tmp23 = tmp6 & tmp22
        tmp24 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp25 = tmp24 < tmp10
        tmp26 = tmp25 & tmp23
        tmp27 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp26 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tmp27 * tmp28
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp26, tmp29, tmp30)
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp23, tmp31, tmp32)
        tmp34 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp22 & xmask, eviction_policy='evict_last', other=0.0)
        tmp35 = tl.where(tmp6, tmp33, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp22, tmp35, tmp36)
        tmp38 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp39 = tl.where(tmp21, tmp37, tmp38)
        tmp40 = tl.where(tmp7, tmp19, tmp39)
        tmp41 = tl.full(tmp40.shape, 0.0, tmp40.dtype)
        tmp42 = tl.where(tmp2, tmp40, tmp41)
        tmp43 = tmp6 & tmp21
        tmp44 = tmp25 & tmp43
        tmp45 = tl.load(in_ptr0 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp44 & xmask, eviction_policy='evict_last', other=0.0)
        tmp47 = tmp45 * tmp46
        tmp48 = tl.full(tmp47.shape, 0.0, tmp47.dtype)
        tmp49 = tl.where(tmp44, tmp47, tmp48)
        tmp50 = tl.full(tmp49.shape, 0.0, tmp49.dtype)
        tmp51 = tl.where(tmp43, tmp49, tmp50)
        tmp52 = tl.load(in_ptr2 + (x2 + (513*y3)), tmp21 & xmask, eviction_policy='evict_last', other=0.0)
        tmp53 = tl.where(tmp6, tmp51, tmp52)
        tmp54 = tl.full(tmp53.shape, 0.0, tmp53.dtype)
        tmp55 = tl.where(tmp21, tmp53, tmp54)
        tmp57 = tl.where(tmp21, tmp55, tmp56)
        tmp58 = tl.where(tmp2, tmp42, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op456: SchedulerNode(ComputedBuffer)
op456.writes = [MemoryDep('buf456', c0, {c0: 263168}, None)]
op456.unmet_dependencies = 
    [   MemoryDep('buf452', ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf453', ModularIndexing(513*c1 + c2, 1, 512) + 256*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + 513*c1 + c2 - 131584, 787968, 4), {c0: 4, c1: 256, c2: 257}, None),
        MemoryDep('buf454', 513*c0 + c1, {c0: 1024, c1: 257}, None),
        MemoryDep('buf455', 513*c0 + c1, {c0: 1024, c1: 257}, None)]
op456.met_dependencies = []
op456.outputs = [
    buf456: ComputedBuffer
    buf456.layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
    buf456.users = [NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False)]
]
op456.group.device = cuda:0
op456.group.iteration = (263168, 1)
op456.sizes = ([4, 256, 257], [])
buf455_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf454_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf456_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
class op456_loop_body:
    var_ranges = {z0: 4, z1: 256, z2: 257}
    index0 = z1 + z2 - 255
    index1 = 131328*z0 + 513*z1 + z2
    index2 = z2
    index3 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513)
    index4 = ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index5 = ModularIndexing(513*z1 + z2, 1, 512) + 256*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + 513*z1 + z2 - 131584, 787968, 4)
    index6 = 65792*z0 + 257*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        constant_3 = ops.constant(0, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq = ops.eq(constant_3, constant_4)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf455', get_index_1)
        constant_5 = ops.constant(0, torch.int64)
        constant_6 = ops.constant(1, torch.int64)
        ge = ops.ge(constant_5, constant_6)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf454', get_index_2)
        where_1 = ops.where(ge, masked_subblock1, load_1)
        where_2 = ops.where(eq, load, where_1)
        constant_7 = ops.constant(-inf, torch.float32)
        where_3 = ops.where(to_dtype, constant_7, where_2)
        get_index_3 = self.get_index('index6')
        store = ops.store('buf456', get_index_3, where_3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf452', get_index)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('buf453', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        return masked_subblock3
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf454', get_index_1)
        where = ops.where(lt, masked_subblock2, load)
        return where
op456 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1024, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 1024
        xnumel = 257
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 256
        y3 = yindex
        y1 = (yindex // 256)
        tmp9 = tl.load(in_ptr0 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr3 + (x2 + (513*y3)), xmask, eviction_policy='evict_last')
        tmp0 = (-255) + x2 + y0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 <= tmp1
        tmp3 = 1.0
        tmp4 = 0.0
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tmp6 = (tmp5 != 0)
        tmp7 = tl.full([1, 1], 0, tl.int32)
        tmp8 = tmp7 == tmp7
        tmp10 = tl.full([1, 1], 1, tl.int64)
        tmp11 = tmp1 >= tmp10
        tmp12 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp13 = tl.full([1, 1], 256, tl.int64)
        tmp14 = tmp12 < tmp13
        tmp15 = tmp14 & tmp11
        tmp16 = (((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513
        tmp17 = tl.full([1, 1], 512, tl.int64)
        tmp18 = tmp16 < tmp17
        tmp19 = tmp18 & tmp15
        tmp20 = tl.load(in_ptr1 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*y0) + (787968*y1)) // 512) % 513)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*y0) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*y0) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*y0)) % 512)), tmp19 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tmp20 * tmp21
        tmp23 = tl.full(tmp22.shape, 0.0, tmp22.dtype)
        tmp24 = tl.where(tmp19, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp15, tmp24, tmp25)
        tmp27 = tl.load(in_ptr3 + (x2 + (513*y3)), tmp11 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.where(tmp14, tmp26, tmp27)
        tmp29 = tl.full(tmp28.shape, 0.0, tmp28.dtype)
        tmp30 = tl.where(tmp11, tmp28, tmp29)
        tmp32 = tl.where(tmp11, tmp30, tmp31)
        tmp33 = tl.where(tmp8, tmp9, tmp32)
        tmp34 = float("-inf")
        tmp35 = tl.where(tmp6, tmp34, tmp33)
        tl.store(out_ptr0 + (x2 + (257*y3)), tmp35, xmask)


op457: SchedulerNode(ComputedBuffer)
op457.writes = [MemoryDep('buf457', c0, {c0: 2101248}, None)]
op457.unmet_dependencies = 
    [   MemoryDep('buf452', ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf453', ModularIndexing(c2 + 513*ModularIndexing(c1, 1, 256), 1, 512) + 256*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*c0 + c2 + 262656*((c1//256)) + 513*ModularIndexing(c1, 1, 256) - 131584, 787968, 4), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf454', 131328*c0 + c2 + 525312*((c1//256)) + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf455', 131328*c0 + c2 + 513*ModularIndexing(c1, 1, 256), {c0: 4, c1: 1024, c2: 513}, None),
        MemoryDep('buf456', 65792*c0 + 257*c1 + c2, {c0: 4, c1: 1024, c2: 513}, None)]
op457.met_dependencies = []
op457.outputs = [
    buf457: ComputedBuffer
    buf457.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
    buf457.users = [NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False)]
]
op457.group.device = cuda:0
op457.group.iteration = (2101248, 1)
op457.sizes = ([4, 1024, 513], [])
buf456_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 1, 257], stride=[65792, 257, 263168, 1])
buf455_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 513], stride=[131328, 513, 1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[4, 2, 512, 1], stride=[1024, 512, 1, 1])
buf454_layout = FixedLayout('cuda', torch.float32, size=[4, 4, 256, 513], stride=[131328, 525312, 513, 1])
buf457_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
class op457_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 513}
    index0 = z1
    index1 = z2
    index2 = 65792*z0 + 257*z1 + z2
    index3 = (z1//256)
    index4 = 131328*z0 + z2 + 513*ModularIndexing(z1, 1, 256)
    index5 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513)
    index6 = ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 512, 513) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index7 = ModularIndexing(z2 + 513*ModularIndexing(z1, 1, 256), 1, 512) + 256*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 262656, 3) + 1024*ModularIndexing(787968*z0 + z2 + 262656*((z1//256)) + 513*ModularIndexing(z1, 1, 256) - 131584, 787968, 4)
    index8 = 131328*z0 + z2 + 525312*((z1//256)) + 513*ModularIndexing(z1, 1, 256)
    index9 = 525312*z0 + 513*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf455', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock6 = self.masked_subblock6(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf454', get_index_4)
        where = ops.where(ge, masked_subblock6, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_5 = self.get_index('index9')
        store = ops.store('buf457', get_index_5, where_2, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf456', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf452', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf453', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        return masked_subblock5
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf454', get_index_1)
        where = ops.where(lt, masked_subblock4, load)
        return where
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index4')
        load = ops.load('buf455', get_index_2)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(ge, 0.0)
        get_index_4 = self.get_index('index8')
        load_1 = ops.load('buf454', get_index_4)
        where = ops.where(ge, masked_subblock3, load_1)
        where_1 = ops.where(eq, load, where)
        where_2 = ops.where(lt, masked_subblock2, where_1)
        return where_2
    def masked_subblock8(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf452', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('buf453', get_index_1)
        mul = ops.mul(load, load_1)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock8 = self.masked_subblock8(lt, 0.0)
        return masked_subblock8
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(lt, 0.0)
        get_index_1 = self.get_index('index8')
        load = ops.load('buf454', get_index_1)
        where = ops.where(lt, masked_subblock7, load)
        return where
op457 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4096, 1024], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 11, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 4096
        xnumel = 513
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        y0 = yindex % 1024
        x2 = xindex
        y1 = (yindex // 1024)
        y3 = yindex
        tmp40 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), xmask, eviction_policy='evict_last')
        tmp55 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), xmask, eviction_policy='evict_last')
        tmp0 = y0
        tmp1 = tl.full([1, 1], 256, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.broadcast_to(x2, [XBLOCK, YBLOCK])
        tmp4 = tl.full([1, 1], 257, tl.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp5 & tmp2
        tmp7 = tl.load(in_ptr0 + (x2 + (257*y0) + (65792*y1)), tmp6 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tl.broadcast_to((y0 // 256), [XBLOCK, YBLOCK])
        tmp9 = tl.full([1, 1], 0, tl.int32)
        tmp10 = tmp8 == tmp9
        tmp11 = tl.load(in_ptr1 + (x2 + (513*(y0 % 256)) + (131328*y1)), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp12 = tl.full([1, 1], 1, tl.int64)
        tmp13 = tmp8 >= tmp12
        tmp14 = tmp13 & tmp2
        tmp15 = tmp3 < tmp1
        tmp16 = tmp15 & tmp14
        tmp17 = (((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513
        tmp18 = tl.full([1, 1], 512, tl.int64)
        tmp19 = tmp17 < tmp18
        tmp20 = tmp19 & tmp16
        tmp21 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp23 = tmp21 * tmp22
        tmp24 = tl.full(tmp23.shape, 0.0, tmp23.dtype)
        tmp25 = tl.where(tmp20, tmp23, tmp24)
        tmp26 = tl.full(tmp25.shape, 0.0, tmp25.dtype)
        tmp27 = tl.where(tmp16, tmp25, tmp26)
        tmp28 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp14 & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tl.where(tmp15, tmp27, tmp28)
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp14, tmp29, tmp30)
        tmp32 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp2 & xmask, eviction_policy='evict_last', other=0.0)
        tmp33 = tl.where(tmp13, tmp31, tmp32)
        tmp34 = tl.where(tmp10, tmp11, tmp33)
        tmp35 = tl.where(tmp5, tmp7, tmp34)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp2, tmp35, tmp36)
        tmp38 = (y0 // 256)
        tmp39 = tmp38 == tmp9
        tmp41 = tmp38 >= tmp12
        tmp42 = tmp15 & tmp41
        tmp43 = tmp19 & tmp42
        tmp44 = tl.load(in_ptr2 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 512) % 513)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp45 = tl.load(in_ptr3 + ((256*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 262656) % 3)) + (1024*((((-131584) + x2 + (513*(y0 % 256)) + (262656*(y0 // 256)) + (787968*y1)) // 787968) % 4)) + ((x2 + (513*(y0 % 256))) % 512)), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
        tmp46 = tmp44 * tmp45
        tmp47 = tl.full(tmp46.shape, 0.0, tmp46.dtype)
        tmp48 = tl.where(tmp43, tmp46, tmp47)
        tmp49 = tl.full(tmp48.shape, 0.0, tmp48.dtype)
        tmp50 = tl.where(tmp42, tmp48, tmp49)
        tmp51 = tl.load(in_ptr4 + (x2 + (513*(y0 % 256)) + (131328*y1) + (525312*(y0 // 256))), tmp41 & xmask, eviction_policy='evict_last', other=0.0)
        tmp52 = tl.where(tmp15, tmp50, tmp51)
        tmp53 = tl.full(tmp52.shape, 0.0, tmp52.dtype)
        tmp54 = tl.where(tmp41, tmp52, tmp53)
        tmp56 = tl.where(tmp41, tmp54, tmp55)
        tmp57 = tl.where(tmp39, tmp40, tmp56)
        tmp58 = tl.where(tmp2, tmp37, tmp57)
        tl.store(out_ptr0 + (x2 + (513*y3)), tmp58, xmask)


op458: SchedulerNode(ComputedBuffer)
op458.writes = [   MemoryDep('buf458', 6324224*c0 + 513*c1 + 6176*c2 + c3, {c0: 4, c1: 12, c2: 1024, c3: 513}, None)]
op458.unmet_dependencies = 
    [   MemoryDep('buf450', 525312*c0 + 513*c1 + c2 + 131328*((ModularIndexing(c1, 1, 256)//256)), {c0: 48, c1: 1024, c2: 513}, None),
        MemoryDep('buf451', 131328*c0 + c1 - 393984, {c0: 48, c1: 525312}, None),
        MemoryDep('buf457', 525312*c0 + c2, {c0: 4, c1: 12, c2: 525312}, None)]
op458.met_dependencies = []
op458.outputs = [
    buf458: ComputedBuffer
    buf458.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
    buf458.users = [
        NodeUser(node=SchedulerNode(name='op459'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
    ]
]
op458.group.device = cuda:0
op458.group.iteration = (25214976, 1)
op458.sizes = ([4, 12, 1024, 513], [])
buf451_layout = FixedLayout('cuda', torch.float32, size=[4, 256, 12, 513], stride=[1575936, 513, 131328, 1])
buf450_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 513], stride=[525312, 131328, 513, 1])
buf457_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1, 513], stride=[525312, 513, 2101248, 1])
buf458_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
class op458_loop_body:
    var_ranges = {z0: 4, z1: 12, z2: 1024, z3: 513}
    index0 = z2
    index1 = 1575936*z0 + 131328*z1 + 513*z2 + z3 - 393984
    index2 = z2 + 256*((ModularIndexing(z2, 1, 256)//256))
    index3 = z3
    index4 = z2 + z3 + 256*((ModularIndexing(z2, 1, 256)//256)) - 255
    index5 = 6303744*z0 + 525312*z1 + 513*z2 + z3 + 131328*((ModularIndexing(z2, 1, 256)//256))
    index6 = -z2 - z3 + 1280
    index7 = 525312*z0 + 513*z2 + z3
    index8 = 6324224*z0 + 513*z1 + 6176*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(768, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index5')
        load = ops.load('buf450', get_index_2)
        where = ops.where(lt, masked_subblock2, load)
        where_1 = ops.where(ge, masked_subblock1, where)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        get_index_4 = self.get_index('index7')
        load_1 = ops.load('buf457', get_index_4)
        where_2 = ops.where(ge_1, masked_subblock4, load_1)
        add = ops.add(where_1, where_2)
        get_index_5 = self.get_index('index8')
        store = ops.store('buf458', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf451', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf450', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(257, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock3 = self.masked_subblock3(lt, 0.0)
        get_index_1 = self.get_index('index5')
        load = ops.load('buf450', get_index_1)
        where = ops.where(lt, masked_subblock3, load)
        return where
    def masked_subblock5(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        le = ops.le(index_expr, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        constant_2 = ops.constant(0.0, torch.float32)
        where = ops.where(le, constant_1, constant_2)
        to_dtype = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf457', get_index_1)
        constant_3 = ops.constant(-inf, torch.float32)
        where_1 = ops.where(to_dtype, constant_3, load)
        return where_1
    def masked_subblock4(self, ops):
        get_index = self.get_index('index3')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock5 = self.masked_subblock5(ge, 0.0)
        get_index_1 = self.get_index('index7')
        load = ops.load('buf457', get_index_1)
        where = ops.where(ge, masked_subblock5, load)
        return where
op458 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25214976
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 513) % 1024
        x4 = xindex % 525312
        x5 = (xindex // 525312)
        x0 = xindex % 513
        x3 = (xindex // 6303744)
        x2 = (xindex // 525312) % 12
        tmp27 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), None)
        tmp44 = tl.load(in_ptr2 + (x4 + (525312*x3)), None, eviction_policy='evict_last')
        tmp0 = x1
        tmp1 = tl.full([1], 768, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.load(in_ptr0 + ((-393984) + x4 + (131328*x5)), tmp2, other=0.0)
        tmp4 = x1 + (256*((x1 % 256) // 256))
        tmp5 = tl.full([1], 256, tl.int64)
        tmp6 = tmp4 < tmp5
        tmp7 = x0
        tmp8 = tl.full([1], 257, tl.int64)
        tmp9 = tmp7 < tmp8
        tmp10 = tmp9 & tmp6
        tmp11 = (-255) + x0 + x1 + (256*((x1 % 256) // 256))
        tmp12 = tl.full([1], 0, tl.int64)
        tmp13 = tmp11 <= tmp12
        tmp14 = 1.0
        tmp15 = 0.0
        tmp16 = tl.where(tmp13, tmp14, tmp15)
        tmp17 = (tmp16 != 0)
        tmp18 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp10, other=0.0)
        tmp19 = float("-inf")
        tmp20 = tl.where(tmp17, tmp19, tmp18)
        tmp21 = tl.full(tmp20.shape, 0.0, tmp20.dtype)
        tmp22 = tl.where(tmp10, tmp20, tmp21)
        tmp23 = tl.load(in_ptr1 + (x0 + (513*x1) + (131328*((x1 % 256) // 256)) + (525312*x5)), tmp6, other=0.0)
        tmp24 = tl.where(tmp9, tmp22, tmp23)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp6, tmp24, tmp25)
        tmp28 = tl.where(tmp6, tmp26, tmp27)
        tmp29 = tl.where(tmp2, tmp3, tmp28)
        tmp30 = tmp7 >= tmp5
        tmp31 = tmp30 & tmp2
        tmp32 = 1280 + ((-1)*x0) + ((-1)*x1)
        tmp33 = tmp32 <= tmp12
        tmp34 = tl.where(tmp33, tmp14, tmp15)
        tmp35 = (tmp34 != 0)
        tmp36 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp31, eviction_policy='evict_last', other=0.0)
        tmp37 = tl.where(tmp35, tmp19, tmp36)
        tmp38 = tl.full(tmp37.shape, 0.0, tmp37.dtype)
        tmp39 = tl.where(tmp31, tmp37, tmp38)
        tmp40 = tl.load(in_ptr2 + (x4 + (525312*x3)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp41 = tl.where(tmp30, tmp39, tmp40)
        tmp42 = tl.full(tmp41.shape, 0.0, tmp41.dtype)
        tmp43 = tl.where(tmp2, tmp41, tmp42)
        tmp45 = tl.where(tmp2, tmp43, tmp44)
        tmp46 = tmp29 + tmp45
        tl.store(out_ptr0 + (x0 + (513*x2) + (6176*x1) + (6324224*x3)), tmp46, None)


op459: SchedulerNode(ComputedBuffer)
op459.writes = [MemoryDep('buf459', c0, {c0: 49152}, None)]
op459.unmet_dependencies = [MemoryDep('buf458', 6176*c0 + c1, {c0: 4096, c1: 6156}, None)]
op459.met_dependencies = []
op459.outputs = [
    buf459: ComputedBuffer
    buf459.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf459.users = [
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
    ]
]
op459.group.device = cuda:0
op459.group.iteration = (49152, 513)
op459.sizes = ([4096, 12], [513])
buf458_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op459_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf458', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf459', get_index_1, reduction)
        return store_reduction
op459 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        x3 = xindex
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp2, None)


op460: SchedulerNode(ComputedBuffer)
op460.writes = [MemoryDep('buf460', c0, {c0: 49152}, None)]
op460.unmet_dependencies = 
    [   MemoryDep('buf458', 6176*c0 + c1, {c0: 4096, c1: 6156}, None),
        MemoryDep('buf459', c0, {c0: 49152}, None)]
op460.met_dependencies = []
op460.outputs = [
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
    buf460.users = [NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False)]
]
op460.group.device = cuda:0
op460.group.iteration = (49152, 513)
op460.sizes = ([4096, 12], [513])
buf458_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf460_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
class op460_loop_body:
    var_ranges = {z0: 4096, z1: 12, z2: 513}
    index0 = 6176*z0 + 513*z1 + z2
    index1 = 12*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf458', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf459', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf460', get_index_2, reduction)
        return store_reduction
op460 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 49152
        rnumel = 513
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex % 12
        x1 = (xindex // 12)
        x3 = xindex
        tmp1 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp0 = tl.load(in_ptr0 + (r2 + (513*x0) + (6176*x1)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp5, None)


op461: SchedulerNode(ComputedBuffer)
op461.writes = [MemoryDep('buf461', c0, {c0: 3145728}, None)]
op461.unmet_dependencies = [MemoryDep('buf439', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 4, c2: 768}, None)]
op461.met_dependencies = []
op461.outputs = [
    buf461: ComputedBuffer
    buf461.layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
    buf461.users = [NodeUser(node=ExternKernelSchedulerNode(name='op462'), can_inplace=False, is_weak=False)]
]
op461.group.device = cuda:0
op461.group.iteration = (3145728, 1)
op461.sizes = ([1024, 4, 768], [])
buf439_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf461_layout = FixedLayout('cuda', torch.float32, size=[1024, 4, 768], stride=[3072, 768, 1])
class op461_loop_body:
    var_ranges = {z0: 1024, z1: 4, z2: 768}
    index0 = 768*z0 + 786432*z1 + z2
    index1 = 3072*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf439', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf461', get_index_1, load, None)
        return store
op461 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 4
        x2 = (xindex // 3072)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (768*x2) + (786432*x1)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op462: ExternKernelSchedulerNode(ExternKernelOut)
op462.writes = [StarDep(name='buf462', mode=None)]
op462.unmet_dependencies = [StarDep(name='buf461', mode=None)]
op462.met_dependencies = [StarDep(name='arg183_1', mode=None)]
op462.outputs = [
    buf462: ExternKernelOut
    buf462.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf462.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False)]
]
op462.node.kernel = extern_kernels.mm


op463: SchedulerNode(ComputedBuffer)
op463.writes = [MemoryDep('buf463', c0, {c0: 4718592}, None)]
op463.unmet_dependencies = [   MemoryDep('buf462', 64*c0 + 3072*c1 + c2 - 786432, {c0: 48, c1: 1536, c2: 64}, None)]
op463.met_dependencies = [   MemoryDep('arg184_1', c2 + 64*ModularIndexing(c0, 1, 12), {c0: 48, c1: 1536, c2: 64}, None)]
op463.outputs = [
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
    buf463.users = [NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False)]
]
op463.group.device = cuda:0
op463.group.iteration = (4718592, 1)
op463.sizes = ([48, 1536, 64], [])
buf462_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
class op463_loop_body:
    var_ranges = {z0: 48, z1: 1536, z2: 64}
    index0 = z1 - 256
    index1 = 64*z0 + 3072*z1 + z2 - 786432
    index2 = z2 + 64*ModularIndexing(z0, 1, 12)
    index3 = 98304*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1024, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, -1.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf463', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf462', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg184_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op463 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4718592
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 1536
        x0 = xindex % 64
        x2 = (xindex // 98304)
        x3 = xindex
        tmp0 = (-256) + x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 1024, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-786432) + x0 + (64*x2) + (3072*x1)), tmp5, other=0.0)
        tmp7 = tl.load(in_ptr1 + (x0 + (64*(x2 % 12))), tmp5, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, -1.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op464: SchedulerNode(ComputedBuffer)
op464.writes = [   MemoryDep('buf464', 770*c0 + 788480*c1 + c2, {c0: 1024, c1: 48, c2: 770}, None)]
op464.unmet_dependencies = 
    [   MemoryDep('buf458', 6176*c0 + c2 + 6324224*((c1//12)) + 6324224*((ModularIndexing(c1, 1, 12)//12)) + 513*ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48, c2: 770}, None),
        MemoryDep('buf459', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None),
        MemoryDep('buf460', 12*c0 + 12288*((c1//12)) + ModularIndexing(c1, 1, 12), {c0: 1024, c1: 48}, None)]
op464.met_dependencies = [MemoryDep('arg8_1', c0 + 1024*((c1//12)), {c0: 1024, c1: 48}, None)]
op464.outputs = [
    buf464: ComputedBuffer
    buf464.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
    buf464.users = [NodeUser(node=ExternKernelSchedulerNode(name='op466'), can_inplace=False, is_weak=False)]
]
op464.group.device = cuda:0
op464.group.iteration = (37847040, 1)
op464.sizes = ([1024, 48, 770], [])
arg8_1_layout = FixedLayout('cuda', torch.bool, size=[4, 1024], stride=[1024, 1])
buf458_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 513], stride=[6324224, 6176, 513, 1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf460_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 12, 1], stride=[12288, 12, 1, 49152])
buf464_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 256, 770], stride=[788480, 197120, 770, 1])
class op464_loop_body:
    var_ranges = {z0: 1024, z1: 48, z2: 770}
    index0 = z2
    index1 = z0 + 1024*((z1//12))
    index2 = 6176*z0 + z2 + 6324224*((z1//12)) + 6324224*((ModularIndexing(z1, 1, 12)//12)) + 513*ModularIndexing(z1, 1, 12)
    index3 = 12*z0 + 12288*((z1//12)) + ModularIndexing(z1, 1, 12)
    index4 = 770*z0 + 788480*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(513, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index4')
        store = ops.store('buf464', get_index_1, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg8_1', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf458', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('buf459', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf460', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(load, constant, truediv)
        return where
op464 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 37847040
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 770
        x1 = (xindex // 770) % 48
        x2 = (xindex // 36960)
        tmp0 = x0
        tmp1 = tl.full([1], 513, tl.int64)
        tmp2 = tmp0 < tmp1
        tmp3 = tl.load(in_ptr0 + (x2 + (1024*(x1 // 12))), tmp2, eviction_policy='evict_last', other=0.0).to(tl.int1)
        tmp4 = tl.load(in_ptr1 + (x0 + (513*(x1 % 12)) + (6176*x2) + (6324224*(x1 // 12)) + (6324224*((x1 % 12) // 12))), tmp2, other=0.0)
        tmp5 = tl.load(in_ptr2 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp4 - tmp5
        tmp7 = tl_math.exp(tmp6)
        tmp8 = tl.load(in_ptr3 + ((12*x2) + (12288*(x1 // 12)) + (x1 % 12)), tmp2, eviction_policy='evict_last', other=0.0)
        tmp9 = tmp7 / tmp8
        tmp10 = 0.0
        tmp11 = tl.where(tmp3, tmp10, tmp9)
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp2, tmp11, tmp12)
        tl.store(out_ptr0 + (x0 + (770*x2) + (788480*x1)), tmp13, None)


op465: SchedulerNode(ComputedBuffer)
op465.writes = [MemoryDep('buf465', c0, {c0: 9437184}, None)]
op465.unmet_dependencies = [   MemoryDep('buf463', 98304*c0 + 16384*c1 + c2, {c0: 48, c1: 4, c2: 49152}, None)]
op465.met_dependencies = []
op465.outputs = [
    buf465: ComputedBuffer
    buf465.layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
    buf465.users = [NodeUser(node=ExternKernelSchedulerNode(name='op466'), can_inplace=False, is_weak=False)]
]
op465.group.device = cuda:0
op465.group.iteration = (9437184, 1)
op465.sizes = ([48, 4, 49152], [])
buf463_layout = FixedLayout('cuda', torch.float32, size=[48, 1536, 64], stride=[98304, 64, 1])
buf465_layout = FixedLayout('cuda', torch.float32, size=[48, 4, 768, 64, 1], stride=[196608, 49152, 64, 1, 1])
class op465_loop_body:
    var_ranges = {z0: 48, z1: 4, z2: 49152}
    index0 = 98304*z0 + 16384*z1 + z2
    index1 = 196608*z0 + 49152*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf463', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf465', get_index_1, load, None)
        return store
op465 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 9437184
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 49152
        x1 = (xindex // 49152) % 4
        x2 = (xindex // 196608)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (16384*x1) + (98304*x2)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op466: ExternKernelSchedulerNode(ExternKernelOut)
op466.writes = [StarDep(name='buf466', mode=None)]
op466.unmet_dependencies = [StarDep(name='buf464', mode=None), StarDep(name='buf465', mode=None)]
op466.met_dependencies = []
op466.outputs = [
    buf466: ExternKernelOut
    buf466.layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
    buf466.users = [NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False)]
]
op466.node.kernel = extern_kernels.bmm


op467: SchedulerNode(ComputedBuffer)
op467.writes = [MemoryDep('buf467', c0, {c0: 3145728}, None)]
op467.unmet_dependencies = [   MemoryDep('buf466', 786432*c0 + 64*c1 + 65536*((c2//64)) + ModularIndexing(c2, 1, 64), {c0: 4, c1: 1024, c2: 768}, None)]
op467.met_dependencies = []
op467.outputs = [
    buf467: ComputedBuffer
    buf467.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf467.users = [NodeUser(node=ExternKernelSchedulerNode(name='op468'), can_inplace=False, is_weak=False)]
]
op467.group.device = cuda:0
op467.group.iteration = (3145728, 1)
op467.sizes = ([4, 1024, 768], [])
buf466_layout = FixedLayout('cuda', torch.float32, size=[192, 256, 64], stride=[16384, 64, 1])
buf467_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op467_loop_body:
    var_ranges = {z0: 4, z1: 1024, z2: 768}
    index0 = 786432*z0 + 64*z1 + 65536*((z2//64)) + ModularIndexing(z2, 1, 64)
    index1 = 786432*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf466', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf467', get_index_1, load, None)
        return store
op467 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 768
        x1 = (xindex // 768) % 1024
        x2 = (xindex // 786432)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + ((64*x1) + (65536*(x0 // 64)) + (786432*x2) + (x0 % 64)), None)
        tl.store(out_ptr0 + (x3), tmp0, None)


op468: ExternKernelSchedulerNode(ExternKernelOut)
op468.writes = [StarDep(name='buf468', mode=None)]
op468.unmet_dependencies = [StarDep(name='buf467', mode=None)]
op468.met_dependencies = [StarDep(name='arg185_1', mode=None)]
op468.outputs = [
    buf468: ExternKernelOut
    buf468.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf468.users = [
        NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op472'), can_inplace=True, is_weak=False),
    ]
]
op468.node.kernel = extern_kernels.mm


op469: SchedulerNode(ComputedBuffer)
op469.writes = [MemoryDep('buf469', c0, {c0: 4096}, None)]
op469.unmet_dependencies = 
    [   MemoryDep('buf439', c0, {c0: 3145728}, None),
        MemoryDep('buf468', c0, {c0: 3145728}, None)]
op469.met_dependencies = [MemoryDep('arg186_1', c1, {c0: 4096, c1: 768}, None)]
op469.outputs = [
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf469.users = [NodeUser(node=SchedulerNode(name='op472'), can_inplace=False, is_weak=False)]
]
op469.group.device = cuda:0
op469.group.iteration = (4096, 768)
op469.sizes = ([4096], [768])
buf468_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf469_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op469_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf468', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf439', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf469', get_index_3, getitem)
        return store_reduction
op469 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op470: SchedulerNode(ComputedBuffer)
op470.writes = [MemoryDep('buf470', c0, {c0: 4096}, None)]
op470.unmet_dependencies = 
    [   MemoryDep('buf439', c0, {c0: 3145728}, None),
        MemoryDep('buf468', c0, {c0: 3145728}, None)]
op470.met_dependencies = [MemoryDep('arg186_1', c1, {c0: 4096, c1: 768}, None)]
op470.outputs = [
    buf470: ComputedBuffer
    buf470.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf470.users = [NodeUser(node=SchedulerNode(name='op472'), can_inplace=False, is_weak=False)]
]
op470.group.device = cuda:0
op470.group.iteration = (4096, 768)
op470.sizes = ([4096], [768])
buf468_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf470_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op470_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf468', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf439', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf470', get_index_3, getitem_1)
        return store_reduction
op470 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op472: SchedulerNode(ComputedBuffer)
op472.writes = [MemoryDep('buf472', c0, {c0: 3145728}, None)]
op472.unmet_dependencies = 
    [   MemoryDep('buf439', c0, {c0: 3145728}, None),
        MemoryDep('buf468', c0, {c0: 3145728}, None),
        MemoryDep('buf469', c0, {c0: 4096}, None),
        MemoryDep('buf470', c0, {c0: 4096}, None)]
op472.met_dependencies = 
    [   MemoryDep('arg186_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg187_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg188_1', c1, {c0: 4096, c1: 768}, None)]
op472.outputs = [
    buf472: ComputedBuffer
    buf472.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf472.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=True, is_weak=False),
    ]
]
op472.group.device = cuda:0
op472.group.iteration = (3145728, 1)
op472.sizes = ([4096, 768], [])
buf468_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf469_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf470_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf472_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op472_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf468', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf439', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf469', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf470', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg187_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg188_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf472', get_index_7, add_3, None)
        return store
op472 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op473: ExternKernelSchedulerNode(ExternKernelOut)
op473.writes = [StarDep(name='buf473', mode=None)]
op473.unmet_dependencies = [StarDep(name='buf472', mode=None)]
op473.met_dependencies = [StarDep(name='arg189_1', mode=None)]
op473.outputs = [
    buf473: ExternKernelOut
    buf473.layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
    buf473.users = [NodeUser(node=SchedulerNode(name='op474'), can_inplace=True, is_weak=False)]
]
op473.node.kernel = extern_kernels.mm


op474: SchedulerNode(ComputedBuffer)
op474.writes = [MemoryDep('buf474', c0, {c0: 12582912}, None)]
op474.unmet_dependencies = [MemoryDep('buf473', c0, {c0: 12582912}, None)]
op474.met_dependencies = [MemoryDep('arg190_1', c1, {c0: 4096, c1: 3072}, None)]
op474.outputs = [
    buf474: ComputedBuffer
    buf474.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
    buf474.users = [NodeUser(node=ExternKernelSchedulerNode(name='op475'), can_inplace=False, is_weak=False)]
]
op474.group.device = cuda:0
op474.group.iteration = (12582912, 1)
op474.sizes = ([4096, 3072], [])
buf473_layout = FixedLayout('cuda', torch.float32, size=[4096, 3072], stride=[3072, 1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf474_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 3072], stride=[3145728, 3072, 1])
class op474_loop_body:
    var_ranges = {z0: 4096, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf473', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg190_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf473', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg190_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf474', get_index_4, mul_2, None)
        return store
op474 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op475: ExternKernelSchedulerNode(ExternKernelOut)
op475.writes = [StarDep(name='buf475', mode=None)]
op475.unmet_dependencies = [StarDep(name='buf474', mode=None)]
op475.met_dependencies = [StarDep(name='arg191_1', mode=None)]
op475.outputs = [
    buf475: ExternKernelOut
    buf475.layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
    buf475.users = [
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=True, is_weak=False),
    ]
]
op475.node.kernel = extern_kernels.mm


op476: SchedulerNode(ComputedBuffer)
op476.writes = [MemoryDep('buf476', c0, {c0: 4096}, None)]
op476.unmet_dependencies = 
    [   MemoryDep('buf472', c0, {c0: 3145728}, None),
        MemoryDep('buf475', c0, {c0: 3145728}, None)]
op476.met_dependencies = [MemoryDep('arg192_1', c1, {c0: 4096, c1: 768}, None)]
op476.outputs = [
    buf476: ComputedBuffer
    buf476.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf476.users = [NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False)]
]
op476.group.device = cuda:0
op476.group.iteration = (4096, 768)
op476.sizes = ([4096], [768])
buf475_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf472_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf476_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op476_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf475', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg192_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf472', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf476', get_index_3, getitem)
        return store_reduction
op476 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op477: SchedulerNode(ComputedBuffer)
op477.writes = [MemoryDep('buf477', c0, {c0: 4096}, None)]
op477.unmet_dependencies = 
    [   MemoryDep('buf472', c0, {c0: 3145728}, None),
        MemoryDep('buf475', c0, {c0: 3145728}, None)]
op477.met_dependencies = [MemoryDep('arg192_1', c1, {c0: 4096, c1: 768}, None)]
op477.outputs = [
    buf477: ComputedBuffer
    buf477.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf477.users = [NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False)]
]
op477.group.device = cuda:0
op477.group.iteration = (4096, 768)
op477.sizes = ([4096], [768])
buf475_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf472_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf477_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op477_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf475', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg192_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf472', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf477', get_index_3, getitem_1)
        return store_reduction
op477 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op479: SchedulerNode(ComputedBuffer)
op479.writes = [MemoryDep('buf479', c0, {c0: 3145728}, None)]
op479.unmet_dependencies = 
    [   MemoryDep('buf472', c0, {c0: 3145728}, None),
        MemoryDep('buf475', c0, {c0: 3145728}, None),
        MemoryDep('buf476', c0, {c0: 4096}, None),
        MemoryDep('buf477', c0, {c0: 4096}, None)]
op479.met_dependencies = 
    [   MemoryDep('arg192_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg193_1', c1, {c0: 4096, c1: 768}, None),
        MemoryDep('arg194_1', c1, {c0: 4096, c1: 768}, None)]
op479.outputs = [
    buf479: ComputedBuffer
    buf479.layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
    buf479.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op479.group.device = cuda:0
op479.group.iteration = (3145728, 1)
op479.sizes = ([4096, 768], [])
buf475_layout = FixedLayout('cuda', torch.float32, size=[4096, 768], stride=[768, 1])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf472_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
buf476_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf477_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf479_layout = FixedLayout('cuda', torch.float32, size=[4, 1024, 768], stride=[786432, 768, 1])
class op479_loop_body:
    var_ranges = {z0: 4096, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf475', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg192_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf472', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf476', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf477', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg193_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg194_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf479', get_index_7, add_3, None)
        return store
op479 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 3145728
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)



op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 2048}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 2048}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (16, 128)
op0.sizes = ([16], [128])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
buf0_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
class op0_loop_body:
    var_ranges = {z0: 16, z1: 128}
    index0 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        constant = ops.constant(1, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int32, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.int64, src_dtype = torch.int32)
        scan1 = self.scan1((torch.int64,), (to_dtype_1,))
        getitem = scan1[0]
        get_index_1 = self.get_index('index0')
        store = ops.store('buf0', get_index_1, getitem, None)
        return store
op0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton.jit
    def _triton_helper_fn_add0(arg0_0, arg1_0):
        tmp0 = arg0_0 + arg1_0
        return tmp0

    @triton_heuristics.persistent_reduction(
        size_hints=[16, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0)
        tmp1 = tl.full([1, 1], 1, tl.int64)
        tmp2 = tmp0 != tmp1
        tmp3 = tmp2.to(tl.int32)
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tmp4.to(tl.int64)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp7, = tl.associative_scan((tmp6,), 1, _triton_helper_fn_add0)
        tl.store(out_ptr0 + (r1 + (128*x0)), tmp7, xmask)


op1_op2_op3_op5: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op1_op2_op3_op5.writes = 
    [   MemoryDep('buf1', c0, {c0: 2097152}, None),
        MemoryDep('buf2', c0, {c0: 2048}, None),
        MemoryDep('buf3', c0, {c0: 2048}, None),
        MemoryDep('buf5', c0, {c0: 2097152}, None)]
op1_op2_op3_op5.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 2048}, None)]
op1_op2_op3_op5.met_dependencies = 
    [   MemoryDep('arg1_1', c0, {c0: 2048}, None),
        MemoryDep('arg2_1', c1 + 1024*tmp0, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg3_1', c1 + 1024*tmp15, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg4_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg5_1', c1, {c0: 2048, c1: 1024}, None)]
op1_op2_op3_op5.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
    ]
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf2.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf3.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf5.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
    ]
]
op1_op2_op3_op5.snodes[0] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 2097152}, None)]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 2048}, None)]
op1.met_dependencies = 
    [   MemoryDep('arg1_1', c0, {c0: 2048}, None),
        MemoryDep('arg2_1', c1 + 1024*tmp0, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg3_1', c1 + 1024*tmp15, {c0: 2048, c1: 1024}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (2097152, 1)
op1.sizes = ([2048, 1024], [])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[128112, 1024], stride=[1024, 1])
buf0_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1026, 1024], stride=[1024, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op1_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = z0
    index1 = 1024*indirect0 + z1
    index2 = 1024*indirect1 + z1
    index3 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        constant = ops.constant(32.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf0', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.int32, src_dtype = torch.int64)
        constant_1 = ops.constant(0, torch.int32)
        add = ops.add(to_dtype, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg1_1', get_index_3)
        constant_2 = ops.constant(1, torch.int64)
        ne = ops.ne(load_3, constant_2)
        to_dtype_1 = ops.to_dtype(ne, torch.int32, src_dtype = torch.bool)
        mul_1 = ops.mul(add, to_dtype_1)
        to_dtype_2 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.int32)
        constant_3 = ops.constant(1, torch.int64)
        add_1 = ops.add(to_dtype_2, constant_3)
        set_indirect1 = self.set_indirect1(add_1)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg3_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf1', get_index_5, add_2, None)
        return store
op1 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*i64', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last')
        tmp9 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([XBLOCK], 128112, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 128112), "index out of bounds: 0 <= tmp4 < 128112")
        tmp6 = tl.load(in_ptr1 + (x0 + (1024*tmp4)), None)
        tmp7 = 32.0
        tmp8 = tmp6 * tmp7
        tmp10 = tmp9.to(tl.int32)
        tmp11 = tl.full([1], 0, tl.int32)
        tmp12 = tmp10 + tmp11
        tmp13 = tl.full([1], 1, tl.int64)
        tmp14 = tmp0 != tmp13
        tmp15 = tmp14.to(tl.int32)
        tmp16 = tmp12 * tmp15
        tmp17 = tmp16.to(tl.int64)
        tmp18 = tmp17 + tmp13
        tmp19 = tl.full([XBLOCK], 1026, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 1026), "index out of bounds: 0 <= tmp22 < 1026")
        tmp24 = tl.load(in_ptr3 + (x0 + (1024*tmp22)), None)
        tmp25 = tmp8 + tmp24
        tl.store(out_ptr0 + (x2), tmp25, None)
op1_op2_op3_op5.snodes[1] =
op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 2048}, None)]
op2.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 2097152}, None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf2.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op2.group.device = cuda:0
op2.group.iteration = (2048, 1024)
op2.sizes = ([2048], [1024])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op2_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf2', get_index_1, getitem)
        return store_reduction
op2 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op1_op2_op3_op5.snodes[2] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 2048}, None)]
op3.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 2097152}, None)]
op3.met_dependencies = []
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf3.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (2048, 1024)
op3.sizes = ([2048], [1024])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op3_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf3', get_index_1, getitem_1)
        return store_reduction
op3 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op1_op2_op3_op5.snodes[3] =
op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 2097152}, None)]
op5.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 2097152}, None),
        MemoryDep('buf2', c0, {c0: 2048}, None),
        MemoryDep('buf3', c0, {c0: 2048}, None)]
op5.met_dependencies = 
    [   MemoryDep('arg4_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg5_1', c1, {c0: 2048, c1: 1024}, None)]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf5.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
    ]
]
op5.group.device = cuda:0
op5.group.iteration = (2097152, 1)
op5.sizes = ([2048, 1024], [])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf3_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op5_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf3', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf5', get_index_5, add_1, None)
        return store
op5 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op1_op2_op3_op5 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*i64', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, out_ptr3, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp9 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp46 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp48 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp1 = tl.full([RBLOCK], 128112, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 128112), "index out of bounds: 0 <= tmp4 < 128112")
        tmp6 = tl.load(in_ptr1 + (r1 + (1024*tmp4)), None)
        tmp7 = 32.0
        tmp8 = tmp6 * tmp7
        tmp10 = tmp9.to(tl.int32)
        tmp11 = tl.full([1], 0, tl.int32)
        tmp12 = tmp10 + tmp11
        tmp13 = tl.full([1], 1, tl.int64)
        tmp14 = tmp0 != tmp13
        tmp15 = tmp14.to(tl.int32)
        tmp16 = tmp12 * tmp15
        tmp17 = tmp16.to(tl.int64)
        tmp18 = tmp17 + tmp13
        tmp19 = tl.full([RBLOCK], 1026, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 1026), "index out of bounds: 0 <= tmp22 < 1026")
        tmp24 = tl.load(in_ptr3 + (r1 + (1024*tmp22)), None)
        tmp25 = tmp8 + tmp24
        tmp26 = tl.broadcast_to(tmp25, [RBLOCK])
        tmp28 = tl.broadcast_to(tmp26, [RBLOCK])
        tmp30 = triton_helpers.promote_to_tensor(tl.sum(tmp28, 0))
        tmp31 = tl.full([1], 1024, tl.int32)
        tmp32 = tmp31.to(tl.float32)
        tmp33 = tmp30 / tmp32
        tmp34 = tmp26 - tmp33
        tmp35 = tmp34 * tmp34
        tmp36 = tl.broadcast_to(tmp35, [RBLOCK])
        tmp38 = triton_helpers.promote_to_tensor(tl.sum(tmp36, 0))
        tmp39 = tmp25 - tmp33
        tmp40 = 1024.0
        tmp41 = tmp38 / tmp40
        tmp42 = 1e-05
        tmp43 = tmp41 + tmp42
        tmp44 = libdevice.rsqrt(tmp43)
        tmp45 = tmp39 * tmp44
        tmp47 = tmp45 * tmp46
        tmp49 = tmp47 + tmp48
        tl.store(out_ptr0 + (r1 + (1024*x0)), tmp25, None)
        tl.store(out_ptr3 + (r1 + (1024*x0)), tmp49, None)


op6: ExternKernelSchedulerNode(ExternKernelOut)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op6.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op6.outputs = [
    buf6: ExternKernelOut
    buf6.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf6.users = [NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
]
op6.node.kernel = extern_kernels.mm


op7: ExternKernelSchedulerNode(ExternKernelOut)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op7.met_dependencies = [StarDep(name='arg8_1', mode=None)]
op7.outputs = [
    buf7: ExternKernelOut
    buf7.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf7.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op7.node.kernel = extern_kernels.mm


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op8.met_dependencies = [StarDep(name='arg10_1', mode=None)]
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf8.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op8.node.kernel = extern_kernels.mm


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 2097152}, None)]
op9.unmet_dependencies = [   MemoryDep('buf6', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op9.met_dependencies = [MemoryDep('arg7_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (2097152, 1)
op9.sizes = ([16, 16, 128, 64], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op9_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf9', get_index_2, add, None)
        return store
op9 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 2097152}, None)]
op10.unmet_dependencies = [   MemoryDep('buf7', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op10.met_dependencies = [MemoryDep('arg9_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf10.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (2097152, 1)
op10.sizes = ([16, 16, 128, 64], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op10_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg9_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf10', get_index_2, add, None)
        return store
op10 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 2097152}, None)]
op11.unmet_dependencies = [   MemoryDep('buf8', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op11.met_dependencies = [MemoryDep('arg11_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (2097152, 1)
op11.sizes = ([16, 16, 128, 64], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op11_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg11_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf11', get_index_2, add, None)
        return store
op11 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op12: ExternKernelSchedulerNode(FallbackKernel)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = 
    [   StarDep(name='buf10', mode=None),
        StarDep(name='buf11', mode=None),
        StarDep(name='buf9', mode=None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: FallbackKernel
    buf12.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf12.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False),
    ]
]
op12.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op13: ExternKernelSchedulerNode(MultiOutput)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf12', mode=None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: MultiOutput
    buf13.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op13.node.kernel = None


op17: ExternKernelSchedulerNode(ExternKernelOut)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf13', mode=None)]
op17.met_dependencies = [StarDep(name='arg12_1', mode=None)]
op17.outputs = [
    buf17: ExternKernelOut
    buf17.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
    ]
]
op17.node.kernel = extern_kernels.mm


op18_op19_op21: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op18_op19_op21.writes = 
    [   MemoryDep('buf18', c0, {c0: 2048}, None),
        MemoryDep('buf19', c0, {c0: 2048}, None),
        MemoryDep('buf21', c0, {c0: 2097152}, None)]
op18_op19_op21.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 2097152}, None),
        MemoryDep('buf17', c0, {c0: 2097152}, None)]
op18_op19_op21.met_dependencies = 
    [   MemoryDep('arg13_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg14_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg15_1', c1, {c0: 2048, c1: 1024}, None)]
op18_op19_op21.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op18_op19_op21.snodes[0] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 2048}, None)]
op18.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 2097152}, None),
        MemoryDep('buf17', c0, {c0: 2097152}, None)]
op18.met_dependencies = [MemoryDep('arg13_1', c1, {c0: 2048, c1: 1024}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (2048, 1024)
op18.sizes = ([2048], [1024])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op18_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf18', get_index_3, getitem)
        return store_reduction
op18 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op18_op19_op21.snodes[1] =
op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 2048}, None)]
op19.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 2097152}, None),
        MemoryDep('buf17', c0, {c0: 2097152}, None)]
op19.met_dependencies = [MemoryDep('arg13_1', c1, {c0: 2048, c1: 1024}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (2048, 1024)
op19.sizes = ([2048], [1024])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op19_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf19', get_index_3, getitem_1)
        return store_reduction
op19 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op18_op19_op21.snodes[2] =
op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 2097152}, None)]
op21.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 2097152}, None),
        MemoryDep('buf17', c0, {c0: 2097152}, None),
        MemoryDep('buf18', c0, {c0: 2048}, None),
        MemoryDep('buf19', c0, {c0: 2048}, None)]
op21.met_dependencies = 
    [   MemoryDep('arg13_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg14_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg15_1', c1, {c0: 2048, c1: 1024}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (2097152, 1)
op21.sizes = ([2048, 1024], [])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf19_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op21_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf18', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf19', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg14_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg15_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf21', get_index_7, add_3, None)
        return store
op21 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op18_op19_op21 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 8388608}, None)]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 8388608}, None)]
op23.met_dependencies = [MemoryDep('arg17_1', c1, {c0: 2048, c1: 4096}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (8388608, 1)
op23.sizes = ([2048, 4096], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op23_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf23', get_index_2, relu, None)
        return store
op23 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op24: ExternKernelSchedulerNode(ExternKernelOut)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelOut
    buf24.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf24.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False)]
]
op24.node.kernel = extern_kernels.mm


op25_op26_op27_op29: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op25_op26_op27_op29.writes = 
    [   MemoryDep('buf25', c0, {c0: 2097152}, None),
        MemoryDep('buf26', c0, {c0: 2048}, None),
        MemoryDep('buf27', c0, {c0: 2048}, None),
        MemoryDep('buf29', c0, {c0: 2097152}, None)]
op25_op26_op27_op29.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 2097152}, None),
        MemoryDep('buf17', c0, {c0: 2097152}, None),
        MemoryDep('buf24', c0, {c0: 2097152}, None)]
op25_op26_op27_op29.met_dependencies = 
    [   MemoryDep('arg13_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg19_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg20_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg21_1', c1, {c0: 2048, c1: 1024}, None)]
op25_op26_op27_op29.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf25.users = [
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False),
    ]
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf26.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf27.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf29.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
    ]
]
op25_op26_op27_op29.snodes[0] =
op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 2097152}, None)]
op25.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 2097152}, None),
        MemoryDep('buf17', c0, {c0: 2097152}, None),
        MemoryDep('buf24', c0, {c0: 2097152}, None)]
op25.met_dependencies = 
    [   MemoryDep('arg13_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg19_1', c1, {c0: 2048, c1: 1024}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf25.users = [
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False),
    ]
]
op25.group.device = cuda:0
op25.group.iteration = (2097152, 1)
op25.sizes = ([2048, 1024], [])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op25_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf24', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg19_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf25', get_index_5, add_3, None)
        return store
op25 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op25_op26_op27_op29.snodes[1] =
op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 2048}, None)]
op26.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 2097152}, None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf26.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (2048, 1024)
op26.sizes = ([2048], [1024])
buf25_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op26_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf26', get_index_1, getitem)
        return store_reduction
op26 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op25_op26_op27_op29.snodes[2] =
op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 2048}, None)]
op27.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 2097152}, None)]
op27.met_dependencies = []
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf27.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (2048, 1024)
op27.sizes = ([2048], [1024])
buf25_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op27_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf27', get_index_1, getitem_1)
        return store_reduction
op27 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op25_op26_op27_op29.snodes[3] =
op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 2097152}, None)]
op29.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 2097152}, None),
        MemoryDep('buf26', c0, {c0: 2048}, None),
        MemoryDep('buf27', c0, {c0: 2048}, None)]
op29.met_dependencies = 
    [   MemoryDep('arg20_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg21_1', c1, {c0: 2048, c1: 1024}, None)]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf29.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
    ]
]
op29.group.device = cuda:0
op29.group.iteration = (2097152, 1)
op29.sizes = ([2048, 1024], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf27_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op29_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf26', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf27', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg20_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg21_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf29', get_index_5, add_1, None)
        return store
op29 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op25_op26_op27_op29 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='arg22_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op30.node.kernel = extern_kernels.mm


op31: ExternKernelSchedulerNode(ExternKernelOut)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op31.met_dependencies = [StarDep(name='arg24_1', mode=None)]
op31.outputs = [
    buf31: ExternKernelOut
    buf31.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf31.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op31.node.kernel = extern_kernels.mm


op32: ExternKernelSchedulerNode(ExternKernelOut)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op32.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op32.outputs = [
    buf32: ExternKernelOut
    buf32.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf32.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op32.node.kernel = extern_kernels.mm


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 2097152}, None)]
op33.unmet_dependencies = [   MemoryDep('buf30', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op33.met_dependencies = [MemoryDep('arg23_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf33.users = [NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (2097152, 1)
op33.sizes = ([16, 16, 128, 64], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op33_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg23_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf33', get_index_2, add, None)
        return store
op33 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 2097152}, None)]
op34.unmet_dependencies = [   MemoryDep('buf31', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op34.met_dependencies = [MemoryDep('arg25_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf34.users = [NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (2097152, 1)
op34.sizes = ([16, 16, 128, 64], [])
buf31_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op34_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg25_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf34', get_index_2, add, None)
        return store
op34 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 2097152}, None)]
op35.unmet_dependencies = [   MemoryDep('buf32', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op35.met_dependencies = [MemoryDep('arg27_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (2097152, 1)
op35.sizes = ([16, 16, 128, 64], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op35_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf35', get_index_2, add, None)
        return store
op35 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op36: ExternKernelSchedulerNode(FallbackKernel)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = 
    [   StarDep(name='buf33', mode=None),
        StarDep(name='buf34', mode=None),
        StarDep(name='buf35', mode=None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: FallbackKernel
    buf36.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf36.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False),
    ]
]
op36.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op37: ExternKernelSchedulerNode(MultiOutput)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf36', mode=None)]
op37.met_dependencies = []
op37.outputs = [
    buf37: MultiOutput
    buf37.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op37.node.kernel = None


op41: ExternKernelSchedulerNode(ExternKernelOut)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf37', mode=None)]
op41.met_dependencies = [StarDep(name='arg28_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelOut
    buf41.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf41.users = [
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False),
    ]
]
op41.node.kernel = extern_kernels.mm


op42_op43_op45: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op42_op43_op45.writes = 
    [   MemoryDep('buf42', c0, {c0: 2048}, None),
        MemoryDep('buf43', c0, {c0: 2048}, None),
        MemoryDep('buf45', c0, {c0: 2097152}, None)]
op42_op43_op45.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 2097152}, None),
        MemoryDep('buf41', c0, {c0: 2097152}, None)]
op42_op43_op45.met_dependencies = 
    [   MemoryDep('arg29_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg30_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg31_1', c1, {c0: 2048, c1: 1024}, None)]
op42_op43_op45.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf42.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf43.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op42_op43_op45.snodes[0] =
op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 2048}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 2097152}, None),
        MemoryDep('buf41', c0, {c0: 2097152}, None)]
op42.met_dependencies = [MemoryDep('arg29_1', c1, {c0: 2048, c1: 1024}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf42.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (2048, 1024)
op42.sizes = ([2048], [1024])
buf25_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op42_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf41', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg29_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf42', get_index_3, getitem)
        return store_reduction
op42 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op42_op43_op45.snodes[1] =
op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 2048}, None)]
op43.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 2097152}, None),
        MemoryDep('buf41', c0, {c0: 2097152}, None)]
op43.met_dependencies = [MemoryDep('arg29_1', c1, {c0: 2048, c1: 1024}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf43.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (2048, 1024)
op43.sizes = ([2048], [1024])
buf25_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op43_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf41', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg29_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf43', get_index_3, getitem_1)
        return store_reduction
op43 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op42_op43_op45.snodes[2] =
op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 2097152}, None)]
op45.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 2097152}, None),
        MemoryDep('buf41', c0, {c0: 2097152}, None),
        MemoryDep('buf42', c0, {c0: 2048}, None),
        MemoryDep('buf43', c0, {c0: 2048}, None)]
op45.met_dependencies = 
    [   MemoryDep('arg29_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg30_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg31_1', c1, {c0: 2048, c1: 1024}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (2097152, 1)
op45.sizes = ([2048, 1024], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf43_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op45_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf41', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg29_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf42', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf43', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg30_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg31_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf45', get_index_7, add_3, None)
        return store
op45 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op42_op43_op45 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op46: ExternKernelSchedulerNode(ExternKernelOut)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op46.met_dependencies = [StarDep(name='arg32_1', mode=None)]
op46.outputs = [
    buf46: ExternKernelOut
    buf46.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf46.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False)]
]
op46.node.kernel = extern_kernels.mm


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 8388608}, None)]
op47.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 8388608}, None)]
op47.met_dependencies = [MemoryDep('arg33_1', c1, {c0: 2048, c1: 4096}, None)]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (8388608, 1)
op47.sizes = ([2048, 4096], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op47_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg33_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf47', get_index_2, relu, None)
        return store
op47 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op48: ExternKernelSchedulerNode(ExternKernelOut)
op48.writes = [StarDep(name='buf48', mode=None)]
op48.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op48.met_dependencies = [StarDep(name='arg34_1', mode=None)]
op48.outputs = [
    buf48: ExternKernelOut
    buf48.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf48.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False)]
]
op48.node.kernel = extern_kernels.mm


op49_op50_op51_op53: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op49_op50_op51_op53.writes = 
    [   MemoryDep('buf49', c0, {c0: 2097152}, None),
        MemoryDep('buf50', c0, {c0: 2048}, None),
        MemoryDep('buf51', c0, {c0: 2048}, None),
        MemoryDep('buf53', c0, {c0: 2097152}, None)]
op49_op50_op51_op53.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 2097152}, None),
        MemoryDep('buf41', c0, {c0: 2097152}, None),
        MemoryDep('buf48', c0, {c0: 2097152}, None)]
op49_op50_op51_op53.met_dependencies = 
    [   MemoryDep('arg29_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg35_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg36_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg37_1', c1, {c0: 2048, c1: 1024}, None)]
op49_op50_op51_op53.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf49.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
    ]
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf53.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False),
    ]
]
op49_op50_op51_op53.snodes[0] =
op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 2097152}, None)]
op49.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 2097152}, None),
        MemoryDep('buf41', c0, {c0: 2097152}, None),
        MemoryDep('buf48', c0, {c0: 2097152}, None)]
op49.met_dependencies = 
    [   MemoryDep('arg29_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg35_1', c1, {c0: 2048, c1: 1024}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf49.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
    ]
]
op49.group.device = cuda:0
op49.group.iteration = (2097152, 1)
op49.sizes = ([2048, 1024], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op49_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf41', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg29_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf48', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg35_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf49', get_index_5, add_3, None)
        return store
op49 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op49_op50_op51_op53.snodes[1] =
op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 2048}, None)]
op50.unmet_dependencies = [MemoryDep('buf49', c0, {c0: 2097152}, None)]
op50.met_dependencies = []
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (2048, 1024)
op50.sizes = ([2048], [1024])
buf49_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op50_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf50', get_index_1, getitem)
        return store_reduction
op50 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op49_op50_op51_op53.snodes[2] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 2048}, None)]
op51.unmet_dependencies = [MemoryDep('buf49', c0, {c0: 2097152}, None)]
op51.met_dependencies = []
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (2048, 1024)
op51.sizes = ([2048], [1024])
buf49_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op51_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf51', get_index_1, getitem_1)
        return store_reduction
op51 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op49_op50_op51_op53.snodes[3] =
op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 2097152}, None)]
op53.unmet_dependencies = 
    [   MemoryDep('buf49', c0, {c0: 2097152}, None),
        MemoryDep('buf50', c0, {c0: 2048}, None),
        MemoryDep('buf51', c0, {c0: 2048}, None)]
op53.met_dependencies = 
    [   MemoryDep('arg36_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg37_1', c1, {c0: 2048, c1: 1024}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf53.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False),
    ]
]
op53.group.device = cuda:0
op53.group.iteration = (2097152, 1)
op53.sizes = ([2048, 1024], [])
buf49_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf51_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op53_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf50', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf51', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg36_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg37_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf53', get_index_5, add_1, None)
        return store
op53 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op49_op50_op51_op53 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op54: ExternKernelSchedulerNode(ExternKernelOut)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op54.met_dependencies = [StarDep(name='arg38_1', mode=None)]
op54.outputs = [
    buf54: ExternKernelOut
    buf54.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf54.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op54.node.kernel = extern_kernels.mm


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op55.met_dependencies = [StarDep(name='arg40_1', mode=None)]
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op55.node.kernel = extern_kernels.mm


op56: ExternKernelSchedulerNode(ExternKernelOut)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op56.met_dependencies = [StarDep(name='arg42_1', mode=None)]
op56.outputs = [
    buf56: ExternKernelOut
    buf56.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf56.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op56.node.kernel = extern_kernels.mm


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 2097152}, None)]
op57.unmet_dependencies = [   MemoryDep('buf54', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op57.met_dependencies = [MemoryDep('arg39_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf57.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (2097152, 1)
op57.sizes = ([16, 16, 128, 64], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op57_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg39_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf57', get_index_2, add, None)
        return store
op57 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 2097152}, None)]
op58.unmet_dependencies = [   MemoryDep('buf55', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op58.met_dependencies = [MemoryDep('arg41_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (2097152, 1)
op58.sizes = ([16, 16, 128, 64], [])
buf55_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op58_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg41_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf58', get_index_2, add, None)
        return store
op58 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 2097152}, None)]
op59.unmet_dependencies = [   MemoryDep('buf56', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op59.met_dependencies = [MemoryDep('arg43_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (2097152, 1)
op59.sizes = ([16, 16, 128, 64], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op59_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg43_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf59', get_index_2, add, None)
        return store
op59 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op60: ExternKernelSchedulerNode(FallbackKernel)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = 
    [   StarDep(name='buf57', mode=None),
        StarDep(name='buf58', mode=None),
        StarDep(name='buf59', mode=None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: FallbackKernel
    buf60.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf60.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False),
    ]
]
op60.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op61: ExternKernelSchedulerNode(MultiOutput)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: MultiOutput
    buf61.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf61.users = [NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op61.node.kernel = None


op65: ExternKernelSchedulerNode(ExternKernelOut)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op65.met_dependencies = [StarDep(name='arg44_1', mode=None)]
op65.outputs = [
    buf65: ExternKernelOut
    buf65.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf65.users = [
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
    ]
]
op65.node.kernel = extern_kernels.mm


op66_op67_op69: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op66_op67_op69.writes = 
    [   MemoryDep('buf66', c0, {c0: 2048}, None),
        MemoryDep('buf67', c0, {c0: 2048}, None),
        MemoryDep('buf69', c0, {c0: 2097152}, None)]
op66_op67_op69.unmet_dependencies = 
    [   MemoryDep('buf49', c0, {c0: 2097152}, None),
        MemoryDep('buf65', c0, {c0: 2097152}, None)]
op66_op67_op69.met_dependencies = 
    [   MemoryDep('arg45_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg46_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg47_1', c1, {c0: 2048, c1: 1024}, None)]
op66_op67_op69.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf66.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf67.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op66_op67_op69.snodes[0] =
op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 2048}, None)]
op66.unmet_dependencies = 
    [   MemoryDep('buf49', c0, {c0: 2097152}, None),
        MemoryDep('buf65', c0, {c0: 2097152}, None)]
op66.met_dependencies = [MemoryDep('arg45_1', c1, {c0: 2048, c1: 1024}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf66.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (2048, 1024)
op66.sizes = ([2048], [1024])
buf49_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op66_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf65', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg45_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf66', get_index_3, getitem)
        return store_reduction
op66 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op66_op67_op69.snodes[1] =
op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 2048}, None)]
op67.unmet_dependencies = 
    [   MemoryDep('buf49', c0, {c0: 2097152}, None),
        MemoryDep('buf65', c0, {c0: 2097152}, None)]
op67.met_dependencies = [MemoryDep('arg45_1', c1, {c0: 2048, c1: 1024}, None)]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf67.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (2048, 1024)
op67.sizes = ([2048], [1024])
buf49_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op67_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf65', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg45_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf67', get_index_3, getitem_1)
        return store_reduction
op67 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op66_op67_op69.snodes[2] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 2097152}, None)]
op69.unmet_dependencies = 
    [   MemoryDep('buf49', c0, {c0: 2097152}, None),
        MemoryDep('buf65', c0, {c0: 2097152}, None),
        MemoryDep('buf66', c0, {c0: 2048}, None),
        MemoryDep('buf67', c0, {c0: 2048}, None)]
op69.met_dependencies = 
    [   MemoryDep('arg45_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg46_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg47_1', c1, {c0: 2048, c1: 1024}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (2097152, 1)
op69.sizes = ([2048, 1024], [])
buf49_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf67_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op69_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf65', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg45_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf66', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf67', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg46_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg47_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf69', get_index_7, add_3, None)
        return store
op69 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op66_op67_op69 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op70: ExternKernelSchedulerNode(ExternKernelOut)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf69', mode=None)]
op70.met_dependencies = [StarDep(name='arg48_1', mode=None)]
op70.outputs = [
    buf70: ExternKernelOut
    buf70.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf70.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False)]
]
op70.node.kernel = extern_kernels.mm


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 8388608}, None)]
op71.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 8388608}, None)]
op71.met_dependencies = [MemoryDep('arg49_1', c1, {c0: 2048, c1: 4096}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (8388608, 1)
op71.sizes = ([2048, 4096], [])
buf70_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op71_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg49_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf71', get_index_2, relu, None)
        return store
op71 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op72: ExternKernelSchedulerNode(ExternKernelOut)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='arg50_1', mode=None)]
op72.outputs = [
    buf72: ExternKernelOut
    buf72.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op72.node.kernel = extern_kernels.mm


op73_op74_op75_op77: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op73_op74_op75_op77.writes = 
    [   MemoryDep('buf73', c0, {c0: 2097152}, None),
        MemoryDep('buf74', c0, {c0: 2048}, None),
        MemoryDep('buf75', c0, {c0: 2048}, None),
        MemoryDep('buf77', c0, {c0: 2097152}, None)]
op73_op74_op75_op77.unmet_dependencies = 
    [   MemoryDep('buf49', c0, {c0: 2097152}, None),
        MemoryDep('buf65', c0, {c0: 2097152}, None),
        MemoryDep('buf72', c0, {c0: 2097152}, None)]
op73_op74_op75_op77.met_dependencies = 
    [   MemoryDep('arg45_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg51_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg52_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg53_1', c1, {c0: 2048, c1: 1024}, None)]
op73_op74_op75_op77.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
    ]
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf74.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf75.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf77.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
    ]
]
op73_op74_op75_op77.snodes[0] =
op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 2097152}, None)]
op73.unmet_dependencies = 
    [   MemoryDep('buf49', c0, {c0: 2097152}, None),
        MemoryDep('buf65', c0, {c0: 2097152}, None),
        MemoryDep('buf72', c0, {c0: 2097152}, None)]
op73.met_dependencies = 
    [   MemoryDep('arg45_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg51_1', c1, {c0: 2048, c1: 1024}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
    ]
]
op73.group.device = cuda:0
op73.group.iteration = (2097152, 1)
op73.sizes = ([2048, 1024], [])
buf49_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op73_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf65', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg45_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf72', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg51_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf73', get_index_5, add_3, None)
        return store
op73 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op73_op74_op75_op77.snodes[1] =
op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 2048}, None)]
op74.unmet_dependencies = [MemoryDep('buf73', c0, {c0: 2097152}, None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf74.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (2048, 1024)
op74.sizes = ([2048], [1024])
buf73_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op74_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf74', get_index_1, getitem)
        return store_reduction
op74 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op73_op74_op75_op77.snodes[2] =
op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 2048}, None)]
op75.unmet_dependencies = [MemoryDep('buf73', c0, {c0: 2097152}, None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf75.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (2048, 1024)
op75.sizes = ([2048], [1024])
buf73_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op75_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf75', get_index_1, getitem_1)
        return store_reduction
op75 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op73_op74_op75_op77.snodes[3] =
op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 2097152}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 2097152}, None),
        MemoryDep('buf74', c0, {c0: 2048}, None),
        MemoryDep('buf75', c0, {c0: 2048}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg53_1', c1, {c0: 2048, c1: 1024}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf77.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
    ]
]
op77.group.device = cuda:0
op77.group.iteration = (2097152, 1)
op77.sizes = ([2048, 1024], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf75_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op77_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf74', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg52_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg53_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf77', get_index_5, add_1, None)
        return store
op77 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op73_op74_op75_op77 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op78: ExternKernelSchedulerNode(ExternKernelOut)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = [StarDep(name='arg54_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelOut
    buf78.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf78.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op78.node.kernel = extern_kernels.mm


op79: ExternKernelSchedulerNode(ExternKernelOut)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op79.met_dependencies = [StarDep(name='arg56_1', mode=None)]
op79.outputs = [
    buf79: ExternKernelOut
    buf79.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf79.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op79.node.kernel = extern_kernels.mm


op80: ExternKernelSchedulerNode(ExternKernelOut)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op80.met_dependencies = [StarDep(name='arg58_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelOut
    buf80.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf80.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op80.node.kernel = extern_kernels.mm


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 2097152}, None)]
op81.unmet_dependencies = [   MemoryDep('buf78', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op81.met_dependencies = [MemoryDep('arg55_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (2097152, 1)
op81.sizes = ([16, 16, 128, 64], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op81_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg55_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf81', get_index_2, add, None)
        return store
op81 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 2097152}, None)]
op82.unmet_dependencies = [   MemoryDep('buf79', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op82.met_dependencies = [MemoryDep('arg57_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (2097152, 1)
op82.sizes = ([16, 16, 128, 64], [])
buf79_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op82_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg57_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf82', get_index_2, add, None)
        return store
op82 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 2097152}, None)]
op83.unmet_dependencies = [   MemoryDep('buf80', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op83.met_dependencies = [MemoryDep('arg59_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (2097152, 1)
op83.sizes = ([16, 16, 128, 64], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op83_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg59_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf83', get_index_2, add, None)
        return store
op83 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op84: ExternKernelSchedulerNode(FallbackKernel)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = 
    [   StarDep(name='buf81', mode=None),
        StarDep(name='buf82', mode=None),
        StarDep(name='buf83', mode=None)]
op84.met_dependencies = []
op84.outputs = [
    buf84: FallbackKernel
    buf84.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf84.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False),
    ]
]
op84.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op85: ExternKernelSchedulerNode(MultiOutput)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: MultiOutput
    buf85.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op85.node.kernel = None


op89: ExternKernelSchedulerNode(ExternKernelOut)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op89.met_dependencies = [StarDep(name='arg60_1', mode=None)]
op89.outputs = [
    buf89: ExternKernelOut
    buf89.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf89.users = [
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
    ]
]
op89.node.kernel = extern_kernels.mm


op90_op91_op93: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op90_op91_op93.writes = 
    [   MemoryDep('buf90', c0, {c0: 2048}, None),
        MemoryDep('buf91', c0, {c0: 2048}, None),
        MemoryDep('buf93', c0, {c0: 2097152}, None)]
op90_op91_op93.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 2097152}, None),
        MemoryDep('buf89', c0, {c0: 2097152}, None)]
op90_op91_op93.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg62_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg63_1', c1, {c0: 2048, c1: 1024}, None)]
op90_op91_op93.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf90.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf91.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op90_op91_op93.snodes[0] =
op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 2048}, None)]
op90.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 2097152}, None),
        MemoryDep('buf89', c0, {c0: 2097152}, None)]
op90.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 2048, c1: 1024}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf90.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (2048, 1024)
op90.sizes = ([2048], [1024])
buf73_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op90_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf89', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg61_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf90', get_index_3, getitem)
        return store_reduction
op90 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op90_op91_op93.snodes[1] =
op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 2048}, None)]
op91.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 2097152}, None),
        MemoryDep('buf89', c0, {c0: 2097152}, None)]
op91.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 2048, c1: 1024}, None)]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf91.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (2048, 1024)
op91.sizes = ([2048], [1024])
buf73_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op91_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf89', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg61_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf91', get_index_3, getitem_1)
        return store_reduction
op91 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op90_op91_op93.snodes[2] =
op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 2097152}, None)]
op93.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 2097152}, None),
        MemoryDep('buf89', c0, {c0: 2097152}, None),
        MemoryDep('buf90', c0, {c0: 2048}, None),
        MemoryDep('buf91', c0, {c0: 2048}, None)]
op93.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg62_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg63_1', c1, {c0: 2048, c1: 1024}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (2097152, 1)
op93.sizes = ([2048, 1024], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf91_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op93_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf89', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg61_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf90', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf91', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg62_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg63_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf93', get_index_7, add_3, None)
        return store
op93 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op90_op91_op93 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op94: ExternKernelSchedulerNode(ExternKernelOut)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op94.met_dependencies = [StarDep(name='arg64_1', mode=None)]
op94.outputs = [
    buf94: ExternKernelOut
    buf94.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf94.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False)]
]
op94.node.kernel = extern_kernels.mm


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 8388608}, None)]
op95.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 8388608}, None)]
op95.met_dependencies = [MemoryDep('arg65_1', c1, {c0: 2048, c1: 4096}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (8388608, 1)
op95.sizes = ([2048, 4096], [])
buf94_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op95_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg65_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf95', get_index_2, relu, None)
        return store
op95 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op96: ExternKernelSchedulerNode(ExternKernelOut)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op96.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op96.outputs = [
    buf96: ExternKernelOut
    buf96.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf96.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False)]
]
op96.node.kernel = extern_kernels.mm


op97_op98_op99_op101: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op97_op98_op99_op101.writes = 
    [   MemoryDep('buf101', c0, {c0: 2097152}, None),
        MemoryDep('buf97', c0, {c0: 2097152}, None),
        MemoryDep('buf98', c0, {c0: 2048}, None),
        MemoryDep('buf99', c0, {c0: 2048}, None)]
op97_op98_op99_op101.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 2097152}, None),
        MemoryDep('buf89', c0, {c0: 2097152}, None),
        MemoryDep('buf96', c0, {c0: 2097152}, None)]
op97_op98_op99_op101.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg67_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg68_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg69_1', c1, {c0: 2048, c1: 1024}, None)]
op97_op98_op99_op101.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf97.users = [
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False),
    ]
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf98.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf99.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf101.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
    ]
]
op97_op98_op99_op101.snodes[0] =
op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 2097152}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 2097152}, None),
        MemoryDep('buf89', c0, {c0: 2097152}, None),
        MemoryDep('buf96', c0, {c0: 2097152}, None)]
op97.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg67_1', c1, {c0: 2048, c1: 1024}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf97.users = [
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False),
    ]
]
op97.group.device = cuda:0
op97.group.iteration = (2097152, 1)
op97.sizes = ([2048, 1024], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op97_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf89', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg61_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf96', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg67_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf97', get_index_5, add_3, None)
        return store
op97 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op97_op98_op99_op101.snodes[1] =
op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 2048}, None)]
op98.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 2097152}, None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf98.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (2048, 1024)
op98.sizes = ([2048], [1024])
buf97_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op98_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf98', get_index_1, getitem)
        return store_reduction
op98 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op97_op98_op99_op101.snodes[2] =
op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 2048}, None)]
op99.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 2097152}, None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf99.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (2048, 1024)
op99.sizes = ([2048], [1024])
buf97_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op99_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf99', get_index_1, getitem_1)
        return store_reduction
op99 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op97_op98_op99_op101.snodes[3] =
op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 2097152}, None)]
op101.unmet_dependencies = 
    [   MemoryDep('buf97', c0, {c0: 2097152}, None),
        MemoryDep('buf98', c0, {c0: 2048}, None),
        MemoryDep('buf99', c0, {c0: 2048}, None)]
op101.met_dependencies = 
    [   MemoryDep('arg68_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg69_1', c1, {c0: 2048, c1: 1024}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf101.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
    ]
]
op101.group.device = cuda:0
op101.group.iteration = (2097152, 1)
op101.sizes = ([2048, 1024], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf99_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op101_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf98', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf99', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg68_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg69_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf101', get_index_5, add_1, None)
        return store
op101 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op97_op98_op99_op101 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op102: ExternKernelSchedulerNode(ExternKernelOut)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op102.met_dependencies = [StarDep(name='arg70_1', mode=None)]
op102.outputs = [
    buf102: ExternKernelOut
    buf102.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf102.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op102.node.kernel = extern_kernels.mm


op103: ExternKernelSchedulerNode(ExternKernelOut)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op103.met_dependencies = [StarDep(name='arg72_1', mode=None)]
op103.outputs = [
    buf103: ExternKernelOut
    buf103.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf103.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op103.node.kernel = extern_kernels.mm


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op104.met_dependencies = [StarDep(name='arg74_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf104.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op104.node.kernel = extern_kernels.mm


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 2097152}, None)]
op105.unmet_dependencies = [   MemoryDep('buf102', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op105.met_dependencies = [MemoryDep('arg71_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (2097152, 1)
op105.sizes = ([16, 16, 128, 64], [])
buf102_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op105_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf105', get_index_2, add, None)
        return store
op105 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 2097152}, None)]
op106.unmet_dependencies = [   MemoryDep('buf103', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op106.met_dependencies = [MemoryDep('arg73_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf106.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (2097152, 1)
op106.sizes = ([16, 16, 128, 64], [])
buf103_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op106_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg73_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf106', get_index_2, add, None)
        return store
op106 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 2097152}, None)]
op107.unmet_dependencies = [   MemoryDep('buf104', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op107.met_dependencies = [MemoryDep('arg75_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (2097152, 1)
op107.sizes = ([16, 16, 128, 64], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op107_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg75_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf107', get_index_2, add, None)
        return store
op107 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op108: ExternKernelSchedulerNode(FallbackKernel)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = 
    [   StarDep(name='buf105', mode=None),
        StarDep(name='buf106', mode=None),
        StarDep(name='buf107', mode=None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: FallbackKernel
    buf108.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf108.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
    ]
]
op108.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op109: ExternKernelSchedulerNode(MultiOutput)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf108', mode=None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: MultiOutput
    buf109.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op109.node.kernel = None


op113: ExternKernelSchedulerNode(ExternKernelOut)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf109', mode=None)]
op113.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op113.outputs = [
    buf113: ExternKernelOut
    buf113.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf113.users = [
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False),
    ]
]
op113.node.kernel = extern_kernels.mm


op114_op115_op117: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op114_op115_op117.writes = 
    [   MemoryDep('buf114', c0, {c0: 2048}, None),
        MemoryDep('buf115', c0, {c0: 2048}, None),
        MemoryDep('buf117', c0, {c0: 2097152}, None)]
op114_op115_op117.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 2097152}, None),
        MemoryDep('buf97', c0, {c0: 2097152}, None)]
op114_op115_op117.met_dependencies = 
    [   MemoryDep('arg77_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg78_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg79_1', c1, {c0: 2048, c1: 1024}, None)]
op114_op115_op117.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf114.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf115.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf117.users = [NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op114_op115_op117.snodes[0] =
op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 2048}, None)]
op114.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 2097152}, None),
        MemoryDep('buf97', c0, {c0: 2097152}, None)]
op114.met_dependencies = [MemoryDep('arg77_1', c1, {c0: 2048, c1: 1024}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf114.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (2048, 1024)
op114.sizes = ([2048], [1024])
buf97_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op114_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf113', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg77_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf114', get_index_3, getitem)
        return store_reduction
op114 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op114_op115_op117.snodes[1] =
op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 2048}, None)]
op115.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 2097152}, None),
        MemoryDep('buf97', c0, {c0: 2097152}, None)]
op115.met_dependencies = [MemoryDep('arg77_1', c1, {c0: 2048, c1: 1024}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf115.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (2048, 1024)
op115.sizes = ([2048], [1024])
buf97_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op115_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf113', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg77_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf115', get_index_3, getitem_1)
        return store_reduction
op115 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op114_op115_op117.snodes[2] =
op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 2097152}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 2097152}, None),
        MemoryDep('buf114', c0, {c0: 2048}, None),
        MemoryDep('buf115', c0, {c0: 2048}, None),
        MemoryDep('buf97', c0, {c0: 2097152}, None)]
op117.met_dependencies = 
    [   MemoryDep('arg77_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg78_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg79_1', c1, {c0: 2048, c1: 1024}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf117.users = [NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (2097152, 1)
op117.sizes = ([2048, 1024], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf115_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op117_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf113', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg77_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf114', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf115', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg78_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg79_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf117', get_index_7, add_3, None)
        return store
op117 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op114_op115_op117 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op118: ExternKernelSchedulerNode(ExternKernelOut)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op118.met_dependencies = [StarDep(name='arg80_1', mode=None)]
op118.outputs = [
    buf118: ExternKernelOut
    buf118.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf118.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False)]
]
op118.node.kernel = extern_kernels.mm


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 8388608}, None)]
op119.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 8388608}, None)]
op119.met_dependencies = [MemoryDep('arg81_1', c1, {c0: 2048, c1: 4096}, None)]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (8388608, 1)
op119.sizes = ([2048, 4096], [])
buf118_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op119_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf119', get_index_2, relu, None)
        return store
op119 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op120: ExternKernelSchedulerNode(ExternKernelOut)
op120.writes = [StarDep(name='buf120', mode=None)]
op120.unmet_dependencies = [StarDep(name='buf119', mode=None)]
op120.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op120.outputs = [
    buf120: ExternKernelOut
    buf120.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf120.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False)]
]
op120.node.kernel = extern_kernels.mm


op121_op122_op123_op125: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op121_op122_op123_op125.writes = 
    [   MemoryDep('buf121', c0, {c0: 2097152}, None),
        MemoryDep('buf122', c0, {c0: 2048}, None),
        MemoryDep('buf123', c0, {c0: 2048}, None),
        MemoryDep('buf125', c0, {c0: 2097152}, None)]
op121_op122_op123_op125.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 2097152}, None),
        MemoryDep('buf120', c0, {c0: 2097152}, None),
        MemoryDep('buf97', c0, {c0: 2097152}, None)]
op121_op122_op123_op125.met_dependencies = 
    [   MemoryDep('arg77_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg83_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg84_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg85_1', c1, {c0: 2048, c1: 1024}, None)]
op121_op122_op123_op125.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf121.users = [
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
    ]
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf122.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf123.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf125.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
    ]
]
op121_op122_op123_op125.snodes[0] =
op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 2097152}, None)]
op121.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 2097152}, None),
        MemoryDep('buf120', c0, {c0: 2097152}, None),
        MemoryDep('buf97', c0, {c0: 2097152}, None)]
op121.met_dependencies = 
    [   MemoryDep('arg77_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg83_1', c1, {c0: 2048, c1: 1024}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf121.users = [
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
    ]
]
op121.group.device = cuda:0
op121.group.iteration = (2097152, 1)
op121.sizes = ([2048, 1024], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op121_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf113', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg77_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf120', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg83_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf121', get_index_5, add_3, None)
        return store
op121 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op121_op122_op123_op125.snodes[1] =
op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 2048}, None)]
op122.unmet_dependencies = [MemoryDep('buf121', c0, {c0: 2097152}, None)]
op122.met_dependencies = []
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf122.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (2048, 1024)
op122.sizes = ([2048], [1024])
buf121_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op122_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf122', get_index_1, getitem)
        return store_reduction
op122 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op121_op122_op123_op125.snodes[2] =
op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 2048}, None)]
op123.unmet_dependencies = [MemoryDep('buf121', c0, {c0: 2097152}, None)]
op123.met_dependencies = []
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf123.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (2048, 1024)
op123.sizes = ([2048], [1024])
buf121_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op123_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf123', get_index_1, getitem_1)
        return store_reduction
op123 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op121_op122_op123_op125.snodes[3] =
op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 2097152}, None)]
op125.unmet_dependencies = 
    [   MemoryDep('buf121', c0, {c0: 2097152}, None),
        MemoryDep('buf122', c0, {c0: 2048}, None),
        MemoryDep('buf123', c0, {c0: 2048}, None)]
op125.met_dependencies = 
    [   MemoryDep('arg84_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg85_1', c1, {c0: 2048, c1: 1024}, None)]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf125.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
    ]
]
op125.group.device = cuda:0
op125.group.iteration = (2097152, 1)
op125.sizes = ([2048, 1024], [])
buf121_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf123_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op125_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf122', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf123', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg84_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg85_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf125', get_index_5, add_1, None)
        return store
op125 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op121_op122_op123_op125 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op126: ExternKernelSchedulerNode(ExternKernelOut)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op126.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op126.outputs = [
    buf126: ExternKernelOut
    buf126.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf126.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op126.node.kernel = extern_kernels.mm


op127: ExternKernelSchedulerNode(ExternKernelOut)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op127.met_dependencies = [StarDep(name='arg88_1', mode=None)]
op127.outputs = [
    buf127: ExternKernelOut
    buf127.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf127.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op127.node.kernel = extern_kernels.mm


op128: ExternKernelSchedulerNode(ExternKernelOut)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op128.met_dependencies = [StarDep(name='arg90_1', mode=None)]
op128.outputs = [
    buf128: ExternKernelOut
    buf128.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf128.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op128.node.kernel = extern_kernels.mm


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 2097152}, None)]
op129.unmet_dependencies = [   MemoryDep('buf126', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op129.met_dependencies = [MemoryDep('arg87_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (2097152, 1)
op129.sizes = ([16, 16, 128, 64], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op129_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf129', get_index_2, add, None)
        return store
op129 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 2097152}, None)]
op130.unmet_dependencies = [   MemoryDep('buf127', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op130.met_dependencies = [MemoryDep('arg89_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (2097152, 1)
op130.sizes = ([16, 16, 128, 64], [])
buf127_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op130_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg89_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf130', get_index_2, add, None)
        return store
op130 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 2097152}, None)]
op131.unmet_dependencies = [   MemoryDep('buf128', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op131.met_dependencies = [MemoryDep('arg91_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (2097152, 1)
op131.sizes = ([16, 16, 128, 64], [])
buf128_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op131_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg91_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf131', get_index_2, add, None)
        return store
op131 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op132: ExternKernelSchedulerNode(FallbackKernel)
op132.writes = [StarDep(name='buf132', mode=None)]
op132.unmet_dependencies = 
    [   StarDep(name='buf129', mode=None),
        StarDep(name='buf130', mode=None),
        StarDep(name='buf131', mode=None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: FallbackKernel
    buf132.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf132.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
    ]
]
op132.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op133: ExternKernelSchedulerNode(MultiOutput)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: MultiOutput
    buf133.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op133.node.kernel = None


op137: ExternKernelSchedulerNode(ExternKernelOut)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf133', mode=None)]
op137.met_dependencies = [StarDep(name='arg92_1', mode=None)]
op137.outputs = [
    buf137: ExternKernelOut
    buf137.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf137.users = [
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
    ]
]
op137.node.kernel = extern_kernels.mm


op138_op139_op141: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op138_op139_op141.writes = 
    [   MemoryDep('buf138', c0, {c0: 2048}, None),
        MemoryDep('buf139', c0, {c0: 2048}, None),
        MemoryDep('buf141', c0, {c0: 2097152}, None)]
op138_op139_op141.unmet_dependencies = 
    [   MemoryDep('buf121', c0, {c0: 2097152}, None),
        MemoryDep('buf137', c0, {c0: 2097152}, None)]
op138_op139_op141.met_dependencies = 
    [   MemoryDep('arg93_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg94_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg95_1', c1, {c0: 2048, c1: 1024}, None)]
op138_op139_op141.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf138.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf139.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op138_op139_op141.snodes[0] =
op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 2048}, None)]
op138.unmet_dependencies = 
    [   MemoryDep('buf121', c0, {c0: 2097152}, None),
        MemoryDep('buf137', c0, {c0: 2097152}, None)]
op138.met_dependencies = [MemoryDep('arg93_1', c1, {c0: 2048, c1: 1024}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf138.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (2048, 1024)
op138.sizes = ([2048], [1024])
buf121_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op138_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf137', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg93_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf138', get_index_3, getitem)
        return store_reduction
op138 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op138_op139_op141.snodes[1] =
op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 2048}, None)]
op139.unmet_dependencies = 
    [   MemoryDep('buf121', c0, {c0: 2097152}, None),
        MemoryDep('buf137', c0, {c0: 2097152}, None)]
op139.met_dependencies = [MemoryDep('arg93_1', c1, {c0: 2048, c1: 1024}, None)]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf139.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (2048, 1024)
op139.sizes = ([2048], [1024])
buf121_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op139_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf137', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg93_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf139', get_index_3, getitem_1)
        return store_reduction
op139 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op138_op139_op141.snodes[2] =
op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 2097152}, None)]
op141.unmet_dependencies = 
    [   MemoryDep('buf121', c0, {c0: 2097152}, None),
        MemoryDep('buf137', c0, {c0: 2097152}, None),
        MemoryDep('buf138', c0, {c0: 2048}, None),
        MemoryDep('buf139', c0, {c0: 2048}, None)]
op141.met_dependencies = 
    [   MemoryDep('arg93_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg94_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg95_1', c1, {c0: 2048, c1: 1024}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (2097152, 1)
op141.sizes = ([2048, 1024], [])
buf121_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf139_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op141_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf137', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg93_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf138', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf139', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg94_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg95_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf141', get_index_7, add_3, None)
        return store
op141 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op138_op139_op141 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op142: ExternKernelSchedulerNode(ExternKernelOut)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf141', mode=None)]
op142.met_dependencies = [StarDep(name='arg96_1', mode=None)]
op142.outputs = [
    buf142: ExternKernelOut
    buf142.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf142.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False)]
]
op142.node.kernel = extern_kernels.mm


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 8388608}, None)]
op143.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 8388608}, None)]
op143.met_dependencies = [MemoryDep('arg97_1', c1, {c0: 2048, c1: 4096}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (8388608, 1)
op143.sizes = ([2048, 4096], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op143_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg97_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf143', get_index_2, relu, None)
        return store
op143 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op144: ExternKernelSchedulerNode(ExternKernelOut)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf143', mode=None)]
op144.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op144.outputs = [
    buf144: ExternKernelOut
    buf144.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf144.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False)]
]
op144.node.kernel = extern_kernels.mm


op145_op146_op147_op149: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op145_op146_op147_op149.writes = 
    [   MemoryDep('buf145', c0, {c0: 2097152}, None),
        MemoryDep('buf146', c0, {c0: 2048}, None),
        MemoryDep('buf147', c0, {c0: 2048}, None),
        MemoryDep('buf149', c0, {c0: 2097152}, None)]
op145_op146_op147_op149.unmet_dependencies = 
    [   MemoryDep('buf121', c0, {c0: 2097152}, None),
        MemoryDep('buf137', c0, {c0: 2097152}, None),
        MemoryDep('buf144', c0, {c0: 2097152}, None)]
op145_op146_op147_op149.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg101_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg93_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg99_1', c1, {c0: 2048, c1: 1024}, None)]
op145_op146_op147_op149.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf145.users = [
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False),
    ]
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf146.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf147.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf149.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False),
    ]
]
op145_op146_op147_op149.snodes[0] =
op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 2097152}, None)]
op145.unmet_dependencies = 
    [   MemoryDep('buf121', c0, {c0: 2097152}, None),
        MemoryDep('buf137', c0, {c0: 2097152}, None),
        MemoryDep('buf144', c0, {c0: 2097152}, None)]
op145.met_dependencies = 
    [   MemoryDep('arg93_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg99_1', c1, {c0: 2048, c1: 1024}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf145.users = [
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False),
    ]
]
op145.group.device = cuda:0
op145.group.iteration = (2097152, 1)
op145.sizes = ([2048, 1024], [])
buf121_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op145_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf137', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg93_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf144', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg99_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf145', get_index_5, add_3, None)
        return store
op145 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op145_op146_op147_op149.snodes[1] =
op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 2048}, None)]
op146.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 2097152}, None)]
op146.met_dependencies = []
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf146.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (2048, 1024)
op146.sizes = ([2048], [1024])
buf145_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op146_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf146', get_index_1, getitem)
        return store_reduction
op146 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op145_op146_op147_op149.snodes[2] =
op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 2048}, None)]
op147.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 2097152}, None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf147.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (2048, 1024)
op147.sizes = ([2048], [1024])
buf145_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op147_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf147', get_index_1, getitem_1)
        return store_reduction
op147 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op145_op146_op147_op149.snodes[3] =
op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 2097152}, None)]
op149.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 2097152}, None),
        MemoryDep('buf146', c0, {c0: 2048}, None),
        MemoryDep('buf147', c0, {c0: 2048}, None)]
op149.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg101_1', c1, {c0: 2048, c1: 1024}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf149.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False),
    ]
]
op149.group.device = cuda:0
op149.group.iteration = (2097152, 1)
op149.sizes = ([2048, 1024], [])
buf145_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf147_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op149_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf146', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf147', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg100_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg101_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf149', get_index_5, add_1, None)
        return store
op149 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op145_op146_op147_op149 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op150: ExternKernelSchedulerNode(ExternKernelOut)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op150.met_dependencies = [StarDep(name='arg102_1', mode=None)]
op150.outputs = [
    buf150: ExternKernelOut
    buf150.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf150.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op150.node.kernel = extern_kernels.mm


op151: ExternKernelSchedulerNode(ExternKernelOut)
op151.writes = [StarDep(name='buf151', mode=None)]
op151.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op151.met_dependencies = [StarDep(name='arg104_1', mode=None)]
op151.outputs = [
    buf151: ExternKernelOut
    buf151.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf151.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op151.node.kernel = extern_kernels.mm


op152: ExternKernelSchedulerNode(ExternKernelOut)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op152.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op152.outputs = [
    buf152: ExternKernelOut
    buf152.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf152.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op152.node.kernel = extern_kernels.mm


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 2097152}, None)]
op153.unmet_dependencies = [   MemoryDep('buf150', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op153.met_dependencies = [MemoryDep('arg103_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (2097152, 1)
op153.sizes = ([16, 16, 128, 64], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op153_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg103_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf153', get_index_2, add, None)
        return store
op153 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 2097152}, None)]
op154.unmet_dependencies = [   MemoryDep('buf151', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op154.met_dependencies = [MemoryDep('arg105_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (2097152, 1)
op154.sizes = ([16, 16, 128, 64], [])
buf151_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op154_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg105_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf154', get_index_2, add, None)
        return store
op154 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 2097152}, None)]
op155.unmet_dependencies = [   MemoryDep('buf152', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op155.met_dependencies = [MemoryDep('arg107_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (2097152, 1)
op155.sizes = ([16, 16, 128, 64], [])
buf152_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op155_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg107_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf155', get_index_2, add, None)
        return store
op155 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op156: ExternKernelSchedulerNode(FallbackKernel)
op156.writes = [StarDep(name='buf156', mode=None)]
op156.unmet_dependencies = 
    [   StarDep(name='buf153', mode=None),
        StarDep(name='buf154', mode=None),
        StarDep(name='buf155', mode=None)]
op156.met_dependencies = []
op156.outputs = [
    buf156: FallbackKernel
    buf156.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf156.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False),
    ]
]
op156.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op157: ExternKernelSchedulerNode(MultiOutput)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf156', mode=None)]
op157.met_dependencies = []
op157.outputs = [
    buf157: MultiOutput
    buf157.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op157.node.kernel = None


op161: ExternKernelSchedulerNode(ExternKernelOut)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf157', mode=None)]
op161.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op161.outputs = [
    buf161: ExternKernelOut
    buf161.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False),
    ]
]
op161.node.kernel = extern_kernels.mm


op162_op163_op165: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op162_op163_op165.writes = 
    [   MemoryDep('buf162', c0, {c0: 2048}, None),
        MemoryDep('buf163', c0, {c0: 2048}, None),
        MemoryDep('buf165', c0, {c0: 2097152}, None)]
op162_op163_op165.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 2097152}, None),
        MemoryDep('buf161', c0, {c0: 2097152}, None)]
op162_op163_op165.met_dependencies = 
    [   MemoryDep('arg109_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg110_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg111_1', c1, {c0: 2048, c1: 1024}, None)]
op162_op163_op165.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf162.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf163.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op162_op163_op165.snodes[0] =
op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 2048}, None)]
op162.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 2097152}, None),
        MemoryDep('buf161', c0, {c0: 2097152}, None)]
op162.met_dependencies = [MemoryDep('arg109_1', c1, {c0: 2048, c1: 1024}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf162.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (2048, 1024)
op162.sizes = ([2048], [1024])
buf145_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op162_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf161', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg109_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf162', get_index_3, getitem)
        return store_reduction
op162 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op162_op163_op165.snodes[1] =
op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 2048}, None)]
op163.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 2097152}, None),
        MemoryDep('buf161', c0, {c0: 2097152}, None)]
op163.met_dependencies = [MemoryDep('arg109_1', c1, {c0: 2048, c1: 1024}, None)]
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf163.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (2048, 1024)
op163.sizes = ([2048], [1024])
buf145_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op163_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf161', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg109_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf163', get_index_3, getitem_1)
        return store_reduction
op163 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op162_op163_op165.snodes[2] =
op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 2097152}, None)]
op165.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 2097152}, None),
        MemoryDep('buf161', c0, {c0: 2097152}, None),
        MemoryDep('buf162', c0, {c0: 2048}, None),
        MemoryDep('buf163', c0, {c0: 2048}, None)]
op165.met_dependencies = 
    [   MemoryDep('arg109_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg110_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg111_1', c1, {c0: 2048, c1: 1024}, None)]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (2097152, 1)
op165.sizes = ([2048, 1024], [])
buf145_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf163_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op165_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf161', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg109_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf162', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf163', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg110_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg111_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf165', get_index_7, add_3, None)
        return store
op165 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op162_op163_op165 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op166: ExternKernelSchedulerNode(ExternKernelOut)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf165', mode=None)]
op166.met_dependencies = [StarDep(name='arg112_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelOut
    buf166.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False)]
]
op166.node.kernel = extern_kernels.mm


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 8388608}, None)]
op167.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 8388608}, None)]
op167.met_dependencies = [MemoryDep('arg113_1', c1, {c0: 2048, c1: 4096}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (8388608, 1)
op167.sizes = ([2048, 4096], [])
buf166_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op167_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf167', get_index_2, relu, None)
        return store
op167 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op168: ExternKernelSchedulerNode(ExternKernelOut)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op168.met_dependencies = [StarDep(name='arg114_1', mode=None)]
op168.outputs = [
    buf168: ExternKernelOut
    buf168.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf168.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False)]
]
op168.node.kernel = extern_kernels.mm


op169_op170_op171_op173: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op169_op170_op171_op173.writes = 
    [   MemoryDep('buf169', c0, {c0: 2097152}, None),
        MemoryDep('buf170', c0, {c0: 2048}, None),
        MemoryDep('buf171', c0, {c0: 2048}, None),
        MemoryDep('buf173', c0, {c0: 2097152}, None)]
op169_op170_op171_op173.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 2097152}, None),
        MemoryDep('buf161', c0, {c0: 2097152}, None),
        MemoryDep('buf168', c0, {c0: 2097152}, None)]
op169_op170_op171_op173.met_dependencies = 
    [   MemoryDep('arg109_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg115_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg116_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg117_1', c1, {c0: 2048, c1: 1024}, None)]
op169_op170_op171_op173.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf169.users = [
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False),
    ]
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf170.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf171.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf173.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False),
    ]
]
op169_op170_op171_op173.snodes[0] =
op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 2097152}, None)]
op169.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 2097152}, None),
        MemoryDep('buf161', c0, {c0: 2097152}, None),
        MemoryDep('buf168', c0, {c0: 2097152}, None)]
op169.met_dependencies = 
    [   MemoryDep('arg109_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg115_1', c1, {c0: 2048, c1: 1024}, None)]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf169.users = [
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False),
    ]
]
op169.group.device = cuda:0
op169.group.iteration = (2097152, 1)
op169.sizes = ([2048, 1024], [])
buf145_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op169_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf161', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg109_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf168', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg115_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf169', get_index_5, add_3, None)
        return store
op169 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op169_op170_op171_op173.snodes[1] =
op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 2048}, None)]
op170.unmet_dependencies = [MemoryDep('buf169', c0, {c0: 2097152}, None)]
op170.met_dependencies = []
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf170.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (2048, 1024)
op170.sizes = ([2048], [1024])
buf169_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op170_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf170', get_index_1, getitem)
        return store_reduction
op170 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op169_op170_op171_op173.snodes[2] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 2048}, None)]
op171.unmet_dependencies = [MemoryDep('buf169', c0, {c0: 2097152}, None)]
op171.met_dependencies = []
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf171.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (2048, 1024)
op171.sizes = ([2048], [1024])
buf169_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op171_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf171', get_index_1, getitem_1)
        return store_reduction
op171 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op169_op170_op171_op173.snodes[3] =
op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 2097152}, None)]
op173.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 2097152}, None),
        MemoryDep('buf170', c0, {c0: 2048}, None),
        MemoryDep('buf171', c0, {c0: 2048}, None)]
op173.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg117_1', c1, {c0: 2048, c1: 1024}, None)]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf173.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False),
    ]
]
op173.group.device = cuda:0
op173.group.iteration = (2097152, 1)
op173.sizes = ([2048, 1024], [])
buf169_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf171_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op173_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf170', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf171', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg116_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg117_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf173', get_index_5, add_1, None)
        return store
op173 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op169_op170_op171_op173 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op174: ExternKernelSchedulerNode(ExternKernelOut)
op174.writes = [StarDep(name='buf174', mode=None)]
op174.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op174.met_dependencies = [StarDep(name='arg118_1', mode=None)]
op174.outputs = [
    buf174: ExternKernelOut
    buf174.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf174.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op174.node.kernel = extern_kernels.mm


op175: ExternKernelSchedulerNode(ExternKernelOut)
op175.writes = [StarDep(name='buf175', mode=None)]
op175.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op175.met_dependencies = [StarDep(name='arg120_1', mode=None)]
op175.outputs = [
    buf175: ExternKernelOut
    buf175.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf175.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op175.node.kernel = extern_kernels.mm


op176: ExternKernelSchedulerNode(ExternKernelOut)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op176.met_dependencies = [StarDep(name='arg122_1', mode=None)]
op176.outputs = [
    buf176: ExternKernelOut
    buf176.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf176.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op176.node.kernel = extern_kernels.mm


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 2097152}, None)]
op177.unmet_dependencies = [   MemoryDep('buf174', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op177.met_dependencies = [MemoryDep('arg119_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (2097152, 1)
op177.sizes = ([16, 16, 128, 64], [])
buf174_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op177_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg119_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf177', get_index_2, add, None)
        return store
op177 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 2097152}, None)]
op178.unmet_dependencies = [   MemoryDep('buf175', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op178.met_dependencies = [MemoryDep('arg121_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf178.users = [NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op178.group.device = cuda:0
op178.group.iteration = (2097152, 1)
op178.sizes = ([16, 16, 128, 64], [])
buf175_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op178_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg121_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf178', get_index_2, add, None)
        return store
op178 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 2097152}, None)]
op179.unmet_dependencies = [   MemoryDep('buf176', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op179.met_dependencies = [MemoryDep('arg123_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (2097152, 1)
op179.sizes = ([16, 16, 128, 64], [])
buf176_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op179_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg123_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf179', get_index_2, add, None)
        return store
op179 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op180: ExternKernelSchedulerNode(FallbackKernel)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = 
    [   StarDep(name='buf177', mode=None),
        StarDep(name='buf178', mode=None),
        StarDep(name='buf179', mode=None)]
op180.met_dependencies = []
op180.outputs = [
    buf180: FallbackKernel
    buf180.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf180.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False),
    ]
]
op180.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op181: ExternKernelSchedulerNode(MultiOutput)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf180', mode=None)]
op181.met_dependencies = []
op181.outputs = [
    buf181: MultiOutput
    buf181.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op181.node.kernel = None


op185: ExternKernelSchedulerNode(ExternKernelOut)
op185.writes = [StarDep(name='buf185', mode=None)]
op185.unmet_dependencies = [StarDep(name='buf181', mode=None)]
op185.met_dependencies = [StarDep(name='arg124_1', mode=None)]
op185.outputs = [
    buf185: ExternKernelOut
    buf185.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf185.users = [
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False),
    ]
]
op185.node.kernel = extern_kernels.mm


op186_op187_op189: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op186_op187_op189.writes = 
    [   MemoryDep('buf186', c0, {c0: 2048}, None),
        MemoryDep('buf187', c0, {c0: 2048}, None),
        MemoryDep('buf189', c0, {c0: 2097152}, None)]
op186_op187_op189.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 2097152}, None),
        MemoryDep('buf185', c0, {c0: 2097152}, None)]
op186_op187_op189.met_dependencies = 
    [   MemoryDep('arg125_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg126_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg127_1', c1, {c0: 2048, c1: 1024}, None)]
op186_op187_op189.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf186.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf187.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op186_op187_op189.snodes[0] =
op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 2048}, None)]
op186.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 2097152}, None),
        MemoryDep('buf185', c0, {c0: 2097152}, None)]
op186.met_dependencies = [MemoryDep('arg125_1', c1, {c0: 2048, c1: 1024}, None)]
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf186.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op186.group.device = cuda:0
op186.group.iteration = (2048, 1024)
op186.sizes = ([2048], [1024])
buf169_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op186_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf185', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg125_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf186', get_index_3, getitem)
        return store_reduction
op186 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op186_op187_op189.snodes[1] =
op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 2048}, None)]
op187.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 2097152}, None),
        MemoryDep('buf185', c0, {c0: 2097152}, None)]
op187.met_dependencies = [MemoryDep('arg125_1', c1, {c0: 2048, c1: 1024}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf187.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (2048, 1024)
op187.sizes = ([2048], [1024])
buf169_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op187_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf185', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg125_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf187', get_index_3, getitem_1)
        return store_reduction
op187 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op186_op187_op189.snodes[2] =
op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 2097152}, None)]
op189.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 2097152}, None),
        MemoryDep('buf185', c0, {c0: 2097152}, None),
        MemoryDep('buf186', c0, {c0: 2048}, None),
        MemoryDep('buf187', c0, {c0: 2048}, None)]
op189.met_dependencies = 
    [   MemoryDep('arg125_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg126_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg127_1', c1, {c0: 2048, c1: 1024}, None)]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (2097152, 1)
op189.sizes = ([2048, 1024], [])
buf169_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf187_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op189_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf185', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg125_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf186', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf187', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg126_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg127_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf189', get_index_7, add_3, None)
        return store
op189 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op186_op187_op189 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op190: ExternKernelSchedulerNode(ExternKernelOut)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op190.met_dependencies = [StarDep(name='arg128_1', mode=None)]
op190.outputs = [
    buf190: ExternKernelOut
    buf190.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf190.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False)]
]
op190.node.kernel = extern_kernels.mm


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 8388608}, None)]
op191.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 8388608}, None)]
op191.met_dependencies = [MemoryDep('arg129_1', c1, {c0: 2048, c1: 4096}, None)]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (8388608, 1)
op191.sizes = ([2048, 4096], [])
buf190_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op191_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg129_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf191', get_index_2, relu, None)
        return store
op191 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op192: ExternKernelSchedulerNode(ExternKernelOut)
op192.writes = [StarDep(name='buf192', mode=None)]
op192.unmet_dependencies = [StarDep(name='buf191', mode=None)]
op192.met_dependencies = [StarDep(name='arg130_1', mode=None)]
op192.outputs = [
    buf192: ExternKernelOut
    buf192.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf192.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False)]
]
op192.node.kernel = extern_kernels.mm


op193_op194_op195_op197: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op193_op194_op195_op197.writes = 
    [   MemoryDep('buf193', c0, {c0: 2097152}, None),
        MemoryDep('buf194', c0, {c0: 2048}, None),
        MemoryDep('buf195', c0, {c0: 2048}, None),
        MemoryDep('buf197', c0, {c0: 2097152}, None)]
op193_op194_op195_op197.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 2097152}, None),
        MemoryDep('buf185', c0, {c0: 2097152}, None),
        MemoryDep('buf192', c0, {c0: 2097152}, None)]
op193_op194_op195_op197.met_dependencies = 
    [   MemoryDep('arg125_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg131_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg132_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg133_1', c1, {c0: 2048, c1: 1024}, None)]
op193_op194_op195_op197.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf193.users = [
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf194.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf195.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf197.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False),
    ]
]
op193_op194_op195_op197.snodes[0] =
op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 2097152}, None)]
op193.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 2097152}, None),
        MemoryDep('buf185', c0, {c0: 2097152}, None),
        MemoryDep('buf192', c0, {c0: 2097152}, None)]
op193.met_dependencies = 
    [   MemoryDep('arg125_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg131_1', c1, {c0: 2048, c1: 1024}, None)]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf193.users = [
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
]
op193.group.device = cuda:0
op193.group.iteration = (2097152, 1)
op193.sizes = ([2048, 1024], [])
buf169_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op193_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf185', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg125_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf192', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg131_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf193', get_index_5, add_3, None)
        return store
op193 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op193_op194_op195_op197.snodes[1] =
op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 2048}, None)]
op194.unmet_dependencies = [MemoryDep('buf193', c0, {c0: 2097152}, None)]
op194.met_dependencies = []
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf194.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (2048, 1024)
op194.sizes = ([2048], [1024])
buf193_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op194_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf194', get_index_1, getitem)
        return store_reduction
op194 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op193_op194_op195_op197.snodes[2] =
op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 2048}, None)]
op195.unmet_dependencies = [MemoryDep('buf193', c0, {c0: 2097152}, None)]
op195.met_dependencies = []
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf195.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (2048, 1024)
op195.sizes = ([2048], [1024])
buf193_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op195_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf195', get_index_1, getitem_1)
        return store_reduction
op195 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op193_op194_op195_op197.snodes[3] =
op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 2097152}, None)]
op197.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 2097152}, None),
        MemoryDep('buf194', c0, {c0: 2048}, None),
        MemoryDep('buf195', c0, {c0: 2048}, None)]
op197.met_dependencies = 
    [   MemoryDep('arg132_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg133_1', c1, {c0: 2048, c1: 1024}, None)]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf197.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False),
    ]
]
op197.group.device = cuda:0
op197.group.iteration = (2097152, 1)
op197.sizes = ([2048, 1024], [])
buf193_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf195_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op197_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf194', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf195', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg132_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg133_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf197', get_index_5, add_1, None)
        return store
op197 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op193_op194_op195_op197 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op198: ExternKernelSchedulerNode(ExternKernelOut)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op198.met_dependencies = [StarDep(name='arg134_1', mode=None)]
op198.outputs = [
    buf198: ExternKernelOut
    buf198.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf198.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op198.node.kernel = extern_kernels.mm


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op199.met_dependencies = [StarDep(name='arg136_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf199.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op199.node.kernel = extern_kernels.mm


op200: ExternKernelSchedulerNode(ExternKernelOut)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op200.met_dependencies = [StarDep(name='arg138_1', mode=None)]
op200.outputs = [
    buf200: ExternKernelOut
    buf200.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf200.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op200.node.kernel = extern_kernels.mm


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 2097152}, None)]
op201.unmet_dependencies = [   MemoryDep('buf198', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op201.met_dependencies = [MemoryDep('arg135_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (2097152, 1)
op201.sizes = ([16, 16, 128, 64], [])
buf198_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op201_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg135_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf201', get_index_2, add, None)
        return store
op201 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 2097152}, None)]
op202.unmet_dependencies = [   MemoryDep('buf199', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op202.met_dependencies = [MemoryDep('arg137_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (2097152, 1)
op202.sizes = ([16, 16, 128, 64], [])
buf199_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op202_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf202', get_index_2, add, None)
        return store
op202 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 2097152}, None)]
op203.unmet_dependencies = [   MemoryDep('buf200', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op203.met_dependencies = [MemoryDep('arg139_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (2097152, 1)
op203.sizes = ([16, 16, 128, 64], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op203_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg139_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf203', get_index_2, add, None)
        return store
op203 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op204: ExternKernelSchedulerNode(FallbackKernel)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = 
    [   StarDep(name='buf201', mode=None),
        StarDep(name='buf202', mode=None),
        StarDep(name='buf203', mode=None)]
op204.met_dependencies = []
op204.outputs = [
    buf204: FallbackKernel
    buf204.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf204.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False),
    ]
]
op204.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op205: ExternKernelSchedulerNode(MultiOutput)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf204', mode=None)]
op205.met_dependencies = []
op205.outputs = [
    buf205: MultiOutput
    buf205.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf205.users = [NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op205.node.kernel = None


op209: ExternKernelSchedulerNode(ExternKernelOut)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf205', mode=None)]
op209.met_dependencies = [StarDep(name='arg140_1', mode=None)]
op209.outputs = [
    buf209: ExternKernelOut
    buf209.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf209.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
]
op209.node.kernel = extern_kernels.mm


op210_op211_op213: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op210_op211_op213.writes = 
    [   MemoryDep('buf210', c0, {c0: 2048}, None),
        MemoryDep('buf211', c0, {c0: 2048}, None),
        MemoryDep('buf213', c0, {c0: 2097152}, None)]
op210_op211_op213.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 2097152}, None),
        MemoryDep('buf209', c0, {c0: 2097152}, None)]
op210_op211_op213.met_dependencies = 
    [   MemoryDep('arg141_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg142_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg143_1', c1, {c0: 2048, c1: 1024}, None)]
op210_op211_op213.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf210.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf211.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf213.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op210_op211_op213.snodes[0] =
op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 2048}, None)]
op210.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 2097152}, None),
        MemoryDep('buf209', c0, {c0: 2097152}, None)]
op210.met_dependencies = [MemoryDep('arg141_1', c1, {c0: 2048, c1: 1024}, None)]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf210.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (2048, 1024)
op210.sizes = ([2048], [1024])
buf193_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op210_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf209', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg141_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf210', get_index_3, getitem)
        return store_reduction
op210 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op210_op211_op213.snodes[1] =
op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 2048}, None)]
op211.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 2097152}, None),
        MemoryDep('buf209', c0, {c0: 2097152}, None)]
op211.met_dependencies = [MemoryDep('arg141_1', c1, {c0: 2048, c1: 1024}, None)]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf211.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (2048, 1024)
op211.sizes = ([2048], [1024])
buf193_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op211_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf209', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg141_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf211', get_index_3, getitem_1)
        return store_reduction
op211 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op210_op211_op213.snodes[2] =
op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 2097152}, None)]
op213.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 2097152}, None),
        MemoryDep('buf209', c0, {c0: 2097152}, None),
        MemoryDep('buf210', c0, {c0: 2048}, None),
        MemoryDep('buf211', c0, {c0: 2048}, None)]
op213.met_dependencies = 
    [   MemoryDep('arg141_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg142_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg143_1', c1, {c0: 2048, c1: 1024}, None)]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf213.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (2097152, 1)
op213.sizes = ([2048, 1024], [])
buf193_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf211_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op213_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf209', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg141_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf210', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf211', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg142_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg143_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf213', get_index_7, add_3, None)
        return store
op213 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op210_op211_op213 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op214: ExternKernelSchedulerNode(ExternKernelOut)
op214.writes = [StarDep(name='buf214', mode=None)]
op214.unmet_dependencies = [StarDep(name='buf213', mode=None)]
op214.met_dependencies = [StarDep(name='arg144_1', mode=None)]
op214.outputs = [
    buf214: ExternKernelOut
    buf214.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf214.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False)]
]
op214.node.kernel = extern_kernels.mm


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 8388608}, None)]
op215.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 8388608}, None)]
op215.met_dependencies = [MemoryDep('arg145_1', c1, {c0: 2048, c1: 4096}, None)]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (8388608, 1)
op215.sizes = ([2048, 4096], [])
buf214_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op215_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg145_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf215', get_index_2, relu, None)
        return store
op215 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op216: ExternKernelSchedulerNode(ExternKernelOut)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op216.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op216.outputs = [
    buf216: ExternKernelOut
    buf216.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op216.node.kernel = extern_kernels.mm


op217_op218_op219_op221: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op217_op218_op219_op221.writes = 
    [   MemoryDep('buf217', c0, {c0: 2097152}, None),
        MemoryDep('buf218', c0, {c0: 2048}, None),
        MemoryDep('buf219', c0, {c0: 2048}, None),
        MemoryDep('buf221', c0, {c0: 2097152}, None)]
op217_op218_op219_op221.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 2097152}, None),
        MemoryDep('buf209', c0, {c0: 2097152}, None),
        MemoryDep('buf216', c0, {c0: 2097152}, None)]
op217_op218_op219_op221.met_dependencies = 
    [   MemoryDep('arg141_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg147_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg148_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg149_1', c1, {c0: 2048, c1: 1024}, None)]
op217_op218_op219_op221.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False),
    ]
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf218.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf221.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False),
    ]
]
op217_op218_op219_op221.snodes[0] =
op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 2097152}, None)]
op217.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 2097152}, None),
        MemoryDep('buf209', c0, {c0: 2097152}, None),
        MemoryDep('buf216', c0, {c0: 2097152}, None)]
op217.met_dependencies = 
    [   MemoryDep('arg141_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg147_1', c1, {c0: 2048, c1: 1024}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False),
    ]
]
op217.group.device = cuda:0
op217.group.iteration = (2097152, 1)
op217.sizes = ([2048, 1024], [])
buf193_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op217_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf209', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg141_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf216', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg147_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf217', get_index_5, add_3, None)
        return store
op217 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op217_op218_op219_op221.snodes[1] =
op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 2048}, None)]
op218.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 2097152}, None)]
op218.met_dependencies = []
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf218.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (2048, 1024)
op218.sizes = ([2048], [1024])
buf217_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op218_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf218', get_index_1, getitem)
        return store_reduction
op218 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op217_op218_op219_op221.snodes[2] =
op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 2048}, None)]
op219.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 2097152}, None)]
op219.met_dependencies = []
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (2048, 1024)
op219.sizes = ([2048], [1024])
buf217_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op219_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf219', get_index_1, getitem_1)
        return store_reduction
op219 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op217_op218_op219_op221.snodes[3] =
op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 2097152}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 2097152}, None),
        MemoryDep('buf218', c0, {c0: 2048}, None),
        MemoryDep('buf219', c0, {c0: 2048}, None)]
op221.met_dependencies = 
    [   MemoryDep('arg148_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg149_1', c1, {c0: 2048, c1: 1024}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf221.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False),
    ]
]
op221.group.device = cuda:0
op221.group.iteration = (2097152, 1)
op221.sizes = ([2048, 1024], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf219_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op221_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf218', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf219', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg148_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg149_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf221', get_index_5, add_1, None)
        return store
op221 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op217_op218_op219_op221 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='arg150_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf222.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op222.node.kernel = extern_kernels.mm


op223: ExternKernelSchedulerNode(ExternKernelOut)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op223.met_dependencies = [StarDep(name='arg152_1', mode=None)]
op223.outputs = [
    buf223: ExternKernelOut
    buf223.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf223.users = [NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op223.node.kernel = extern_kernels.mm


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op224.met_dependencies = [StarDep(name='arg154_1', mode=None)]
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf224.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op224.node.kernel = extern_kernels.mm


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 2097152}, None)]
op225.unmet_dependencies = [   MemoryDep('buf222', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op225.met_dependencies = [MemoryDep('arg151_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (2097152, 1)
op225.sizes = ([16, 16, 128, 64], [])
buf222_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op225_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg151_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf225', get_index_2, add, None)
        return store
op225 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 2097152}, None)]
op226.unmet_dependencies = [   MemoryDep('buf223', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op226.met_dependencies = [MemoryDep('arg153_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (2097152, 1)
op226.sizes = ([16, 16, 128, 64], [])
buf223_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op226_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg153_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf226', get_index_2, add, None)
        return store
op226 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 2097152}, None)]
op227.unmet_dependencies = [   MemoryDep('buf224', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op227.met_dependencies = [MemoryDep('arg155_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (2097152, 1)
op227.sizes = ([16, 16, 128, 64], [])
buf224_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op227_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg155_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf227', get_index_2, add, None)
        return store
op227 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op228: ExternKernelSchedulerNode(FallbackKernel)
op228.writes = [StarDep(name='buf228', mode=None)]
op228.unmet_dependencies = 
    [   StarDep(name='buf225', mode=None),
        StarDep(name='buf226', mode=None),
        StarDep(name='buf227', mode=None)]
op228.met_dependencies = []
op228.outputs = [
    buf228: FallbackKernel
    buf228.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf228.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False),
    ]
]
op228.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op229: ExternKernelSchedulerNode(MultiOutput)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op229.met_dependencies = []
op229.outputs = [
    buf229: MultiOutput
    buf229.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op229.node.kernel = None


op233: ExternKernelSchedulerNode(ExternKernelOut)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf229', mode=None)]
op233.met_dependencies = [StarDep(name='arg156_1', mode=None)]
op233.outputs = [
    buf233: ExternKernelOut
    buf233.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf233.users = [
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False),
    ]
]
op233.node.kernel = extern_kernels.mm


op234_op235_op237: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op234_op235_op237.writes = 
    [   MemoryDep('buf234', c0, {c0: 2048}, None),
        MemoryDep('buf235', c0, {c0: 2048}, None),
        MemoryDep('buf237', c0, {c0: 2097152}, None)]
op234_op235_op237.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 2097152}, None),
        MemoryDep('buf233', c0, {c0: 2097152}, None)]
op234_op235_op237.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg158_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg159_1', c1, {c0: 2048, c1: 1024}, None)]
op234_op235_op237.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf234.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf235.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op234_op235_op237.snodes[0] =
op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 2048}, None)]
op234.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 2097152}, None),
        MemoryDep('buf233', c0, {c0: 2097152}, None)]
op234.met_dependencies = [MemoryDep('arg157_1', c1, {c0: 2048, c1: 1024}, None)]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf234.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (2048, 1024)
op234.sizes = ([2048], [1024])
buf217_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op234_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf233', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg157_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf234', get_index_3, getitem)
        return store_reduction
op234 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op234_op235_op237.snodes[1] =
op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 2048}, None)]
op235.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 2097152}, None),
        MemoryDep('buf233', c0, {c0: 2097152}, None)]
op235.met_dependencies = [MemoryDep('arg157_1', c1, {c0: 2048, c1: 1024}, None)]
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf235.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (2048, 1024)
op235.sizes = ([2048], [1024])
buf217_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op235_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf233', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg157_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf235', get_index_3, getitem_1)
        return store_reduction
op235 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op234_op235_op237.snodes[2] =
op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 2097152}, None)]
op237.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 2097152}, None),
        MemoryDep('buf233', c0, {c0: 2097152}, None),
        MemoryDep('buf234', c0, {c0: 2048}, None),
        MemoryDep('buf235', c0, {c0: 2048}, None)]
op237.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg158_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg159_1', c1, {c0: 2048, c1: 1024}, None)]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (2097152, 1)
op237.sizes = ([2048, 1024], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf235_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op237_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf233', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg157_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf234', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf235', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg158_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg159_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf237', get_index_7, add_3, None)
        return store
op237 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op234_op235_op237 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op238: ExternKernelSchedulerNode(ExternKernelOut)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf237', mode=None)]
op238.met_dependencies = [StarDep(name='arg160_1', mode=None)]
op238.outputs = [
    buf238: ExternKernelOut
    buf238.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf238.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False)]
]
op238.node.kernel = extern_kernels.mm


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 8388608}, None)]
op239.unmet_dependencies = [MemoryDep('buf238', c0, {c0: 8388608}, None)]
op239.met_dependencies = [MemoryDep('arg161_1', c1, {c0: 2048, c1: 4096}, None)]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (8388608, 1)
op239.sizes = ([2048, 4096], [])
buf238_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op239_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg161_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf239', get_index_2, relu, None)
        return store
op239 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op240: ExternKernelSchedulerNode(ExternKernelOut)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op240.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op240.outputs = [
    buf240: ExternKernelOut
    buf240.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf240.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False)]
]
op240.node.kernel = extern_kernels.mm


op241_op242_op243_op245: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op241_op242_op243_op245.writes = 
    [   MemoryDep('buf241', c0, {c0: 2097152}, None),
        MemoryDep('buf242', c0, {c0: 2048}, None),
        MemoryDep('buf243', c0, {c0: 2048}, None),
        MemoryDep('buf245', c0, {c0: 2097152}, None)]
op241_op242_op243_op245.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 2097152}, None),
        MemoryDep('buf233', c0, {c0: 2097152}, None),
        MemoryDep('buf240', c0, {c0: 2097152}, None)]
op241_op242_op243_op245.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg163_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg164_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg165_1', c1, {c0: 2048, c1: 1024}, None)]
op241_op242_op243_op245.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf241.users = [
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=True, is_weak=False),
    ]
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf242.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf243.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf245.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False),
    ]
]
op241_op242_op243_op245.snodes[0] =
op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 2097152}, None)]
op241.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 2097152}, None),
        MemoryDep('buf233', c0, {c0: 2097152}, None),
        MemoryDep('buf240', c0, {c0: 2097152}, None)]
op241.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg163_1', c1, {c0: 2048, c1: 1024}, None)]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf241.users = [
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=True, is_weak=False),
    ]
]
op241.group.device = cuda:0
op241.group.iteration = (2097152, 1)
op241.sizes = ([2048, 1024], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op241_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf233', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg157_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf240', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg163_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf241', get_index_5, add_3, None)
        return store
op241 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op241_op242_op243_op245.snodes[1] =
op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 2048}, None)]
op242.unmet_dependencies = [MemoryDep('buf241', c0, {c0: 2097152}, None)]
op242.met_dependencies = []
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf242.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (2048, 1024)
op242.sizes = ([2048], [1024])
buf241_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op242_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf242', get_index_1, getitem)
        return store_reduction
op242 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op241_op242_op243_op245.snodes[2] =
op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 2048}, None)]
op243.unmet_dependencies = [MemoryDep('buf241', c0, {c0: 2097152}, None)]
op243.met_dependencies = []
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf243.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (2048, 1024)
op243.sizes = ([2048], [1024])
buf241_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op243_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf243', get_index_1, getitem_1)
        return store_reduction
op243 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op241_op242_op243_op245.snodes[3] =
op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 2097152}, None)]
op245.unmet_dependencies = 
    [   MemoryDep('buf241', c0, {c0: 2097152}, None),
        MemoryDep('buf242', c0, {c0: 2048}, None),
        MemoryDep('buf243', c0, {c0: 2048}, None)]
op245.met_dependencies = 
    [   MemoryDep('arg164_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg165_1', c1, {c0: 2048, c1: 1024}, None)]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf245.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False),
    ]
]
op245.group.device = cuda:0
op245.group.iteration = (2097152, 1)
op245.sizes = ([2048, 1024], [])
buf241_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf243_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op245_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf242', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf243', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg164_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg165_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf245', get_index_5, add_1, None)
        return store
op245 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op241_op242_op243_op245 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op246: ExternKernelSchedulerNode(ExternKernelOut)
op246.writes = [StarDep(name='buf246', mode=None)]
op246.unmet_dependencies = [StarDep(name='buf245', mode=None)]
op246.met_dependencies = [StarDep(name='arg166_1', mode=None)]
op246.outputs = [
    buf246: ExternKernelOut
    buf246.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf246.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op246.node.kernel = extern_kernels.mm


op247: ExternKernelSchedulerNode(ExternKernelOut)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf245', mode=None)]
op247.met_dependencies = [StarDep(name='arg168_1', mode=None)]
op247.outputs = [
    buf247: ExternKernelOut
    buf247.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf247.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op247.node.kernel = extern_kernels.mm


op248: ExternKernelSchedulerNode(ExternKernelOut)
op248.writes = [StarDep(name='buf248', mode=None)]
op248.unmet_dependencies = [StarDep(name='buf245', mode=None)]
op248.met_dependencies = [StarDep(name='arg170_1', mode=None)]
op248.outputs = [
    buf248: ExternKernelOut
    buf248.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf248.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op248.node.kernel = extern_kernels.mm


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 2097152}, None)]
op249.unmet_dependencies = [   MemoryDep('buf246', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op249.met_dependencies = [MemoryDep('arg167_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf249.users = [NodeUser(node=ExternKernelSchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (2097152, 1)
op249.sizes = ([16, 16, 128, 64], [])
buf246_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op249_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg167_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf249', get_index_2, add, None)
        return store
op249 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 2097152}, None)]
op250.unmet_dependencies = [   MemoryDep('buf247', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op250.met_dependencies = [MemoryDep('arg169_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf250.users = [NodeUser(node=ExternKernelSchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (2097152, 1)
op250.sizes = ([16, 16, 128, 64], [])
buf247_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op250_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg169_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf250', get_index_2, add, None)
        return store
op250 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 2097152}, None)]
op251.unmet_dependencies = [   MemoryDep('buf248', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op251.met_dependencies = [MemoryDep('arg171_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf251.users = [NodeUser(node=ExternKernelSchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (2097152, 1)
op251.sizes = ([16, 16, 128, 64], [])
buf248_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op251_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg171_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf251', get_index_2, add, None)
        return store
op251 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op252: ExternKernelSchedulerNode(FallbackKernel)
op252.writes = [StarDep(name='buf252', mode=None)]
op252.unmet_dependencies = 
    [   StarDep(name='buf249', mode=None),
        StarDep(name='buf250', mode=None),
        StarDep(name='buf251', mode=None)]
op252.met_dependencies = []
op252.outputs = [
    buf252: FallbackKernel
    buf252.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf252.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False),
    ]
]
op252.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op253: ExternKernelSchedulerNode(MultiOutput)
op253.writes = [StarDep(name='buf253', mode=None)]
op253.unmet_dependencies = [StarDep(name='buf252', mode=None)]
op253.met_dependencies = []
op253.outputs = [
    buf253: MultiOutput
    buf253.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf253.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op253.node.kernel = None


op257: ExternKernelSchedulerNode(ExternKernelOut)
op257.writes = [StarDep(name='buf257', mode=None)]
op257.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op257.met_dependencies = [StarDep(name='arg172_1', mode=None)]
op257.outputs = [
    buf257: ExternKernelOut
    buf257.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf257.users = [
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=True, is_weak=False),
    ]
]
op257.node.kernel = extern_kernels.mm


op258_op259_op261: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op258_op259_op261.writes = 
    [   MemoryDep('buf258', c0, {c0: 2048}, None),
        MemoryDep('buf259', c0, {c0: 2048}, None),
        MemoryDep('buf261', c0, {c0: 2097152}, None)]
op258_op259_op261.unmet_dependencies = 
    [   MemoryDep('buf241', c0, {c0: 2097152}, None),
        MemoryDep('buf257', c0, {c0: 2097152}, None)]
op258_op259_op261.met_dependencies = 
    [   MemoryDep('arg173_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg174_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg175_1', c1, {c0: 2048, c1: 1024}, None)]
op258_op259_op261.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf258.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf259.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf261.users = [NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op258_op259_op261.snodes[0] =
op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 2048}, None)]
op258.unmet_dependencies = 
    [   MemoryDep('buf241', c0, {c0: 2097152}, None),
        MemoryDep('buf257', c0, {c0: 2097152}, None)]
op258.met_dependencies = [MemoryDep('arg173_1', c1, {c0: 2048, c1: 1024}, None)]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf258.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (2048, 1024)
op258.sizes = ([2048], [1024])
buf241_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op258_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf258', get_index_3, getitem)
        return store_reduction
op258 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op258_op259_op261.snodes[1] =
op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 2048}, None)]
op259.unmet_dependencies = 
    [   MemoryDep('buf241', c0, {c0: 2097152}, None),
        MemoryDep('buf257', c0, {c0: 2097152}, None)]
op259.met_dependencies = [MemoryDep('arg173_1', c1, {c0: 2048, c1: 1024}, None)]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf259.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (2048, 1024)
op259.sizes = ([2048], [1024])
buf241_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op259_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf259', get_index_3, getitem_1)
        return store_reduction
op259 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op258_op259_op261.snodes[2] =
op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 2097152}, None)]
op261.unmet_dependencies = 
    [   MemoryDep('buf241', c0, {c0: 2097152}, None),
        MemoryDep('buf257', c0, {c0: 2097152}, None),
        MemoryDep('buf258', c0, {c0: 2048}, None),
        MemoryDep('buf259', c0, {c0: 2048}, None)]
op261.met_dependencies = 
    [   MemoryDep('arg173_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg174_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg175_1', c1, {c0: 2048, c1: 1024}, None)]
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf261.users = [NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (2097152, 1)
op261.sizes = ([2048, 1024], [])
buf241_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf259_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op261_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf258', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf259', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg174_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg175_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf261', get_index_7, add_3, None)
        return store
op261 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op258_op259_op261 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op262: ExternKernelSchedulerNode(ExternKernelOut)
op262.writes = [StarDep(name='buf262', mode=None)]
op262.unmet_dependencies = [StarDep(name='buf261', mode=None)]
op262.met_dependencies = [StarDep(name='arg176_1', mode=None)]
op262.outputs = [
    buf262: ExternKernelOut
    buf262.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf262.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False)]
]
op262.node.kernel = extern_kernels.mm


op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 8388608}, None)]
op263.unmet_dependencies = [MemoryDep('buf262', c0, {c0: 8388608}, None)]
op263.met_dependencies = [MemoryDep('arg177_1', c1, {c0: 2048, c1: 4096}, None)]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (8388608, 1)
op263.sizes = ([2048, 4096], [])
buf262_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op263_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf262', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg177_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf263', get_index_2, relu, None)
        return store
op263 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op264: ExternKernelSchedulerNode(ExternKernelOut)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf263', mode=None)]
op264.met_dependencies = [StarDep(name='arg178_1', mode=None)]
op264.outputs = [
    buf264: ExternKernelOut
    buf264.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf264.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=True, is_weak=False)]
]
op264.node.kernel = extern_kernels.mm


op265_op266_op267_op269: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op265_op266_op267_op269.writes = 
    [   MemoryDep('buf265', c0, {c0: 2097152}, None),
        MemoryDep('buf266', c0, {c0: 2048}, None),
        MemoryDep('buf267', c0, {c0: 2048}, None),
        MemoryDep('buf269', c0, {c0: 2097152}, None)]
op265_op266_op267_op269.unmet_dependencies = 
    [   MemoryDep('buf241', c0, {c0: 2097152}, None),
        MemoryDep('buf257', c0, {c0: 2097152}, None),
        MemoryDep('buf264', c0, {c0: 2097152}, None)]
op265_op266_op267_op269.met_dependencies = 
    [   MemoryDep('arg173_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg179_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg180_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg181_1', c1, {c0: 2048, c1: 1024}, None)]
op265_op266_op267_op269.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf265.users = [
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=True, is_weak=False),
    ]
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf266.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf267.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf269.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False),
    ]
]
op265_op266_op267_op269.snodes[0] =
op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 2097152}, None)]
op265.unmet_dependencies = 
    [   MemoryDep('buf241', c0, {c0: 2097152}, None),
        MemoryDep('buf257', c0, {c0: 2097152}, None),
        MemoryDep('buf264', c0, {c0: 2097152}, None)]
op265.met_dependencies = 
    [   MemoryDep('arg173_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg179_1', c1, {c0: 2048, c1: 1024}, None)]
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf265.users = [
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=True, is_weak=False),
    ]
]
op265.group.device = cuda:0
op265.group.iteration = (2097152, 1)
op265.sizes = ([2048, 1024], [])
buf241_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op265_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf264', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg179_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf265', get_index_5, add_3, None)
        return store
op265 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op265_op266_op267_op269.snodes[1] =
op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 2048}, None)]
op266.unmet_dependencies = [MemoryDep('buf265', c0, {c0: 2097152}, None)]
op266.met_dependencies = []
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf266.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op266.group.device = cuda:0
op266.group.iteration = (2048, 1024)
op266.sizes = ([2048], [1024])
buf265_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op266_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf266', get_index_1, getitem)
        return store_reduction
op266 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op265_op266_op267_op269.snodes[2] =
op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 2048}, None)]
op267.unmet_dependencies = [MemoryDep('buf265', c0, {c0: 2097152}, None)]
op267.met_dependencies = []
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf267.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op267.group.device = cuda:0
op267.group.iteration = (2048, 1024)
op267.sizes = ([2048], [1024])
buf265_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op267_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf267', get_index_1, getitem_1)
        return store_reduction
op267 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op265_op266_op267_op269.snodes[3] =
op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 2097152}, None)]
op269.unmet_dependencies = 
    [   MemoryDep('buf265', c0, {c0: 2097152}, None),
        MemoryDep('buf266', c0, {c0: 2048}, None),
        MemoryDep('buf267', c0, {c0: 2048}, None)]
op269.met_dependencies = 
    [   MemoryDep('arg180_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg181_1', c1, {c0: 2048, c1: 1024}, None)]
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf269.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False),
    ]
]
op269.group.device = cuda:0
op269.group.iteration = (2097152, 1)
op269.sizes = ([2048, 1024], [])
buf265_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf267_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op269_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf266', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf267', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg180_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg181_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf269', get_index_5, add_1, None)
        return store
op269 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op265_op266_op267_op269 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op270: ExternKernelSchedulerNode(ExternKernelOut)
op270.writes = [StarDep(name='buf270', mode=None)]
op270.unmet_dependencies = [StarDep(name='buf269', mode=None)]
op270.met_dependencies = [StarDep(name='arg182_1', mode=None)]
op270.outputs = [
    buf270: ExternKernelOut
    buf270.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf270.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op270.node.kernel = extern_kernels.mm


op271: ExternKernelSchedulerNode(ExternKernelOut)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf269', mode=None)]
op271.met_dependencies = [StarDep(name='arg184_1', mode=None)]
op271.outputs = [
    buf271: ExternKernelOut
    buf271.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf271.users = [NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op271.node.kernel = extern_kernels.mm


op272: ExternKernelSchedulerNode(ExternKernelOut)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf269', mode=None)]
op272.met_dependencies = [StarDep(name='arg186_1', mode=None)]
op272.outputs = [
    buf272: ExternKernelOut
    buf272.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op272.node.kernel = extern_kernels.mm


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 2097152}, None)]
op273.unmet_dependencies = [   MemoryDep('buf270', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op273.met_dependencies = [MemoryDep('arg183_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (2097152, 1)
op273.sizes = ([16, 16, 128, 64], [])
buf270_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op273_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg183_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf273', get_index_2, add, None)
        return store
op273 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 2097152}, None)]
op274.unmet_dependencies = [   MemoryDep('buf271', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op274.met_dependencies = [MemoryDep('arg185_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf274.users = [NodeUser(node=ExternKernelSchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (2097152, 1)
op274.sizes = ([16, 16, 128, 64], [])
buf271_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op274_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg185_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf274', get_index_2, add, None)
        return store
op274 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 2097152}, None)]
op275.unmet_dependencies = [   MemoryDep('buf272', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op275.met_dependencies = [MemoryDep('arg187_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf275.users = [NodeUser(node=ExternKernelSchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (2097152, 1)
op275.sizes = ([16, 16, 128, 64], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op275_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg187_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf275', get_index_2, add, None)
        return store
op275 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op276: ExternKernelSchedulerNode(FallbackKernel)
op276.writes = [StarDep(name='buf276', mode=None)]
op276.unmet_dependencies = 
    [   StarDep(name='buf273', mode=None),
        StarDep(name='buf274', mode=None),
        StarDep(name='buf275', mode=None)]
op276.met_dependencies = []
op276.outputs = [
    buf276: FallbackKernel
    buf276.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf276.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False),
    ]
]
op276.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op277: ExternKernelSchedulerNode(MultiOutput)
op277.writes = [StarDep(name='buf277', mode=None)]
op277.unmet_dependencies = [StarDep(name='buf276', mode=None)]
op277.met_dependencies = []
op277.outputs = [
    buf277: MultiOutput
    buf277.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf277.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op277.node.kernel = None


op281: ExternKernelSchedulerNode(ExternKernelOut)
op281.writes = [StarDep(name='buf281', mode=None)]
op281.unmet_dependencies = [StarDep(name='buf277', mode=None)]
op281.met_dependencies = [StarDep(name='arg188_1', mode=None)]
op281.outputs = [
    buf281: ExternKernelOut
    buf281.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf281.users = [
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=True, is_weak=False),
    ]
]
op281.node.kernel = extern_kernels.mm


op282_op283_op285: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op282_op283_op285.writes = 
    [   MemoryDep('buf282', c0, {c0: 2048}, None),
        MemoryDep('buf283', c0, {c0: 2048}, None),
        MemoryDep('buf285', c0, {c0: 2097152}, None)]
op282_op283_op285.unmet_dependencies = 
    [   MemoryDep('buf265', c0, {c0: 2097152}, None),
        MemoryDep('buf281', c0, {c0: 2097152}, None)]
op282_op283_op285.met_dependencies = 
    [   MemoryDep('arg189_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg190_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg191_1', c1, {c0: 2048, c1: 1024}, None)]
op282_op283_op285.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf282.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf283.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf285.users = [NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op282_op283_op285.snodes[0] =
op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 2048}, None)]
op282.unmet_dependencies = 
    [   MemoryDep('buf265', c0, {c0: 2097152}, None),
        MemoryDep('buf281', c0, {c0: 2097152}, None)]
op282.met_dependencies = [MemoryDep('arg189_1', c1, {c0: 2048, c1: 1024}, None)]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf282.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (2048, 1024)
op282.sizes = ([2048], [1024])
buf265_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op282_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf281', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg189_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf282', get_index_3, getitem)
        return store_reduction
op282 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op282_op283_op285.snodes[1] =
op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 2048}, None)]
op283.unmet_dependencies = 
    [   MemoryDep('buf265', c0, {c0: 2097152}, None),
        MemoryDep('buf281', c0, {c0: 2097152}, None)]
op283.met_dependencies = [MemoryDep('arg189_1', c1, {c0: 2048, c1: 1024}, None)]
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf283.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op283.group.device = cuda:0
op283.group.iteration = (2048, 1024)
op283.sizes = ([2048], [1024])
buf265_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op283_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf281', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg189_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf283', get_index_3, getitem_1)
        return store_reduction
op283 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op282_op283_op285.snodes[2] =
op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 2097152}, None)]
op285.unmet_dependencies = 
    [   MemoryDep('buf265', c0, {c0: 2097152}, None),
        MemoryDep('buf281', c0, {c0: 2097152}, None),
        MemoryDep('buf282', c0, {c0: 2048}, None),
        MemoryDep('buf283', c0, {c0: 2048}, None)]
op285.met_dependencies = 
    [   MemoryDep('arg189_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg190_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg191_1', c1, {c0: 2048, c1: 1024}, None)]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf285.users = [NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (2097152, 1)
op285.sizes = ([2048, 1024], [])
buf265_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf283_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op285_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf281', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg189_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf282', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf283', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg190_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg191_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf285', get_index_7, add_3, None)
        return store
op285 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op282_op283_op285 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op286: ExternKernelSchedulerNode(ExternKernelOut)
op286.writes = [StarDep(name='buf286', mode=None)]
op286.unmet_dependencies = [StarDep(name='buf285', mode=None)]
op286.met_dependencies = [StarDep(name='arg192_1', mode=None)]
op286.outputs = [
    buf286: ExternKernelOut
    buf286.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf286.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False)]
]
op286.node.kernel = extern_kernels.mm


op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 8388608}, None)]
op287.unmet_dependencies = [MemoryDep('buf286', c0, {c0: 8388608}, None)]
op287.met_dependencies = [MemoryDep('arg193_1', c1, {c0: 2048, c1: 4096}, None)]
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf287.users = [NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (8388608, 1)
op287.sizes = ([2048, 4096], [])
buf286_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op287_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg193_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf287', get_index_2, relu, None)
        return store
op287 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op288: ExternKernelSchedulerNode(ExternKernelOut)
op288.writes = [StarDep(name='buf288', mode=None)]
op288.unmet_dependencies = [StarDep(name='buf287', mode=None)]
op288.met_dependencies = [StarDep(name='arg194_1', mode=None)]
op288.outputs = [
    buf288: ExternKernelOut
    buf288.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf288.users = [NodeUser(node=SchedulerNode(name='op289'), can_inplace=True, is_weak=False)]
]
op288.node.kernel = extern_kernels.mm


op289_op290_op291_op317: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op289_op290_op291_op317.writes = 
    [   MemoryDep('buf289', c0, {c0: 2097152}, None),
        MemoryDep('buf290', c0, {c0: 2048}, None),
        MemoryDep('buf291', c0, {c0: 2048}, None),
        MemoryDep('buf317', c0, {c0: 2097152}, None)]
op289_op290_op291_op317.unmet_dependencies = 
    [   MemoryDep('buf265', c0, {c0: 2097152}, None),
        MemoryDep('buf281', c0, {c0: 2097152}, None),
        MemoryDep('buf288', c0, {c0: 2097152}, None)]
op289_op290_op291_op317.met_dependencies = 
    [   MemoryDep('arg189_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg195_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg196_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg197_1', c1, {c0: 2048, c1: 1024}, None)]
op289_op290_op291_op317.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf289.users = [
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=True, is_weak=False),
    ]
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf290.users = [NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf291.users = [NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf317.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op401'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op443'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op526'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op528'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op567'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op569'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op609'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op611'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op650'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op652'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op692'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op694'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op733'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op735'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op775'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op777'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op289_op290_op291_op317.snodes[0] =
op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', c0, {c0: 2097152}, None)]
op289.unmet_dependencies = 
    [   MemoryDep('buf265', c0, {c0: 2097152}, None),
        MemoryDep('buf281', c0, {c0: 2097152}, None),
        MemoryDep('buf288', c0, {c0: 2097152}, None)]
op289.met_dependencies = 
    [   MemoryDep('arg189_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg195_1', c1, {c0: 2048, c1: 1024}, None)]
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf289.users = [
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=True, is_weak=False),
    ]
]
op289.group.device = cuda:0
op289.group.iteration = (2097152, 1)
op289.sizes = ([2048, 1024], [])
buf265_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf289_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op289_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf281', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg189_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf288', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg195_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf289', get_index_5, add_3, None)
        return store
op289 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op289_op290_op291_op317.snodes[1] =
op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 2048}, None)]
op290.unmet_dependencies = [MemoryDep('buf289', c0, {c0: 2097152}, None)]
op290.met_dependencies = []
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf290.users = [NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (2048, 1024)
op290.sizes = ([2048], [1024])
buf289_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op290_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf290', get_index_1, getitem)
        return store_reduction
op290 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op289_op290_op291_op317.snodes[2] =
op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 2048}, None)]
op291.unmet_dependencies = [MemoryDep('buf289', c0, {c0: 2097152}, None)]
op291.met_dependencies = []
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf291.users = [NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op291.group.device = cuda:0
op291.group.iteration = (2048, 1024)
op291.sizes = ([2048], [1024])
buf289_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op291_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf291', get_index_1, getitem_1)
        return store_reduction
op291 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op289_op290_op291_op317.snodes[3] =
op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', c0, {c0: 2097152}, None)]
op317.unmet_dependencies = 
    [   MemoryDep('buf289', c0, {c0: 2097152}, None),
        MemoryDep('buf290', c0, {c0: 2048}, None),
        MemoryDep('buf291', c0, {c0: 2048}, None)]
op317.met_dependencies = 
    [   MemoryDep('arg196_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg197_1', c1, {c0: 2048, c1: 1024}, None)]
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf317.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op401'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op443'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op526'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op528'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op567'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op569'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op609'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op611'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op650'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op652'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op692'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op694'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op733'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op735'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op775'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op777'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op317.group.device = cuda:0
op317.group.iteration = (2097152, 1)
op317.sizes = ([2048, 1024], [])
buf289_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf291_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op317_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf290', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf291', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg196_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg197_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf317', get_index_5, add_1, None)
        return store
op317 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op289_op290_op291_op317 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 2048}, None)]
op293.unmet_dependencies = []
op293.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 2048}, None)]
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
    buf293.users = [NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False)]
]
op293.group.device = cuda:0
op293.group.iteration = (16, 128)
op293.sizes = ([16], [128])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
buf293_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
class op293_loop_body:
    var_ranges = {z0: 16, z1: 128}
    index0 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        constant = ops.constant(1, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int32, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.int64, src_dtype = torch.int32)
        scan1 = self.scan1((torch.int64,), (to_dtype_1,))
        getitem = scan1[0]
        get_index_1 = self.get_index('index0')
        store = ops.store('buf293', get_index_1, getitem, None)
        return store
op293 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton.jit
    def _triton_helper_fn_add0(arg0_0, arg1_0):
        tmp0 = arg0_0 + arg1_0
        return tmp0

    @triton_heuristics.persistent_reduction(
        size_hints=[16, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0)
        tmp1 = tl.full([1, 1], 1, tl.int64)
        tmp2 = tmp0 != tmp1
        tmp3 = tmp2.to(tl.int32)
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tmp4.to(tl.int64)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp7, = tl.associative_scan((tmp6,), 1, _triton_helper_fn_add0)
        tl.store(out_ptr0 + (r1 + (128*x0)), tmp7, xmask)


op294_op295_op296_op298: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op294_op295_op296_op298.writes = 
    [   MemoryDep('buf294', c0, {c0: 2097152}, None),
        MemoryDep('buf295', c0, {c0: 2048}, None),
        MemoryDep('buf296', c0, {c0: 2048}, None),
        MemoryDep('buf298', c0, {c0: 2097152}, None)]
op294_op295_op296_op298.unmet_dependencies = [MemoryDep('buf293', c0, {c0: 2048}, None)]
op294_op295_op296_op298.met_dependencies = 
    [   MemoryDep('arg198_1', c1 + 1024*tmp15, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg199_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg1_1', c0, {c0: 2048}, None),
        MemoryDep('arg200_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg2_1', c1 + 1024*tmp0, {c0: 2048, c1: 1024}, None)]
op294_op295_op296_op298.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf294.users = [
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=True, is_weak=False),
    ]
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf295.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf296.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf298.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op302'), can_inplace=False, is_weak=False),
    ]
]
op294_op295_op296_op298.snodes[0] =
op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 2097152}, None)]
op294.unmet_dependencies = [MemoryDep('buf293', c0, {c0: 2048}, None)]
op294.met_dependencies = 
    [   MemoryDep('arg198_1', c1 + 1024*tmp15, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg1_1', c0, {c0: 2048}, None),
        MemoryDep('arg2_1', c1 + 1024*tmp0, {c0: 2048, c1: 1024}, None)]
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf294.users = [
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=True, is_weak=False),
    ]
]
op294.group.device = cuda:0
op294.group.iteration = (2097152, 1)
op294.sizes = ([2048, 1024], [])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[128112, 1024], stride=[1024, 1])
buf293_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[1026, 1024], stride=[1024, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op294_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = z0
    index1 = 1024*indirect0 + z1
    index2 = 1024*indirect1 + z1
    index3 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        constant = ops.constant(32.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf293', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.int32, src_dtype = torch.int64)
        constant_1 = ops.constant(0, torch.int32)
        add = ops.add(to_dtype, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg1_1', get_index_3)
        constant_2 = ops.constant(1, torch.int64)
        ne = ops.ne(load_3, constant_2)
        to_dtype_1 = ops.to_dtype(ne, torch.int32, src_dtype = torch.bool)
        mul_1 = ops.mul(add, to_dtype_1)
        to_dtype_2 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.int32)
        constant_3 = ops.constant(1, torch.int64)
        add_1 = ops.add(to_dtype_2, constant_3)
        set_indirect1 = self.set_indirect1(add_1)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg198_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf294', get_index_5, add_2, None)
        return store
op294 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*i64', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last')
        tmp9 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([XBLOCK], 128112, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 128112), "index out of bounds: 0 <= tmp4 < 128112")
        tmp6 = tl.load(in_ptr1 + (x0 + (1024*tmp4)), None)
        tmp7 = 32.0
        tmp8 = tmp6 * tmp7
        tmp10 = tmp9.to(tl.int32)
        tmp11 = tl.full([1], 0, tl.int32)
        tmp12 = tmp10 + tmp11
        tmp13 = tl.full([1], 1, tl.int64)
        tmp14 = tmp0 != tmp13
        tmp15 = tmp14.to(tl.int32)
        tmp16 = tmp12 * tmp15
        tmp17 = tmp16.to(tl.int64)
        tmp18 = tmp17 + tmp13
        tmp19 = tl.full([XBLOCK], 1026, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 1026), "index out of bounds: 0 <= tmp22 < 1026")
        tmp24 = tl.load(in_ptr3 + (x0 + (1024*tmp22)), None)
        tmp25 = tmp8 + tmp24
        tl.store(out_ptr0 + (x2), tmp25, None)
op294_op295_op296_op298.snodes[1] =
op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 2048}, None)]
op295.unmet_dependencies = [MemoryDep('buf294', c0, {c0: 2097152}, None)]
op295.met_dependencies = []
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf295.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op295.group.device = cuda:0
op295.group.iteration = (2048, 1024)
op295.sizes = ([2048], [1024])
buf294_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf295_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op295_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf295', get_index_1, getitem)
        return store_reduction
op295 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op294_op295_op296_op298.snodes[2] =
op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 2048}, None)]
op296.unmet_dependencies = [MemoryDep('buf294', c0, {c0: 2097152}, None)]
op296.met_dependencies = []
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf296.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op296.group.device = cuda:0
op296.group.iteration = (2048, 1024)
op296.sizes = ([2048], [1024])
buf294_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf296_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op296_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf296', get_index_1, getitem_1)
        return store_reduction
op296 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op294_op295_op296_op298.snodes[3] =
op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 2097152}, None)]
op298.unmet_dependencies = 
    [   MemoryDep('buf294', c0, {c0: 2097152}, None),
        MemoryDep('buf295', c0, {c0: 2048}, None),
        MemoryDep('buf296', c0, {c0: 2048}, None)]
op298.met_dependencies = 
    [   MemoryDep('arg199_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg200_1', c1, {c0: 2048, c1: 1024}, None)]
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf298.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op302'), can_inplace=False, is_weak=False),
    ]
]
op298.group.device = cuda:0
op298.group.iteration = (2097152, 1)
op298.sizes = ([2048, 1024], [])
buf294_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf295_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf296_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op298_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf295', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf296', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg199_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg200_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf298', get_index_5, add_1, None)
        return store
op298 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op294_op295_op296_op298 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*i64', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, out_ptr3, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp9 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp46 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp48 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp1 = tl.full([RBLOCK], 128112, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 128112), "index out of bounds: 0 <= tmp4 < 128112")
        tmp6 = tl.load(in_ptr1 + (r1 + (1024*tmp4)), None)
        tmp7 = 32.0
        tmp8 = tmp6 * tmp7
        tmp10 = tmp9.to(tl.int32)
        tmp11 = tl.full([1], 0, tl.int32)
        tmp12 = tmp10 + tmp11
        tmp13 = tl.full([1], 1, tl.int64)
        tmp14 = tmp0 != tmp13
        tmp15 = tmp14.to(tl.int32)
        tmp16 = tmp12 * tmp15
        tmp17 = tmp16.to(tl.int64)
        tmp18 = tmp17 + tmp13
        tmp19 = tl.full([RBLOCK], 1026, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 1026), "index out of bounds: 0 <= tmp22 < 1026")
        tmp24 = tl.load(in_ptr3 + (r1 + (1024*tmp22)), None)
        tmp25 = tmp8 + tmp24
        tmp26 = tl.broadcast_to(tmp25, [RBLOCK])
        tmp28 = tl.broadcast_to(tmp26, [RBLOCK])
        tmp30 = triton_helpers.promote_to_tensor(tl.sum(tmp28, 0))
        tmp31 = tl.full([1], 1024, tl.int32)
        tmp32 = tmp31.to(tl.float32)
        tmp33 = tmp30 / tmp32
        tmp34 = tmp26 - tmp33
        tmp35 = tmp34 * tmp34
        tmp36 = tl.broadcast_to(tmp35, [RBLOCK])
        tmp38 = triton_helpers.promote_to_tensor(tl.sum(tmp36, 0))
        tmp39 = tmp25 - tmp33
        tmp40 = 1024.0
        tmp41 = tmp38 / tmp40
        tmp42 = 1e-05
        tmp43 = tmp41 + tmp42
        tmp44 = libdevice.rsqrt(tmp43)
        tmp45 = tmp39 * tmp44
        tmp47 = tmp45 * tmp46
        tmp49 = tmp47 + tmp48
        tl.store(out_ptr0 + (r1 + (1024*x0)), tmp25, None)
        tl.store(out_ptr3 + (r1 + (1024*x0)), tmp49, None)


op299: ExternKernelSchedulerNode(ExternKernelOut)
op299.writes = [StarDep(name='buf299', mode=None)]
op299.unmet_dependencies = [StarDep(name='buf298', mode=None)]
op299.met_dependencies = [StarDep(name='arg201_1', mode=None)]
op299.outputs = [
    buf299: ExternKernelOut
    buf299.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf299.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op299.node.kernel = extern_kernels.mm


op300: ExternKernelSchedulerNode(ExternKernelOut)
op300.writes = [StarDep(name='buf300', mode=None)]
op300.unmet_dependencies = [StarDep(name='buf298', mode=None)]
op300.met_dependencies = [StarDep(name='arg203_1', mode=None)]
op300.outputs = [
    buf300: ExternKernelOut
    buf300.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf300.users = [NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False)]
]
op300.node.kernel = extern_kernels.mm


op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 2097152}, None)]
op301.unmet_dependencies = [   MemoryDep('buf300', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op301.met_dependencies = [MemoryDep('arg204_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf301.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op301.group.device = cuda:0
op301.group.iteration = (2097152, 1)
op301.sizes = ([16, 16, 128, 64], [])
buf300_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op301_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg204_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf301', get_index_2, add, None)
        return store
op301 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op302: ExternKernelSchedulerNode(ExternKernelOut)
op302.writes = [StarDep(name='buf302', mode=None)]
op302.unmet_dependencies = [StarDep(name='buf298', mode=None)]
op302.met_dependencies = [StarDep(name='arg205_1', mode=None)]
op302.outputs = [
    buf302: ExternKernelOut
    buf302.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf302.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op302.node.kernel = extern_kernels.mm


op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 2097152}, None)]
op303.unmet_dependencies = [   MemoryDep('buf302', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op303.met_dependencies = [MemoryDep('arg206_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf303.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op303.group.device = cuda:0
op303.group.iteration = (2097152, 1)
op303.sizes = ([16, 16, 128, 64], [])
buf302_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op303_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf303', get_index_2, add, None)
        return store
op303 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 2097152}, None)]
op304.unmet_dependencies = [   MemoryDep('buf299', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op304.met_dependencies = [MemoryDep('arg202_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf304.users = [NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (2097152, 1)
op304.sizes = ([16, 16, 128, 64], [])
buf299_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op304_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf299', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf304', get_index_2, add, None)
        return store
op304 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', c0, {c0: 4194304}, None)]
op305.unmet_dependencies = []
op305.met_dependencies = []
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf305.users = [NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op305.group.device = cuda:0
op305.group.iteration = (4194304, 1)
op305.sizes = ([256, 128, 128], [])
buf305_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op305_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 128}
    index0 = z2
    index1 = z1 + 1
    index2 = 16384*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf305', get_index_2, where, None)
        return store
op305 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op306: ExternKernelSchedulerNode(FallbackKernel)
op306.writes = [StarDep(name='buf306', mode=None)]
op306.unmet_dependencies = 
    [   StarDep(name='buf301', mode=None),
        StarDep(name='buf303', mode=None),
        StarDep(name='buf304', mode=None),
        StarDep(name='buf305', mode=None)]
op306.met_dependencies = []
op306.outputs = [
    buf306: FallbackKernel
    buf306.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf306.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op310'), can_inplace=False, is_weak=False),
    ]
]
op306.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op307: ExternKernelSchedulerNode(MultiOutput)
op307.writes = [StarDep(name='buf307', mode=None)]
op307.unmet_dependencies = [StarDep(name='buf306', mode=None)]
op307.met_dependencies = []
op307.outputs = [
    buf307: MultiOutput
    buf307.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf307.users = [NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op307.node.kernel = None


op311: ExternKernelSchedulerNode(ExternKernelOut)
op311.writes = [StarDep(name='buf311', mode=None)]
op311.unmet_dependencies = [StarDep(name='buf307', mode=None)]
op311.met_dependencies = [StarDep(name='arg207_1', mode=None)]
op311.outputs = [
    buf311: ExternKernelOut
    buf311.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf311.users = [
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=True, is_weak=False),
    ]
]
op311.node.kernel = extern_kernels.mm


op312_op313_op315: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op312_op313_op315.writes = 
    [   MemoryDep('buf312', c0, {c0: 2048}, None),
        MemoryDep('buf313', c0, {c0: 2048}, None),
        MemoryDep('buf315', c0, {c0: 2097152}, None)]
op312_op313_op315.unmet_dependencies = 
    [   MemoryDep('buf294', c0, {c0: 2097152}, None),
        MemoryDep('buf311', c0, {c0: 2097152}, None)]
op312_op313_op315.met_dependencies = 
    [   MemoryDep('arg208_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg209_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg210_1', c1, {c0: 2048, c1: 1024}, None)]
op312_op313_op315.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf312.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf313.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf315.users = [NodeUser(node=ExternKernelSchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
]
op312_op313_op315.snodes[0] =
op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 2048}, None)]
op312.unmet_dependencies = 
    [   MemoryDep('buf294', c0, {c0: 2097152}, None),
        MemoryDep('buf311', c0, {c0: 2097152}, None)]
op312.met_dependencies = [MemoryDep('arg208_1', c1, {c0: 2048, c1: 1024}, None)]
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf312.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op312.group.device = cuda:0
op312.group.iteration = (2048, 1024)
op312.sizes = ([2048], [1024])
buf294_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op312_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf311', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg208_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf312', get_index_3, getitem)
        return store_reduction
op312 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op312_op313_op315.snodes[1] =
op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 2048}, None)]
op313.unmet_dependencies = 
    [   MemoryDep('buf294', c0, {c0: 2097152}, None),
        MemoryDep('buf311', c0, {c0: 2097152}, None)]
op313.met_dependencies = [MemoryDep('arg208_1', c1, {c0: 2048, c1: 1024}, None)]
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf313.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op313.group.device = cuda:0
op313.group.iteration = (2048, 1024)
op313.sizes = ([2048], [1024])
buf294_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op313_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf311', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg208_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf313', get_index_3, getitem_1)
        return store_reduction
op313 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op312_op313_op315.snodes[2] =
op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', c0, {c0: 2097152}, None)]
op315.unmet_dependencies = 
    [   MemoryDep('buf294', c0, {c0: 2097152}, None),
        MemoryDep('buf311', c0, {c0: 2097152}, None),
        MemoryDep('buf312', c0, {c0: 2048}, None),
        MemoryDep('buf313', c0, {c0: 2048}, None)]
op315.met_dependencies = 
    [   MemoryDep('arg208_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg209_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg210_1', c1, {c0: 2048, c1: 1024}, None)]
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf315.users = [NodeUser(node=ExternKernelSchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
]
op315.group.device = cuda:0
op315.group.iteration = (2097152, 1)
op315.sizes = ([2048, 1024], [])
buf294_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf313_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op315_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf311', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg208_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf312', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf313', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg209_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg210_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf315', get_index_7, add_3, None)
        return store
op315 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op312_op313_op315 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op316: ExternKernelSchedulerNode(ExternKernelOut)
op316.writes = [StarDep(name='buf316', mode=None)]
op316.unmet_dependencies = [StarDep(name='buf315', mode=None)]
op316.met_dependencies = [StarDep(name='arg211_1', mode=None)]
op316.outputs = [
    buf316: ExternKernelOut
    buf316.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf316.users = [NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op316.node.kernel = extern_kernels.mm


op318: ExternKernelSchedulerNode(ExternKernelOut)
op318.writes = [StarDep(name='buf318', mode=None)]
op318.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op318.met_dependencies = [StarDep(name='arg213_1', mode=None)]
op318.outputs = [
    buf318: ExternKernelOut
    buf318.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf318.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op318.node.kernel = extern_kernels.mm


op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 2097152}, None)]
op319.unmet_dependencies = [   MemoryDep('buf318', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op319.met_dependencies = [MemoryDep('arg214_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf319.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op319.group.device = cuda:0
op319.group.iteration = (2097152, 1)
op319.sizes = ([16, 16, 128, 64], [])
buf318_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op319_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf318', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg214_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf319', get_index_2, add, None)
        return store
op319 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op320: ExternKernelSchedulerNode(ExternKernelOut)
op320.writes = [StarDep(name='buf320', mode=None)]
op320.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op320.met_dependencies = [StarDep(name='arg215_1', mode=None)]
op320.outputs = [
    buf320: ExternKernelOut
    buf320.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf320.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
]
op320.node.kernel = extern_kernels.mm


op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', c0, {c0: 2097152}, None)]
op321.unmet_dependencies = [   MemoryDep('buf320', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op321.met_dependencies = [MemoryDep('arg216_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf321.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op321.group.device = cuda:0
op321.group.iteration = (2097152, 1)
op321.sizes = ([16, 16, 128, 64], [])
buf320_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op321_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg216_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf321', get_index_2, add, None)
        return store
op321 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 2097152}, None)]
op322.unmet_dependencies = [   MemoryDep('buf316', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op322.met_dependencies = [MemoryDep('arg212_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf322.users = [NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op322.group.device = cuda:0
op322.group.iteration = (2097152, 1)
op322.sizes = ([16, 16, 128, 64], [])
buf316_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf322_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op322_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf316', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg212_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf322', get_index_2, add, None)
        return store
op322 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op323: ExternKernelSchedulerNode(FallbackKernel)
op323.writes = [StarDep(name='buf323', mode=None)]
op323.unmet_dependencies = 
    [   StarDep(name='buf319', mode=None),
        StarDep(name='buf321', mode=None),
        StarDep(name='buf322', mode=None)]
op323.met_dependencies = []
op323.outputs = [
    buf323: FallbackKernel
    buf323.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf323.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op325'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op327'), can_inplace=False, is_weak=False),
    ]
]
op323.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op324: ExternKernelSchedulerNode(MultiOutput)
op324.writes = [StarDep(name='buf324', mode=None)]
op324.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op324.met_dependencies = []
op324.outputs = [
    buf324: MultiOutput
    buf324.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf324.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op324.node.kernel = None


op328: ExternKernelSchedulerNode(ExternKernelOut)
op328.writes = [StarDep(name='buf328', mode=None)]
op328.unmet_dependencies = [StarDep(name='buf324', mode=None)]
op328.met_dependencies = [StarDep(name='arg217_1', mode=None)]
op328.outputs = [
    buf328: ExternKernelOut
    buf328.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf328.users = [NodeUser(node=SchedulerNode(name='op329'), can_inplace=True, is_weak=False)]
]
op328.node.kernel = extern_kernels.mm


op329_op330_op331_op333: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op329_op330_op331_op333.writes = 
    [   MemoryDep('buf329', c0, {c0: 2097152}, None),
        MemoryDep('buf330', c0, {c0: 2048}, None),
        MemoryDep('buf331', c0, {c0: 2048}, None),
        MemoryDep('buf333', c0, {c0: 2097152}, None)]
op329_op330_op331_op333.unmet_dependencies = 
    [   MemoryDep('buf294', c0, {c0: 2097152}, None),
        MemoryDep('buf311', c0, {c0: 2097152}, None),
        MemoryDep('buf328', c0, {c0: 2097152}, None)]
op329_op330_op331_op333.met_dependencies = 
    [   MemoryDep('arg208_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg218_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg219_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg220_1', c1, {c0: 2048, c1: 1024}, None)]
op329_op330_op331_op333.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf329.users = [
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=True, is_weak=False),
    ]
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf330.users = [NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False)]
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf331.users = [NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False)]
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf333.users = [NodeUser(node=ExternKernelSchedulerNode(name='op334'), can_inplace=False, is_weak=False)]
]
op329_op330_op331_op333.snodes[0] =
op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', c0, {c0: 2097152}, None)]
op329.unmet_dependencies = 
    [   MemoryDep('buf294', c0, {c0: 2097152}, None),
        MemoryDep('buf311', c0, {c0: 2097152}, None),
        MemoryDep('buf328', c0, {c0: 2097152}, None)]
op329.met_dependencies = 
    [   MemoryDep('arg208_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg218_1', c1, {c0: 2048, c1: 1024}, None)]
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf329.users = [
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=True, is_weak=False),
    ]
]
op329.group.device = cuda:0
op329.group.iteration = (2097152, 1)
op329.sizes = ([2048, 1024], [])
buf294_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op329_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf311', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg208_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf328', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg218_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf329', get_index_5, add_3, None)
        return store
op329 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op329_op330_op331_op333.snodes[1] =
op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 2048}, None)]
op330.unmet_dependencies = [MemoryDep('buf329', c0, {c0: 2097152}, None)]
op330.met_dependencies = []
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf330.users = [NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False)]
]
op330.group.device = cuda:0
op330.group.iteration = (2048, 1024)
op330.sizes = ([2048], [1024])
buf329_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op330_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf330', get_index_1, getitem)
        return store_reduction
op330 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op329_op330_op331_op333.snodes[2] =
op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 2048}, None)]
op331.unmet_dependencies = [MemoryDep('buf329', c0, {c0: 2097152}, None)]
op331.met_dependencies = []
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf331.users = [NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False)]
]
op331.group.device = cuda:0
op331.group.iteration = (2048, 1024)
op331.sizes = ([2048], [1024])
buf329_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op331_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf331', get_index_1, getitem_1)
        return store_reduction
op331 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op329_op330_op331_op333.snodes[3] =
op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 2097152}, None)]
op333.unmet_dependencies = 
    [   MemoryDep('buf329', c0, {c0: 2097152}, None),
        MemoryDep('buf330', c0, {c0: 2048}, None),
        MemoryDep('buf331', c0, {c0: 2048}, None)]
op333.met_dependencies = 
    [   MemoryDep('arg219_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg220_1', c1, {c0: 2048, c1: 1024}, None)]
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf333.users = [NodeUser(node=ExternKernelSchedulerNode(name='op334'), can_inplace=False, is_weak=False)]
]
op333.group.device = cuda:0
op333.group.iteration = (2097152, 1)
op333.sizes = ([2048, 1024], [])
buf329_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf331_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op333_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf330', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf331', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg219_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg220_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf333', get_index_5, add_1, None)
        return store
op333 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op329_op330_op331_op333 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op334: ExternKernelSchedulerNode(ExternKernelOut)
op334.writes = [StarDep(name='buf334', mode=None)]
op334.unmet_dependencies = [StarDep(name='buf333', mode=None)]
op334.met_dependencies = [StarDep(name='arg221_1', mode=None)]
op334.outputs = [
    buf334: ExternKernelOut
    buf334.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf334.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False)]
]
op334.node.kernel = extern_kernels.mm


op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 8388608}, None)]
op335.unmet_dependencies = [MemoryDep('buf334', c0, {c0: 8388608}, None)]
op335.met_dependencies = [MemoryDep('arg222_1', c1, {c0: 2048, c1: 4096}, None)]
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (8388608, 1)
op335.sizes = ([2048, 4096], [])
buf334_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op335_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf334', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg222_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf335', get_index_2, relu, None)
        return store
op335 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op336: ExternKernelSchedulerNode(ExternKernelOut)
op336.writes = [StarDep(name='buf336', mode=None)]
op336.unmet_dependencies = [StarDep(name='buf335', mode=None)]
op336.met_dependencies = [StarDep(name='arg223_1', mode=None)]
op336.outputs = [
    buf336: ExternKernelOut
    buf336.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf336.users = [
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=True, is_weak=False),
    ]
]
op336.node.kernel = extern_kernels.mm


op337_op338_op340: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op337_op338_op340.writes = 
    [   MemoryDep('buf337', c0, {c0: 2048}, None),
        MemoryDep('buf338', c0, {c0: 2048}, None),
        MemoryDep('buf340', c0, {c0: 2097152}, None)]
op337_op338_op340.unmet_dependencies = 
    [   MemoryDep('buf329', c0, {c0: 2097152}, None),
        MemoryDep('buf336', c0, {c0: 2097152}, None)]
op337_op338_op340.met_dependencies = 
    [   MemoryDep('arg224_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg225_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg226_1', c1, {c0: 2048, c1: 1024}, None)]
op337_op338_op340.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf337.users = [NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf338.users = [NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf340.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False),
    ]
]
op337_op338_op340.snodes[0] =
op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 2048}, None)]
op337.unmet_dependencies = 
    [   MemoryDep('buf329', c0, {c0: 2097152}, None),
        MemoryDep('buf336', c0, {c0: 2097152}, None)]
op337.met_dependencies = [MemoryDep('arg224_1', c1, {c0: 2048, c1: 1024}, None)]
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf337.users = [NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
]
op337.group.device = cuda:0
op337.group.iteration = (2048, 1024)
op337.sizes = ([2048], [1024])
buf329_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op337_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf336', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf337', get_index_3, getitem)
        return store_reduction
op337 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op337_op338_op340.snodes[1] =
op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 2048}, None)]
op338.unmet_dependencies = 
    [   MemoryDep('buf329', c0, {c0: 2097152}, None),
        MemoryDep('buf336', c0, {c0: 2097152}, None)]
op338.met_dependencies = [MemoryDep('arg224_1', c1, {c0: 2048, c1: 1024}, None)]
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf338.users = [NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
]
op338.group.device = cuda:0
op338.group.iteration = (2048, 1024)
op338.sizes = ([2048], [1024])
buf329_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op338_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf336', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf338', get_index_3, getitem_1)
        return store_reduction
op338 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op337_op338_op340.snodes[2] =
op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 2097152}, None)]
op340.unmet_dependencies = 
    [   MemoryDep('buf329', c0, {c0: 2097152}, None),
        MemoryDep('buf336', c0, {c0: 2097152}, None),
        MemoryDep('buf337', c0, {c0: 2048}, None),
        MemoryDep('buf338', c0, {c0: 2048}, None)]
op340.met_dependencies = 
    [   MemoryDep('arg224_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg225_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg226_1', c1, {c0: 2048, c1: 1024}, None)]
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf340.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False),
    ]
]
op340.group.device = cuda:0
op340.group.iteration = (2097152, 1)
op340.sizes = ([2048, 1024], [])
buf329_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf338_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op340_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf336', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf337', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf338', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg225_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg226_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf340', get_index_7, add_3, None)
        return store
op340 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op337_op338_op340 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op341: ExternKernelSchedulerNode(ExternKernelOut)
op341.writes = [StarDep(name='buf341', mode=None)]
op341.unmet_dependencies = [StarDep(name='buf340', mode=None)]
op341.met_dependencies = [StarDep(name='arg227_1', mode=None)]
op341.outputs = [
    buf341: ExternKernelOut
    buf341.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf341.users = [NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op341.node.kernel = extern_kernels.mm


op342: ExternKernelSchedulerNode(ExternKernelOut)
op342.writes = [StarDep(name='buf342', mode=None)]
op342.unmet_dependencies = [StarDep(name='buf340', mode=None)]
op342.met_dependencies = [StarDep(name='arg229_1', mode=None)]
op342.outputs = [
    buf342: ExternKernelOut
    buf342.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf342.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op342.node.kernel = extern_kernels.mm


op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 2097152}, None)]
op343.unmet_dependencies = [   MemoryDep('buf342', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op343.met_dependencies = [MemoryDep('arg230_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf343.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op343.group.device = cuda:0
op343.group.iteration = (2097152, 1)
op343.sizes = ([16, 16, 128, 64], [])
buf342_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op343_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf342', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg230_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf343', get_index_2, add, None)
        return store
op343 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op344: ExternKernelSchedulerNode(ExternKernelOut)
op344.writes = [StarDep(name='buf344', mode=None)]
op344.unmet_dependencies = [StarDep(name='buf340', mode=None)]
op344.met_dependencies = [StarDep(name='arg231_1', mode=None)]
op344.outputs = [
    buf344: ExternKernelOut
    buf344.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf344.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op344.node.kernel = extern_kernels.mm


op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 2097152}, None)]
op345.unmet_dependencies = [   MemoryDep('buf344', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op345.met_dependencies = [MemoryDep('arg232_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf345.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op345.group.device = cuda:0
op345.group.iteration = (2097152, 1)
op345.sizes = ([16, 16, 128, 64], [])
buf344_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op345_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg232_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf345', get_index_2, add, None)
        return store
op345 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', c0, {c0: 2097152}, None)]
op346.unmet_dependencies = [   MemoryDep('buf341', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op346.met_dependencies = [MemoryDep('arg228_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf346.users = [NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op346.group.device = cuda:0
op346.group.iteration = (2097152, 1)
op346.sizes = ([16, 16, 128, 64], [])
buf341_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf346_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op346_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf341', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg228_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf346', get_index_2, add, None)
        return store
op346 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op347: SchedulerNode(ComputedBuffer)
op347.writes = [MemoryDep('buf347', c0, {c0: 4194304}, None)]
op347.unmet_dependencies = []
op347.met_dependencies = []
op347.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf347.users = [NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op347.group.device = cuda:0
op347.group.iteration = (4194304, 1)
op347.sizes = ([256, 128, 128], [])
buf347_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op347_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 128}
    index0 = z2
    index1 = z1 + 1
    index2 = 16384*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf347', get_index_2, where, None)
        return store
op347 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op348: ExternKernelSchedulerNode(FallbackKernel)
op348.writes = [StarDep(name='buf348', mode=None)]
op348.unmet_dependencies = 
    [   StarDep(name='buf343', mode=None),
        StarDep(name='buf345', mode=None),
        StarDep(name='buf346', mode=None),
        StarDep(name='buf347', mode=None)]
op348.met_dependencies = []
op348.outputs = [
    buf348: FallbackKernel
    buf348.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf348.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op352'), can_inplace=False, is_weak=False),
    ]
]
op348.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op349: ExternKernelSchedulerNode(MultiOutput)
op349.writes = [StarDep(name='buf349', mode=None)]
op349.unmet_dependencies = [StarDep(name='buf348', mode=None)]
op349.met_dependencies = []
op349.outputs = [
    buf349: MultiOutput
    buf349.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf349.users = [NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op349.node.kernel = None


op353: ExternKernelSchedulerNode(ExternKernelOut)
op353.writes = [StarDep(name='buf353', mode=None)]
op353.unmet_dependencies = [StarDep(name='buf349', mode=None)]
op353.met_dependencies = [StarDep(name='arg233_1', mode=None)]
op353.outputs = [
    buf353: ExternKernelOut
    buf353.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf353.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=True, is_weak=False)]
]
op353.node.kernel = extern_kernels.mm


op354_op355_op356_op358: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op354_op355_op356_op358.writes = 
    [   MemoryDep('buf354', c0, {c0: 2097152}, None),
        MemoryDep('buf355', c0, {c0: 2048}, None),
        MemoryDep('buf356', c0, {c0: 2048}, None),
        MemoryDep('buf358', c0, {c0: 2097152}, None)]
op354_op355_op356_op358.unmet_dependencies = 
    [   MemoryDep('buf329', c0, {c0: 2097152}, None),
        MemoryDep('buf336', c0, {c0: 2097152}, None),
        MemoryDep('buf353', c0, {c0: 2097152}, None)]
op354_op355_op356_op358.met_dependencies = 
    [   MemoryDep('arg224_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg234_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg235_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg236_1', c1, {c0: 2048, c1: 1024}, None)]
op354_op355_op356_op358.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf354.users = [
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=True, is_weak=False),
    ]
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf355.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf356.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf358.users = [NodeUser(node=ExternKernelSchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
]
op354_op355_op356_op358.snodes[0] =
op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 2097152}, None)]
op354.unmet_dependencies = 
    [   MemoryDep('buf329', c0, {c0: 2097152}, None),
        MemoryDep('buf336', c0, {c0: 2097152}, None),
        MemoryDep('buf353', c0, {c0: 2097152}, None)]
op354.met_dependencies = 
    [   MemoryDep('arg224_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg234_1', c1, {c0: 2048, c1: 1024}, None)]
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf354.users = [
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=True, is_weak=False),
    ]
]
op354.group.device = cuda:0
op354.group.iteration = (2097152, 1)
op354.sizes = ([2048, 1024], [])
buf329_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op354_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf336', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf353', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg234_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf354', get_index_5, add_3, None)
        return store
op354 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op354_op355_op356_op358.snodes[1] =
op355: SchedulerNode(ComputedBuffer)
op355.writes = [MemoryDep('buf355', c0, {c0: 2048}, None)]
op355.unmet_dependencies = [MemoryDep('buf354', c0, {c0: 2097152}, None)]
op355.met_dependencies = []
op355.outputs = [
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf355.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op355.group.device = cuda:0
op355.group.iteration = (2048, 1024)
op355.sizes = ([2048], [1024])
buf354_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op355_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf355', get_index_1, getitem)
        return store_reduction
op355 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op354_op355_op356_op358.snodes[2] =
op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 2048}, None)]
op356.unmet_dependencies = [MemoryDep('buf354', c0, {c0: 2097152}, None)]
op356.met_dependencies = []
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf356.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op356.group.device = cuda:0
op356.group.iteration = (2048, 1024)
op356.sizes = ([2048], [1024])
buf354_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op356_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf356', get_index_1, getitem_1)
        return store_reduction
op356 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op354_op355_op356_op358.snodes[3] =
op358: SchedulerNode(ComputedBuffer)
op358.writes = [MemoryDep('buf358', c0, {c0: 2097152}, None)]
op358.unmet_dependencies = 
    [   MemoryDep('buf354', c0, {c0: 2097152}, None),
        MemoryDep('buf355', c0, {c0: 2048}, None),
        MemoryDep('buf356', c0, {c0: 2048}, None)]
op358.met_dependencies = 
    [   MemoryDep('arg235_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg236_1', c1, {c0: 2048, c1: 1024}, None)]
op358.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf358.users = [NodeUser(node=ExternKernelSchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
]
op358.group.device = cuda:0
op358.group.iteration = (2097152, 1)
op358.sizes = ([2048, 1024], [])
buf354_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf356_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf358_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op358_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf355', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf356', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg235_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg236_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf358', get_index_5, add_1, None)
        return store
op358 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op354_op355_op356_op358 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op359: ExternKernelSchedulerNode(ExternKernelOut)
op359.writes = [StarDep(name='buf359', mode=None)]
op359.unmet_dependencies = [StarDep(name='buf358', mode=None)]
op359.met_dependencies = [StarDep(name='arg237_1', mode=None)]
op359.outputs = [
    buf359: ExternKernelOut
    buf359.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf359.users = [NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
]
op359.node.kernel = extern_kernels.mm


op360: ExternKernelSchedulerNode(ExternKernelOut)
op360.writes = [StarDep(name='buf360', mode=None)]
op360.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op360.met_dependencies = [StarDep(name='arg239_1', mode=None)]
op360.outputs = [
    buf360: ExternKernelOut
    buf360.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf360.users = [NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op360.node.kernel = extern_kernels.mm


op361: SchedulerNode(ComputedBuffer)
op361.writes = [MemoryDep('buf361', c0, {c0: 2097152}, None)]
op361.unmet_dependencies = [   MemoryDep('buf360', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op361.met_dependencies = [MemoryDep('arg240_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op361.outputs = [
    buf361: ComputedBuffer
    buf361.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf361.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op361.group.device = cuda:0
op361.group.iteration = (2097152, 1)
op361.sizes = ([16, 16, 128, 64], [])
buf360_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf361_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op361_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf360', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg240_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf361', get_index_2, add, None)
        return store
op361 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op362: ExternKernelSchedulerNode(ExternKernelOut)
op362.writes = [StarDep(name='buf362', mode=None)]
op362.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op362.met_dependencies = [StarDep(name='arg241_1', mode=None)]
op362.outputs = [
    buf362: ExternKernelOut
    buf362.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf362.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
]
op362.node.kernel = extern_kernels.mm


op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 2097152}, None)]
op363.unmet_dependencies = [   MemoryDep('buf362', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op363.met_dependencies = [MemoryDep('arg242_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf363.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op363.group.device = cuda:0
op363.group.iteration = (2097152, 1)
op363.sizes = ([16, 16, 128, 64], [])
buf362_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op363_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf362', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg242_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf363', get_index_2, add, None)
        return store
op363 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 2097152}, None)]
op364.unmet_dependencies = [   MemoryDep('buf359', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op364.met_dependencies = [MemoryDep('arg238_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf364.users = [NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
]
op364.group.device = cuda:0
op364.group.iteration = (2097152, 1)
op364.sizes = ([16, 16, 128, 64], [])
buf359_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op364_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg238_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf364', get_index_2, add, None)
        return store
op364 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op365: ExternKernelSchedulerNode(FallbackKernel)
op365.writes = [StarDep(name='buf365', mode=None)]
op365.unmet_dependencies = 
    [   StarDep(name='buf361', mode=None),
        StarDep(name='buf363', mode=None),
        StarDep(name='buf364', mode=None)]
op365.met_dependencies = []
op365.outputs = [
    buf365: FallbackKernel
    buf365.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf365.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op369'), can_inplace=False, is_weak=False),
    ]
]
op365.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op366: ExternKernelSchedulerNode(MultiOutput)
op366.writes = [StarDep(name='buf366', mode=None)]
op366.unmet_dependencies = [StarDep(name='buf365', mode=None)]
op366.met_dependencies = []
op366.outputs = [
    buf366: MultiOutput
    buf366.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf366.users = [NodeUser(node=ExternKernelSchedulerNode(name='op370'), can_inplace=False, is_weak=False)]
]
op366.node.kernel = None


op370: ExternKernelSchedulerNode(ExternKernelOut)
op370.writes = [StarDep(name='buf370', mode=None)]
op370.unmet_dependencies = [StarDep(name='buf366', mode=None)]
op370.met_dependencies = [StarDep(name='arg243_1', mode=None)]
op370.outputs = [
    buf370: ExternKernelOut
    buf370.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf370.users = [
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=True, is_weak=False),
    ]
]
op370.node.kernel = extern_kernels.mm


op371_op372_op374: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op371_op372_op374.writes = 
    [   MemoryDep('buf371', c0, {c0: 2048}, None),
        MemoryDep('buf372', c0, {c0: 2048}, None),
        MemoryDep('buf374', c0, {c0: 2097152}, None)]
op371_op372_op374.unmet_dependencies = 
    [   MemoryDep('buf354', c0, {c0: 2097152}, None),
        MemoryDep('buf370', c0, {c0: 2097152}, None)]
op371_op372_op374.met_dependencies = 
    [   MemoryDep('arg244_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg245_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg246_1', c1, {c0: 2048, c1: 1024}, None)]
op371_op372_op374.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf371.users = [NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf372.users = [NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf374.users = [NodeUser(node=ExternKernelSchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
]
op371_op372_op374.snodes[0] =
op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', c0, {c0: 2048}, None)]
op371.unmet_dependencies = 
    [   MemoryDep('buf354', c0, {c0: 2097152}, None),
        MemoryDep('buf370', c0, {c0: 2097152}, None)]
op371.met_dependencies = [MemoryDep('arg244_1', c1, {c0: 2048, c1: 1024}, None)]
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf371.users = [NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op371.group.device = cuda:0
op371.group.iteration = (2048, 1024)
op371.sizes = ([2048], [1024])
buf354_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op371_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf370', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg244_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf371', get_index_3, getitem)
        return store_reduction
op371 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op371_op372_op374.snodes[1] =
op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 2048}, None)]
op372.unmet_dependencies = 
    [   MemoryDep('buf354', c0, {c0: 2097152}, None),
        MemoryDep('buf370', c0, {c0: 2097152}, None)]
op372.met_dependencies = [MemoryDep('arg244_1', c1, {c0: 2048, c1: 1024}, None)]
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf372.users = [NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op372.group.device = cuda:0
op372.group.iteration = (2048, 1024)
op372.sizes = ([2048], [1024])
buf354_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf372_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op372_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf370', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg244_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf372', get_index_3, getitem_1)
        return store_reduction
op372 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op371_op372_op374.snodes[2] =
op374: SchedulerNode(ComputedBuffer)
op374.writes = [MemoryDep('buf374', c0, {c0: 2097152}, None)]
op374.unmet_dependencies = 
    [   MemoryDep('buf354', c0, {c0: 2097152}, None),
        MemoryDep('buf370', c0, {c0: 2097152}, None),
        MemoryDep('buf371', c0, {c0: 2048}, None),
        MemoryDep('buf372', c0, {c0: 2048}, None)]
op374.met_dependencies = 
    [   MemoryDep('arg244_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg245_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg246_1', c1, {c0: 2048, c1: 1024}, None)]
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf374.users = [NodeUser(node=ExternKernelSchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
]
op374.group.device = cuda:0
op374.group.iteration = (2097152, 1)
op374.sizes = ([2048, 1024], [])
buf354_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf372_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op374_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf370', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg244_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf371', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf372', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg245_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg246_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf374', get_index_7, add_3, None)
        return store
op374 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op371_op372_op374 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op375: ExternKernelSchedulerNode(ExternKernelOut)
op375.writes = [StarDep(name='buf375', mode=None)]
op375.unmet_dependencies = [StarDep(name='buf374', mode=None)]
op375.met_dependencies = [StarDep(name='arg247_1', mode=None)]
op375.outputs = [
    buf375: ExternKernelOut
    buf375.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf375.users = [NodeUser(node=SchedulerNode(name='op376'), can_inplace=True, is_weak=False)]
]
op375.node.kernel = extern_kernels.mm


op376: SchedulerNode(ComputedBuffer)
op376.writes = [MemoryDep('buf376', c0, {c0: 8388608}, None)]
op376.unmet_dependencies = [MemoryDep('buf375', c0, {c0: 8388608}, None)]
op376.met_dependencies = [MemoryDep('arg248_1', c1, {c0: 2048, c1: 4096}, None)]
op376.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf376.users = [NodeUser(node=ExternKernelSchedulerNode(name='op377'), can_inplace=False, is_weak=False)]
]
op376.group.device = cuda:0
op376.group.iteration = (8388608, 1)
op376.sizes = ([2048, 4096], [])
buf375_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op376_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf375', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg248_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf376', get_index_2, relu, None)
        return store
op376 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op377: ExternKernelSchedulerNode(ExternKernelOut)
op377.writes = [StarDep(name='buf377', mode=None)]
op377.unmet_dependencies = [StarDep(name='buf376', mode=None)]
op377.met_dependencies = [StarDep(name='arg249_1', mode=None)]
op377.outputs = [
    buf377: ExternKernelOut
    buf377.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf377.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=True, is_weak=False)]
]
op377.node.kernel = extern_kernels.mm


op378_op379_op380_op382: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op378_op379_op380_op382.writes = 
    [   MemoryDep('buf378', c0, {c0: 2097152}, None),
        MemoryDep('buf379', c0, {c0: 2048}, None),
        MemoryDep('buf380', c0, {c0: 2048}, None),
        MemoryDep('buf382', c0, {c0: 2097152}, None)]
op378_op379_op380_op382.unmet_dependencies = 
    [   MemoryDep('buf354', c0, {c0: 2097152}, None),
        MemoryDep('buf370', c0, {c0: 2097152}, None),
        MemoryDep('buf377', c0, {c0: 2097152}, None)]
op378_op379_op380_op382.met_dependencies = 
    [   MemoryDep('arg244_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg250_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg251_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg252_1', c1, {c0: 2048, c1: 1024}, None)]
op378_op379_op380_op382.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf378.users = [
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=True, is_weak=False),
    ]
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf379.users = [NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf380.users = [NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf382.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op386'), can_inplace=False, is_weak=False),
    ]
]
op378_op379_op380_op382.snodes[0] =
op378: SchedulerNode(ComputedBuffer)
op378.writes = [MemoryDep('buf378', c0, {c0: 2097152}, None)]
op378.unmet_dependencies = 
    [   MemoryDep('buf354', c0, {c0: 2097152}, None),
        MemoryDep('buf370', c0, {c0: 2097152}, None),
        MemoryDep('buf377', c0, {c0: 2097152}, None)]
op378.met_dependencies = 
    [   MemoryDep('arg244_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg250_1', c1, {c0: 2048, c1: 1024}, None)]
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf378.users = [
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=True, is_weak=False),
    ]
]
op378.group.device = cuda:0
op378.group.iteration = (2097152, 1)
op378.sizes = ([2048, 1024], [])
buf354_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf378_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op378_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf370', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg244_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf377', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg250_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf378', get_index_5, add_3, None)
        return store
op378 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op378_op379_op380_op382.snodes[1] =
op379: SchedulerNode(ComputedBuffer)
op379.writes = [MemoryDep('buf379', c0, {c0: 2048}, None)]
op379.unmet_dependencies = [MemoryDep('buf378', c0, {c0: 2097152}, None)]
op379.met_dependencies = []
op379.outputs = [
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf379.users = [NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
]
op379.group.device = cuda:0
op379.group.iteration = (2048, 1024)
op379.sizes = ([2048], [1024])
buf378_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op379_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf379', get_index_1, getitem)
        return store_reduction
op379 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op378_op379_op380_op382.snodes[2] =
op380: SchedulerNode(ComputedBuffer)
op380.writes = [MemoryDep('buf380', c0, {c0: 2048}, None)]
op380.unmet_dependencies = [MemoryDep('buf378', c0, {c0: 2097152}, None)]
op380.met_dependencies = []
op380.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf380.users = [NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
]
op380.group.device = cuda:0
op380.group.iteration = (2048, 1024)
op380.sizes = ([2048], [1024])
buf378_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf380_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op380_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf380', get_index_1, getitem_1)
        return store_reduction
op380 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op378_op379_op380_op382.snodes[3] =
op382: SchedulerNode(ComputedBuffer)
op382.writes = [MemoryDep('buf382', c0, {c0: 2097152}, None)]
op382.unmet_dependencies = 
    [   MemoryDep('buf378', c0, {c0: 2097152}, None),
        MemoryDep('buf379', c0, {c0: 2048}, None),
        MemoryDep('buf380', c0, {c0: 2048}, None)]
op382.met_dependencies = 
    [   MemoryDep('arg251_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg252_1', c1, {c0: 2048, c1: 1024}, None)]
op382.outputs = [
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf382.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op386'), can_inplace=False, is_weak=False),
    ]
]
op382.group.device = cuda:0
op382.group.iteration = (2097152, 1)
op382.sizes = ([2048, 1024], [])
buf378_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf380_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf382_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op382_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf379', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf380', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg251_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg252_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf382', get_index_5, add_1, None)
        return store
op382 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op378_op379_op380_op382 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op383: ExternKernelSchedulerNode(ExternKernelOut)
op383.writes = [StarDep(name='buf383', mode=None)]
op383.unmet_dependencies = [StarDep(name='buf382', mode=None)]
op383.met_dependencies = [StarDep(name='arg253_1', mode=None)]
op383.outputs = [
    buf383: ExternKernelOut
    buf383.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf383.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
]
op383.node.kernel = extern_kernels.mm


op384: ExternKernelSchedulerNode(ExternKernelOut)
op384.writes = [StarDep(name='buf384', mode=None)]
op384.unmet_dependencies = [StarDep(name='buf382', mode=None)]
op384.met_dependencies = [StarDep(name='arg255_1', mode=None)]
op384.outputs = [
    buf384: ExternKernelOut
    buf384.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf384.users = [NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False)]
]
op384.node.kernel = extern_kernels.mm


op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 2097152}, None)]
op385.unmet_dependencies = [   MemoryDep('buf384', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op385.met_dependencies = [MemoryDep('arg256_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf385.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op385.group.device = cuda:0
op385.group.iteration = (2097152, 1)
op385.sizes = ([16, 16, 128, 64], [])
buf384_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op385_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg256_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf385', get_index_2, add, None)
        return store
op385 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op386: ExternKernelSchedulerNode(ExternKernelOut)
op386.writes = [StarDep(name='buf386', mode=None)]
op386.unmet_dependencies = [StarDep(name='buf382', mode=None)]
op386.met_dependencies = [StarDep(name='arg257_1', mode=None)]
op386.outputs = [
    buf386: ExternKernelOut
    buf386.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf386.users = [NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False)]
]
op386.node.kernel = extern_kernels.mm


op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', c0, {c0: 2097152}, None)]
op387.unmet_dependencies = [   MemoryDep('buf386', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op387.met_dependencies = [MemoryDep('arg258_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf387.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op387.group.device = cuda:0
op387.group.iteration = (2097152, 1)
op387.sizes = ([16, 16, 128, 64], [])
buf386_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op387_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf386', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg258_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf387', get_index_2, add, None)
        return store
op387 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 2097152}, None)]
op388.unmet_dependencies = [   MemoryDep('buf383', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op388.met_dependencies = [MemoryDep('arg254_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf388.users = [NodeUser(node=ExternKernelSchedulerNode(name='op390'), can_inplace=False, is_weak=False)]
]
op388.group.device = cuda:0
op388.group.iteration = (2097152, 1)
op388.sizes = ([16, 16, 128, 64], [])
buf383_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op388_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg254_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf388', get_index_2, add, None)
        return store
op388 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op389: SchedulerNode(ComputedBuffer)
op389.writes = [MemoryDep('buf389', c0, {c0: 4194304}, None)]
op389.unmet_dependencies = []
op389.met_dependencies = []
op389.outputs = [
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf389.users = [NodeUser(node=ExternKernelSchedulerNode(name='op390'), can_inplace=False, is_weak=False)]
]
op389.group.device = cuda:0
op389.group.iteration = (4194304, 1)
op389.sizes = ([256, 128, 128], [])
buf389_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op389_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 128}
    index0 = z2
    index1 = z1 + 1
    index2 = 16384*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf389', get_index_2, where, None)
        return store
op389 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op390: ExternKernelSchedulerNode(FallbackKernel)
op390.writes = [StarDep(name='buf390', mode=None)]
op390.unmet_dependencies = 
    [   StarDep(name='buf385', mode=None),
        StarDep(name='buf387', mode=None),
        StarDep(name='buf388', mode=None),
        StarDep(name='buf389', mode=None)]
op390.met_dependencies = []
op390.outputs = [
    buf390: FallbackKernel
    buf390.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf390.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op391'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op394'), can_inplace=False, is_weak=False),
    ]
]
op390.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op391: ExternKernelSchedulerNode(MultiOutput)
op391.writes = [StarDep(name='buf391', mode=None)]
op391.unmet_dependencies = [StarDep(name='buf390', mode=None)]
op391.met_dependencies = []
op391.outputs = [
    buf391: MultiOutput
    buf391.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf391.users = [NodeUser(node=ExternKernelSchedulerNode(name='op395'), can_inplace=False, is_weak=False)]
]
op391.node.kernel = None


op395: ExternKernelSchedulerNode(ExternKernelOut)
op395.writes = [StarDep(name='buf395', mode=None)]
op395.unmet_dependencies = [StarDep(name='buf391', mode=None)]
op395.met_dependencies = [StarDep(name='arg259_1', mode=None)]
op395.outputs = [
    buf395: ExternKernelOut
    buf395.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf395.users = [
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=True, is_weak=False),
    ]
]
op395.node.kernel = extern_kernels.mm


op396_op397_op399: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op396_op397_op399.writes = 
    [   MemoryDep('buf396', c0, {c0: 2048}, None),
        MemoryDep('buf397', c0, {c0: 2048}, None),
        MemoryDep('buf399', c0, {c0: 2097152}, None)]
op396_op397_op399.unmet_dependencies = 
    [   MemoryDep('buf378', c0, {c0: 2097152}, None),
        MemoryDep('buf395', c0, {c0: 2097152}, None)]
op396_op397_op399.met_dependencies = 
    [   MemoryDep('arg260_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg261_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg262_1', c1, {c0: 2048, c1: 1024}, None)]
op396_op397_op399.outputs = [
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf396.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf397.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf399.users = [NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False)]
]
op396_op397_op399.snodes[0] =
op396: SchedulerNode(ComputedBuffer)
op396.writes = [MemoryDep('buf396', c0, {c0: 2048}, None)]
op396.unmet_dependencies = 
    [   MemoryDep('buf378', c0, {c0: 2097152}, None),
        MemoryDep('buf395', c0, {c0: 2097152}, None)]
op396.met_dependencies = [MemoryDep('arg260_1', c1, {c0: 2048, c1: 1024}, None)]
op396.outputs = [
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf396.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op396.group.device = cuda:0
op396.group.iteration = (2048, 1024)
op396.sizes = ([2048], [1024])
buf378_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf396_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op396_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf395', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg260_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf396', get_index_3, getitem)
        return store_reduction
op396 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op396_op397_op399.snodes[1] =
op397: SchedulerNode(ComputedBuffer)
op397.writes = [MemoryDep('buf397', c0, {c0: 2048}, None)]
op397.unmet_dependencies = 
    [   MemoryDep('buf378', c0, {c0: 2097152}, None),
        MemoryDep('buf395', c0, {c0: 2097152}, None)]
op397.met_dependencies = [MemoryDep('arg260_1', c1, {c0: 2048, c1: 1024}, None)]
op397.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf397.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op397.group.device = cuda:0
op397.group.iteration = (2048, 1024)
op397.sizes = ([2048], [1024])
buf378_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op397_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf395', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg260_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf397', get_index_3, getitem_1)
        return store_reduction
op397 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op396_op397_op399.snodes[2] =
op399: SchedulerNode(ComputedBuffer)
op399.writes = [MemoryDep('buf399', c0, {c0: 2097152}, None)]
op399.unmet_dependencies = 
    [   MemoryDep('buf378', c0, {c0: 2097152}, None),
        MemoryDep('buf395', c0, {c0: 2097152}, None),
        MemoryDep('buf396', c0, {c0: 2048}, None),
        MemoryDep('buf397', c0, {c0: 2048}, None)]
op399.met_dependencies = 
    [   MemoryDep('arg260_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg261_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg262_1', c1, {c0: 2048, c1: 1024}, None)]
op399.outputs = [
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf399.users = [NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False)]
]
op399.group.device = cuda:0
op399.group.iteration = (2097152, 1)
op399.sizes = ([2048, 1024], [])
buf378_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf396_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf397_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op399_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf395', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg260_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf396', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf397', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg261_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg262_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf399', get_index_7, add_3, None)
        return store
op399 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op396_op397_op399 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op400: ExternKernelSchedulerNode(ExternKernelOut)
op400.writes = [StarDep(name='buf400', mode=None)]
op400.unmet_dependencies = [StarDep(name='buf399', mode=None)]
op400.met_dependencies = [StarDep(name='arg263_1', mode=None)]
op400.outputs = [
    buf400: ExternKernelOut
    buf400.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf400.users = [NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False)]
]
op400.node.kernel = extern_kernels.mm


op401: ExternKernelSchedulerNode(ExternKernelOut)
op401.writes = [StarDep(name='buf401', mode=None)]
op401.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op401.met_dependencies = [StarDep(name='arg265_1', mode=None)]
op401.outputs = [
    buf401: ExternKernelOut
    buf401.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf401.users = [NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False)]
]
op401.node.kernel = extern_kernels.mm


op402: SchedulerNode(ComputedBuffer)
op402.writes = [MemoryDep('buf402', c0, {c0: 2097152}, None)]
op402.unmet_dependencies = [   MemoryDep('buf401', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op402.met_dependencies = [MemoryDep('arg266_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op402.outputs = [
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf402.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op402.group.device = cuda:0
op402.group.iteration = (2097152, 1)
op402.sizes = ([16, 16, 128, 64], [])
buf401_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op402_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf401', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg266_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf402', get_index_2, add, None)
        return store
op402 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op403: ExternKernelSchedulerNode(ExternKernelOut)
op403.writes = [StarDep(name='buf403', mode=None)]
op403.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op403.met_dependencies = [StarDep(name='arg267_1', mode=None)]
op403.outputs = [
    buf403: ExternKernelOut
    buf403.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf403.users = [NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False)]
]
op403.node.kernel = extern_kernels.mm


op404: SchedulerNode(ComputedBuffer)
op404.writes = [MemoryDep('buf404', c0, {c0: 2097152}, None)]
op404.unmet_dependencies = [   MemoryDep('buf403', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op404.met_dependencies = [MemoryDep('arg268_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op404.outputs = [
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf404.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op404.group.device = cuda:0
op404.group.iteration = (2097152, 1)
op404.sizes = ([16, 16, 128, 64], [])
buf403_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf404_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op404_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg268_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf404', get_index_2, add, None)
        return store
op404 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op405: SchedulerNode(ComputedBuffer)
op405.writes = [MemoryDep('buf405', c0, {c0: 2097152}, None)]
op405.unmet_dependencies = [   MemoryDep('buf400', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op405.met_dependencies = [MemoryDep('arg264_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op405.outputs = [
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf405.users = [NodeUser(node=ExternKernelSchedulerNode(name='op406'), can_inplace=False, is_weak=False)]
]
op405.group.device = cuda:0
op405.group.iteration = (2097152, 1)
op405.sizes = ([16, 16, 128, 64], [])
buf400_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf405_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op405_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg264_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf405', get_index_2, add, None)
        return store
op405 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op406: ExternKernelSchedulerNode(FallbackKernel)
op406.writes = [StarDep(name='buf406', mode=None)]
op406.unmet_dependencies = 
    [   StarDep(name='buf402', mode=None),
        StarDep(name='buf404', mode=None),
        StarDep(name='buf405', mode=None)]
op406.met_dependencies = []
op406.outputs = [
    buf406: FallbackKernel
    buf406.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf406.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op407'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op410'), can_inplace=False, is_weak=False),
    ]
]
op406.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op407: ExternKernelSchedulerNode(MultiOutput)
op407.writes = [StarDep(name='buf407', mode=None)]
op407.unmet_dependencies = [StarDep(name='buf406', mode=None)]
op407.met_dependencies = []
op407.outputs = [
    buf407: MultiOutput
    buf407.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf407.users = [NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False)]
]
op407.node.kernel = None


op411: ExternKernelSchedulerNode(ExternKernelOut)
op411.writes = [StarDep(name='buf411', mode=None)]
op411.unmet_dependencies = [StarDep(name='buf407', mode=None)]
op411.met_dependencies = [StarDep(name='arg269_1', mode=None)]
op411.outputs = [
    buf411: ExternKernelOut
    buf411.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf411.users = [NodeUser(node=SchedulerNode(name='op412'), can_inplace=True, is_weak=False)]
]
op411.node.kernel = extern_kernels.mm


op412_op413_op414_op416: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op412_op413_op414_op416.writes = 
    [   MemoryDep('buf412', c0, {c0: 2097152}, None),
        MemoryDep('buf413', c0, {c0: 2048}, None),
        MemoryDep('buf414', c0, {c0: 2048}, None),
        MemoryDep('buf416', c0, {c0: 2097152}, None)]
op412_op413_op414_op416.unmet_dependencies = 
    [   MemoryDep('buf378', c0, {c0: 2097152}, None),
        MemoryDep('buf395', c0, {c0: 2097152}, None),
        MemoryDep('buf411', c0, {c0: 2097152}, None)]
op412_op413_op414_op416.met_dependencies = 
    [   MemoryDep('arg260_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg270_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg271_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg272_1', c1, {c0: 2048, c1: 1024}, None)]
op412_op413_op414_op416.outputs = [
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf412.users = [
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op423'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=True, is_weak=False),
    ]
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf413.users = [NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf414.users = [NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf416.users = [NodeUser(node=ExternKernelSchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
]
op412_op413_op414_op416.snodes[0] =
op412: SchedulerNode(ComputedBuffer)
op412.writes = [MemoryDep('buf412', c0, {c0: 2097152}, None)]
op412.unmet_dependencies = 
    [   MemoryDep('buf378', c0, {c0: 2097152}, None),
        MemoryDep('buf395', c0, {c0: 2097152}, None),
        MemoryDep('buf411', c0, {c0: 2097152}, None)]
op412.met_dependencies = 
    [   MemoryDep('arg260_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg270_1', c1, {c0: 2048, c1: 1024}, None)]
op412.outputs = [
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf412.users = [
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op423'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=True, is_weak=False),
    ]
]
op412.group.device = cuda:0
op412.group.iteration = (2097152, 1)
op412.sizes = ([2048, 1024], [])
buf378_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf411_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op412_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf395', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg260_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf411', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg270_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf412', get_index_5, add_3, None)
        return store
op412 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op412_op413_op414_op416.snodes[1] =
op413: SchedulerNode(ComputedBuffer)
op413.writes = [MemoryDep('buf413', c0, {c0: 2048}, None)]
op413.unmet_dependencies = [MemoryDep('buf412', c0, {c0: 2097152}, None)]
op413.met_dependencies = []
op413.outputs = [
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf413.users = [NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
]
op413.group.device = cuda:0
op413.group.iteration = (2048, 1024)
op413.sizes = ([2048], [1024])
buf412_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op413_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf413', get_index_1, getitem)
        return store_reduction
op413 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op412_op413_op414_op416.snodes[2] =
op414: SchedulerNode(ComputedBuffer)
op414.writes = [MemoryDep('buf414', c0, {c0: 2048}, None)]
op414.unmet_dependencies = [MemoryDep('buf412', c0, {c0: 2097152}, None)]
op414.met_dependencies = []
op414.outputs = [
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf414.users = [NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
]
op414.group.device = cuda:0
op414.group.iteration = (2048, 1024)
op414.sizes = ([2048], [1024])
buf412_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op414_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf414', get_index_1, getitem_1)
        return store_reduction
op414 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op412_op413_op414_op416.snodes[3] =
op416: SchedulerNode(ComputedBuffer)
op416.writes = [MemoryDep('buf416', c0, {c0: 2097152}, None)]
op416.unmet_dependencies = 
    [   MemoryDep('buf412', c0, {c0: 2097152}, None),
        MemoryDep('buf413', c0, {c0: 2048}, None),
        MemoryDep('buf414', c0, {c0: 2048}, None)]
op416.met_dependencies = 
    [   MemoryDep('arg271_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg272_1', c1, {c0: 2048, c1: 1024}, None)]
op416.outputs = [
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf416.users = [NodeUser(node=ExternKernelSchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
]
op416.group.device = cuda:0
op416.group.iteration = (2097152, 1)
op416.sizes = ([2048, 1024], [])
buf412_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf414_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf416_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op416_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf413', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf414', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg271_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg272_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf416', get_index_5, add_1, None)
        return store
op416 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op412_op413_op414_op416 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op417: ExternKernelSchedulerNode(ExternKernelOut)
op417.writes = [StarDep(name='buf417', mode=None)]
op417.unmet_dependencies = [StarDep(name='buf416', mode=None)]
op417.met_dependencies = [StarDep(name='arg273_1', mode=None)]
op417.outputs = [
    buf417: ExternKernelOut
    buf417.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf417.users = [NodeUser(node=SchedulerNode(name='op418'), can_inplace=True, is_weak=False)]
]
op417.node.kernel = extern_kernels.mm


op418: SchedulerNode(ComputedBuffer)
op418.writes = [MemoryDep('buf418', c0, {c0: 8388608}, None)]
op418.unmet_dependencies = [MemoryDep('buf417', c0, {c0: 8388608}, None)]
op418.met_dependencies = [MemoryDep('arg274_1', c1, {c0: 2048, c1: 4096}, None)]
op418.outputs = [
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf418.users = [NodeUser(node=ExternKernelSchedulerNode(name='op419'), can_inplace=False, is_weak=False)]
]
op418.group.device = cuda:0
op418.group.iteration = (8388608, 1)
op418.sizes = ([2048, 4096], [])
buf417_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf418_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op418_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf417', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg274_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf418', get_index_2, relu, None)
        return store
op418 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op419: ExternKernelSchedulerNode(ExternKernelOut)
op419.writes = [StarDep(name='buf419', mode=None)]
op419.unmet_dependencies = [StarDep(name='buf418', mode=None)]
op419.met_dependencies = [StarDep(name='arg275_1', mode=None)]
op419.outputs = [
    buf419: ExternKernelOut
    buf419.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf419.users = [
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op423'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=True, is_weak=False),
    ]
]
op419.node.kernel = extern_kernels.mm


op420_op421_op423: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op420_op421_op423.writes = 
    [   MemoryDep('buf420', c0, {c0: 2048}, None),
        MemoryDep('buf421', c0, {c0: 2048}, None),
        MemoryDep('buf423', c0, {c0: 2097152}, None)]
op420_op421_op423.unmet_dependencies = 
    [   MemoryDep('buf412', c0, {c0: 2097152}, None),
        MemoryDep('buf419', c0, {c0: 2097152}, None)]
op420_op421_op423.met_dependencies = 
    [   MemoryDep('arg276_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg277_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg278_1', c1, {c0: 2048, c1: 1024}, None)]
op420_op421_op423.outputs = [
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf420.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf421.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf423.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op424'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op427'), can_inplace=False, is_weak=False),
    ]
]
op420_op421_op423.snodes[0] =
op420: SchedulerNode(ComputedBuffer)
op420.writes = [MemoryDep('buf420', c0, {c0: 2048}, None)]
op420.unmet_dependencies = 
    [   MemoryDep('buf412', c0, {c0: 2097152}, None),
        MemoryDep('buf419', c0, {c0: 2097152}, None)]
op420.met_dependencies = [MemoryDep('arg276_1', c1, {c0: 2048, c1: 1024}, None)]
op420.outputs = [
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf420.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
]
op420.group.device = cuda:0
op420.group.iteration = (2048, 1024)
op420.sizes = ([2048], [1024])
buf412_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf420_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op420_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf419', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg276_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf420', get_index_3, getitem)
        return store_reduction
op420 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op420_op421_op423.snodes[1] =
op421: SchedulerNode(ComputedBuffer)
op421.writes = [MemoryDep('buf421', c0, {c0: 2048}, None)]
op421.unmet_dependencies = 
    [   MemoryDep('buf412', c0, {c0: 2097152}, None),
        MemoryDep('buf419', c0, {c0: 2097152}, None)]
op421.met_dependencies = [MemoryDep('arg276_1', c1, {c0: 2048, c1: 1024}, None)]
op421.outputs = [
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf421.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
]
op421.group.device = cuda:0
op421.group.iteration = (2048, 1024)
op421.sizes = ([2048], [1024])
buf412_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf421_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op421_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf419', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg276_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf421', get_index_3, getitem_1)
        return store_reduction
op421 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op420_op421_op423.snodes[2] =
op423: SchedulerNode(ComputedBuffer)
op423.writes = [MemoryDep('buf423', c0, {c0: 2097152}, None)]
op423.unmet_dependencies = 
    [   MemoryDep('buf412', c0, {c0: 2097152}, None),
        MemoryDep('buf419', c0, {c0: 2097152}, None),
        MemoryDep('buf420', c0, {c0: 2048}, None),
        MemoryDep('buf421', c0, {c0: 2048}, None)]
op423.met_dependencies = 
    [   MemoryDep('arg276_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg277_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg278_1', c1, {c0: 2048, c1: 1024}, None)]
op423.outputs = [
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf423.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op424'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op427'), can_inplace=False, is_weak=False),
    ]
]
op423.group.device = cuda:0
op423.group.iteration = (2097152, 1)
op423.sizes = ([2048, 1024], [])
buf412_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf420_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf421_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf423_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op423_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf419', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg276_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf420', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf421', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg277_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg278_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf423', get_index_7, add_3, None)
        return store
op423 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op420_op421_op423 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op424: ExternKernelSchedulerNode(ExternKernelOut)
op424.writes = [StarDep(name='buf424', mode=None)]
op424.unmet_dependencies = [StarDep(name='buf423', mode=None)]
op424.met_dependencies = [StarDep(name='arg279_1', mode=None)]
op424.outputs = [
    buf424: ExternKernelOut
    buf424.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf424.users = [NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False)]
]
op424.node.kernel = extern_kernels.mm


op425: ExternKernelSchedulerNode(ExternKernelOut)
op425.writes = [StarDep(name='buf425', mode=None)]
op425.unmet_dependencies = [StarDep(name='buf423', mode=None)]
op425.met_dependencies = [StarDep(name='arg281_1', mode=None)]
op425.outputs = [
    buf425: ExternKernelOut
    buf425.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf425.users = [NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False)]
]
op425.node.kernel = extern_kernels.mm


op426: SchedulerNode(ComputedBuffer)
op426.writes = [MemoryDep('buf426', c0, {c0: 2097152}, None)]
op426.unmet_dependencies = [   MemoryDep('buf425', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op426.met_dependencies = [MemoryDep('arg282_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op426.outputs = [
    buf426: ComputedBuffer
    buf426.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf426.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op426.group.device = cuda:0
op426.group.iteration = (2097152, 1)
op426.sizes = ([16, 16, 128, 64], [])
buf425_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf426_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op426_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf425', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg282_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf426', get_index_2, add, None)
        return store
op426 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op427: ExternKernelSchedulerNode(ExternKernelOut)
op427.writes = [StarDep(name='buf427', mode=None)]
op427.unmet_dependencies = [StarDep(name='buf423', mode=None)]
op427.met_dependencies = [StarDep(name='arg283_1', mode=None)]
op427.outputs = [
    buf427: ExternKernelOut
    buf427.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf427.users = [NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False)]
]
op427.node.kernel = extern_kernels.mm


op428: SchedulerNode(ComputedBuffer)
op428.writes = [MemoryDep('buf428', c0, {c0: 2097152}, None)]
op428.unmet_dependencies = [   MemoryDep('buf427', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op428.met_dependencies = [MemoryDep('arg284_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op428.outputs = [
    buf428: ComputedBuffer
    buf428.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf428.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op428.group.device = cuda:0
op428.group.iteration = (2097152, 1)
op428.sizes = ([16, 16, 128, 64], [])
buf427_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op428_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg284_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf428', get_index_2, add, None)
        return store
op428 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op429: SchedulerNode(ComputedBuffer)
op429.writes = [MemoryDep('buf429', c0, {c0: 2097152}, None)]
op429.unmet_dependencies = [   MemoryDep('buf424', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op429.met_dependencies = [MemoryDep('arg280_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op429.outputs = [
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf429.users = [NodeUser(node=ExternKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False)]
]
op429.group.device = cuda:0
op429.group.iteration = (2097152, 1)
op429.sizes = ([16, 16, 128, 64], [])
buf424_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op429_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg280_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf429', get_index_2, add, None)
        return store
op429 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op430: SchedulerNode(ComputedBuffer)
op430.writes = [MemoryDep('buf430', c0, {c0: 4194304}, None)]
op430.unmet_dependencies = []
op430.met_dependencies = []
op430.outputs = [
    buf430: ComputedBuffer
    buf430.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf430.users = [NodeUser(node=ExternKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False)]
]
op430.group.device = cuda:0
op430.group.iteration = (4194304, 1)
op430.sizes = ([256, 128, 128], [])
buf430_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op430_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 128}
    index0 = z2
    index1 = z1 + 1
    index2 = 16384*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf430', get_index_2, where, None)
        return store
op430 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op431: ExternKernelSchedulerNode(FallbackKernel)
op431.writes = [StarDep(name='buf431', mode=None)]
op431.unmet_dependencies = 
    [   StarDep(name='buf426', mode=None),
        StarDep(name='buf428', mode=None),
        StarDep(name='buf429', mode=None),
        StarDep(name='buf430', mode=None)]
op431.met_dependencies = []
op431.outputs = [
    buf431: FallbackKernel
    buf431.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf431.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op432'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op435'), can_inplace=False, is_weak=False),
    ]
]
op431.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op432: ExternKernelSchedulerNode(MultiOutput)
op432.writes = [StarDep(name='buf432', mode=None)]
op432.unmet_dependencies = [StarDep(name='buf431', mode=None)]
op432.met_dependencies = []
op432.outputs = [
    buf432: MultiOutput
    buf432.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf432.users = [NodeUser(node=ExternKernelSchedulerNode(name='op436'), can_inplace=False, is_weak=False)]
]
op432.node.kernel = None


op436: ExternKernelSchedulerNode(ExternKernelOut)
op436.writes = [StarDep(name='buf436', mode=None)]
op436.unmet_dependencies = [StarDep(name='buf432', mode=None)]
op436.met_dependencies = [StarDep(name='arg285_1', mode=None)]
op436.outputs = [
    buf436: ExternKernelOut
    buf436.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf436.users = [NodeUser(node=SchedulerNode(name='op437'), can_inplace=True, is_weak=False)]
]
op436.node.kernel = extern_kernels.mm


op437_op438_op439_op441: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op437_op438_op439_op441.writes = 
    [   MemoryDep('buf437', c0, {c0: 2097152}, None),
        MemoryDep('buf438', c0, {c0: 2048}, None),
        MemoryDep('buf439', c0, {c0: 2048}, None),
        MemoryDep('buf441', c0, {c0: 2097152}, None)]
op437_op438_op439_op441.unmet_dependencies = 
    [   MemoryDep('buf412', c0, {c0: 2097152}, None),
        MemoryDep('buf419', c0, {c0: 2097152}, None),
        MemoryDep('buf436', c0, {c0: 2097152}, None)]
op437_op438_op439_op441.met_dependencies = 
    [   MemoryDep('arg276_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg286_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg287_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg288_1', c1, {c0: 2048, c1: 1024}, None)]
op437_op438_op439_op441.outputs = [
    buf437: ComputedBuffer
    buf437.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf437.users = [
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op461'), can_inplace=True, is_weak=False),
    ]
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf438.users = [NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False)]
    buf439: ComputedBuffer
    buf439.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf439.users = [NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False)]
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf441.users = [NodeUser(node=ExternKernelSchedulerNode(name='op442'), can_inplace=False, is_weak=False)]
]
op437_op438_op439_op441.snodes[0] =
op437: SchedulerNode(ComputedBuffer)
op437.writes = [MemoryDep('buf437', c0, {c0: 2097152}, None)]
op437.unmet_dependencies = 
    [   MemoryDep('buf412', c0, {c0: 2097152}, None),
        MemoryDep('buf419', c0, {c0: 2097152}, None),
        MemoryDep('buf436', c0, {c0: 2097152}, None)]
op437.met_dependencies = 
    [   MemoryDep('arg276_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg286_1', c1, {c0: 2048, c1: 1024}, None)]
op437.outputs = [
    buf437: ComputedBuffer
    buf437.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf437.users = [
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op461'), can_inplace=True, is_weak=False),
    ]
]
op437.group.device = cuda:0
op437.group.iteration = (2097152, 1)
op437.sizes = ([2048, 1024], [])
buf412_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf437_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op437_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf419', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg276_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf436', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg286_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf437', get_index_5, add_3, None)
        return store
op437 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op437_op438_op439_op441.snodes[1] =
op438: SchedulerNode(ComputedBuffer)
op438.writes = [MemoryDep('buf438', c0, {c0: 2048}, None)]
op438.unmet_dependencies = [MemoryDep('buf437', c0, {c0: 2097152}, None)]
op438.met_dependencies = []
op438.outputs = [
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf438.users = [NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False)]
]
op438.group.device = cuda:0
op438.group.iteration = (2048, 1024)
op438.sizes = ([2048], [1024])
buf437_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf438_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op438_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf438', get_index_1, getitem)
        return store_reduction
op438 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op437_op438_op439_op441.snodes[2] =
op439: SchedulerNode(ComputedBuffer)
op439.writes = [MemoryDep('buf439', c0, {c0: 2048}, None)]
op439.unmet_dependencies = [MemoryDep('buf437', c0, {c0: 2097152}, None)]
op439.met_dependencies = []
op439.outputs = [
    buf439: ComputedBuffer
    buf439.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf439.users = [NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False)]
]
op439.group.device = cuda:0
op439.group.iteration = (2048, 1024)
op439.sizes = ([2048], [1024])
buf437_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op439_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf439', get_index_1, getitem_1)
        return store_reduction
op439 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op437_op438_op439_op441.snodes[3] =
op441: SchedulerNode(ComputedBuffer)
op441.writes = [MemoryDep('buf441', c0, {c0: 2097152}, None)]
op441.unmet_dependencies = 
    [   MemoryDep('buf437', c0, {c0: 2097152}, None),
        MemoryDep('buf438', c0, {c0: 2048}, None),
        MemoryDep('buf439', c0, {c0: 2048}, None)]
op441.met_dependencies = 
    [   MemoryDep('arg287_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg288_1', c1, {c0: 2048, c1: 1024}, None)]
op441.outputs = [
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf441.users = [NodeUser(node=ExternKernelSchedulerNode(name='op442'), can_inplace=False, is_weak=False)]
]
op441.group.device = cuda:0
op441.group.iteration = (2097152, 1)
op441.sizes = ([2048, 1024], [])
buf437_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf438_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf439_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg287_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op441_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf438', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf439', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg287_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg288_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf441', get_index_5, add_1, None)
        return store
op441 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op437_op438_op439_op441 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op442: ExternKernelSchedulerNode(ExternKernelOut)
op442.writes = [StarDep(name='buf442', mode=None)]
op442.unmet_dependencies = [StarDep(name='buf441', mode=None)]
op442.met_dependencies = [StarDep(name='arg289_1', mode=None)]
op442.outputs = [
    buf442: ExternKernelOut
    buf442.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf442.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
]
op442.node.kernel = extern_kernels.mm


op443: ExternKernelSchedulerNode(ExternKernelOut)
op443.writes = [StarDep(name='buf443', mode=None)]
op443.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op443.met_dependencies = [StarDep(name='arg291_1', mode=None)]
op443.outputs = [
    buf443: ExternKernelOut
    buf443.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf443.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False)]
]
op443.node.kernel = extern_kernels.mm


op444: SchedulerNode(ComputedBuffer)
op444.writes = [MemoryDep('buf444', c0, {c0: 2097152}, None)]
op444.unmet_dependencies = [   MemoryDep('buf443', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op444.met_dependencies = [MemoryDep('arg292_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op444.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf444.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op444.group.device = cuda:0
op444.group.iteration = (2097152, 1)
op444.sizes = ([16, 16, 128, 64], [])
buf443_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf444_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op444_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg292_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf444', get_index_2, add, None)
        return store
op444 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op445: ExternKernelSchedulerNode(ExternKernelOut)
op445.writes = [StarDep(name='buf445', mode=None)]
op445.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op445.met_dependencies = [StarDep(name='arg293_1', mode=None)]
op445.outputs = [
    buf445: ExternKernelOut
    buf445.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf445.users = [NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False)]
]
op445.node.kernel = extern_kernels.mm


op446: SchedulerNode(ComputedBuffer)
op446.writes = [MemoryDep('buf446', c0, {c0: 2097152}, None)]
op446.unmet_dependencies = [   MemoryDep('buf445', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op446.met_dependencies = [MemoryDep('arg294_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op446.outputs = [
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf446.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op446.group.device = cuda:0
op446.group.iteration = (2097152, 1)
op446.sizes = ([16, 16, 128, 64], [])
buf445_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg294_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf446_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op446_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf445', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg294_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf446', get_index_2, add, None)
        return store
op446 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op447: SchedulerNode(ComputedBuffer)
op447.writes = [MemoryDep('buf447', c0, {c0: 2097152}, None)]
op447.unmet_dependencies = [   MemoryDep('buf442', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op447.met_dependencies = [MemoryDep('arg290_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op447.outputs = [
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf447.users = [NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False)]
]
op447.group.device = cuda:0
op447.group.iteration = (2097152, 1)
op447.sizes = ([16, 16, 128, 64], [])
buf442_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf447_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op447_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf442', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg290_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf447', get_index_2, add, None)
        return store
op447 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op448: ExternKernelSchedulerNode(FallbackKernel)
op448.writes = [StarDep(name='buf448', mode=None)]
op448.unmet_dependencies = 
    [   StarDep(name='buf444', mode=None),
        StarDep(name='buf446', mode=None),
        StarDep(name='buf447', mode=None)]
op448.met_dependencies = []
op448.outputs = [
    buf448: FallbackKernel
    buf448.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf448.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op449'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op451'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op452'), can_inplace=False, is_weak=False),
    ]
]
op448.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op449: ExternKernelSchedulerNode(MultiOutput)
op449.writes = [StarDep(name='buf449', mode=None)]
op449.unmet_dependencies = [StarDep(name='buf448', mode=None)]
op449.met_dependencies = []
op449.outputs = [
    buf449: MultiOutput
    buf449.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf449.users = [NodeUser(node=ExternKernelSchedulerNode(name='op453'), can_inplace=False, is_weak=False)]
]
op449.node.kernel = None


op453: ExternKernelSchedulerNode(ExternKernelOut)
op453.writes = [StarDep(name='buf453', mode=None)]
op453.unmet_dependencies = [StarDep(name='buf449', mode=None)]
op453.met_dependencies = [StarDep(name='arg295_1', mode=None)]
op453.outputs = [
    buf453: ExternKernelOut
    buf453.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf453.users = [
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op461'), can_inplace=True, is_weak=False),
    ]
]
op453.node.kernel = extern_kernels.mm


op454_op455_op457: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op454_op455_op457.writes = 
    [   MemoryDep('buf454', c0, {c0: 2048}, None),
        MemoryDep('buf455', c0, {c0: 2048}, None),
        MemoryDep('buf457', c0, {c0: 2097152}, None)]
op454_op455_op457.unmet_dependencies = 
    [   MemoryDep('buf437', c0, {c0: 2097152}, None),
        MemoryDep('buf453', c0, {c0: 2097152}, None)]
op454_op455_op457.met_dependencies = 
    [   MemoryDep('arg296_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg297_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg298_1', c1, {c0: 2048, c1: 1024}, None)]
op454_op455_op457.outputs = [
    buf454: ComputedBuffer
    buf454.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf454.users = [NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False)]
    buf455: ComputedBuffer
    buf455.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf455.users = [NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False)]
    buf457: ComputedBuffer
    buf457.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf457.users = [NodeUser(node=ExternKernelSchedulerNode(name='op458'), can_inplace=False, is_weak=False)]
]
op454_op455_op457.snodes[0] =
op454: SchedulerNode(ComputedBuffer)
op454.writes = [MemoryDep('buf454', c0, {c0: 2048}, None)]
op454.unmet_dependencies = 
    [   MemoryDep('buf437', c0, {c0: 2097152}, None),
        MemoryDep('buf453', c0, {c0: 2097152}, None)]
op454.met_dependencies = [MemoryDep('arg296_1', c1, {c0: 2048, c1: 1024}, None)]
op454.outputs = [
    buf454: ComputedBuffer
    buf454.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf454.users = [NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False)]
]
op454.group.device = cuda:0
op454.group.iteration = (2048, 1024)
op454.sizes = ([2048], [1024])
buf437_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf454_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op454_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf453', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg296_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf454', get_index_3, getitem)
        return store_reduction
op454 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op454_op455_op457.snodes[1] =
op455: SchedulerNode(ComputedBuffer)
op455.writes = [MemoryDep('buf455', c0, {c0: 2048}, None)]
op455.unmet_dependencies = 
    [   MemoryDep('buf437', c0, {c0: 2097152}, None),
        MemoryDep('buf453', c0, {c0: 2097152}, None)]
op455.met_dependencies = [MemoryDep('arg296_1', c1, {c0: 2048, c1: 1024}, None)]
op455.outputs = [
    buf455: ComputedBuffer
    buf455.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf455.users = [NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False)]
]
op455.group.device = cuda:0
op455.group.iteration = (2048, 1024)
op455.sizes = ([2048], [1024])
buf437_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf455_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op455_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf453', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg296_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf455', get_index_3, getitem_1)
        return store_reduction
op455 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op454_op455_op457.snodes[2] =
op457: SchedulerNode(ComputedBuffer)
op457.writes = [MemoryDep('buf457', c0, {c0: 2097152}, None)]
op457.unmet_dependencies = 
    [   MemoryDep('buf437', c0, {c0: 2097152}, None),
        MemoryDep('buf453', c0, {c0: 2097152}, None),
        MemoryDep('buf454', c0, {c0: 2048}, None),
        MemoryDep('buf455', c0, {c0: 2048}, None)]
op457.met_dependencies = 
    [   MemoryDep('arg296_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg297_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg298_1', c1, {c0: 2048, c1: 1024}, None)]
op457.outputs = [
    buf457: ComputedBuffer
    buf457.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf457.users = [NodeUser(node=ExternKernelSchedulerNode(name='op458'), can_inplace=False, is_weak=False)]
]
op457.group.device = cuda:0
op457.group.iteration = (2097152, 1)
op457.sizes = ([2048, 1024], [])
buf437_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf454_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf455_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf457_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op457_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf453', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg296_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf454', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf455', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg297_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg298_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf457', get_index_7, add_3, None)
        return store
op457 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op454_op455_op457 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op458: ExternKernelSchedulerNode(ExternKernelOut)
op458.writes = [StarDep(name='buf458', mode=None)]
op458.unmet_dependencies = [StarDep(name='buf457', mode=None)]
op458.met_dependencies = [StarDep(name='arg299_1', mode=None)]
op458.outputs = [
    buf458: ExternKernelOut
    buf458.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf458.users = [NodeUser(node=SchedulerNode(name='op459'), can_inplace=True, is_weak=False)]
]
op458.node.kernel = extern_kernels.mm


op459: SchedulerNode(ComputedBuffer)
op459.writes = [MemoryDep('buf459', c0, {c0: 8388608}, None)]
op459.unmet_dependencies = [MemoryDep('buf458', c0, {c0: 8388608}, None)]
op459.met_dependencies = [MemoryDep('arg300_1', c1, {c0: 2048, c1: 4096}, None)]
op459.outputs = [
    buf459: ComputedBuffer
    buf459.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf459.users = [NodeUser(node=ExternKernelSchedulerNode(name='op460'), can_inplace=False, is_weak=False)]
]
op459.group.device = cuda:0
op459.group.iteration = (8388608, 1)
op459.sizes = ([2048, 4096], [])
buf458_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op459_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf458', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg300_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf459', get_index_2, relu, None)
        return store
op459 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op460: ExternKernelSchedulerNode(ExternKernelOut)
op460.writes = [StarDep(name='buf460', mode=None)]
op460.unmet_dependencies = [StarDep(name='buf459', mode=None)]
op460.met_dependencies = [StarDep(name='arg301_1', mode=None)]
op460.outputs = [
    buf460: ExternKernelOut
    buf460.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf460.users = [NodeUser(node=SchedulerNode(name='op461'), can_inplace=True, is_weak=False)]
]
op460.node.kernel = extern_kernels.mm


op461_op462_op463_op465: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op461_op462_op463_op465.writes = 
    [   MemoryDep('buf461', c0, {c0: 2097152}, None),
        MemoryDep('buf462', c0, {c0: 2048}, None),
        MemoryDep('buf463', c0, {c0: 2048}, None),
        MemoryDep('buf465', c0, {c0: 2097152}, None)]
op461_op462_op463_op465.unmet_dependencies = 
    [   MemoryDep('buf437', c0, {c0: 2097152}, None),
        MemoryDep('buf453', c0, {c0: 2097152}, None),
        MemoryDep('buf460', c0, {c0: 2097152}, None)]
op461_op462_op463_op465.met_dependencies = 
    [   MemoryDep('arg296_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg302_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg303_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg304_1', c1, {c0: 2048, c1: 1024}, None)]
op461_op462_op463_op465.outputs = [
    buf461: ComputedBuffer
    buf461.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf461.users = [
        NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op465'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op480'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op481'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=True, is_weak=False),
    ]
    buf462: ComputedBuffer
    buf462.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf462.users = [NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False)]
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf463.users = [NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False)]
    buf465: ComputedBuffer
    buf465.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf465.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op466'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op467'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op469'), can_inplace=False, is_weak=False),
    ]
]
op461_op462_op463_op465.snodes[0] =
op461: SchedulerNode(ComputedBuffer)
op461.writes = [MemoryDep('buf461', c0, {c0: 2097152}, None)]
op461.unmet_dependencies = 
    [   MemoryDep('buf437', c0, {c0: 2097152}, None),
        MemoryDep('buf453', c0, {c0: 2097152}, None),
        MemoryDep('buf460', c0, {c0: 2097152}, None)]
op461.met_dependencies = 
    [   MemoryDep('arg296_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg302_1', c1, {c0: 2048, c1: 1024}, None)]
op461.outputs = [
    buf461: ComputedBuffer
    buf461.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf461.users = [
        NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op465'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op480'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op481'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=True, is_weak=False),
    ]
]
op461.group.device = cuda:0
op461.group.iteration = (2097152, 1)
op461.sizes = ([2048, 1024], [])
buf437_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf460_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf461_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op461_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf453', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg296_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf460', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg302_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf461', get_index_5, add_3, None)
        return store
op461 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op461_op462_op463_op465.snodes[1] =
op462: SchedulerNode(ComputedBuffer)
op462.writes = [MemoryDep('buf462', c0, {c0: 2048}, None)]
op462.unmet_dependencies = [MemoryDep('buf461', c0, {c0: 2097152}, None)]
op462.met_dependencies = []
op462.outputs = [
    buf462: ComputedBuffer
    buf462.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf462.users = [NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False)]
]
op462.group.device = cuda:0
op462.group.iteration = (2048, 1024)
op462.sizes = ([2048], [1024])
buf461_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op462_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf461', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf462', get_index_1, getitem)
        return store_reduction
op462 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op461_op462_op463_op465.snodes[2] =
op463: SchedulerNode(ComputedBuffer)
op463.writes = [MemoryDep('buf463', c0, {c0: 2048}, None)]
op463.unmet_dependencies = [MemoryDep('buf461', c0, {c0: 2097152}, None)]
op463.met_dependencies = []
op463.outputs = [
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf463.users = [NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False)]
]
op463.group.device = cuda:0
op463.group.iteration = (2048, 1024)
op463.sizes = ([2048], [1024])
buf461_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op463_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf461', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf463', get_index_1, getitem_1)
        return store_reduction
op463 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op461_op462_op463_op465.snodes[3] =
op465: SchedulerNode(ComputedBuffer)
op465.writes = [MemoryDep('buf465', c0, {c0: 2097152}, None)]
op465.unmet_dependencies = 
    [   MemoryDep('buf461', c0, {c0: 2097152}, None),
        MemoryDep('buf462', c0, {c0: 2048}, None),
        MemoryDep('buf463', c0, {c0: 2048}, None)]
op465.met_dependencies = 
    [   MemoryDep('arg303_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg304_1', c1, {c0: 2048, c1: 1024}, None)]
op465.outputs = [
    buf465: ComputedBuffer
    buf465.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf465.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op466'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op467'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op469'), can_inplace=False, is_weak=False),
    ]
]
op465.group.device = cuda:0
op465.group.iteration = (2097152, 1)
op465.sizes = ([2048, 1024], [])
buf461_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf463_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg304_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf465_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op465_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf461', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf462', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf463', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg303_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg304_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf465', get_index_5, add_1, None)
        return store
op465 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op461_op462_op463_op465 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op466: ExternKernelSchedulerNode(ExternKernelOut)
op466.writes = [StarDep(name='buf466', mode=None)]
op466.unmet_dependencies = [StarDep(name='buf465', mode=None)]
op466.met_dependencies = [StarDep(name='arg305_1', mode=None)]
op466.outputs = [
    buf466: ExternKernelOut
    buf466.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf466.users = [NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
]
op466.node.kernel = extern_kernels.mm


op467: ExternKernelSchedulerNode(ExternKernelOut)
op467.writes = [StarDep(name='buf467', mode=None)]
op467.unmet_dependencies = [StarDep(name='buf465', mode=None)]
op467.met_dependencies = [StarDep(name='arg307_1', mode=None)]
op467.outputs = [
    buf467: ExternKernelOut
    buf467.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf467.users = [NodeUser(node=SchedulerNode(name='op468'), can_inplace=False, is_weak=False)]
]
op467.node.kernel = extern_kernels.mm


op468: SchedulerNode(ComputedBuffer)
op468.writes = [MemoryDep('buf468', c0, {c0: 2097152}, None)]
op468.unmet_dependencies = [   MemoryDep('buf467', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op468.met_dependencies = [MemoryDep('arg308_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op468.outputs = [
    buf468: ComputedBuffer
    buf468.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf468.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op468.group.device = cuda:0
op468.group.iteration = (2097152, 1)
op468.sizes = ([16, 16, 128, 64], [])
buf467_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf468_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op468_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg308_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf468', get_index_2, add, None)
        return store
op468 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op469: ExternKernelSchedulerNode(ExternKernelOut)
op469.writes = [StarDep(name='buf469', mode=None)]
op469.unmet_dependencies = [StarDep(name='buf465', mode=None)]
op469.met_dependencies = [StarDep(name='arg309_1', mode=None)]
op469.outputs = [
    buf469: ExternKernelOut
    buf469.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf469.users = [NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False)]
]
op469.node.kernel = extern_kernels.mm


op470: SchedulerNode(ComputedBuffer)
op470.writes = [MemoryDep('buf470', c0, {c0: 2097152}, None)]
op470.unmet_dependencies = [   MemoryDep('buf469', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op470.met_dependencies = [MemoryDep('arg310_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op470.outputs = [
    buf470: ComputedBuffer
    buf470.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf470.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op470.group.device = cuda:0
op470.group.iteration = (2097152, 1)
op470.sizes = ([16, 16, 128, 64], [])
buf469_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg310_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf470_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op470_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf469', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg310_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf470', get_index_2, add, None)
        return store
op470 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op471: SchedulerNode(ComputedBuffer)
op471.writes = [MemoryDep('buf471', c0, {c0: 2097152}, None)]
op471.unmet_dependencies = [   MemoryDep('buf466', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op471.met_dependencies = [MemoryDep('arg306_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op471.outputs = [
    buf471: ComputedBuffer
    buf471.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf471.users = [NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False)]
]
op471.group.device = cuda:0
op471.group.iteration = (2097152, 1)
op471.sizes = ([16, 16, 128, 64], [])
buf466_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf471_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op471_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf466', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg306_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf471', get_index_2, add, None)
        return store
op471 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op472: SchedulerNode(ComputedBuffer)
op472.writes = [MemoryDep('buf472', c0, {c0: 4194304}, None)]
op472.unmet_dependencies = []
op472.met_dependencies = []
op472.outputs = [
    buf472: ComputedBuffer
    buf472.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf472.users = [NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False)]
]
op472.group.device = cuda:0
op472.group.iteration = (4194304, 1)
op472.sizes = ([256, 128, 128], [])
buf472_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op472_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 128}
    index0 = z2
    index1 = z1 + 1
    index2 = 16384*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf472', get_index_2, where, None)
        return store
op472 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op473: ExternKernelSchedulerNode(FallbackKernel)
op473.writes = [StarDep(name='buf473', mode=None)]
op473.unmet_dependencies = 
    [   StarDep(name='buf468', mode=None),
        StarDep(name='buf470', mode=None),
        StarDep(name='buf471', mode=None),
        StarDep(name='buf472', mode=None)]
op473.met_dependencies = []
op473.outputs = [
    buf473: FallbackKernel
    buf473.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf473.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op477'), can_inplace=False, is_weak=False),
    ]
]
op473.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op474: ExternKernelSchedulerNode(MultiOutput)
op474.writes = [StarDep(name='buf474', mode=None)]
op474.unmet_dependencies = [StarDep(name='buf473', mode=None)]
op474.met_dependencies = []
op474.outputs = [
    buf474: MultiOutput
    buf474.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf474.users = [NodeUser(node=ExternKernelSchedulerNode(name='op478'), can_inplace=False, is_weak=False)]
]
op474.node.kernel = None


op478: ExternKernelSchedulerNode(ExternKernelOut)
op478.writes = [StarDep(name='buf478', mode=None)]
op478.unmet_dependencies = [StarDep(name='buf474', mode=None)]
op478.met_dependencies = [StarDep(name='arg311_1', mode=None)]
op478.outputs = [
    buf478: ExternKernelOut
    buf478.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf478.users = [
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op480'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op481'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=True, is_weak=False),
    ]
]
op478.node.kernel = extern_kernels.mm


op479_op480_op482: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op479_op480_op482.writes = 
    [   MemoryDep('buf479', c0, {c0: 2048}, None),
        MemoryDep('buf480', c0, {c0: 2048}, None),
        MemoryDep('buf482', c0, {c0: 2097152}, None)]
op479_op480_op482.unmet_dependencies = 
    [   MemoryDep('buf461', c0, {c0: 2097152}, None),
        MemoryDep('buf478', c0, {c0: 2097152}, None)]
op479_op480_op482.met_dependencies = 
    [   MemoryDep('arg312_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg313_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg314_1', c1, {c0: 2048, c1: 1024}, None)]
op479_op480_op482.outputs = [
    buf479: ComputedBuffer
    buf479.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf479.users = [NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False)]
    buf480: ComputedBuffer
    buf480.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf480.users = [NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False)]
    buf482: ComputedBuffer
    buf482.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf482.users = [NodeUser(node=ExternKernelSchedulerNode(name='op483'), can_inplace=False, is_weak=False)]
]
op479_op480_op482.snodes[0] =
op479: SchedulerNode(ComputedBuffer)
op479.writes = [MemoryDep('buf479', c0, {c0: 2048}, None)]
op479.unmet_dependencies = 
    [   MemoryDep('buf461', c0, {c0: 2097152}, None),
        MemoryDep('buf478', c0, {c0: 2097152}, None)]
op479.met_dependencies = [MemoryDep('arg312_1', c1, {c0: 2048, c1: 1024}, None)]
op479.outputs = [
    buf479: ComputedBuffer
    buf479.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf479.users = [NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False)]
]
op479.group.device = cuda:0
op479.group.iteration = (2048, 1024)
op479.sizes = ([2048], [1024])
buf461_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf478_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf479_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op479_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf461', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf478', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg312_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf479', get_index_3, getitem)
        return store_reduction
op479 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op479_op480_op482.snodes[1] =
op480: SchedulerNode(ComputedBuffer)
op480.writes = [MemoryDep('buf480', c0, {c0: 2048}, None)]
op480.unmet_dependencies = 
    [   MemoryDep('buf461', c0, {c0: 2097152}, None),
        MemoryDep('buf478', c0, {c0: 2097152}, None)]
op480.met_dependencies = [MemoryDep('arg312_1', c1, {c0: 2048, c1: 1024}, None)]
op480.outputs = [
    buf480: ComputedBuffer
    buf480.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf480.users = [NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False)]
]
op480.group.device = cuda:0
op480.group.iteration = (2048, 1024)
op480.sizes = ([2048], [1024])
buf461_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf478_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op480_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf461', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf478', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg312_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf480', get_index_3, getitem_1)
        return store_reduction
op480 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op479_op480_op482.snodes[2] =
op482: SchedulerNode(ComputedBuffer)
op482.writes = [MemoryDep('buf482', c0, {c0: 2097152}, None)]
op482.unmet_dependencies = 
    [   MemoryDep('buf461', c0, {c0: 2097152}, None),
        MemoryDep('buf478', c0, {c0: 2097152}, None),
        MemoryDep('buf479', c0, {c0: 2048}, None),
        MemoryDep('buf480', c0, {c0: 2048}, None)]
op482.met_dependencies = 
    [   MemoryDep('arg312_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg313_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg314_1', c1, {c0: 2048, c1: 1024}, None)]
op482.outputs = [
    buf482: ComputedBuffer
    buf482.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf482.users = [NodeUser(node=ExternKernelSchedulerNode(name='op483'), can_inplace=False, is_weak=False)]
]
op482.group.device = cuda:0
op482.group.iteration = (2097152, 1)
op482.sizes = ([2048, 1024], [])
buf461_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf478_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf479_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf480_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg313_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg314_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf482_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op482_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf461', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf478', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg312_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf479', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf480', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg313_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg314_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf482', get_index_7, add_3, None)
        return store
op482 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op479_op480_op482 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op483: ExternKernelSchedulerNode(ExternKernelOut)
op483.writes = [StarDep(name='buf483', mode=None)]
op483.unmet_dependencies = [StarDep(name='buf482', mode=None)]
op483.met_dependencies = [StarDep(name='arg315_1', mode=None)]
op483.outputs = [
    buf483: ExternKernelOut
    buf483.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf483.users = [NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
]
op483.node.kernel = extern_kernels.mm


op484: ExternKernelSchedulerNode(ExternKernelOut)
op484.writes = [StarDep(name='buf484', mode=None)]
op484.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op484.met_dependencies = [StarDep(name='arg317_1', mode=None)]
op484.outputs = [
    buf484: ExternKernelOut
    buf484.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf484.users = [NodeUser(node=SchedulerNode(name='op485'), can_inplace=False, is_weak=False)]
]
op484.node.kernel = extern_kernels.mm


op485: SchedulerNode(ComputedBuffer)
op485.writes = [MemoryDep('buf485', c0, {c0: 2097152}, None)]
op485.unmet_dependencies = [   MemoryDep('buf484', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op485.met_dependencies = [MemoryDep('arg318_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op485.outputs = [
    buf485: ComputedBuffer
    buf485.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf485.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op489'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op485.group.device = cuda:0
op485.group.iteration = (2097152, 1)
op485.sizes = ([16, 16, 128, 64], [])
buf484_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf485_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op485_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf484', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg318_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf485', get_index_2, add, None)
        return store
op485 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op486: ExternKernelSchedulerNode(ExternKernelOut)
op486.writes = [StarDep(name='buf486', mode=None)]
op486.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op486.met_dependencies = [StarDep(name='arg319_1', mode=None)]
op486.outputs = [
    buf486: ExternKernelOut
    buf486.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf486.users = [NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False)]
]
op486.node.kernel = extern_kernels.mm


op487: SchedulerNode(ComputedBuffer)
op487.writes = [MemoryDep('buf487', c0, {c0: 2097152}, None)]
op487.unmet_dependencies = [   MemoryDep('buf486', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op487.met_dependencies = [MemoryDep('arg320_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op487.outputs = [
    buf487: ComputedBuffer
    buf487.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf487.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op489'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op487.group.device = cuda:0
op487.group.iteration = (2097152, 1)
op487.sizes = ([16, 16, 128, 64], [])
buf486_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf487_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op487_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf486', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg320_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf487', get_index_2, add, None)
        return store
op487 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op488: SchedulerNode(ComputedBuffer)
op488.writes = [MemoryDep('buf488', c0, {c0: 2097152}, None)]
op488.unmet_dependencies = [   MemoryDep('buf483', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op488.met_dependencies = [MemoryDep('arg316_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op488.outputs = [
    buf488: ComputedBuffer
    buf488.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf488.users = [NodeUser(node=ExternKernelSchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
]
op488.group.device = cuda:0
op488.group.iteration = (2097152, 1)
op488.sizes = ([16, 16, 128, 64], [])
buf483_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf488_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op488_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg316_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf488', get_index_2, add, None)
        return store
op488 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op489: ExternKernelSchedulerNode(FallbackKernel)
op489.writes = [StarDep(name='buf489', mode=None)]
op489.unmet_dependencies = 
    [   StarDep(name='buf485', mode=None),
        StarDep(name='buf487', mode=None),
        StarDep(name='buf488', mode=None)]
op489.met_dependencies = []
op489.outputs = [
    buf489: FallbackKernel
    buf489.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf489.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op491'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op492'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op493'), can_inplace=False, is_weak=False),
    ]
]
op489.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op490: ExternKernelSchedulerNode(MultiOutput)
op490.writes = [StarDep(name='buf490', mode=None)]
op490.unmet_dependencies = [StarDep(name='buf489', mode=None)]
op490.met_dependencies = []
op490.outputs = [
    buf490: MultiOutput
    buf490.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf490.users = [NodeUser(node=ExternKernelSchedulerNode(name='op494'), can_inplace=False, is_weak=False)]
]
op490.node.kernel = None


op494: ExternKernelSchedulerNode(ExternKernelOut)
op494.writes = [StarDep(name='buf494', mode=None)]
op494.unmet_dependencies = [StarDep(name='buf490', mode=None)]
op494.met_dependencies = [StarDep(name='arg321_1', mode=None)]
op494.outputs = [
    buf494: ExternKernelOut
    buf494.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf494.users = [NodeUser(node=SchedulerNode(name='op495'), can_inplace=True, is_weak=False)]
]
op494.node.kernel = extern_kernels.mm


op495_op496_op497_op499: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op495_op496_op497_op499.writes = 
    [   MemoryDep('buf495', c0, {c0: 2097152}, None),
        MemoryDep('buf496', c0, {c0: 2048}, None),
        MemoryDep('buf497', c0, {c0: 2048}, None),
        MemoryDep('buf499', c0, {c0: 2097152}, None)]
op495_op496_op497_op499.unmet_dependencies = 
    [   MemoryDep('buf461', c0, {c0: 2097152}, None),
        MemoryDep('buf478', c0, {c0: 2097152}, None),
        MemoryDep('buf494', c0, {c0: 2097152}, None)]
op495_op496_op497_op499.met_dependencies = 
    [   MemoryDep('arg312_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg322_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg323_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg324_1', c1, {c0: 2048, c1: 1024}, None)]
op495_op496_op497_op499.outputs = [
    buf495: ComputedBuffer
    buf495.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf495.users = [
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op503'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op505'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op506'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=True, is_weak=False),
    ]
    buf496: ComputedBuffer
    buf496.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf496.users = [NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False)]
    buf497: ComputedBuffer
    buf497.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf497.users = [NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False)]
    buf499: ComputedBuffer
    buf499.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf499.users = [NodeUser(node=ExternKernelSchedulerNode(name='op500'), can_inplace=False, is_weak=False)]
]
op495_op496_op497_op499.snodes[0] =
op495: SchedulerNode(ComputedBuffer)
op495.writes = [MemoryDep('buf495', c0, {c0: 2097152}, None)]
op495.unmet_dependencies = 
    [   MemoryDep('buf461', c0, {c0: 2097152}, None),
        MemoryDep('buf478', c0, {c0: 2097152}, None),
        MemoryDep('buf494', c0, {c0: 2097152}, None)]
op495.met_dependencies = 
    [   MemoryDep('arg312_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg322_1', c1, {c0: 2048, c1: 1024}, None)]
op495.outputs = [
    buf495: ComputedBuffer
    buf495.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf495.users = [
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op503'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op505'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op506'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=True, is_weak=False),
    ]
]
op495.group.device = cuda:0
op495.group.iteration = (2097152, 1)
op495.sizes = ([2048, 1024], [])
buf461_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf478_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf494_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf495_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op495_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf461', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf478', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg312_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf494', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg322_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf495', get_index_5, add_3, None)
        return store
op495 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op495_op496_op497_op499.snodes[1] =
op496: SchedulerNode(ComputedBuffer)
op496.writes = [MemoryDep('buf496', c0, {c0: 2048}, None)]
op496.unmet_dependencies = [MemoryDep('buf495', c0, {c0: 2097152}, None)]
op496.met_dependencies = []
op496.outputs = [
    buf496: ComputedBuffer
    buf496.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf496.users = [NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False)]
]
op496.group.device = cuda:0
op496.group.iteration = (2048, 1024)
op496.sizes = ([2048], [1024])
buf495_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf496_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op496_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf495', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf496', get_index_1, getitem)
        return store_reduction
op496 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op495_op496_op497_op499.snodes[2] =
op497: SchedulerNode(ComputedBuffer)
op497.writes = [MemoryDep('buf497', c0, {c0: 2048}, None)]
op497.unmet_dependencies = [MemoryDep('buf495', c0, {c0: 2097152}, None)]
op497.met_dependencies = []
op497.outputs = [
    buf497: ComputedBuffer
    buf497.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf497.users = [NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False)]
]
op497.group.device = cuda:0
op497.group.iteration = (2048, 1024)
op497.sizes = ([2048], [1024])
buf495_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf497_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op497_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf495', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf497', get_index_1, getitem_1)
        return store_reduction
op497 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op495_op496_op497_op499.snodes[3] =
op499: SchedulerNode(ComputedBuffer)
op499.writes = [MemoryDep('buf499', c0, {c0: 2097152}, None)]
op499.unmet_dependencies = 
    [   MemoryDep('buf495', c0, {c0: 2097152}, None),
        MemoryDep('buf496', c0, {c0: 2048}, None),
        MemoryDep('buf497', c0, {c0: 2048}, None)]
op499.met_dependencies = 
    [   MemoryDep('arg323_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg324_1', c1, {c0: 2048, c1: 1024}, None)]
op499.outputs = [
    buf499: ComputedBuffer
    buf499.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf499.users = [NodeUser(node=ExternKernelSchedulerNode(name='op500'), can_inplace=False, is_weak=False)]
]
op499.group.device = cuda:0
op499.group.iteration = (2097152, 1)
op499.sizes = ([2048, 1024], [])
buf495_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf496_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf497_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg323_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf499_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op499_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf495', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf496', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf497', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg323_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg324_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf499', get_index_5, add_1, None)
        return store
op499 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op495_op496_op497_op499 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op500: ExternKernelSchedulerNode(ExternKernelOut)
op500.writes = [StarDep(name='buf500', mode=None)]
op500.unmet_dependencies = [StarDep(name='buf499', mode=None)]
op500.met_dependencies = [StarDep(name='arg325_1', mode=None)]
op500.outputs = [
    buf500: ExternKernelOut
    buf500.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf500.users = [NodeUser(node=SchedulerNode(name='op501'), can_inplace=True, is_weak=False)]
]
op500.node.kernel = extern_kernels.mm


op501: SchedulerNode(ComputedBuffer)
op501.writes = [MemoryDep('buf501', c0, {c0: 8388608}, None)]
op501.unmet_dependencies = [MemoryDep('buf500', c0, {c0: 8388608}, None)]
op501.met_dependencies = [MemoryDep('arg326_1', c1, {c0: 2048, c1: 4096}, None)]
op501.outputs = [
    buf501: ComputedBuffer
    buf501.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf501.users = [NodeUser(node=ExternKernelSchedulerNode(name='op502'), can_inplace=False, is_weak=False)]
]
op501.group.device = cuda:0
op501.group.iteration = (8388608, 1)
op501.sizes = ([2048, 4096], [])
buf500_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg326_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf501_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op501_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf500', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg326_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf501', get_index_2, relu, None)
        return store
op501 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op502: ExternKernelSchedulerNode(ExternKernelOut)
op502.writes = [StarDep(name='buf502', mode=None)]
op502.unmet_dependencies = [StarDep(name='buf501', mode=None)]
op502.met_dependencies = [StarDep(name='arg327_1', mode=None)]
op502.outputs = [
    buf502: ExternKernelOut
    buf502.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf502.users = [
        NodeUser(node=SchedulerNode(name='op503'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op505'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op506'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=True, is_weak=False),
    ]
]
op502.node.kernel = extern_kernels.mm


op503_op504_op506: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op503_op504_op506.writes = 
    [   MemoryDep('buf503', c0, {c0: 2048}, None),
        MemoryDep('buf504', c0, {c0: 2048}, None),
        MemoryDep('buf506', c0, {c0: 2097152}, None)]
op503_op504_op506.unmet_dependencies = 
    [   MemoryDep('buf495', c0, {c0: 2097152}, None),
        MemoryDep('buf502', c0, {c0: 2097152}, None)]
op503_op504_op506.met_dependencies = 
    [   MemoryDep('arg328_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg329_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg330_1', c1, {c0: 2048, c1: 1024}, None)]
op503_op504_op506.outputs = [
    buf503: ComputedBuffer
    buf503.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf503.users = [NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False)]
    buf504: ComputedBuffer
    buf504.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf504.users = [NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False)]
    buf506: ComputedBuffer
    buf506.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf506.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op507'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op510'), can_inplace=False, is_weak=False),
    ]
]
op503_op504_op506.snodes[0] =
op503: SchedulerNode(ComputedBuffer)
op503.writes = [MemoryDep('buf503', c0, {c0: 2048}, None)]
op503.unmet_dependencies = 
    [   MemoryDep('buf495', c0, {c0: 2097152}, None),
        MemoryDep('buf502', c0, {c0: 2097152}, None)]
op503.met_dependencies = [MemoryDep('arg328_1', c1, {c0: 2048, c1: 1024}, None)]
op503.outputs = [
    buf503: ComputedBuffer
    buf503.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf503.users = [NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False)]
]
op503.group.device = cuda:0
op503.group.iteration = (2048, 1024)
op503.sizes = ([2048], [1024])
buf495_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf503_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op503_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf495', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf502', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg328_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf503', get_index_3, getitem)
        return store_reduction
op503 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op503_op504_op506.snodes[1] =
op504: SchedulerNode(ComputedBuffer)
op504.writes = [MemoryDep('buf504', c0, {c0: 2048}, None)]
op504.unmet_dependencies = 
    [   MemoryDep('buf495', c0, {c0: 2097152}, None),
        MemoryDep('buf502', c0, {c0: 2097152}, None)]
op504.met_dependencies = [MemoryDep('arg328_1', c1, {c0: 2048, c1: 1024}, None)]
op504.outputs = [
    buf504: ComputedBuffer
    buf504.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf504.users = [NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False)]
]
op504.group.device = cuda:0
op504.group.iteration = (2048, 1024)
op504.sizes = ([2048], [1024])
buf495_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf504_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op504_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf495', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf502', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg328_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf504', get_index_3, getitem_1)
        return store_reduction
op504 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op503_op504_op506.snodes[2] =
op506: SchedulerNode(ComputedBuffer)
op506.writes = [MemoryDep('buf506', c0, {c0: 2097152}, None)]
op506.unmet_dependencies = 
    [   MemoryDep('buf495', c0, {c0: 2097152}, None),
        MemoryDep('buf502', c0, {c0: 2097152}, None),
        MemoryDep('buf503', c0, {c0: 2048}, None),
        MemoryDep('buf504', c0, {c0: 2048}, None)]
op506.met_dependencies = 
    [   MemoryDep('arg328_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg329_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg330_1', c1, {c0: 2048, c1: 1024}, None)]
op506.outputs = [
    buf506: ComputedBuffer
    buf506.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf506.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op507'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op510'), can_inplace=False, is_weak=False),
    ]
]
op506.group.device = cuda:0
op506.group.iteration = (2097152, 1)
op506.sizes = ([2048, 1024], [])
buf495_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf503_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf504_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg329_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg330_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf506_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op506_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf495', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf502', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg328_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf503', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf504', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg329_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg330_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf506', get_index_7, add_3, None)
        return store
op506 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op503_op504_op506 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op507: ExternKernelSchedulerNode(ExternKernelOut)
op507.writes = [StarDep(name='buf507', mode=None)]
op507.unmet_dependencies = [StarDep(name='buf506', mode=None)]
op507.met_dependencies = [StarDep(name='arg331_1', mode=None)]
op507.outputs = [
    buf507: ExternKernelOut
    buf507.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf507.users = [NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False)]
]
op507.node.kernel = extern_kernels.mm


op508: ExternKernelSchedulerNode(ExternKernelOut)
op508.writes = [StarDep(name='buf508', mode=None)]
op508.unmet_dependencies = [StarDep(name='buf506', mode=None)]
op508.met_dependencies = [StarDep(name='arg333_1', mode=None)]
op508.outputs = [
    buf508: ExternKernelOut
    buf508.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf508.users = [NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False)]
]
op508.node.kernel = extern_kernels.mm


op509: SchedulerNode(ComputedBuffer)
op509.writes = [MemoryDep('buf509', c0, {c0: 2097152}, None)]
op509.unmet_dependencies = [   MemoryDep('buf508', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op509.met_dependencies = [MemoryDep('arg334_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op509.outputs = [
    buf509: ComputedBuffer
    buf509.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf509.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op514'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op509.group.device = cuda:0
op509.group.iteration = (2097152, 1)
op509.sizes = ([16, 16, 128, 64], [])
buf508_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg334_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf509_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op509_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf508', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg334_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf509', get_index_2, add, None)
        return store
op509 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op510: ExternKernelSchedulerNode(ExternKernelOut)
op510.writes = [StarDep(name='buf510', mode=None)]
op510.unmet_dependencies = [StarDep(name='buf506', mode=None)]
op510.met_dependencies = [StarDep(name='arg335_1', mode=None)]
op510.outputs = [
    buf510: ExternKernelOut
    buf510.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf510.users = [NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False)]
]
op510.node.kernel = extern_kernels.mm


op511: SchedulerNode(ComputedBuffer)
op511.writes = [MemoryDep('buf511', c0, {c0: 2097152}, None)]
op511.unmet_dependencies = [   MemoryDep('buf510', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op511.met_dependencies = [MemoryDep('arg336_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op511.outputs = [
    buf511: ComputedBuffer
    buf511.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf511.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op514'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op511.group.device = cuda:0
op511.group.iteration = (2097152, 1)
op511.sizes = ([16, 16, 128, 64], [])
buf510_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg336_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf511_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op511_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf510', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg336_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf511', get_index_2, add, None)
        return store
op511 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op512: SchedulerNode(ComputedBuffer)
op512.writes = [MemoryDep('buf512', c0, {c0: 2097152}, None)]
op512.unmet_dependencies = [   MemoryDep('buf507', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op512.met_dependencies = [MemoryDep('arg332_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op512.outputs = [
    buf512: ComputedBuffer
    buf512.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf512.users = [NodeUser(node=ExternKernelSchedulerNode(name='op514'), can_inplace=False, is_weak=False)]
]
op512.group.device = cuda:0
op512.group.iteration = (2097152, 1)
op512.sizes = ([16, 16, 128, 64], [])
buf507_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf512_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op512_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf507', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg332_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf512', get_index_2, add, None)
        return store
op512 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op513: SchedulerNode(ComputedBuffer)
op513.writes = [MemoryDep('buf513', c0, {c0: 4194304}, None)]
op513.unmet_dependencies = []
op513.met_dependencies = []
op513.outputs = [
    buf513: ComputedBuffer
    buf513.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf513.users = [NodeUser(node=ExternKernelSchedulerNode(name='op514'), can_inplace=False, is_weak=False)]
]
op513.group.device = cuda:0
op513.group.iteration = (4194304, 1)
op513.sizes = ([256, 128, 128], [])
buf513_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op513_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 128}
    index0 = z2
    index1 = z1 + 1
    index2 = 16384*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf513', get_index_2, where, None)
        return store
op513 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op514: ExternKernelSchedulerNode(FallbackKernel)
op514.writes = [StarDep(name='buf514', mode=None)]
op514.unmet_dependencies = 
    [   StarDep(name='buf509', mode=None),
        StarDep(name='buf511', mode=None),
        StarDep(name='buf512', mode=None),
        StarDep(name='buf513', mode=None)]
op514.met_dependencies = []
op514.outputs = [
    buf514: FallbackKernel
    buf514.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf514.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op515'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op517'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op518'), can_inplace=False, is_weak=False),
    ]
]
op514.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op515: ExternKernelSchedulerNode(MultiOutput)
op515.writes = [StarDep(name='buf515', mode=None)]
op515.unmet_dependencies = [StarDep(name='buf514', mode=None)]
op515.met_dependencies = []
op515.outputs = [
    buf515: MultiOutput
    buf515.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf515.users = [NodeUser(node=ExternKernelSchedulerNode(name='op519'), can_inplace=False, is_weak=False)]
]
op515.node.kernel = None


op519: ExternKernelSchedulerNode(ExternKernelOut)
op519.writes = [StarDep(name='buf519', mode=None)]
op519.unmet_dependencies = [StarDep(name='buf515', mode=None)]
op519.met_dependencies = [StarDep(name='arg337_1', mode=None)]
op519.outputs = [
    buf519: ExternKernelOut
    buf519.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf519.users = [NodeUser(node=SchedulerNode(name='op520'), can_inplace=True, is_weak=False)]
]
op519.node.kernel = extern_kernels.mm


op520_op521_op522_op524: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op520_op521_op522_op524.writes = 
    [   MemoryDep('buf520', c0, {c0: 2097152}, None),
        MemoryDep('buf521', c0, {c0: 2048}, None),
        MemoryDep('buf522', c0, {c0: 2048}, None),
        MemoryDep('buf524', c0, {c0: 2097152}, None)]
op520_op521_op522_op524.unmet_dependencies = 
    [   MemoryDep('buf495', c0, {c0: 2097152}, None),
        MemoryDep('buf502', c0, {c0: 2097152}, None),
        MemoryDep('buf519', c0, {c0: 2097152}, None)]
op520_op521_op522_op524.met_dependencies = 
    [   MemoryDep('arg328_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg338_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg339_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg340_1', c1, {c0: 2048, c1: 1024}, None)]
op520_op521_op522_op524.outputs = [
    buf520: ComputedBuffer
    buf520.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf520.users = [
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op522'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op523'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op537'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op539'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=True, is_weak=False),
    ]
    buf521: ComputedBuffer
    buf521.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf521.users = [NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False)]
    buf522: ComputedBuffer
    buf522.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf522.users = [NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False)]
    buf524: ComputedBuffer
    buf524.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf524.users = [NodeUser(node=ExternKernelSchedulerNode(name='op525'), can_inplace=False, is_weak=False)]
]
op520_op521_op522_op524.snodes[0] =
op520: SchedulerNode(ComputedBuffer)
op520.writes = [MemoryDep('buf520', c0, {c0: 2097152}, None)]
op520.unmet_dependencies = 
    [   MemoryDep('buf495', c0, {c0: 2097152}, None),
        MemoryDep('buf502', c0, {c0: 2097152}, None),
        MemoryDep('buf519', c0, {c0: 2097152}, None)]
op520.met_dependencies = 
    [   MemoryDep('arg328_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg338_1', c1, {c0: 2048, c1: 1024}, None)]
op520.outputs = [
    buf520: ComputedBuffer
    buf520.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf520.users = [
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op522'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op523'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op537'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op539'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=True, is_weak=False),
    ]
]
op520.group.device = cuda:0
op520.group.iteration = (2097152, 1)
op520.sizes = ([2048, 1024], [])
buf495_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf519_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf520_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op520_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf495', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf502', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg328_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf519', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg338_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf520', get_index_5, add_3, None)
        return store
op520 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op520_op521_op522_op524.snodes[1] =
op521: SchedulerNode(ComputedBuffer)
op521.writes = [MemoryDep('buf521', c0, {c0: 2048}, None)]
op521.unmet_dependencies = [MemoryDep('buf520', c0, {c0: 2097152}, None)]
op521.met_dependencies = []
op521.outputs = [
    buf521: ComputedBuffer
    buf521.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf521.users = [NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False)]
]
op521.group.device = cuda:0
op521.group.iteration = (2048, 1024)
op521.sizes = ([2048], [1024])
buf520_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf521_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op521_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf520', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf521', get_index_1, getitem)
        return store_reduction
op521 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op520_op521_op522_op524.snodes[2] =
op522: SchedulerNode(ComputedBuffer)
op522.writes = [MemoryDep('buf522', c0, {c0: 2048}, None)]
op522.unmet_dependencies = [MemoryDep('buf520', c0, {c0: 2097152}, None)]
op522.met_dependencies = []
op522.outputs = [
    buf522: ComputedBuffer
    buf522.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf522.users = [NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False)]
]
op522.group.device = cuda:0
op522.group.iteration = (2048, 1024)
op522.sizes = ([2048], [1024])
buf520_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf522_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op522_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf520', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf522', get_index_1, getitem_1)
        return store_reduction
op522 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op520_op521_op522_op524.snodes[3] =
op524: SchedulerNode(ComputedBuffer)
op524.writes = [MemoryDep('buf524', c0, {c0: 2097152}, None)]
op524.unmet_dependencies = 
    [   MemoryDep('buf520', c0, {c0: 2097152}, None),
        MemoryDep('buf521', c0, {c0: 2048}, None),
        MemoryDep('buf522', c0, {c0: 2048}, None)]
op524.met_dependencies = 
    [   MemoryDep('arg339_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg340_1', c1, {c0: 2048, c1: 1024}, None)]
op524.outputs = [
    buf524: ComputedBuffer
    buf524.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf524.users = [NodeUser(node=ExternKernelSchedulerNode(name='op525'), can_inplace=False, is_weak=False)]
]
op524.group.device = cuda:0
op524.group.iteration = (2097152, 1)
op524.sizes = ([2048, 1024], [])
buf520_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf521_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf522_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg340_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op524_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf520', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf521', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf522', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg339_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg340_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf524', get_index_5, add_1, None)
        return store
op524 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op520_op521_op522_op524 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op525: ExternKernelSchedulerNode(ExternKernelOut)
op525.writes = [StarDep(name='buf525', mode=None)]
op525.unmet_dependencies = [StarDep(name='buf524', mode=None)]
op525.met_dependencies = [StarDep(name='arg341_1', mode=None)]
op525.outputs = [
    buf525: ExternKernelOut
    buf525.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf525.users = [NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False)]
]
op525.node.kernel = extern_kernels.mm


op526: ExternKernelSchedulerNode(ExternKernelOut)
op526.writes = [StarDep(name='buf526', mode=None)]
op526.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op526.met_dependencies = [StarDep(name='arg343_1', mode=None)]
op526.outputs = [
    buf526: ExternKernelOut
    buf526.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf526.users = [NodeUser(node=SchedulerNode(name='op527'), can_inplace=False, is_weak=False)]
]
op526.node.kernel = extern_kernels.mm


op527: SchedulerNode(ComputedBuffer)
op527.writes = [MemoryDep('buf527', c0, {c0: 2097152}, None)]
op527.unmet_dependencies = [   MemoryDep('buf526', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op527.met_dependencies = [MemoryDep('arg344_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op527.outputs = [
    buf527: ComputedBuffer
    buf527.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf527.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op531'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op527.group.device = cuda:0
op527.group.iteration = (2097152, 1)
op527.sizes = ([16, 16, 128, 64], [])
buf526_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg344_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf527_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op527_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg344_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf527', get_index_2, add, None)
        return store
op527 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op528: ExternKernelSchedulerNode(ExternKernelOut)
op528.writes = [StarDep(name='buf528', mode=None)]
op528.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op528.met_dependencies = [StarDep(name='arg345_1', mode=None)]
op528.outputs = [
    buf528: ExternKernelOut
    buf528.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf528.users = [NodeUser(node=SchedulerNode(name='op529'), can_inplace=False, is_weak=False)]
]
op528.node.kernel = extern_kernels.mm


op529: SchedulerNode(ComputedBuffer)
op529.writes = [MemoryDep('buf529', c0, {c0: 2097152}, None)]
op529.unmet_dependencies = [   MemoryDep('buf528', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op529.met_dependencies = [MemoryDep('arg346_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op529.outputs = [
    buf529: ComputedBuffer
    buf529.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf529.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op531'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op529.group.device = cuda:0
op529.group.iteration = (2097152, 1)
op529.sizes = ([16, 16, 128, 64], [])
buf528_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg346_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf529_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op529_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf528', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg346_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf529', get_index_2, add, None)
        return store
op529 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op530: SchedulerNode(ComputedBuffer)
op530.writes = [MemoryDep('buf530', c0, {c0: 2097152}, None)]
op530.unmet_dependencies = [   MemoryDep('buf525', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op530.met_dependencies = [MemoryDep('arg342_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op530.outputs = [
    buf530: ComputedBuffer
    buf530.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf530.users = [NodeUser(node=ExternKernelSchedulerNode(name='op531'), can_inplace=False, is_weak=False)]
]
op530.group.device = cuda:0
op530.group.iteration = (2097152, 1)
op530.sizes = ([16, 16, 128, 64], [])
buf525_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf530_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op530_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf525', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg342_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf530', get_index_2, add, None)
        return store
op530 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op531: ExternKernelSchedulerNode(FallbackKernel)
op531.writes = [StarDep(name='buf531', mode=None)]
op531.unmet_dependencies = 
    [   StarDep(name='buf527', mode=None),
        StarDep(name='buf529', mode=None),
        StarDep(name='buf530', mode=None)]
op531.met_dependencies = []
op531.outputs = [
    buf531: FallbackKernel
    buf531.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf531.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op532'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op534'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op535'), can_inplace=False, is_weak=False),
    ]
]
op531.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op532: ExternKernelSchedulerNode(MultiOutput)
op532.writes = [StarDep(name='buf532', mode=None)]
op532.unmet_dependencies = [StarDep(name='buf531', mode=None)]
op532.met_dependencies = []
op532.outputs = [
    buf532: MultiOutput
    buf532.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf532.users = [NodeUser(node=ExternKernelSchedulerNode(name='op536'), can_inplace=False, is_weak=False)]
]
op532.node.kernel = None


op536: ExternKernelSchedulerNode(ExternKernelOut)
op536.writes = [StarDep(name='buf536', mode=None)]
op536.unmet_dependencies = [StarDep(name='buf532', mode=None)]
op536.met_dependencies = [StarDep(name='arg347_1', mode=None)]
op536.outputs = [
    buf536: ExternKernelOut
    buf536.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf536.users = [
        NodeUser(node=SchedulerNode(name='op537'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op539'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=True, is_weak=False),
    ]
]
op536.node.kernel = extern_kernels.mm


op537_op538_op540: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op537_op538_op540.writes = 
    [   MemoryDep('buf537', c0, {c0: 2048}, None),
        MemoryDep('buf538', c0, {c0: 2048}, None),
        MemoryDep('buf540', c0, {c0: 2097152}, None)]
op537_op538_op540.unmet_dependencies = 
    [   MemoryDep('buf520', c0, {c0: 2097152}, None),
        MemoryDep('buf536', c0, {c0: 2097152}, None)]
op537_op538_op540.met_dependencies = 
    [   MemoryDep('arg348_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg349_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg350_1', c1, {c0: 2048, c1: 1024}, None)]
op537_op538_op540.outputs = [
    buf537: ComputedBuffer
    buf537.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf537.users = [NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False)]
    buf538: ComputedBuffer
    buf538.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf538.users = [NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False)]
    buf540: ComputedBuffer
    buf540.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf540.users = [NodeUser(node=ExternKernelSchedulerNode(name='op541'), can_inplace=False, is_weak=False)]
]
op537_op538_op540.snodes[0] =
op537: SchedulerNode(ComputedBuffer)
op537.writes = [MemoryDep('buf537', c0, {c0: 2048}, None)]
op537.unmet_dependencies = 
    [   MemoryDep('buf520', c0, {c0: 2097152}, None),
        MemoryDep('buf536', c0, {c0: 2097152}, None)]
op537.met_dependencies = [MemoryDep('arg348_1', c1, {c0: 2048, c1: 1024}, None)]
op537.outputs = [
    buf537: ComputedBuffer
    buf537.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf537.users = [NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False)]
]
op537.group.device = cuda:0
op537.group.iteration = (2048, 1024)
op537.sizes = ([2048], [1024])
buf520_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf536_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf537_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op537_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf520', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf536', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg348_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf537', get_index_3, getitem)
        return store_reduction
op537 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op537_op538_op540.snodes[1] =
op538: SchedulerNode(ComputedBuffer)
op538.writes = [MemoryDep('buf538', c0, {c0: 2048}, None)]
op538.unmet_dependencies = 
    [   MemoryDep('buf520', c0, {c0: 2097152}, None),
        MemoryDep('buf536', c0, {c0: 2097152}, None)]
op538.met_dependencies = [MemoryDep('arg348_1', c1, {c0: 2048, c1: 1024}, None)]
op538.outputs = [
    buf538: ComputedBuffer
    buf538.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf538.users = [NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False)]
]
op538.group.device = cuda:0
op538.group.iteration = (2048, 1024)
op538.sizes = ([2048], [1024])
buf520_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf536_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf538_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op538_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf520', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf536', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg348_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf538', get_index_3, getitem_1)
        return store_reduction
op538 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op537_op538_op540.snodes[2] =
op540: SchedulerNode(ComputedBuffer)
op540.writes = [MemoryDep('buf540', c0, {c0: 2097152}, None)]
op540.unmet_dependencies = 
    [   MemoryDep('buf520', c0, {c0: 2097152}, None),
        MemoryDep('buf536', c0, {c0: 2097152}, None),
        MemoryDep('buf537', c0, {c0: 2048}, None),
        MemoryDep('buf538', c0, {c0: 2048}, None)]
op540.met_dependencies = 
    [   MemoryDep('arg348_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg349_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg350_1', c1, {c0: 2048, c1: 1024}, None)]
op540.outputs = [
    buf540: ComputedBuffer
    buf540.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf540.users = [NodeUser(node=ExternKernelSchedulerNode(name='op541'), can_inplace=False, is_weak=False)]
]
op540.group.device = cuda:0
op540.group.iteration = (2097152, 1)
op540.sizes = ([2048, 1024], [])
buf520_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf536_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf537_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf538_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf540_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op540_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf520', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf536', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg348_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf537', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf538', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg349_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg350_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf540', get_index_7, add_3, None)
        return store
op540 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op537_op538_op540 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op541: ExternKernelSchedulerNode(ExternKernelOut)
op541.writes = [StarDep(name='buf541', mode=None)]
op541.unmet_dependencies = [StarDep(name='buf540', mode=None)]
op541.met_dependencies = [StarDep(name='arg351_1', mode=None)]
op541.outputs = [
    buf541: ExternKernelOut
    buf541.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf541.users = [NodeUser(node=SchedulerNode(name='op542'), can_inplace=True, is_weak=False)]
]
op541.node.kernel = extern_kernels.mm


op542: SchedulerNode(ComputedBuffer)
op542.writes = [MemoryDep('buf542', c0, {c0: 8388608}, None)]
op542.unmet_dependencies = [MemoryDep('buf541', c0, {c0: 8388608}, None)]
op542.met_dependencies = [MemoryDep('arg352_1', c1, {c0: 2048, c1: 4096}, None)]
op542.outputs = [
    buf542: ComputedBuffer
    buf542.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf542.users = [NodeUser(node=ExternKernelSchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
]
op542.group.device = cuda:0
op542.group.iteration = (8388608, 1)
op542.sizes = ([2048, 4096], [])
buf541_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf542_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op542_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf541', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg352_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf542', get_index_2, relu, None)
        return store
op542 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op543: ExternKernelSchedulerNode(ExternKernelOut)
op543.writes = [StarDep(name='buf543', mode=None)]
op543.unmet_dependencies = [StarDep(name='buf542', mode=None)]
op543.met_dependencies = [StarDep(name='arg353_1', mode=None)]
op543.outputs = [
    buf543: ExternKernelOut
    buf543.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf543.users = [NodeUser(node=SchedulerNode(name='op544'), can_inplace=True, is_weak=False)]
]
op543.node.kernel = extern_kernels.mm


op544_op545_op546_op548: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op544_op545_op546_op548.writes = 
    [   MemoryDep('buf544', c0, {c0: 2097152}, None),
        MemoryDep('buf545', c0, {c0: 2048}, None),
        MemoryDep('buf546', c0, {c0: 2048}, None),
        MemoryDep('buf548', c0, {c0: 2097152}, None)]
op544_op545_op546_op548.unmet_dependencies = 
    [   MemoryDep('buf520', c0, {c0: 2097152}, None),
        MemoryDep('buf536', c0, {c0: 2097152}, None),
        MemoryDep('buf543', c0, {c0: 2097152}, None)]
op544_op545_op546_op548.met_dependencies = 
    [   MemoryDep('arg348_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg354_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg355_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg356_1', c1, {c0: 2048, c1: 1024}, None)]
op544_op545_op546_op548.outputs = [
    buf544: ComputedBuffer
    buf544.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf544.users = [
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op547'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op548'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op565'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op578'), can_inplace=True, is_weak=False),
    ]
    buf545: ComputedBuffer
    buf545.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf545.users = [NodeUser(node=SchedulerNode(name='op548'), can_inplace=False, is_weak=False)]
    buf546: ComputedBuffer
    buf546.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf546.users = [NodeUser(node=SchedulerNode(name='op548'), can_inplace=False, is_weak=False)]
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf548.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op549'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op550'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op552'), can_inplace=False, is_weak=False),
    ]
]
op544_op545_op546_op548.snodes[0] =
op544: SchedulerNode(ComputedBuffer)
op544.writes = [MemoryDep('buf544', c0, {c0: 2097152}, None)]
op544.unmet_dependencies = 
    [   MemoryDep('buf520', c0, {c0: 2097152}, None),
        MemoryDep('buf536', c0, {c0: 2097152}, None),
        MemoryDep('buf543', c0, {c0: 2097152}, None)]
op544.met_dependencies = 
    [   MemoryDep('arg348_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg354_1', c1, {c0: 2048, c1: 1024}, None)]
op544.outputs = [
    buf544: ComputedBuffer
    buf544.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf544.users = [
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op547'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op548'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op565'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op578'), can_inplace=True, is_weak=False),
    ]
]
op544.group.device = cuda:0
op544.group.iteration = (2097152, 1)
op544.sizes = ([2048, 1024], [])
buf520_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf536_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf543_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op544_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf520', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf536', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg348_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf543', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg354_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf544', get_index_5, add_3, None)
        return store
op544 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op544_op545_op546_op548.snodes[1] =
op545: SchedulerNode(ComputedBuffer)
op545.writes = [MemoryDep('buf545', c0, {c0: 2048}, None)]
op545.unmet_dependencies = [MemoryDep('buf544', c0, {c0: 2097152}, None)]
op545.met_dependencies = []
op545.outputs = [
    buf545: ComputedBuffer
    buf545.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf545.users = [NodeUser(node=SchedulerNode(name='op548'), can_inplace=False, is_weak=False)]
]
op545.group.device = cuda:0
op545.group.iteration = (2048, 1024)
op545.sizes = ([2048], [1024])
buf544_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf545_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op545_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf544', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf545', get_index_1, getitem)
        return store_reduction
op545 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op544_op545_op546_op548.snodes[2] =
op546: SchedulerNode(ComputedBuffer)
op546.writes = [MemoryDep('buf546', c0, {c0: 2048}, None)]
op546.unmet_dependencies = [MemoryDep('buf544', c0, {c0: 2097152}, None)]
op546.met_dependencies = []
op546.outputs = [
    buf546: ComputedBuffer
    buf546.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf546.users = [NodeUser(node=SchedulerNode(name='op548'), can_inplace=False, is_weak=False)]
]
op546.group.device = cuda:0
op546.group.iteration = (2048, 1024)
op546.sizes = ([2048], [1024])
buf544_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op546_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf544', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf546', get_index_1, getitem_1)
        return store_reduction
op546 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op544_op545_op546_op548.snodes[3] =
op548: SchedulerNode(ComputedBuffer)
op548.writes = [MemoryDep('buf548', c0, {c0: 2097152}, None)]
op548.unmet_dependencies = 
    [   MemoryDep('buf544', c0, {c0: 2097152}, None),
        MemoryDep('buf545', c0, {c0: 2048}, None),
        MemoryDep('buf546', c0, {c0: 2048}, None)]
op548.met_dependencies = 
    [   MemoryDep('arg355_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg356_1', c1, {c0: 2048, c1: 1024}, None)]
op548.outputs = [
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf548.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op549'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op550'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op552'), can_inplace=False, is_weak=False),
    ]
]
op548.group.device = cuda:0
op548.group.iteration = (2097152, 1)
op548.sizes = ([2048, 1024], [])
buf544_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf545_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf546_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg355_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg356_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf548_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op548_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf544', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf545', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf546', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg355_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg356_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf548', get_index_5, add_1, None)
        return store
op548 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op544_op545_op546_op548 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op549: ExternKernelSchedulerNode(ExternKernelOut)
op549.writes = [StarDep(name='buf549', mode=None)]
op549.unmet_dependencies = [StarDep(name='buf548', mode=None)]
op549.met_dependencies = [StarDep(name='arg357_1', mode=None)]
op549.outputs = [
    buf549: ExternKernelOut
    buf549.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf549.users = [NodeUser(node=SchedulerNode(name='op554'), can_inplace=False, is_weak=False)]
]
op549.node.kernel = extern_kernels.mm


op550: ExternKernelSchedulerNode(ExternKernelOut)
op550.writes = [StarDep(name='buf550', mode=None)]
op550.unmet_dependencies = [StarDep(name='buf548', mode=None)]
op550.met_dependencies = [StarDep(name='arg359_1', mode=None)]
op550.outputs = [
    buf550: ExternKernelOut
    buf550.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf550.users = [NodeUser(node=SchedulerNode(name='op551'), can_inplace=False, is_weak=False)]
]
op550.node.kernel = extern_kernels.mm


op551: SchedulerNode(ComputedBuffer)
op551.writes = [MemoryDep('buf551', c0, {c0: 2097152}, None)]
op551.unmet_dependencies = [   MemoryDep('buf550', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op551.met_dependencies = [MemoryDep('arg360_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op551.outputs = [
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf551.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op556'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op551.group.device = cuda:0
op551.group.iteration = (2097152, 1)
op551.sizes = ([16, 16, 128, 64], [])
buf550_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg360_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf551_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op551_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf550', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg360_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf551', get_index_2, add, None)
        return store
op551 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op552: ExternKernelSchedulerNode(ExternKernelOut)
op552.writes = [StarDep(name='buf552', mode=None)]
op552.unmet_dependencies = [StarDep(name='buf548', mode=None)]
op552.met_dependencies = [StarDep(name='arg361_1', mode=None)]
op552.outputs = [
    buf552: ExternKernelOut
    buf552.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf552.users = [NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False)]
]
op552.node.kernel = extern_kernels.mm


op553: SchedulerNode(ComputedBuffer)
op553.writes = [MemoryDep('buf553', c0, {c0: 2097152}, None)]
op553.unmet_dependencies = [   MemoryDep('buf552', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op553.met_dependencies = [MemoryDep('arg362_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op553.outputs = [
    buf553: ComputedBuffer
    buf553.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf553.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op556'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op553.group.device = cuda:0
op553.group.iteration = (2097152, 1)
op553.sizes = ([16, 16, 128, 64], [])
buf552_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg362_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf553_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op553_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf552', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg362_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf553', get_index_2, add, None)
        return store
op553 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op554: SchedulerNode(ComputedBuffer)
op554.writes = [MemoryDep('buf554', c0, {c0: 2097152}, None)]
op554.unmet_dependencies = [   MemoryDep('buf549', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op554.met_dependencies = [MemoryDep('arg358_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op554.outputs = [
    buf554: ComputedBuffer
    buf554.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf554.users = [NodeUser(node=ExternKernelSchedulerNode(name='op556'), can_inplace=False, is_weak=False)]
]
op554.group.device = cuda:0
op554.group.iteration = (2097152, 1)
op554.sizes = ([16, 16, 128, 64], [])
buf549_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf554_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op554_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf549', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg358_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf554', get_index_2, add, None)
        return store
op554 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op555: SchedulerNode(ComputedBuffer)
op555.writes = [MemoryDep('buf555', c0, {c0: 4194304}, None)]
op555.unmet_dependencies = []
op555.met_dependencies = []
op555.outputs = [
    buf555: ComputedBuffer
    buf555.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf555.users = [NodeUser(node=ExternKernelSchedulerNode(name='op556'), can_inplace=False, is_weak=False)]
]
op555.group.device = cuda:0
op555.group.iteration = (4194304, 1)
op555.sizes = ([256, 128, 128], [])
buf555_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op555_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 128}
    index0 = z2
    index1 = z1 + 1
    index2 = 16384*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf555', get_index_2, where, None)
        return store
op555 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op556: ExternKernelSchedulerNode(FallbackKernel)
op556.writes = [StarDep(name='buf556', mode=None)]
op556.unmet_dependencies = 
    [   StarDep(name='buf551', mode=None),
        StarDep(name='buf553', mode=None),
        StarDep(name='buf554', mode=None),
        StarDep(name='buf555', mode=None)]
op556.met_dependencies = []
op556.outputs = [
    buf556: FallbackKernel
    buf556.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf556.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op557'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op558'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op559'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op560'), can_inplace=False, is_weak=False),
    ]
]
op556.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op557: ExternKernelSchedulerNode(MultiOutput)
op557.writes = [StarDep(name='buf557', mode=None)]
op557.unmet_dependencies = [StarDep(name='buf556', mode=None)]
op557.met_dependencies = []
op557.outputs = [
    buf557: MultiOutput
    buf557.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf557.users = [NodeUser(node=ExternKernelSchedulerNode(name='op561'), can_inplace=False, is_weak=False)]
]
op557.node.kernel = None


op561: ExternKernelSchedulerNode(ExternKernelOut)
op561.writes = [StarDep(name='buf561', mode=None)]
op561.unmet_dependencies = [StarDep(name='buf557', mode=None)]
op561.met_dependencies = [StarDep(name='arg363_1', mode=None)]
op561.outputs = [
    buf561: ExternKernelOut
    buf561.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf561.users = [
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op565'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op578'), can_inplace=True, is_weak=False),
    ]
]
op561.node.kernel = extern_kernels.mm


op562_op563_op565: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op562_op563_op565.writes = 
    [   MemoryDep('buf562', c0, {c0: 2048}, None),
        MemoryDep('buf563', c0, {c0: 2048}, None),
        MemoryDep('buf565', c0, {c0: 2097152}, None)]
op562_op563_op565.unmet_dependencies = 
    [   MemoryDep('buf544', c0, {c0: 2097152}, None),
        MemoryDep('buf561', c0, {c0: 2097152}, None)]
op562_op563_op565.met_dependencies = 
    [   MemoryDep('arg364_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg365_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg366_1', c1, {c0: 2048, c1: 1024}, None)]
op562_op563_op565.outputs = [
    buf562: ComputedBuffer
    buf562.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf562.users = [NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False)]
    buf563: ComputedBuffer
    buf563.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf563.users = [NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False)]
    buf565: ComputedBuffer
    buf565.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf565.users = [NodeUser(node=ExternKernelSchedulerNode(name='op566'), can_inplace=False, is_weak=False)]
]
op562_op563_op565.snodes[0] =
op562: SchedulerNode(ComputedBuffer)
op562.writes = [MemoryDep('buf562', c0, {c0: 2048}, None)]
op562.unmet_dependencies = 
    [   MemoryDep('buf544', c0, {c0: 2097152}, None),
        MemoryDep('buf561', c0, {c0: 2097152}, None)]
op562.met_dependencies = [MemoryDep('arg364_1', c1, {c0: 2048, c1: 1024}, None)]
op562.outputs = [
    buf562: ComputedBuffer
    buf562.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf562.users = [NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False)]
]
op562.group.device = cuda:0
op562.group.iteration = (2048, 1024)
op562.sizes = ([2048], [1024])
buf544_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf561_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg364_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf562_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op562_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf544', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf561', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg364_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf562', get_index_3, getitem)
        return store_reduction
op562 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op562_op563_op565.snodes[1] =
op563: SchedulerNode(ComputedBuffer)
op563.writes = [MemoryDep('buf563', c0, {c0: 2048}, None)]
op563.unmet_dependencies = 
    [   MemoryDep('buf544', c0, {c0: 2097152}, None),
        MemoryDep('buf561', c0, {c0: 2097152}, None)]
op563.met_dependencies = [MemoryDep('arg364_1', c1, {c0: 2048, c1: 1024}, None)]
op563.outputs = [
    buf563: ComputedBuffer
    buf563.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf563.users = [NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False)]
]
op563.group.device = cuda:0
op563.group.iteration = (2048, 1024)
op563.sizes = ([2048], [1024])
buf544_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf561_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg364_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf563_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op563_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf544', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf561', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg364_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf563', get_index_3, getitem_1)
        return store_reduction
op563 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op562_op563_op565.snodes[2] =
op565: SchedulerNode(ComputedBuffer)
op565.writes = [MemoryDep('buf565', c0, {c0: 2097152}, None)]
op565.unmet_dependencies = 
    [   MemoryDep('buf544', c0, {c0: 2097152}, None),
        MemoryDep('buf561', c0, {c0: 2097152}, None),
        MemoryDep('buf562', c0, {c0: 2048}, None),
        MemoryDep('buf563', c0, {c0: 2048}, None)]
op565.met_dependencies = 
    [   MemoryDep('arg364_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg365_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg366_1', c1, {c0: 2048, c1: 1024}, None)]
op565.outputs = [
    buf565: ComputedBuffer
    buf565.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf565.users = [NodeUser(node=ExternKernelSchedulerNode(name='op566'), can_inplace=False, is_weak=False)]
]
op565.group.device = cuda:0
op565.group.iteration = (2097152, 1)
op565.sizes = ([2048, 1024], [])
buf544_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf561_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg364_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf562_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf563_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg365_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg366_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf565_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op565_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf544', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf561', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg364_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf562', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf563', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg365_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg366_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf565', get_index_7, add_3, None)
        return store
op565 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op562_op563_op565 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op566: ExternKernelSchedulerNode(ExternKernelOut)
op566.writes = [StarDep(name='buf566', mode=None)]
op566.unmet_dependencies = [StarDep(name='buf565', mode=None)]
op566.met_dependencies = [StarDep(name='arg367_1', mode=None)]
op566.outputs = [
    buf566: ExternKernelOut
    buf566.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf566.users = [NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
]
op566.node.kernel = extern_kernels.mm


op567: ExternKernelSchedulerNode(ExternKernelOut)
op567.writes = [StarDep(name='buf567', mode=None)]
op567.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op567.met_dependencies = [StarDep(name='arg369_1', mode=None)]
op567.outputs = [
    buf567: ExternKernelOut
    buf567.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf567.users = [NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False)]
]
op567.node.kernel = extern_kernels.mm


op568: SchedulerNode(ComputedBuffer)
op568.writes = [MemoryDep('buf568', c0, {c0: 2097152}, None)]
op568.unmet_dependencies = [   MemoryDep('buf567', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op568.met_dependencies = [MemoryDep('arg370_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op568.outputs = [
    buf568: ComputedBuffer
    buf568.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf568.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op572'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op568.group.device = cuda:0
op568.group.iteration = (2097152, 1)
op568.sizes = ([16, 16, 128, 64], [])
buf567_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op568_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf567', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg370_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf568', get_index_2, add, None)
        return store
op568 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op569: ExternKernelSchedulerNode(ExternKernelOut)
op569.writes = [StarDep(name='buf569', mode=None)]
op569.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op569.met_dependencies = [StarDep(name='arg371_1', mode=None)]
op569.outputs = [
    buf569: ExternKernelOut
    buf569.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf569.users = [NodeUser(node=SchedulerNode(name='op570'), can_inplace=False, is_weak=False)]
]
op569.node.kernel = extern_kernels.mm


op570: SchedulerNode(ComputedBuffer)
op570.writes = [MemoryDep('buf570', c0, {c0: 2097152}, None)]
op570.unmet_dependencies = [   MemoryDep('buf569', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op570.met_dependencies = [MemoryDep('arg372_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op570.outputs = [
    buf570: ComputedBuffer
    buf570.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf570.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op572'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op570.group.device = cuda:0
op570.group.iteration = (2097152, 1)
op570.sizes = ([16, 16, 128, 64], [])
buf569_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg372_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf570_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op570_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf569', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg372_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf570', get_index_2, add, None)
        return store
op570 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op571: SchedulerNode(ComputedBuffer)
op571.writes = [MemoryDep('buf571', c0, {c0: 2097152}, None)]
op571.unmet_dependencies = [   MemoryDep('buf566', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op571.met_dependencies = [MemoryDep('arg368_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op571.outputs = [
    buf571: ComputedBuffer
    buf571.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf571.users = [NodeUser(node=ExternKernelSchedulerNode(name='op572'), can_inplace=False, is_weak=False)]
]
op571.group.device = cuda:0
op571.group.iteration = (2097152, 1)
op571.sizes = ([16, 16, 128, 64], [])
buf566_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op571_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf566', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg368_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf571', get_index_2, add, None)
        return store
op571 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op572: ExternKernelSchedulerNode(FallbackKernel)
op572.writes = [StarDep(name='buf572', mode=None)]
op572.unmet_dependencies = 
    [   StarDep(name='buf568', mode=None),
        StarDep(name='buf570', mode=None),
        StarDep(name='buf571', mode=None)]
op572.met_dependencies = []
op572.outputs = [
    buf572: FallbackKernel
    buf572.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf572.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op573'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op574'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op575'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op576'), can_inplace=False, is_weak=False),
    ]
]
op572.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op573: ExternKernelSchedulerNode(MultiOutput)
op573.writes = [StarDep(name='buf573', mode=None)]
op573.unmet_dependencies = [StarDep(name='buf572', mode=None)]
op573.met_dependencies = []
op573.outputs = [
    buf573: MultiOutput
    buf573.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf573.users = [NodeUser(node=ExternKernelSchedulerNode(name='op577'), can_inplace=False, is_weak=False)]
]
op573.node.kernel = None


op577: ExternKernelSchedulerNode(ExternKernelOut)
op577.writes = [StarDep(name='buf577', mode=None)]
op577.unmet_dependencies = [StarDep(name='buf573', mode=None)]
op577.met_dependencies = [StarDep(name='arg373_1', mode=None)]
op577.outputs = [
    buf577: ExternKernelOut
    buf577.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf577.users = [NodeUser(node=SchedulerNode(name='op578'), can_inplace=True, is_weak=False)]
]
op577.node.kernel = extern_kernels.mm


op578_op579_op580_op582: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op578_op579_op580_op582.writes = 
    [   MemoryDep('buf578', c0, {c0: 2097152}, None),
        MemoryDep('buf579', c0, {c0: 2048}, None),
        MemoryDep('buf580', c0, {c0: 2048}, None),
        MemoryDep('buf582', c0, {c0: 2097152}, None)]
op578_op579_op580_op582.unmet_dependencies = 
    [   MemoryDep('buf544', c0, {c0: 2097152}, None),
        MemoryDep('buf561', c0, {c0: 2097152}, None),
        MemoryDep('buf577', c0, {c0: 2097152}, None)]
op578_op579_op580_op582.met_dependencies = 
    [   MemoryDep('arg364_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg374_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg375_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg376_1', c1, {c0: 2048, c1: 1024}, None)]
op578_op579_op580_op582.outputs = [
    buf578: ComputedBuffer
    buf578.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf578.users = [
        NodeUser(node=SchedulerNode(name='op579'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op580'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op581'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op582'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op586'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op589'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=True, is_weak=False),
    ]
    buf579: ComputedBuffer
    buf579.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf579.users = [NodeUser(node=SchedulerNode(name='op582'), can_inplace=False, is_weak=False)]
    buf580: ComputedBuffer
    buf580.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf580.users = [NodeUser(node=SchedulerNode(name='op582'), can_inplace=False, is_weak=False)]
    buf582: ComputedBuffer
    buf582.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf582.users = [NodeUser(node=ExternKernelSchedulerNode(name='op583'), can_inplace=False, is_weak=False)]
]
op578_op579_op580_op582.snodes[0] =
op578: SchedulerNode(ComputedBuffer)
op578.writes = [MemoryDep('buf578', c0, {c0: 2097152}, None)]
op578.unmet_dependencies = 
    [   MemoryDep('buf544', c0, {c0: 2097152}, None),
        MemoryDep('buf561', c0, {c0: 2097152}, None),
        MemoryDep('buf577', c0, {c0: 2097152}, None)]
op578.met_dependencies = 
    [   MemoryDep('arg364_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg374_1', c1, {c0: 2048, c1: 1024}, None)]
op578.outputs = [
    buf578: ComputedBuffer
    buf578.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf578.users = [
        NodeUser(node=SchedulerNode(name='op579'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op580'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op581'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op582'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op586'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op589'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=True, is_weak=False),
    ]
]
op578.group.device = cuda:0
op578.group.iteration = (2097152, 1)
op578.sizes = ([2048, 1024], [])
buf544_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf561_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg364_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf577_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg374_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf578_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op578_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf544', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf561', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg364_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf577', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg374_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf578', get_index_5, add_3, None)
        return store
op578 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op578_op579_op580_op582.snodes[1] =
op579: SchedulerNode(ComputedBuffer)
op579.writes = [MemoryDep('buf579', c0, {c0: 2048}, None)]
op579.unmet_dependencies = [MemoryDep('buf578', c0, {c0: 2097152}, None)]
op579.met_dependencies = []
op579.outputs = [
    buf579: ComputedBuffer
    buf579.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf579.users = [NodeUser(node=SchedulerNode(name='op582'), can_inplace=False, is_weak=False)]
]
op579.group.device = cuda:0
op579.group.iteration = (2048, 1024)
op579.sizes = ([2048], [1024])
buf578_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf579_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op579_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf578', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf579', get_index_1, getitem)
        return store_reduction
op579 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op578_op579_op580_op582.snodes[2] =
op580: SchedulerNode(ComputedBuffer)
op580.writes = [MemoryDep('buf580', c0, {c0: 2048}, None)]
op580.unmet_dependencies = [MemoryDep('buf578', c0, {c0: 2097152}, None)]
op580.met_dependencies = []
op580.outputs = [
    buf580: ComputedBuffer
    buf580.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf580.users = [NodeUser(node=SchedulerNode(name='op582'), can_inplace=False, is_weak=False)]
]
op580.group.device = cuda:0
op580.group.iteration = (2048, 1024)
op580.sizes = ([2048], [1024])
buf578_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf580_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op580_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf578', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf580', get_index_1, getitem_1)
        return store_reduction
op580 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op578_op579_op580_op582.snodes[3] =
op582: SchedulerNode(ComputedBuffer)
op582.writes = [MemoryDep('buf582', c0, {c0: 2097152}, None)]
op582.unmet_dependencies = 
    [   MemoryDep('buf578', c0, {c0: 2097152}, None),
        MemoryDep('buf579', c0, {c0: 2048}, None),
        MemoryDep('buf580', c0, {c0: 2048}, None)]
op582.met_dependencies = 
    [   MemoryDep('arg375_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg376_1', c1, {c0: 2048, c1: 1024}, None)]
op582.outputs = [
    buf582: ComputedBuffer
    buf582.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf582.users = [NodeUser(node=ExternKernelSchedulerNode(name='op583'), can_inplace=False, is_weak=False)]
]
op582.group.device = cuda:0
op582.group.iteration = (2097152, 1)
op582.sizes = ([2048, 1024], [])
buf578_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf579_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf580_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg375_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg376_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf582_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op582_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf578', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf579', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf580', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg375_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg376_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf582', get_index_5, add_1, None)
        return store
op582 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op578_op579_op580_op582 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op583: ExternKernelSchedulerNode(ExternKernelOut)
op583.writes = [StarDep(name='buf583', mode=None)]
op583.unmet_dependencies = [StarDep(name='buf582', mode=None)]
op583.met_dependencies = [StarDep(name='arg377_1', mode=None)]
op583.outputs = [
    buf583: ExternKernelOut
    buf583.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf583.users = [NodeUser(node=SchedulerNode(name='op584'), can_inplace=True, is_weak=False)]
]
op583.node.kernel = extern_kernels.mm


op584: SchedulerNode(ComputedBuffer)
op584.writes = [MemoryDep('buf584', c0, {c0: 8388608}, None)]
op584.unmet_dependencies = [MemoryDep('buf583', c0, {c0: 8388608}, None)]
op584.met_dependencies = [MemoryDep('arg378_1', c1, {c0: 2048, c1: 4096}, None)]
op584.outputs = [
    buf584: ComputedBuffer
    buf584.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf584.users = [NodeUser(node=ExternKernelSchedulerNode(name='op585'), can_inplace=False, is_weak=False)]
]
op584.group.device = cuda:0
op584.group.iteration = (8388608, 1)
op584.sizes = ([2048, 4096], [])
buf583_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg378_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf584_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op584_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf583', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg378_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf584', get_index_2, relu, None)
        return store
op584 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op585: ExternKernelSchedulerNode(ExternKernelOut)
op585.writes = [StarDep(name='buf585', mode=None)]
op585.unmet_dependencies = [StarDep(name='buf584', mode=None)]
op585.met_dependencies = [StarDep(name='arg379_1', mode=None)]
op585.outputs = [
    buf585: ExternKernelOut
    buf585.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf585.users = [
        NodeUser(node=SchedulerNode(name='op586'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op589'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=True, is_weak=False),
    ]
]
op585.node.kernel = extern_kernels.mm


op586_op587_op589: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op586_op587_op589.writes = 
    [   MemoryDep('buf586', c0, {c0: 2048}, None),
        MemoryDep('buf587', c0, {c0: 2048}, None),
        MemoryDep('buf589', c0, {c0: 2097152}, None)]
op586_op587_op589.unmet_dependencies = 
    [   MemoryDep('buf578', c0, {c0: 2097152}, None),
        MemoryDep('buf585', c0, {c0: 2097152}, None)]
op586_op587_op589.met_dependencies = 
    [   MemoryDep('arg380_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg381_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg382_1', c1, {c0: 2048, c1: 1024}, None)]
op586_op587_op589.outputs = [
    buf586: ComputedBuffer
    buf586.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf586.users = [NodeUser(node=SchedulerNode(name='op589'), can_inplace=False, is_weak=False)]
    buf587: ComputedBuffer
    buf587.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf587.users = [NodeUser(node=SchedulerNode(name='op589'), can_inplace=False, is_weak=False)]
    buf589: ComputedBuffer
    buf589.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf589.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op590'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op591'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op593'), can_inplace=False, is_weak=False),
    ]
]
op586_op587_op589.snodes[0] =
op586: SchedulerNode(ComputedBuffer)
op586.writes = [MemoryDep('buf586', c0, {c0: 2048}, None)]
op586.unmet_dependencies = 
    [   MemoryDep('buf578', c0, {c0: 2097152}, None),
        MemoryDep('buf585', c0, {c0: 2097152}, None)]
op586.met_dependencies = [MemoryDep('arg380_1', c1, {c0: 2048, c1: 1024}, None)]
op586.outputs = [
    buf586: ComputedBuffer
    buf586.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf586.users = [NodeUser(node=SchedulerNode(name='op589'), can_inplace=False, is_weak=False)]
]
op586.group.device = cuda:0
op586.group.iteration = (2048, 1024)
op586.sizes = ([2048], [1024])
buf578_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg380_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf586_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op586_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf578', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf585', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg380_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf586', get_index_3, getitem)
        return store_reduction
op586 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op586_op587_op589.snodes[1] =
op587: SchedulerNode(ComputedBuffer)
op587.writes = [MemoryDep('buf587', c0, {c0: 2048}, None)]
op587.unmet_dependencies = 
    [   MemoryDep('buf578', c0, {c0: 2097152}, None),
        MemoryDep('buf585', c0, {c0: 2097152}, None)]
op587.met_dependencies = [MemoryDep('arg380_1', c1, {c0: 2048, c1: 1024}, None)]
op587.outputs = [
    buf587: ComputedBuffer
    buf587.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf587.users = [NodeUser(node=SchedulerNode(name='op589'), can_inplace=False, is_weak=False)]
]
op587.group.device = cuda:0
op587.group.iteration = (2048, 1024)
op587.sizes = ([2048], [1024])
buf578_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg380_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf587_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op587_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf578', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf585', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg380_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf587', get_index_3, getitem_1)
        return store_reduction
op587 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op586_op587_op589.snodes[2] =
op589: SchedulerNode(ComputedBuffer)
op589.writes = [MemoryDep('buf589', c0, {c0: 2097152}, None)]
op589.unmet_dependencies = 
    [   MemoryDep('buf578', c0, {c0: 2097152}, None),
        MemoryDep('buf585', c0, {c0: 2097152}, None),
        MemoryDep('buf586', c0, {c0: 2048}, None),
        MemoryDep('buf587', c0, {c0: 2048}, None)]
op589.met_dependencies = 
    [   MemoryDep('arg380_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg381_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg382_1', c1, {c0: 2048, c1: 1024}, None)]
op589.outputs = [
    buf589: ComputedBuffer
    buf589.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf589.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op590'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op591'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op593'), can_inplace=False, is_weak=False),
    ]
]
op589.group.device = cuda:0
op589.group.iteration = (2097152, 1)
op589.sizes = ([2048, 1024], [])
buf578_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg380_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf586_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf587_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg381_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg382_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf589_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op589_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf578', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf585', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg380_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf586', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf587', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg381_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg382_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf589', get_index_7, add_3, None)
        return store
op589 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op586_op587_op589 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op590: ExternKernelSchedulerNode(ExternKernelOut)
op590.writes = [StarDep(name='buf590', mode=None)]
op590.unmet_dependencies = [StarDep(name='buf589', mode=None)]
op590.met_dependencies = [StarDep(name='arg383_1', mode=None)]
op590.outputs = [
    buf590: ExternKernelOut
    buf590.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf590.users = [NodeUser(node=SchedulerNode(name='op595'), can_inplace=False, is_weak=False)]
]
op590.node.kernel = extern_kernels.mm


op591: ExternKernelSchedulerNode(ExternKernelOut)
op591.writes = [StarDep(name='buf591', mode=None)]
op591.unmet_dependencies = [StarDep(name='buf589', mode=None)]
op591.met_dependencies = [StarDep(name='arg385_1', mode=None)]
op591.outputs = [
    buf591: ExternKernelOut
    buf591.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf591.users = [NodeUser(node=SchedulerNode(name='op592'), can_inplace=False, is_weak=False)]
]
op591.node.kernel = extern_kernels.mm


op592: SchedulerNode(ComputedBuffer)
op592.writes = [MemoryDep('buf592', c0, {c0: 2097152}, None)]
op592.unmet_dependencies = [   MemoryDep('buf591', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op592.met_dependencies = [MemoryDep('arg386_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op592.outputs = [
    buf592: ComputedBuffer
    buf592.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf592.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op592.group.device = cuda:0
op592.group.iteration = (2097152, 1)
op592.sizes = ([16, 16, 128, 64], [])
buf591_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg386_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf592_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op592_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf591', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg386_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf592', get_index_2, add, None)
        return store
op592 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op593: ExternKernelSchedulerNode(ExternKernelOut)
op593.writes = [StarDep(name='buf593', mode=None)]
op593.unmet_dependencies = [StarDep(name='buf589', mode=None)]
op593.met_dependencies = [StarDep(name='arg387_1', mode=None)]
op593.outputs = [
    buf593: ExternKernelOut
    buf593.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf593.users = [NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False)]
]
op593.node.kernel = extern_kernels.mm


op594: SchedulerNode(ComputedBuffer)
op594.writes = [MemoryDep('buf594', c0, {c0: 2097152}, None)]
op594.unmet_dependencies = [   MemoryDep('buf593', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op594.met_dependencies = [MemoryDep('arg388_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op594.outputs = [
    buf594: ComputedBuffer
    buf594.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf594.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op594.group.device = cuda:0
op594.group.iteration = (2097152, 1)
op594.sizes = ([16, 16, 128, 64], [])
buf593_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg388_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf594_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op594_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf593', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg388_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf594', get_index_2, add, None)
        return store
op594 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op595: SchedulerNode(ComputedBuffer)
op595.writes = [MemoryDep('buf595', c0, {c0: 2097152}, None)]
op595.unmet_dependencies = [   MemoryDep('buf590', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op595.met_dependencies = [MemoryDep('arg384_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op595.outputs = [
    buf595: ComputedBuffer
    buf595.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf595.users = [NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False)]
]
op595.group.device = cuda:0
op595.group.iteration = (2097152, 1)
op595.sizes = ([16, 16, 128, 64], [])
buf590_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg384_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf595_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op595_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf590', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg384_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf595', get_index_2, add, None)
        return store
op595 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op596: SchedulerNode(ComputedBuffer)
op596.writes = [MemoryDep('buf596', c0, {c0: 4194304}, None)]
op596.unmet_dependencies = []
op596.met_dependencies = []
op596.outputs = [
    buf596: ComputedBuffer
    buf596.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf596.users = [NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False)]
]
op596.group.device = cuda:0
op596.group.iteration = (4194304, 1)
op596.sizes = ([256, 128, 128], [])
buf596_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op596_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 128}
    index0 = z2
    index1 = z1 + 1
    index2 = 16384*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf596', get_index_2, where, None)
        return store
op596 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op597: ExternKernelSchedulerNode(FallbackKernel)
op597.writes = [StarDep(name='buf597', mode=None)]
op597.unmet_dependencies = 
    [   StarDep(name='buf592', mode=None),
        StarDep(name='buf594', mode=None),
        StarDep(name='buf595', mode=None),
        StarDep(name='buf596', mode=None)]
op597.met_dependencies = []
op597.outputs = [
    buf597: FallbackKernel
    buf597.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf597.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op598'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op599'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op600'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op601'), can_inplace=False, is_weak=False),
    ]
]
op597.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op598: ExternKernelSchedulerNode(MultiOutput)
op598.writes = [StarDep(name='buf598', mode=None)]
op598.unmet_dependencies = [StarDep(name='buf597', mode=None)]
op598.met_dependencies = []
op598.outputs = [
    buf598: MultiOutput
    buf598.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf598.users = [NodeUser(node=ExternKernelSchedulerNode(name='op602'), can_inplace=False, is_weak=False)]
]
op598.node.kernel = None


op602: ExternKernelSchedulerNode(ExternKernelOut)
op602.writes = [StarDep(name='buf602', mode=None)]
op602.unmet_dependencies = [StarDep(name='buf598', mode=None)]
op602.met_dependencies = [StarDep(name='arg389_1', mode=None)]
op602.outputs = [
    buf602: ExternKernelOut
    buf602.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf602.users = [NodeUser(node=SchedulerNode(name='op603'), can_inplace=True, is_weak=False)]
]
op602.node.kernel = extern_kernels.mm


op603_op604_op605_op607: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op603_op604_op605_op607.writes = 
    [   MemoryDep('buf603', c0, {c0: 2097152}, None),
        MemoryDep('buf604', c0, {c0: 2048}, None),
        MemoryDep('buf605', c0, {c0: 2048}, None),
        MemoryDep('buf607', c0, {c0: 2097152}, None)]
op603_op604_op605_op607.unmet_dependencies = 
    [   MemoryDep('buf578', c0, {c0: 2097152}, None),
        MemoryDep('buf585', c0, {c0: 2097152}, None),
        MemoryDep('buf602', c0, {c0: 2097152}, None)]
op603_op604_op605_op607.met_dependencies = 
    [   MemoryDep('arg380_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg390_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg391_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg392_1', c1, {c0: 2048, c1: 1024}, None)]
op603_op604_op605_op607.outputs = [
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf603.users = [
        NodeUser(node=SchedulerNode(name='op604'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op605'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op607'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op620'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op622'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op623'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op627'), can_inplace=True, is_weak=False),
    ]
    buf604: ComputedBuffer
    buf604.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf604.users = [NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False)]
    buf605: ComputedBuffer
    buf605.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf605.users = [NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False)]
    buf607: ComputedBuffer
    buf607.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf607.users = [NodeUser(node=ExternKernelSchedulerNode(name='op608'), can_inplace=False, is_weak=False)]
]
op603_op604_op605_op607.snodes[0] =
op603: SchedulerNode(ComputedBuffer)
op603.writes = [MemoryDep('buf603', c0, {c0: 2097152}, None)]
op603.unmet_dependencies = 
    [   MemoryDep('buf578', c0, {c0: 2097152}, None),
        MemoryDep('buf585', c0, {c0: 2097152}, None),
        MemoryDep('buf602', c0, {c0: 2097152}, None)]
op603.met_dependencies = 
    [   MemoryDep('arg380_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg390_1', c1, {c0: 2048, c1: 1024}, None)]
op603.outputs = [
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf603.users = [
        NodeUser(node=SchedulerNode(name='op604'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op605'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op607'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op620'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op622'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op623'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op627'), can_inplace=True, is_weak=False),
    ]
]
op603.group.device = cuda:0
op603.group.iteration = (2097152, 1)
op603.sizes = ([2048, 1024], [])
buf578_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg380_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf602_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg390_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf603_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op603_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf578', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf585', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg380_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf602', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg390_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf603', get_index_5, add_3, None)
        return store
op603 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op603_op604_op605_op607.snodes[1] =
op604: SchedulerNode(ComputedBuffer)
op604.writes = [MemoryDep('buf604', c0, {c0: 2048}, None)]
op604.unmet_dependencies = [MemoryDep('buf603', c0, {c0: 2097152}, None)]
op604.met_dependencies = []
op604.outputs = [
    buf604: ComputedBuffer
    buf604.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf604.users = [NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False)]
]
op604.group.device = cuda:0
op604.group.iteration = (2048, 1024)
op604.sizes = ([2048], [1024])
buf603_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf604_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op604_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf603', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf604', get_index_1, getitem)
        return store_reduction
op604 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op603_op604_op605_op607.snodes[2] =
op605: SchedulerNode(ComputedBuffer)
op605.writes = [MemoryDep('buf605', c0, {c0: 2048}, None)]
op605.unmet_dependencies = [MemoryDep('buf603', c0, {c0: 2097152}, None)]
op605.met_dependencies = []
op605.outputs = [
    buf605: ComputedBuffer
    buf605.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf605.users = [NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False)]
]
op605.group.device = cuda:0
op605.group.iteration = (2048, 1024)
op605.sizes = ([2048], [1024])
buf603_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf605_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op605_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf603', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf605', get_index_1, getitem_1)
        return store_reduction
op605 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op603_op604_op605_op607.snodes[3] =
op607: SchedulerNode(ComputedBuffer)
op607.writes = [MemoryDep('buf607', c0, {c0: 2097152}, None)]
op607.unmet_dependencies = 
    [   MemoryDep('buf603', c0, {c0: 2097152}, None),
        MemoryDep('buf604', c0, {c0: 2048}, None),
        MemoryDep('buf605', c0, {c0: 2048}, None)]
op607.met_dependencies = 
    [   MemoryDep('arg391_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg392_1', c1, {c0: 2048, c1: 1024}, None)]
op607.outputs = [
    buf607: ComputedBuffer
    buf607.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf607.users = [NodeUser(node=ExternKernelSchedulerNode(name='op608'), can_inplace=False, is_weak=False)]
]
op607.group.device = cuda:0
op607.group.iteration = (2097152, 1)
op607.sizes = ([2048, 1024], [])
buf603_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf604_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf605_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg391_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg392_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf607_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op607_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf603', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf604', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf605', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg391_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg392_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf607', get_index_5, add_1, None)
        return store
op607 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op603_op604_op605_op607 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op608: ExternKernelSchedulerNode(ExternKernelOut)
op608.writes = [StarDep(name='buf608', mode=None)]
op608.unmet_dependencies = [StarDep(name='buf607', mode=None)]
op608.met_dependencies = [StarDep(name='arg393_1', mode=None)]
op608.outputs = [
    buf608: ExternKernelOut
    buf608.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf608.users = [NodeUser(node=SchedulerNode(name='op613'), can_inplace=False, is_weak=False)]
]
op608.node.kernel = extern_kernels.mm


op609: ExternKernelSchedulerNode(ExternKernelOut)
op609.writes = [StarDep(name='buf609', mode=None)]
op609.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op609.met_dependencies = [StarDep(name='arg395_1', mode=None)]
op609.outputs = [
    buf609: ExternKernelOut
    buf609.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf609.users = [NodeUser(node=SchedulerNode(name='op610'), can_inplace=False, is_weak=False)]
]
op609.node.kernel = extern_kernels.mm


op610: SchedulerNode(ComputedBuffer)
op610.writes = [MemoryDep('buf610', c0, {c0: 2097152}, None)]
op610.unmet_dependencies = [   MemoryDep('buf609', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op610.met_dependencies = [MemoryDep('arg396_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op610.outputs = [
    buf610: ComputedBuffer
    buf610.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf610.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op614'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op610.group.device = cuda:0
op610.group.iteration = (2097152, 1)
op610.sizes = ([16, 16, 128, 64], [])
buf609_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg396_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf610_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op610_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf609', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg396_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf610', get_index_2, add, None)
        return store
op610 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op611: ExternKernelSchedulerNode(ExternKernelOut)
op611.writes = [StarDep(name='buf611', mode=None)]
op611.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op611.met_dependencies = [StarDep(name='arg397_1', mode=None)]
op611.outputs = [
    buf611: ExternKernelOut
    buf611.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf611.users = [NodeUser(node=SchedulerNode(name='op612'), can_inplace=False, is_weak=False)]
]
op611.node.kernel = extern_kernels.mm


op612: SchedulerNode(ComputedBuffer)
op612.writes = [MemoryDep('buf612', c0, {c0: 2097152}, None)]
op612.unmet_dependencies = [   MemoryDep('buf611', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op612.met_dependencies = [MemoryDep('arg398_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op612.outputs = [
    buf612: ComputedBuffer
    buf612.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf612.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op614'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op612.group.device = cuda:0
op612.group.iteration = (2097152, 1)
op612.sizes = ([16, 16, 128, 64], [])
buf611_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg398_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf612_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op612_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf611', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg398_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf612', get_index_2, add, None)
        return store
op612 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op613: SchedulerNode(ComputedBuffer)
op613.writes = [MemoryDep('buf613', c0, {c0: 2097152}, None)]
op613.unmet_dependencies = [   MemoryDep('buf608', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op613.met_dependencies = [MemoryDep('arg394_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op613.outputs = [
    buf613: ComputedBuffer
    buf613.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf613.users = [NodeUser(node=ExternKernelSchedulerNode(name='op614'), can_inplace=False, is_weak=False)]
]
op613.group.device = cuda:0
op613.group.iteration = (2097152, 1)
op613.sizes = ([16, 16, 128, 64], [])
buf608_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg394_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf613_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op613_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf608', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg394_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf613', get_index_2, add, None)
        return store
op613 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op614: ExternKernelSchedulerNode(FallbackKernel)
op614.writes = [StarDep(name='buf614', mode=None)]
op614.unmet_dependencies = 
    [   StarDep(name='buf610', mode=None),
        StarDep(name='buf612', mode=None),
        StarDep(name='buf613', mode=None)]
op614.met_dependencies = []
op614.outputs = [
    buf614: FallbackKernel
    buf614.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf614.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op615'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op616'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op617'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op618'), can_inplace=False, is_weak=False),
    ]
]
op614.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op615: ExternKernelSchedulerNode(MultiOutput)
op615.writes = [StarDep(name='buf615', mode=None)]
op615.unmet_dependencies = [StarDep(name='buf614', mode=None)]
op615.met_dependencies = []
op615.outputs = [
    buf615: MultiOutput
    buf615.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf615.users = [NodeUser(node=ExternKernelSchedulerNode(name='op619'), can_inplace=False, is_weak=False)]
]
op615.node.kernel = None


op619: ExternKernelSchedulerNode(ExternKernelOut)
op619.writes = [StarDep(name='buf619', mode=None)]
op619.unmet_dependencies = [StarDep(name='buf615', mode=None)]
op619.met_dependencies = [StarDep(name='arg399_1', mode=None)]
op619.outputs = [
    buf619: ExternKernelOut
    buf619.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf619.users = [
        NodeUser(node=SchedulerNode(name='op620'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op622'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op623'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op627'), can_inplace=True, is_weak=False),
    ]
]
op619.node.kernel = extern_kernels.mm


op620_op621_op623: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op620_op621_op623.writes = 
    [   MemoryDep('buf620', c0, {c0: 2048}, None),
        MemoryDep('buf621', c0, {c0: 2048}, None),
        MemoryDep('buf623', c0, {c0: 2097152}, None)]
op620_op621_op623.unmet_dependencies = 
    [   MemoryDep('buf603', c0, {c0: 2097152}, None),
        MemoryDep('buf619', c0, {c0: 2097152}, None)]
op620_op621_op623.met_dependencies = 
    [   MemoryDep('arg400_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg401_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg402_1', c1, {c0: 2048, c1: 1024}, None)]
op620_op621_op623.outputs = [
    buf620: ComputedBuffer
    buf620.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf620.users = [NodeUser(node=SchedulerNode(name='op623'), can_inplace=False, is_weak=False)]
    buf621: ComputedBuffer
    buf621.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf621.users = [NodeUser(node=SchedulerNode(name='op623'), can_inplace=False, is_weak=False)]
    buf623: ComputedBuffer
    buf623.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf623.users = [NodeUser(node=ExternKernelSchedulerNode(name='op624'), can_inplace=False, is_weak=False)]
]
op620_op621_op623.snodes[0] =
op620: SchedulerNode(ComputedBuffer)
op620.writes = [MemoryDep('buf620', c0, {c0: 2048}, None)]
op620.unmet_dependencies = 
    [   MemoryDep('buf603', c0, {c0: 2097152}, None),
        MemoryDep('buf619', c0, {c0: 2097152}, None)]
op620.met_dependencies = [MemoryDep('arg400_1', c1, {c0: 2048, c1: 1024}, None)]
op620.outputs = [
    buf620: ComputedBuffer
    buf620.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf620.users = [NodeUser(node=SchedulerNode(name='op623'), can_inplace=False, is_weak=False)]
]
op620.group.device = cuda:0
op620.group.iteration = (2048, 1024)
op620.sizes = ([2048], [1024])
buf603_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf619_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg400_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf620_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op620_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf603', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf619', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg400_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf620', get_index_3, getitem)
        return store_reduction
op620 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op620_op621_op623.snodes[1] =
op621: SchedulerNode(ComputedBuffer)
op621.writes = [MemoryDep('buf621', c0, {c0: 2048}, None)]
op621.unmet_dependencies = 
    [   MemoryDep('buf603', c0, {c0: 2097152}, None),
        MemoryDep('buf619', c0, {c0: 2097152}, None)]
op621.met_dependencies = [MemoryDep('arg400_1', c1, {c0: 2048, c1: 1024}, None)]
op621.outputs = [
    buf621: ComputedBuffer
    buf621.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf621.users = [NodeUser(node=SchedulerNode(name='op623'), can_inplace=False, is_weak=False)]
]
op621.group.device = cuda:0
op621.group.iteration = (2048, 1024)
op621.sizes = ([2048], [1024])
buf603_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf619_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg400_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf621_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op621_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf603', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf619', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg400_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf621', get_index_3, getitem_1)
        return store_reduction
op621 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op620_op621_op623.snodes[2] =
op623: SchedulerNode(ComputedBuffer)
op623.writes = [MemoryDep('buf623', c0, {c0: 2097152}, None)]
op623.unmet_dependencies = 
    [   MemoryDep('buf603', c0, {c0: 2097152}, None),
        MemoryDep('buf619', c0, {c0: 2097152}, None),
        MemoryDep('buf620', c0, {c0: 2048}, None),
        MemoryDep('buf621', c0, {c0: 2048}, None)]
op623.met_dependencies = 
    [   MemoryDep('arg400_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg401_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg402_1', c1, {c0: 2048, c1: 1024}, None)]
op623.outputs = [
    buf623: ComputedBuffer
    buf623.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf623.users = [NodeUser(node=ExternKernelSchedulerNode(name='op624'), can_inplace=False, is_weak=False)]
]
op623.group.device = cuda:0
op623.group.iteration = (2097152, 1)
op623.sizes = ([2048, 1024], [])
buf603_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf619_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg400_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf620_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf621_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg401_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg402_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf623_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op623_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf603', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf619', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg400_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf620', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf621', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg401_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg402_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf623', get_index_7, add_3, None)
        return store
op623 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op620_op621_op623 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op624: ExternKernelSchedulerNode(ExternKernelOut)
op624.writes = [StarDep(name='buf624', mode=None)]
op624.unmet_dependencies = [StarDep(name='buf623', mode=None)]
op624.met_dependencies = [StarDep(name='arg403_1', mode=None)]
op624.outputs = [
    buf624: ExternKernelOut
    buf624.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf624.users = [NodeUser(node=SchedulerNode(name='op625'), can_inplace=True, is_weak=False)]
]
op624.node.kernel = extern_kernels.mm


op625: SchedulerNode(ComputedBuffer)
op625.writes = [MemoryDep('buf625', c0, {c0: 8388608}, None)]
op625.unmet_dependencies = [MemoryDep('buf624', c0, {c0: 8388608}, None)]
op625.met_dependencies = [MemoryDep('arg404_1', c1, {c0: 2048, c1: 4096}, None)]
op625.outputs = [
    buf625: ComputedBuffer
    buf625.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf625.users = [NodeUser(node=ExternKernelSchedulerNode(name='op626'), can_inplace=False, is_weak=False)]
]
op625.group.device = cuda:0
op625.group.iteration = (8388608, 1)
op625.sizes = ([2048, 4096], [])
buf624_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg404_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf625_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op625_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf624', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg404_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf625', get_index_2, relu, None)
        return store
op625 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op626: ExternKernelSchedulerNode(ExternKernelOut)
op626.writes = [StarDep(name='buf626', mode=None)]
op626.unmet_dependencies = [StarDep(name='buf625', mode=None)]
op626.met_dependencies = [StarDep(name='arg405_1', mode=None)]
op626.outputs = [
    buf626: ExternKernelOut
    buf626.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf626.users = [NodeUser(node=SchedulerNode(name='op627'), can_inplace=True, is_weak=False)]
]
op626.node.kernel = extern_kernels.mm


op627_op628_op629_op631: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op627_op628_op629_op631.writes = 
    [   MemoryDep('buf627', c0, {c0: 2097152}, None),
        MemoryDep('buf628', c0, {c0: 2048}, None),
        MemoryDep('buf629', c0, {c0: 2048}, None),
        MemoryDep('buf631', c0, {c0: 2097152}, None)]
op627_op628_op629_op631.unmet_dependencies = 
    [   MemoryDep('buf603', c0, {c0: 2097152}, None),
        MemoryDep('buf619', c0, {c0: 2097152}, None),
        MemoryDep('buf626', c0, {c0: 2097152}, None)]
op627_op628_op629_op631.met_dependencies = 
    [   MemoryDep('arg400_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg406_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg407_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg408_1', c1, {c0: 2048, c1: 1024}, None)]
op627_op628_op629_op631.outputs = [
    buf627: ComputedBuffer
    buf627.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf627.users = [
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op630'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op631'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op645'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op646'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op647'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op648'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op661'), can_inplace=True, is_weak=False),
    ]
    buf628: ComputedBuffer
    buf628.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf628.users = [NodeUser(node=SchedulerNode(name='op631'), can_inplace=False, is_weak=False)]
    buf629: ComputedBuffer
    buf629.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf629.users = [NodeUser(node=SchedulerNode(name='op631'), can_inplace=False, is_weak=False)]
    buf631: ComputedBuffer
    buf631.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf631.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op632'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op633'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op635'), can_inplace=False, is_weak=False),
    ]
]
op627_op628_op629_op631.snodes[0] =
op627: SchedulerNode(ComputedBuffer)
op627.writes = [MemoryDep('buf627', c0, {c0: 2097152}, None)]
op627.unmet_dependencies = 
    [   MemoryDep('buf603', c0, {c0: 2097152}, None),
        MemoryDep('buf619', c0, {c0: 2097152}, None),
        MemoryDep('buf626', c0, {c0: 2097152}, None)]
op627.met_dependencies = 
    [   MemoryDep('arg400_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg406_1', c1, {c0: 2048, c1: 1024}, None)]
op627.outputs = [
    buf627: ComputedBuffer
    buf627.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf627.users = [
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op630'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op631'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op645'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op646'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op647'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op648'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op661'), can_inplace=True, is_weak=False),
    ]
]
op627.group.device = cuda:0
op627.group.iteration = (2097152, 1)
op627.sizes = ([2048, 1024], [])
buf603_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf619_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg400_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf626_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg406_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf627_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op627_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf603', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf619', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg400_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf626', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg406_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf627', get_index_5, add_3, None)
        return store
op627 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op627_op628_op629_op631.snodes[1] =
op628: SchedulerNode(ComputedBuffer)
op628.writes = [MemoryDep('buf628', c0, {c0: 2048}, None)]
op628.unmet_dependencies = [MemoryDep('buf627', c0, {c0: 2097152}, None)]
op628.met_dependencies = []
op628.outputs = [
    buf628: ComputedBuffer
    buf628.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf628.users = [NodeUser(node=SchedulerNode(name='op631'), can_inplace=False, is_weak=False)]
]
op628.group.device = cuda:0
op628.group.iteration = (2048, 1024)
op628.sizes = ([2048], [1024])
buf627_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf628_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op628_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf627', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf628', get_index_1, getitem)
        return store_reduction
op628 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op627_op628_op629_op631.snodes[2] =
op629: SchedulerNode(ComputedBuffer)
op629.writes = [MemoryDep('buf629', c0, {c0: 2048}, None)]
op629.unmet_dependencies = [MemoryDep('buf627', c0, {c0: 2097152}, None)]
op629.met_dependencies = []
op629.outputs = [
    buf629: ComputedBuffer
    buf629.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf629.users = [NodeUser(node=SchedulerNode(name='op631'), can_inplace=False, is_weak=False)]
]
op629.group.device = cuda:0
op629.group.iteration = (2048, 1024)
op629.sizes = ([2048], [1024])
buf627_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf629_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op629_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf627', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf629', get_index_1, getitem_1)
        return store_reduction
op629 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op627_op628_op629_op631.snodes[3] =
op631: SchedulerNode(ComputedBuffer)
op631.writes = [MemoryDep('buf631', c0, {c0: 2097152}, None)]
op631.unmet_dependencies = 
    [   MemoryDep('buf627', c0, {c0: 2097152}, None),
        MemoryDep('buf628', c0, {c0: 2048}, None),
        MemoryDep('buf629', c0, {c0: 2048}, None)]
op631.met_dependencies = 
    [   MemoryDep('arg407_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg408_1', c1, {c0: 2048, c1: 1024}, None)]
op631.outputs = [
    buf631: ComputedBuffer
    buf631.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf631.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op632'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op633'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op635'), can_inplace=False, is_weak=False),
    ]
]
op631.group.device = cuda:0
op631.group.iteration = (2097152, 1)
op631.sizes = ([2048, 1024], [])
buf627_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf628_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf629_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg407_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg408_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf631_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op631_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf627', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf628', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf629', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg407_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg408_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf631', get_index_5, add_1, None)
        return store
op631 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op627_op628_op629_op631 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op632: ExternKernelSchedulerNode(ExternKernelOut)
op632.writes = [StarDep(name='buf632', mode=None)]
op632.unmet_dependencies = [StarDep(name='buf631', mode=None)]
op632.met_dependencies = [StarDep(name='arg409_1', mode=None)]
op632.outputs = [
    buf632: ExternKernelOut
    buf632.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf632.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False)]
]
op632.node.kernel = extern_kernels.mm


op633: ExternKernelSchedulerNode(ExternKernelOut)
op633.writes = [StarDep(name='buf633', mode=None)]
op633.unmet_dependencies = [StarDep(name='buf631', mode=None)]
op633.met_dependencies = [StarDep(name='arg411_1', mode=None)]
op633.outputs = [
    buf633: ExternKernelOut
    buf633.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf633.users = [NodeUser(node=SchedulerNode(name='op634'), can_inplace=False, is_weak=False)]
]
op633.node.kernel = extern_kernels.mm


op634: SchedulerNode(ComputedBuffer)
op634.writes = [MemoryDep('buf634', c0, {c0: 2097152}, None)]
op634.unmet_dependencies = [   MemoryDep('buf633', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op634.met_dependencies = [MemoryDep('arg412_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op634.outputs = [
    buf634: ComputedBuffer
    buf634.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf634.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op639'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op634.group.device = cuda:0
op634.group.iteration = (2097152, 1)
op634.sizes = ([16, 16, 128, 64], [])
buf633_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg412_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf634_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op634_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf633', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg412_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf634', get_index_2, add, None)
        return store
op634 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op635: ExternKernelSchedulerNode(ExternKernelOut)
op635.writes = [StarDep(name='buf635', mode=None)]
op635.unmet_dependencies = [StarDep(name='buf631', mode=None)]
op635.met_dependencies = [StarDep(name='arg413_1', mode=None)]
op635.outputs = [
    buf635: ExternKernelOut
    buf635.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf635.users = [NodeUser(node=SchedulerNode(name='op636'), can_inplace=False, is_weak=False)]
]
op635.node.kernel = extern_kernels.mm


op636: SchedulerNode(ComputedBuffer)
op636.writes = [MemoryDep('buf636', c0, {c0: 2097152}, None)]
op636.unmet_dependencies = [   MemoryDep('buf635', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op636.met_dependencies = [MemoryDep('arg414_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op636.outputs = [
    buf636: ComputedBuffer
    buf636.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf636.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op639'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op636.group.device = cuda:0
op636.group.iteration = (2097152, 1)
op636.sizes = ([16, 16, 128, 64], [])
buf635_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg414_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf636_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op636_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf635', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg414_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf636', get_index_2, add, None)
        return store
op636 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op637: SchedulerNode(ComputedBuffer)
op637.writes = [MemoryDep('buf637', c0, {c0: 2097152}, None)]
op637.unmet_dependencies = [   MemoryDep('buf632', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op637.met_dependencies = [MemoryDep('arg410_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op637.outputs = [
    buf637: ComputedBuffer
    buf637.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf637.users = [NodeUser(node=ExternKernelSchedulerNode(name='op639'), can_inplace=False, is_weak=False)]
]
op637.group.device = cuda:0
op637.group.iteration = (2097152, 1)
op637.sizes = ([16, 16, 128, 64], [])
buf632_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg410_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf637_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op637_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf632', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg410_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf637', get_index_2, add, None)
        return store
op637 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op638: SchedulerNode(ComputedBuffer)
op638.writes = [MemoryDep('buf638', c0, {c0: 4194304}, None)]
op638.unmet_dependencies = []
op638.met_dependencies = []
op638.outputs = [
    buf638: ComputedBuffer
    buf638.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf638.users = [NodeUser(node=ExternKernelSchedulerNode(name='op639'), can_inplace=False, is_weak=False)]
]
op638.group.device = cuda:0
op638.group.iteration = (4194304, 1)
op638.sizes = ([256, 128, 128], [])
buf638_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op638_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 128}
    index0 = z2
    index1 = z1 + 1
    index2 = 16384*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf638', get_index_2, where, None)
        return store
op638 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op639: ExternKernelSchedulerNode(FallbackKernel)
op639.writes = [StarDep(name='buf639', mode=None)]
op639.unmet_dependencies = 
    [   StarDep(name='buf634', mode=None),
        StarDep(name='buf636', mode=None),
        StarDep(name='buf637', mode=None),
        StarDep(name='buf638', mode=None)]
op639.met_dependencies = []
op639.outputs = [
    buf639: FallbackKernel
    buf639.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf639.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op640'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op641'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op642'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op643'), can_inplace=False, is_weak=False),
    ]
]
op639.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op640: ExternKernelSchedulerNode(MultiOutput)
op640.writes = [StarDep(name='buf640', mode=None)]
op640.unmet_dependencies = [StarDep(name='buf639', mode=None)]
op640.met_dependencies = []
op640.outputs = [
    buf640: MultiOutput
    buf640.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf640.users = [NodeUser(node=ExternKernelSchedulerNode(name='op644'), can_inplace=False, is_weak=False)]
]
op640.node.kernel = None


op644: ExternKernelSchedulerNode(ExternKernelOut)
op644.writes = [StarDep(name='buf644', mode=None)]
op644.unmet_dependencies = [StarDep(name='buf640', mode=None)]
op644.met_dependencies = [StarDep(name='arg415_1', mode=None)]
op644.outputs = [
    buf644: ExternKernelOut
    buf644.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf644.users = [
        NodeUser(node=SchedulerNode(name='op645'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op646'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op647'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op648'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op661'), can_inplace=True, is_weak=False),
    ]
]
op644.node.kernel = extern_kernels.mm


op645_op646_op648: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op645_op646_op648.writes = 
    [   MemoryDep('buf645', c0, {c0: 2048}, None),
        MemoryDep('buf646', c0, {c0: 2048}, None),
        MemoryDep('buf648', c0, {c0: 2097152}, None)]
op645_op646_op648.unmet_dependencies = 
    [   MemoryDep('buf627', c0, {c0: 2097152}, None),
        MemoryDep('buf644', c0, {c0: 2097152}, None)]
op645_op646_op648.met_dependencies = 
    [   MemoryDep('arg416_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg417_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg418_1', c1, {c0: 2048, c1: 1024}, None)]
op645_op646_op648.outputs = [
    buf645: ComputedBuffer
    buf645.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf645.users = [NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False)]
    buf646: ComputedBuffer
    buf646.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf646.users = [NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False)]
    buf648: ComputedBuffer
    buf648.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf648.users = [NodeUser(node=ExternKernelSchedulerNode(name='op649'), can_inplace=False, is_weak=False)]
]
op645_op646_op648.snodes[0] =
op645: SchedulerNode(ComputedBuffer)
op645.writes = [MemoryDep('buf645', c0, {c0: 2048}, None)]
op645.unmet_dependencies = 
    [   MemoryDep('buf627', c0, {c0: 2097152}, None),
        MemoryDep('buf644', c0, {c0: 2097152}, None)]
op645.met_dependencies = [MemoryDep('arg416_1', c1, {c0: 2048, c1: 1024}, None)]
op645.outputs = [
    buf645: ComputedBuffer
    buf645.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf645.users = [NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False)]
]
op645.group.device = cuda:0
op645.group.iteration = (2048, 1024)
op645.sizes = ([2048], [1024])
buf627_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf644_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg416_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf645_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op645_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf627', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf644', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg416_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf645', get_index_3, getitem)
        return store_reduction
op645 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op645_op646_op648.snodes[1] =
op646: SchedulerNode(ComputedBuffer)
op646.writes = [MemoryDep('buf646', c0, {c0: 2048}, None)]
op646.unmet_dependencies = 
    [   MemoryDep('buf627', c0, {c0: 2097152}, None),
        MemoryDep('buf644', c0, {c0: 2097152}, None)]
op646.met_dependencies = [MemoryDep('arg416_1', c1, {c0: 2048, c1: 1024}, None)]
op646.outputs = [
    buf646: ComputedBuffer
    buf646.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf646.users = [NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False)]
]
op646.group.device = cuda:0
op646.group.iteration = (2048, 1024)
op646.sizes = ([2048], [1024])
buf627_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf644_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg416_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf646_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op646_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf627', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf644', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg416_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf646', get_index_3, getitem_1)
        return store_reduction
op646 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op645_op646_op648.snodes[2] =
op648: SchedulerNode(ComputedBuffer)
op648.writes = [MemoryDep('buf648', c0, {c0: 2097152}, None)]
op648.unmet_dependencies = 
    [   MemoryDep('buf627', c0, {c0: 2097152}, None),
        MemoryDep('buf644', c0, {c0: 2097152}, None),
        MemoryDep('buf645', c0, {c0: 2048}, None),
        MemoryDep('buf646', c0, {c0: 2048}, None)]
op648.met_dependencies = 
    [   MemoryDep('arg416_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg417_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg418_1', c1, {c0: 2048, c1: 1024}, None)]
op648.outputs = [
    buf648: ComputedBuffer
    buf648.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf648.users = [NodeUser(node=ExternKernelSchedulerNode(name='op649'), can_inplace=False, is_weak=False)]
]
op648.group.device = cuda:0
op648.group.iteration = (2097152, 1)
op648.sizes = ([2048, 1024], [])
buf627_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf644_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg416_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf645_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf646_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg417_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg418_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf648_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op648_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf627', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf644', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg416_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf645', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf646', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg417_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg418_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf648', get_index_7, add_3, None)
        return store
op648 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op645_op646_op648 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op649: ExternKernelSchedulerNode(ExternKernelOut)
op649.writes = [StarDep(name='buf649', mode=None)]
op649.unmet_dependencies = [StarDep(name='buf648', mode=None)]
op649.met_dependencies = [StarDep(name='arg419_1', mode=None)]
op649.outputs = [
    buf649: ExternKernelOut
    buf649.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf649.users = [NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False)]
]
op649.node.kernel = extern_kernels.mm


op650: ExternKernelSchedulerNode(ExternKernelOut)
op650.writes = [StarDep(name='buf650', mode=None)]
op650.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op650.met_dependencies = [StarDep(name='arg421_1', mode=None)]
op650.outputs = [
    buf650: ExternKernelOut
    buf650.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf650.users = [NodeUser(node=SchedulerNode(name='op651'), can_inplace=False, is_weak=False)]
]
op650.node.kernel = extern_kernels.mm


op651: SchedulerNode(ComputedBuffer)
op651.writes = [MemoryDep('buf651', c0, {c0: 2097152}, None)]
op651.unmet_dependencies = [   MemoryDep('buf650', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op651.met_dependencies = [MemoryDep('arg422_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op651.outputs = [
    buf651: ComputedBuffer
    buf651.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf651.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op655'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op651.group.device = cuda:0
op651.group.iteration = (2097152, 1)
op651.sizes = ([16, 16, 128, 64], [])
buf650_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg422_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf651_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op651_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf650', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg422_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf651', get_index_2, add, None)
        return store
op651 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op652: ExternKernelSchedulerNode(ExternKernelOut)
op652.writes = [StarDep(name='buf652', mode=None)]
op652.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op652.met_dependencies = [StarDep(name='arg423_1', mode=None)]
op652.outputs = [
    buf652: ExternKernelOut
    buf652.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf652.users = [NodeUser(node=SchedulerNode(name='op653'), can_inplace=False, is_weak=False)]
]
op652.node.kernel = extern_kernels.mm


op653: SchedulerNode(ComputedBuffer)
op653.writes = [MemoryDep('buf653', c0, {c0: 2097152}, None)]
op653.unmet_dependencies = [   MemoryDep('buf652', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op653.met_dependencies = [MemoryDep('arg424_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op653.outputs = [
    buf653: ComputedBuffer
    buf653.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf653.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op655'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op653.group.device = cuda:0
op653.group.iteration = (2097152, 1)
op653.sizes = ([16, 16, 128, 64], [])
buf652_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg424_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf653_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op653_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf652', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg424_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf653', get_index_2, add, None)
        return store
op653 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op654: SchedulerNode(ComputedBuffer)
op654.writes = [MemoryDep('buf654', c0, {c0: 2097152}, None)]
op654.unmet_dependencies = [   MemoryDep('buf649', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op654.met_dependencies = [MemoryDep('arg420_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op654.outputs = [
    buf654: ComputedBuffer
    buf654.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf654.users = [NodeUser(node=ExternKernelSchedulerNode(name='op655'), can_inplace=False, is_weak=False)]
]
op654.group.device = cuda:0
op654.group.iteration = (2097152, 1)
op654.sizes = ([16, 16, 128, 64], [])
buf649_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg420_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf654_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op654_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf649', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg420_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf654', get_index_2, add, None)
        return store
op654 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op655: ExternKernelSchedulerNode(FallbackKernel)
op655.writes = [StarDep(name='buf655', mode=None)]
op655.unmet_dependencies = 
    [   StarDep(name='buf651', mode=None),
        StarDep(name='buf653', mode=None),
        StarDep(name='buf654', mode=None)]
op655.met_dependencies = []
op655.outputs = [
    buf655: FallbackKernel
    buf655.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf655.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op656'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op657'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op658'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op659'), can_inplace=False, is_weak=False),
    ]
]
op655.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op656: ExternKernelSchedulerNode(MultiOutput)
op656.writes = [StarDep(name='buf656', mode=None)]
op656.unmet_dependencies = [StarDep(name='buf655', mode=None)]
op656.met_dependencies = []
op656.outputs = [
    buf656: MultiOutput
    buf656.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf656.users = [NodeUser(node=ExternKernelSchedulerNode(name='op660'), can_inplace=False, is_weak=False)]
]
op656.node.kernel = None


op660: ExternKernelSchedulerNode(ExternKernelOut)
op660.writes = [StarDep(name='buf660', mode=None)]
op660.unmet_dependencies = [StarDep(name='buf656', mode=None)]
op660.met_dependencies = [StarDep(name='arg425_1', mode=None)]
op660.outputs = [
    buf660: ExternKernelOut
    buf660.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf660.users = [NodeUser(node=SchedulerNode(name='op661'), can_inplace=True, is_weak=False)]
]
op660.node.kernel = extern_kernels.mm


op661_op662_op663_op665: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op661_op662_op663_op665.writes = 
    [   MemoryDep('buf661', c0, {c0: 2097152}, None),
        MemoryDep('buf662', c0, {c0: 2048}, None),
        MemoryDep('buf663', c0, {c0: 2048}, None),
        MemoryDep('buf665', c0, {c0: 2097152}, None)]
op661_op662_op663_op665.unmet_dependencies = 
    [   MemoryDep('buf627', c0, {c0: 2097152}, None),
        MemoryDep('buf644', c0, {c0: 2097152}, None),
        MemoryDep('buf660', c0, {c0: 2097152}, None)]
op661_op662_op663_op665.met_dependencies = 
    [   MemoryDep('arg416_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg426_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg427_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg428_1', c1, {c0: 2048, c1: 1024}, None)]
op661_op662_op663_op665.outputs = [
    buf661: ComputedBuffer
    buf661.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf661.users = [
        NodeUser(node=SchedulerNode(name='op662'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op663'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op664'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op665'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op669'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op670'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op671'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op672'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op686'), can_inplace=True, is_weak=False),
    ]
    buf662: ComputedBuffer
    buf662.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf662.users = [NodeUser(node=SchedulerNode(name='op665'), can_inplace=False, is_weak=False)]
    buf663: ComputedBuffer
    buf663.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf663.users = [NodeUser(node=SchedulerNode(name='op665'), can_inplace=False, is_weak=False)]
    buf665: ComputedBuffer
    buf665.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf665.users = [NodeUser(node=ExternKernelSchedulerNode(name='op666'), can_inplace=False, is_weak=False)]
]
op661_op662_op663_op665.snodes[0] =
op661: SchedulerNode(ComputedBuffer)
op661.writes = [MemoryDep('buf661', c0, {c0: 2097152}, None)]
op661.unmet_dependencies = 
    [   MemoryDep('buf627', c0, {c0: 2097152}, None),
        MemoryDep('buf644', c0, {c0: 2097152}, None),
        MemoryDep('buf660', c0, {c0: 2097152}, None)]
op661.met_dependencies = 
    [   MemoryDep('arg416_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg426_1', c1, {c0: 2048, c1: 1024}, None)]
op661.outputs = [
    buf661: ComputedBuffer
    buf661.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf661.users = [
        NodeUser(node=SchedulerNode(name='op662'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op663'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op664'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op665'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op669'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op670'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op671'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op672'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op686'), can_inplace=True, is_weak=False),
    ]
]
op661.group.device = cuda:0
op661.group.iteration = (2097152, 1)
op661.sizes = ([2048, 1024], [])
buf627_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf644_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg416_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf660_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg426_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf661_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op661_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf627', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf644', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg416_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf660', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg426_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf661', get_index_5, add_3, None)
        return store
op661 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op661_op662_op663_op665.snodes[1] =
op662: SchedulerNode(ComputedBuffer)
op662.writes = [MemoryDep('buf662', c0, {c0: 2048}, None)]
op662.unmet_dependencies = [MemoryDep('buf661', c0, {c0: 2097152}, None)]
op662.met_dependencies = []
op662.outputs = [
    buf662: ComputedBuffer
    buf662.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf662.users = [NodeUser(node=SchedulerNode(name='op665'), can_inplace=False, is_weak=False)]
]
op662.group.device = cuda:0
op662.group.iteration = (2048, 1024)
op662.sizes = ([2048], [1024])
buf661_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf662_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op662_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf661', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf662', get_index_1, getitem)
        return store_reduction
op662 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op661_op662_op663_op665.snodes[2] =
op663: SchedulerNode(ComputedBuffer)
op663.writes = [MemoryDep('buf663', c0, {c0: 2048}, None)]
op663.unmet_dependencies = [MemoryDep('buf661', c0, {c0: 2097152}, None)]
op663.met_dependencies = []
op663.outputs = [
    buf663: ComputedBuffer
    buf663.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf663.users = [NodeUser(node=SchedulerNode(name='op665'), can_inplace=False, is_weak=False)]
]
op663.group.device = cuda:0
op663.group.iteration = (2048, 1024)
op663.sizes = ([2048], [1024])
buf661_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf663_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op663_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf661', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf663', get_index_1, getitem_1)
        return store_reduction
op663 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op661_op662_op663_op665.snodes[3] =
op665: SchedulerNode(ComputedBuffer)
op665.writes = [MemoryDep('buf665', c0, {c0: 2097152}, None)]
op665.unmet_dependencies = 
    [   MemoryDep('buf661', c0, {c0: 2097152}, None),
        MemoryDep('buf662', c0, {c0: 2048}, None),
        MemoryDep('buf663', c0, {c0: 2048}, None)]
op665.met_dependencies = 
    [   MemoryDep('arg427_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg428_1', c1, {c0: 2048, c1: 1024}, None)]
op665.outputs = [
    buf665: ComputedBuffer
    buf665.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf665.users = [NodeUser(node=ExternKernelSchedulerNode(name='op666'), can_inplace=False, is_weak=False)]
]
op665.group.device = cuda:0
op665.group.iteration = (2097152, 1)
op665.sizes = ([2048, 1024], [])
buf661_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf662_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf663_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg427_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg428_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf665_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op665_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf661', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf662', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf663', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg427_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg428_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf665', get_index_5, add_1, None)
        return store
op665 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op661_op662_op663_op665 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op666: ExternKernelSchedulerNode(ExternKernelOut)
op666.writes = [StarDep(name='buf666', mode=None)]
op666.unmet_dependencies = [StarDep(name='buf665', mode=None)]
op666.met_dependencies = [StarDep(name='arg429_1', mode=None)]
op666.outputs = [
    buf666: ExternKernelOut
    buf666.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf666.users = [NodeUser(node=SchedulerNode(name='op667'), can_inplace=True, is_weak=False)]
]
op666.node.kernel = extern_kernels.mm


op667: SchedulerNode(ComputedBuffer)
op667.writes = [MemoryDep('buf667', c0, {c0: 8388608}, None)]
op667.unmet_dependencies = [MemoryDep('buf666', c0, {c0: 8388608}, None)]
op667.met_dependencies = [MemoryDep('arg430_1', c1, {c0: 2048, c1: 4096}, None)]
op667.outputs = [
    buf667: ComputedBuffer
    buf667.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf667.users = [NodeUser(node=ExternKernelSchedulerNode(name='op668'), can_inplace=False, is_weak=False)]
]
op667.group.device = cuda:0
op667.group.iteration = (8388608, 1)
op667.sizes = ([2048, 4096], [])
buf666_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg430_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf667_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op667_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf666', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg430_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf667', get_index_2, relu, None)
        return store
op667 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op668: ExternKernelSchedulerNode(ExternKernelOut)
op668.writes = [StarDep(name='buf668', mode=None)]
op668.unmet_dependencies = [StarDep(name='buf667', mode=None)]
op668.met_dependencies = [StarDep(name='arg431_1', mode=None)]
op668.outputs = [
    buf668: ExternKernelOut
    buf668.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf668.users = [
        NodeUser(node=SchedulerNode(name='op669'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op670'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op671'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op672'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op686'), can_inplace=True, is_weak=False),
    ]
]
op668.node.kernel = extern_kernels.mm


op669_op670_op672: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op669_op670_op672.writes = 
    [   MemoryDep('buf669', c0, {c0: 2048}, None),
        MemoryDep('buf670', c0, {c0: 2048}, None),
        MemoryDep('buf672', c0, {c0: 2097152}, None)]
op669_op670_op672.unmet_dependencies = 
    [   MemoryDep('buf661', c0, {c0: 2097152}, None),
        MemoryDep('buf668', c0, {c0: 2097152}, None)]
op669_op670_op672.met_dependencies = 
    [   MemoryDep('arg432_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg433_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg434_1', c1, {c0: 2048, c1: 1024}, None)]
op669_op670_op672.outputs = [
    buf669: ComputedBuffer
    buf669.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf669.users = [NodeUser(node=SchedulerNode(name='op672'), can_inplace=False, is_weak=False)]
    buf670: ComputedBuffer
    buf670.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf670.users = [NodeUser(node=SchedulerNode(name='op672'), can_inplace=False, is_weak=False)]
    buf672: ComputedBuffer
    buf672.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf672.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op673'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op674'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op676'), can_inplace=False, is_weak=False),
    ]
]
op669_op670_op672.snodes[0] =
op669: SchedulerNode(ComputedBuffer)
op669.writes = [MemoryDep('buf669', c0, {c0: 2048}, None)]
op669.unmet_dependencies = 
    [   MemoryDep('buf661', c0, {c0: 2097152}, None),
        MemoryDep('buf668', c0, {c0: 2097152}, None)]
op669.met_dependencies = [MemoryDep('arg432_1', c1, {c0: 2048, c1: 1024}, None)]
op669.outputs = [
    buf669: ComputedBuffer
    buf669.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf669.users = [NodeUser(node=SchedulerNode(name='op672'), can_inplace=False, is_weak=False)]
]
op669.group.device = cuda:0
op669.group.iteration = (2048, 1024)
op669.sizes = ([2048], [1024])
buf661_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf668_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg432_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf669_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op669_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf661', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf668', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg432_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf669', get_index_3, getitem)
        return store_reduction
op669 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op669_op670_op672.snodes[1] =
op670: SchedulerNode(ComputedBuffer)
op670.writes = [MemoryDep('buf670', c0, {c0: 2048}, None)]
op670.unmet_dependencies = 
    [   MemoryDep('buf661', c0, {c0: 2097152}, None),
        MemoryDep('buf668', c0, {c0: 2097152}, None)]
op670.met_dependencies = [MemoryDep('arg432_1', c1, {c0: 2048, c1: 1024}, None)]
op670.outputs = [
    buf670: ComputedBuffer
    buf670.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf670.users = [NodeUser(node=SchedulerNode(name='op672'), can_inplace=False, is_weak=False)]
]
op670.group.device = cuda:0
op670.group.iteration = (2048, 1024)
op670.sizes = ([2048], [1024])
buf661_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf668_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg432_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf670_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op670_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf661', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf668', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg432_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf670', get_index_3, getitem_1)
        return store_reduction
op670 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op669_op670_op672.snodes[2] =
op672: SchedulerNode(ComputedBuffer)
op672.writes = [MemoryDep('buf672', c0, {c0: 2097152}, None)]
op672.unmet_dependencies = 
    [   MemoryDep('buf661', c0, {c0: 2097152}, None),
        MemoryDep('buf668', c0, {c0: 2097152}, None),
        MemoryDep('buf669', c0, {c0: 2048}, None),
        MemoryDep('buf670', c0, {c0: 2048}, None)]
op672.met_dependencies = 
    [   MemoryDep('arg432_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg433_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg434_1', c1, {c0: 2048, c1: 1024}, None)]
op672.outputs = [
    buf672: ComputedBuffer
    buf672.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf672.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op673'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op674'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op676'), can_inplace=False, is_weak=False),
    ]
]
op672.group.device = cuda:0
op672.group.iteration = (2097152, 1)
op672.sizes = ([2048, 1024], [])
buf661_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf668_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg432_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf669_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf670_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg433_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg434_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf672_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op672_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf661', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf668', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg432_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf669', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf670', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg433_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg434_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf672', get_index_7, add_3, None)
        return store
op672 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op669_op670_op672 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op673: ExternKernelSchedulerNode(ExternKernelOut)
op673.writes = [StarDep(name='buf673', mode=None)]
op673.unmet_dependencies = [StarDep(name='buf672', mode=None)]
op673.met_dependencies = [StarDep(name='arg435_1', mode=None)]
op673.outputs = [
    buf673: ExternKernelOut
    buf673.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf673.users = [NodeUser(node=SchedulerNode(name='op678'), can_inplace=False, is_weak=False)]
]
op673.node.kernel = extern_kernels.mm


op674: ExternKernelSchedulerNode(ExternKernelOut)
op674.writes = [StarDep(name='buf674', mode=None)]
op674.unmet_dependencies = [StarDep(name='buf672', mode=None)]
op674.met_dependencies = [StarDep(name='arg437_1', mode=None)]
op674.outputs = [
    buf674: ExternKernelOut
    buf674.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf674.users = [NodeUser(node=SchedulerNode(name='op675'), can_inplace=False, is_weak=False)]
]
op674.node.kernel = extern_kernels.mm


op675: SchedulerNode(ComputedBuffer)
op675.writes = [MemoryDep('buf675', c0, {c0: 2097152}, None)]
op675.unmet_dependencies = [   MemoryDep('buf674', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op675.met_dependencies = [MemoryDep('arg438_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op675.outputs = [
    buf675: ComputedBuffer
    buf675.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf675.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op680'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op675.group.device = cuda:0
op675.group.iteration = (2097152, 1)
op675.sizes = ([16, 16, 128, 64], [])
buf674_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg438_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf675_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op675_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf674', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg438_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf675', get_index_2, add, None)
        return store
op675 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op676: ExternKernelSchedulerNode(ExternKernelOut)
op676.writes = [StarDep(name='buf676', mode=None)]
op676.unmet_dependencies = [StarDep(name='buf672', mode=None)]
op676.met_dependencies = [StarDep(name='arg439_1', mode=None)]
op676.outputs = [
    buf676: ExternKernelOut
    buf676.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf676.users = [NodeUser(node=SchedulerNode(name='op677'), can_inplace=False, is_weak=False)]
]
op676.node.kernel = extern_kernels.mm


op677: SchedulerNode(ComputedBuffer)
op677.writes = [MemoryDep('buf677', c0, {c0: 2097152}, None)]
op677.unmet_dependencies = [   MemoryDep('buf676', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op677.met_dependencies = [MemoryDep('arg440_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op677.outputs = [
    buf677: ComputedBuffer
    buf677.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf677.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op680'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op677.group.device = cuda:0
op677.group.iteration = (2097152, 1)
op677.sizes = ([16, 16, 128, 64], [])
buf676_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg440_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf677_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op677_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf676', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg440_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf677', get_index_2, add, None)
        return store
op677 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op678: SchedulerNode(ComputedBuffer)
op678.writes = [MemoryDep('buf678', c0, {c0: 2097152}, None)]
op678.unmet_dependencies = [   MemoryDep('buf673', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op678.met_dependencies = [MemoryDep('arg436_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op678.outputs = [
    buf678: ComputedBuffer
    buf678.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf678.users = [NodeUser(node=ExternKernelSchedulerNode(name='op680'), can_inplace=False, is_weak=False)]
]
op678.group.device = cuda:0
op678.group.iteration = (2097152, 1)
op678.sizes = ([16, 16, 128, 64], [])
buf673_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg436_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf678_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op678_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf673', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg436_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf678', get_index_2, add, None)
        return store
op678 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op679: SchedulerNode(ComputedBuffer)
op679.writes = [MemoryDep('buf679', c0, {c0: 4194304}, None)]
op679.unmet_dependencies = []
op679.met_dependencies = []
op679.outputs = [
    buf679: ComputedBuffer
    buf679.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf679.users = [NodeUser(node=ExternKernelSchedulerNode(name='op680'), can_inplace=False, is_weak=False)]
]
op679.group.device = cuda:0
op679.group.iteration = (4194304, 1)
op679.sizes = ([256, 128, 128], [])
buf679_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op679_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 128}
    index0 = z2
    index1 = z1 + 1
    index2 = 16384*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf679', get_index_2, where, None)
        return store
op679 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op680: ExternKernelSchedulerNode(FallbackKernel)
op680.writes = [StarDep(name='buf680', mode=None)]
op680.unmet_dependencies = 
    [   StarDep(name='buf675', mode=None),
        StarDep(name='buf677', mode=None),
        StarDep(name='buf678', mode=None),
        StarDep(name='buf679', mode=None)]
op680.met_dependencies = []
op680.outputs = [
    buf680: FallbackKernel
    buf680.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf680.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op681'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op682'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op683'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op684'), can_inplace=False, is_weak=False),
    ]
]
op680.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op681: ExternKernelSchedulerNode(MultiOutput)
op681.writes = [StarDep(name='buf681', mode=None)]
op681.unmet_dependencies = [StarDep(name='buf680', mode=None)]
op681.met_dependencies = []
op681.outputs = [
    buf681: MultiOutput
    buf681.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf681.users = [NodeUser(node=ExternKernelSchedulerNode(name='op685'), can_inplace=False, is_weak=False)]
]
op681.node.kernel = None


op685: ExternKernelSchedulerNode(ExternKernelOut)
op685.writes = [StarDep(name='buf685', mode=None)]
op685.unmet_dependencies = [StarDep(name='buf681', mode=None)]
op685.met_dependencies = [StarDep(name='arg441_1', mode=None)]
op685.outputs = [
    buf685: ExternKernelOut
    buf685.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf685.users = [NodeUser(node=SchedulerNode(name='op686'), can_inplace=True, is_weak=False)]
]
op685.node.kernel = extern_kernels.mm


op686_op687_op688_op690: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op686_op687_op688_op690.writes = 
    [   MemoryDep('buf686', c0, {c0: 2097152}, None),
        MemoryDep('buf687', c0, {c0: 2048}, None),
        MemoryDep('buf688', c0, {c0: 2048}, None),
        MemoryDep('buf690', c0, {c0: 2097152}, None)]
op686_op687_op688_op690.unmet_dependencies = 
    [   MemoryDep('buf661', c0, {c0: 2097152}, None),
        MemoryDep('buf668', c0, {c0: 2097152}, None),
        MemoryDep('buf685', c0, {c0: 2097152}, None)]
op686_op687_op688_op690.met_dependencies = 
    [   MemoryDep('arg432_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg442_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg443_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg444_1', c1, {c0: 2048, c1: 1024}, None)]
op686_op687_op688_op690.outputs = [
    buf686: ComputedBuffer
    buf686.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf686.users = [
        NodeUser(node=SchedulerNode(name='op687'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op688'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op689'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op690'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op703'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op704'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op705'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op706'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op710'), can_inplace=True, is_weak=False),
    ]
    buf687: ComputedBuffer
    buf687.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf687.users = [NodeUser(node=SchedulerNode(name='op690'), can_inplace=False, is_weak=False)]
    buf688: ComputedBuffer
    buf688.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf688.users = [NodeUser(node=SchedulerNode(name='op690'), can_inplace=False, is_weak=False)]
    buf690: ComputedBuffer
    buf690.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf690.users = [NodeUser(node=ExternKernelSchedulerNode(name='op691'), can_inplace=False, is_weak=False)]
]
op686_op687_op688_op690.snodes[0] =
op686: SchedulerNode(ComputedBuffer)
op686.writes = [MemoryDep('buf686', c0, {c0: 2097152}, None)]
op686.unmet_dependencies = 
    [   MemoryDep('buf661', c0, {c0: 2097152}, None),
        MemoryDep('buf668', c0, {c0: 2097152}, None),
        MemoryDep('buf685', c0, {c0: 2097152}, None)]
op686.met_dependencies = 
    [   MemoryDep('arg432_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg442_1', c1, {c0: 2048, c1: 1024}, None)]
op686.outputs = [
    buf686: ComputedBuffer
    buf686.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf686.users = [
        NodeUser(node=SchedulerNode(name='op687'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op688'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op689'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op690'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op703'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op704'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op705'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op706'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op710'), can_inplace=True, is_weak=False),
    ]
]
op686.group.device = cuda:0
op686.group.iteration = (2097152, 1)
op686.sizes = ([2048, 1024], [])
buf661_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf668_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg432_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf685_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg442_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf686_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op686_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf661', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf668', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg432_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf685', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg442_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf686', get_index_5, add_3, None)
        return store
op686 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op686_op687_op688_op690.snodes[1] =
op687: SchedulerNode(ComputedBuffer)
op687.writes = [MemoryDep('buf687', c0, {c0: 2048}, None)]
op687.unmet_dependencies = [MemoryDep('buf686', c0, {c0: 2097152}, None)]
op687.met_dependencies = []
op687.outputs = [
    buf687: ComputedBuffer
    buf687.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf687.users = [NodeUser(node=SchedulerNode(name='op690'), can_inplace=False, is_weak=False)]
]
op687.group.device = cuda:0
op687.group.iteration = (2048, 1024)
op687.sizes = ([2048], [1024])
buf686_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf687_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op687_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf686', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf687', get_index_1, getitem)
        return store_reduction
op687 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op686_op687_op688_op690.snodes[2] =
op688: SchedulerNode(ComputedBuffer)
op688.writes = [MemoryDep('buf688', c0, {c0: 2048}, None)]
op688.unmet_dependencies = [MemoryDep('buf686', c0, {c0: 2097152}, None)]
op688.met_dependencies = []
op688.outputs = [
    buf688: ComputedBuffer
    buf688.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf688.users = [NodeUser(node=SchedulerNode(name='op690'), can_inplace=False, is_weak=False)]
]
op688.group.device = cuda:0
op688.group.iteration = (2048, 1024)
op688.sizes = ([2048], [1024])
buf686_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf688_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op688_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf686', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf688', get_index_1, getitem_1)
        return store_reduction
op688 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op686_op687_op688_op690.snodes[3] =
op690: SchedulerNode(ComputedBuffer)
op690.writes = [MemoryDep('buf690', c0, {c0: 2097152}, None)]
op690.unmet_dependencies = 
    [   MemoryDep('buf686', c0, {c0: 2097152}, None),
        MemoryDep('buf687', c0, {c0: 2048}, None),
        MemoryDep('buf688', c0, {c0: 2048}, None)]
op690.met_dependencies = 
    [   MemoryDep('arg443_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg444_1', c1, {c0: 2048, c1: 1024}, None)]
op690.outputs = [
    buf690: ComputedBuffer
    buf690.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf690.users = [NodeUser(node=ExternKernelSchedulerNode(name='op691'), can_inplace=False, is_weak=False)]
]
op690.group.device = cuda:0
op690.group.iteration = (2097152, 1)
op690.sizes = ([2048, 1024], [])
buf686_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf687_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf688_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg443_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg444_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf690_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op690_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf686', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf687', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf688', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg443_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg444_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf690', get_index_5, add_1, None)
        return store
op690 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op686_op687_op688_op690 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op691: ExternKernelSchedulerNode(ExternKernelOut)
op691.writes = [StarDep(name='buf691', mode=None)]
op691.unmet_dependencies = [StarDep(name='buf690', mode=None)]
op691.met_dependencies = [StarDep(name='arg445_1', mode=None)]
op691.outputs = [
    buf691: ExternKernelOut
    buf691.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf691.users = [NodeUser(node=SchedulerNode(name='op696'), can_inplace=False, is_weak=False)]
]
op691.node.kernel = extern_kernels.mm


op692: ExternKernelSchedulerNode(ExternKernelOut)
op692.writes = [StarDep(name='buf692', mode=None)]
op692.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op692.met_dependencies = [StarDep(name='arg447_1', mode=None)]
op692.outputs = [
    buf692: ExternKernelOut
    buf692.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf692.users = [NodeUser(node=SchedulerNode(name='op693'), can_inplace=False, is_weak=False)]
]
op692.node.kernel = extern_kernels.mm


op693: SchedulerNode(ComputedBuffer)
op693.writes = [MemoryDep('buf693', c0, {c0: 2097152}, None)]
op693.unmet_dependencies = [   MemoryDep('buf692', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op693.met_dependencies = [MemoryDep('arg448_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op693.outputs = [
    buf693: ComputedBuffer
    buf693.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf693.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op697'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op693.group.device = cuda:0
op693.group.iteration = (2097152, 1)
op693.sizes = ([16, 16, 128, 64], [])
buf692_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg448_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf693_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op693_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf692', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg448_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf693', get_index_2, add, None)
        return store
op693 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op694: ExternKernelSchedulerNode(ExternKernelOut)
op694.writes = [StarDep(name='buf694', mode=None)]
op694.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op694.met_dependencies = [StarDep(name='arg449_1', mode=None)]
op694.outputs = [
    buf694: ExternKernelOut
    buf694.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf694.users = [NodeUser(node=SchedulerNode(name='op695'), can_inplace=False, is_weak=False)]
]
op694.node.kernel = extern_kernels.mm


op695: SchedulerNode(ComputedBuffer)
op695.writes = [MemoryDep('buf695', c0, {c0: 2097152}, None)]
op695.unmet_dependencies = [   MemoryDep('buf694', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op695.met_dependencies = [MemoryDep('arg450_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op695.outputs = [
    buf695: ComputedBuffer
    buf695.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf695.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op697'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op695.group.device = cuda:0
op695.group.iteration = (2097152, 1)
op695.sizes = ([16, 16, 128, 64], [])
buf694_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg450_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf695_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op695_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf694', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg450_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf695', get_index_2, add, None)
        return store
op695 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op696: SchedulerNode(ComputedBuffer)
op696.writes = [MemoryDep('buf696', c0, {c0: 2097152}, None)]
op696.unmet_dependencies = [   MemoryDep('buf691', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op696.met_dependencies = [MemoryDep('arg446_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op696.outputs = [
    buf696: ComputedBuffer
    buf696.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf696.users = [NodeUser(node=ExternKernelSchedulerNode(name='op697'), can_inplace=False, is_weak=False)]
]
op696.group.device = cuda:0
op696.group.iteration = (2097152, 1)
op696.sizes = ([16, 16, 128, 64], [])
buf691_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg446_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf696_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op696_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf691', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg446_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf696', get_index_2, add, None)
        return store
op696 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op697: ExternKernelSchedulerNode(FallbackKernel)
op697.writes = [StarDep(name='buf697', mode=None)]
op697.unmet_dependencies = 
    [   StarDep(name='buf693', mode=None),
        StarDep(name='buf695', mode=None),
        StarDep(name='buf696', mode=None)]
op697.met_dependencies = []
op697.outputs = [
    buf697: FallbackKernel
    buf697.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf697.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op698'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op699'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op700'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op701'), can_inplace=False, is_weak=False),
    ]
]
op697.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op698: ExternKernelSchedulerNode(MultiOutput)
op698.writes = [StarDep(name='buf698', mode=None)]
op698.unmet_dependencies = [StarDep(name='buf697', mode=None)]
op698.met_dependencies = []
op698.outputs = [
    buf698: MultiOutput
    buf698.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf698.users = [NodeUser(node=ExternKernelSchedulerNode(name='op702'), can_inplace=False, is_weak=False)]
]
op698.node.kernel = None


op702: ExternKernelSchedulerNode(ExternKernelOut)
op702.writes = [StarDep(name='buf702', mode=None)]
op702.unmet_dependencies = [StarDep(name='buf698', mode=None)]
op702.met_dependencies = [StarDep(name='arg451_1', mode=None)]
op702.outputs = [
    buf702: ExternKernelOut
    buf702.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf702.users = [
        NodeUser(node=SchedulerNode(name='op703'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op704'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op705'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op706'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op710'), can_inplace=True, is_weak=False),
    ]
]
op702.node.kernel = extern_kernels.mm


op703_op704_op706: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op703_op704_op706.writes = 
    [   MemoryDep('buf703', c0, {c0: 2048}, None),
        MemoryDep('buf704', c0, {c0: 2048}, None),
        MemoryDep('buf706', c0, {c0: 2097152}, None)]
op703_op704_op706.unmet_dependencies = 
    [   MemoryDep('buf686', c0, {c0: 2097152}, None),
        MemoryDep('buf702', c0, {c0: 2097152}, None)]
op703_op704_op706.met_dependencies = 
    [   MemoryDep('arg452_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg453_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg454_1', c1, {c0: 2048, c1: 1024}, None)]
op703_op704_op706.outputs = [
    buf703: ComputedBuffer
    buf703.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf703.users = [NodeUser(node=SchedulerNode(name='op706'), can_inplace=False, is_weak=False)]
    buf704: ComputedBuffer
    buf704.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf704.users = [NodeUser(node=SchedulerNode(name='op706'), can_inplace=False, is_weak=False)]
    buf706: ComputedBuffer
    buf706.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf706.users = [NodeUser(node=ExternKernelSchedulerNode(name='op707'), can_inplace=False, is_weak=False)]
]
op703_op704_op706.snodes[0] =
op703: SchedulerNode(ComputedBuffer)
op703.writes = [MemoryDep('buf703', c0, {c0: 2048}, None)]
op703.unmet_dependencies = 
    [   MemoryDep('buf686', c0, {c0: 2097152}, None),
        MemoryDep('buf702', c0, {c0: 2097152}, None)]
op703.met_dependencies = [MemoryDep('arg452_1', c1, {c0: 2048, c1: 1024}, None)]
op703.outputs = [
    buf703: ComputedBuffer
    buf703.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf703.users = [NodeUser(node=SchedulerNode(name='op706'), can_inplace=False, is_weak=False)]
]
op703.group.device = cuda:0
op703.group.iteration = (2048, 1024)
op703.sizes = ([2048], [1024])
buf686_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf702_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg452_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf703_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op703_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf686', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf702', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg452_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf703', get_index_3, getitem)
        return store_reduction
op703 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op703_op704_op706.snodes[1] =
op704: SchedulerNode(ComputedBuffer)
op704.writes = [MemoryDep('buf704', c0, {c0: 2048}, None)]
op704.unmet_dependencies = 
    [   MemoryDep('buf686', c0, {c0: 2097152}, None),
        MemoryDep('buf702', c0, {c0: 2097152}, None)]
op704.met_dependencies = [MemoryDep('arg452_1', c1, {c0: 2048, c1: 1024}, None)]
op704.outputs = [
    buf704: ComputedBuffer
    buf704.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf704.users = [NodeUser(node=SchedulerNode(name='op706'), can_inplace=False, is_weak=False)]
]
op704.group.device = cuda:0
op704.group.iteration = (2048, 1024)
op704.sizes = ([2048], [1024])
buf686_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf702_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg452_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf704_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op704_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf686', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf702', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg452_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf704', get_index_3, getitem_1)
        return store_reduction
op704 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op703_op704_op706.snodes[2] =
op706: SchedulerNode(ComputedBuffer)
op706.writes = [MemoryDep('buf706', c0, {c0: 2097152}, None)]
op706.unmet_dependencies = 
    [   MemoryDep('buf686', c0, {c0: 2097152}, None),
        MemoryDep('buf702', c0, {c0: 2097152}, None),
        MemoryDep('buf703', c0, {c0: 2048}, None),
        MemoryDep('buf704', c0, {c0: 2048}, None)]
op706.met_dependencies = 
    [   MemoryDep('arg452_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg453_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg454_1', c1, {c0: 2048, c1: 1024}, None)]
op706.outputs = [
    buf706: ComputedBuffer
    buf706.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf706.users = [NodeUser(node=ExternKernelSchedulerNode(name='op707'), can_inplace=False, is_weak=False)]
]
op706.group.device = cuda:0
op706.group.iteration = (2097152, 1)
op706.sizes = ([2048, 1024], [])
buf686_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf702_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg452_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf703_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf704_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg453_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg454_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf706_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op706_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf686', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf702', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg452_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf703', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf704', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg453_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg454_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf706', get_index_7, add_3, None)
        return store
op706 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op703_op704_op706 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op707: ExternKernelSchedulerNode(ExternKernelOut)
op707.writes = [StarDep(name='buf707', mode=None)]
op707.unmet_dependencies = [StarDep(name='buf706', mode=None)]
op707.met_dependencies = [StarDep(name='arg455_1', mode=None)]
op707.outputs = [
    buf707: ExternKernelOut
    buf707.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf707.users = [NodeUser(node=SchedulerNode(name='op708'), can_inplace=True, is_weak=False)]
]
op707.node.kernel = extern_kernels.mm


op708: SchedulerNode(ComputedBuffer)
op708.writes = [MemoryDep('buf708', c0, {c0: 8388608}, None)]
op708.unmet_dependencies = [MemoryDep('buf707', c0, {c0: 8388608}, None)]
op708.met_dependencies = [MemoryDep('arg456_1', c1, {c0: 2048, c1: 4096}, None)]
op708.outputs = [
    buf708: ComputedBuffer
    buf708.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf708.users = [NodeUser(node=ExternKernelSchedulerNode(name='op709'), can_inplace=False, is_weak=False)]
]
op708.group.device = cuda:0
op708.group.iteration = (8388608, 1)
op708.sizes = ([2048, 4096], [])
buf707_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg456_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf708_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op708_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf707', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg456_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf708', get_index_2, relu, None)
        return store
op708 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op709: ExternKernelSchedulerNode(ExternKernelOut)
op709.writes = [StarDep(name='buf709', mode=None)]
op709.unmet_dependencies = [StarDep(name='buf708', mode=None)]
op709.met_dependencies = [StarDep(name='arg457_1', mode=None)]
op709.outputs = [
    buf709: ExternKernelOut
    buf709.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf709.users = [NodeUser(node=SchedulerNode(name='op710'), can_inplace=True, is_weak=False)]
]
op709.node.kernel = extern_kernels.mm


op710_op711_op712_op714: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op710_op711_op712_op714.writes = 
    [   MemoryDep('buf710', c0, {c0: 2097152}, None),
        MemoryDep('buf711', c0, {c0: 2048}, None),
        MemoryDep('buf712', c0, {c0: 2048}, None),
        MemoryDep('buf714', c0, {c0: 2097152}, None)]
op710_op711_op712_op714.unmet_dependencies = 
    [   MemoryDep('buf686', c0, {c0: 2097152}, None),
        MemoryDep('buf702', c0, {c0: 2097152}, None),
        MemoryDep('buf709', c0, {c0: 2097152}, None)]
op710_op711_op712_op714.met_dependencies = 
    [   MemoryDep('arg452_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg458_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg459_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg460_1', c1, {c0: 2048, c1: 1024}, None)]
op710_op711_op712_op714.outputs = [
    buf710: ComputedBuffer
    buf710.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf710.users = [
        NodeUser(node=SchedulerNode(name='op711'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op712'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op713'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op714'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op728'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op729'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op730'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op731'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op744'), can_inplace=True, is_weak=False),
    ]
    buf711: ComputedBuffer
    buf711.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf711.users = [NodeUser(node=SchedulerNode(name='op714'), can_inplace=False, is_weak=False)]
    buf712: ComputedBuffer
    buf712.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf712.users = [NodeUser(node=SchedulerNode(name='op714'), can_inplace=False, is_weak=False)]
    buf714: ComputedBuffer
    buf714.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf714.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op715'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op716'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op718'), can_inplace=False, is_weak=False),
    ]
]
op710_op711_op712_op714.snodes[0] =
op710: SchedulerNode(ComputedBuffer)
op710.writes = [MemoryDep('buf710', c0, {c0: 2097152}, None)]
op710.unmet_dependencies = 
    [   MemoryDep('buf686', c0, {c0: 2097152}, None),
        MemoryDep('buf702', c0, {c0: 2097152}, None),
        MemoryDep('buf709', c0, {c0: 2097152}, None)]
op710.met_dependencies = 
    [   MemoryDep('arg452_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg458_1', c1, {c0: 2048, c1: 1024}, None)]
op710.outputs = [
    buf710: ComputedBuffer
    buf710.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf710.users = [
        NodeUser(node=SchedulerNode(name='op711'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op712'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op713'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op714'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op728'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op729'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op730'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op731'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op744'), can_inplace=True, is_weak=False),
    ]
]
op710.group.device = cuda:0
op710.group.iteration = (2097152, 1)
op710.sizes = ([2048, 1024], [])
buf686_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf702_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg452_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf709_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg458_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf710_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op710_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf686', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf702', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg452_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf709', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg458_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf710', get_index_5, add_3, None)
        return store
op710 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op710_op711_op712_op714.snodes[1] =
op711: SchedulerNode(ComputedBuffer)
op711.writes = [MemoryDep('buf711', c0, {c0: 2048}, None)]
op711.unmet_dependencies = [MemoryDep('buf710', c0, {c0: 2097152}, None)]
op711.met_dependencies = []
op711.outputs = [
    buf711: ComputedBuffer
    buf711.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf711.users = [NodeUser(node=SchedulerNode(name='op714'), can_inplace=False, is_weak=False)]
]
op711.group.device = cuda:0
op711.group.iteration = (2048, 1024)
op711.sizes = ([2048], [1024])
buf710_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf711_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op711_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf710', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf711', get_index_1, getitem)
        return store_reduction
op711 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op710_op711_op712_op714.snodes[2] =
op712: SchedulerNode(ComputedBuffer)
op712.writes = [MemoryDep('buf712', c0, {c0: 2048}, None)]
op712.unmet_dependencies = [MemoryDep('buf710', c0, {c0: 2097152}, None)]
op712.met_dependencies = []
op712.outputs = [
    buf712: ComputedBuffer
    buf712.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf712.users = [NodeUser(node=SchedulerNode(name='op714'), can_inplace=False, is_weak=False)]
]
op712.group.device = cuda:0
op712.group.iteration = (2048, 1024)
op712.sizes = ([2048], [1024])
buf710_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf712_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op712_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf710', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf712', get_index_1, getitem_1)
        return store_reduction
op712 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op710_op711_op712_op714.snodes[3] =
op714: SchedulerNode(ComputedBuffer)
op714.writes = [MemoryDep('buf714', c0, {c0: 2097152}, None)]
op714.unmet_dependencies = 
    [   MemoryDep('buf710', c0, {c0: 2097152}, None),
        MemoryDep('buf711', c0, {c0: 2048}, None),
        MemoryDep('buf712', c0, {c0: 2048}, None)]
op714.met_dependencies = 
    [   MemoryDep('arg459_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg460_1', c1, {c0: 2048, c1: 1024}, None)]
op714.outputs = [
    buf714: ComputedBuffer
    buf714.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf714.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op715'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op716'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op718'), can_inplace=False, is_weak=False),
    ]
]
op714.group.device = cuda:0
op714.group.iteration = (2097152, 1)
op714.sizes = ([2048, 1024], [])
buf710_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf711_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf712_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg459_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg460_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf714_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op714_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf710', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf711', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf712', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg459_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg460_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf714', get_index_5, add_1, None)
        return store
op714 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op710_op711_op712_op714 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op715: ExternKernelSchedulerNode(ExternKernelOut)
op715.writes = [StarDep(name='buf715', mode=None)]
op715.unmet_dependencies = [StarDep(name='buf714', mode=None)]
op715.met_dependencies = [StarDep(name='arg461_1', mode=None)]
op715.outputs = [
    buf715: ExternKernelOut
    buf715.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf715.users = [NodeUser(node=SchedulerNode(name='op720'), can_inplace=False, is_weak=False)]
]
op715.node.kernel = extern_kernels.mm


op716: ExternKernelSchedulerNode(ExternKernelOut)
op716.writes = [StarDep(name='buf716', mode=None)]
op716.unmet_dependencies = [StarDep(name='buf714', mode=None)]
op716.met_dependencies = [StarDep(name='arg463_1', mode=None)]
op716.outputs = [
    buf716: ExternKernelOut
    buf716.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf716.users = [NodeUser(node=SchedulerNode(name='op717'), can_inplace=False, is_weak=False)]
]
op716.node.kernel = extern_kernels.mm


op717: SchedulerNode(ComputedBuffer)
op717.writes = [MemoryDep('buf717', c0, {c0: 2097152}, None)]
op717.unmet_dependencies = [   MemoryDep('buf716', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op717.met_dependencies = [MemoryDep('arg464_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op717.outputs = [
    buf717: ComputedBuffer
    buf717.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf717.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op722'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op717.group.device = cuda:0
op717.group.iteration = (2097152, 1)
op717.sizes = ([16, 16, 128, 64], [])
buf716_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg464_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf717_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op717_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf716', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg464_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf717', get_index_2, add, None)
        return store
op717 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op718: ExternKernelSchedulerNode(ExternKernelOut)
op718.writes = [StarDep(name='buf718', mode=None)]
op718.unmet_dependencies = [StarDep(name='buf714', mode=None)]
op718.met_dependencies = [StarDep(name='arg465_1', mode=None)]
op718.outputs = [
    buf718: ExternKernelOut
    buf718.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf718.users = [NodeUser(node=SchedulerNode(name='op719'), can_inplace=False, is_weak=False)]
]
op718.node.kernel = extern_kernels.mm


op719: SchedulerNode(ComputedBuffer)
op719.writes = [MemoryDep('buf719', c0, {c0: 2097152}, None)]
op719.unmet_dependencies = [   MemoryDep('buf718', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op719.met_dependencies = [MemoryDep('arg466_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op719.outputs = [
    buf719: ComputedBuffer
    buf719.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf719.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op722'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op719.group.device = cuda:0
op719.group.iteration = (2097152, 1)
op719.sizes = ([16, 16, 128, 64], [])
buf718_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg466_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf719_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op719_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf718', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg466_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf719', get_index_2, add, None)
        return store
op719 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op720: SchedulerNode(ComputedBuffer)
op720.writes = [MemoryDep('buf720', c0, {c0: 2097152}, None)]
op720.unmet_dependencies = [   MemoryDep('buf715', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op720.met_dependencies = [MemoryDep('arg462_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op720.outputs = [
    buf720: ComputedBuffer
    buf720.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf720.users = [NodeUser(node=ExternKernelSchedulerNode(name='op722'), can_inplace=False, is_weak=False)]
]
op720.group.device = cuda:0
op720.group.iteration = (2097152, 1)
op720.sizes = ([16, 16, 128, 64], [])
buf715_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg462_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf720_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op720_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf715', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg462_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf720', get_index_2, add, None)
        return store
op720 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op721: SchedulerNode(ComputedBuffer)
op721.writes = [MemoryDep('buf721', c0, {c0: 4194304}, None)]
op721.unmet_dependencies = []
op721.met_dependencies = []
op721.outputs = [
    buf721: ComputedBuffer
    buf721.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf721.users = [NodeUser(node=ExternKernelSchedulerNode(name='op722'), can_inplace=False, is_weak=False)]
]
op721.group.device = cuda:0
op721.group.iteration = (4194304, 1)
op721.sizes = ([256, 128, 128], [])
buf721_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op721_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 128}
    index0 = z2
    index1 = z1 + 1
    index2 = 16384*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf721', get_index_2, where, None)
        return store
op721 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op722: ExternKernelSchedulerNode(FallbackKernel)
op722.writes = [StarDep(name='buf722', mode=None)]
op722.unmet_dependencies = 
    [   StarDep(name='buf717', mode=None),
        StarDep(name='buf719', mode=None),
        StarDep(name='buf720', mode=None),
        StarDep(name='buf721', mode=None)]
op722.met_dependencies = []
op722.outputs = [
    buf722: FallbackKernel
    buf722.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf722.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op723'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op724'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op725'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op726'), can_inplace=False, is_weak=False),
    ]
]
op722.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op723: ExternKernelSchedulerNode(MultiOutput)
op723.writes = [StarDep(name='buf723', mode=None)]
op723.unmet_dependencies = [StarDep(name='buf722', mode=None)]
op723.met_dependencies = []
op723.outputs = [
    buf723: MultiOutput
    buf723.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf723.users = [NodeUser(node=ExternKernelSchedulerNode(name='op727'), can_inplace=False, is_weak=False)]
]
op723.node.kernel = None


op727: ExternKernelSchedulerNode(ExternKernelOut)
op727.writes = [StarDep(name='buf727', mode=None)]
op727.unmet_dependencies = [StarDep(name='buf723', mode=None)]
op727.met_dependencies = [StarDep(name='arg467_1', mode=None)]
op727.outputs = [
    buf727: ExternKernelOut
    buf727.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf727.users = [
        NodeUser(node=SchedulerNode(name='op728'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op729'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op730'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op731'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op744'), can_inplace=True, is_weak=False),
    ]
]
op727.node.kernel = extern_kernels.mm


op728_op729_op731: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op728_op729_op731.writes = 
    [   MemoryDep('buf728', c0, {c0: 2048}, None),
        MemoryDep('buf729', c0, {c0: 2048}, None),
        MemoryDep('buf731', c0, {c0: 2097152}, None)]
op728_op729_op731.unmet_dependencies = 
    [   MemoryDep('buf710', c0, {c0: 2097152}, None),
        MemoryDep('buf727', c0, {c0: 2097152}, None)]
op728_op729_op731.met_dependencies = 
    [   MemoryDep('arg468_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg469_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg470_1', c1, {c0: 2048, c1: 1024}, None)]
op728_op729_op731.outputs = [
    buf728: ComputedBuffer
    buf728.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf728.users = [NodeUser(node=SchedulerNode(name='op731'), can_inplace=False, is_weak=False)]
    buf729: ComputedBuffer
    buf729.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf729.users = [NodeUser(node=SchedulerNode(name='op731'), can_inplace=False, is_weak=False)]
    buf731: ComputedBuffer
    buf731.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf731.users = [NodeUser(node=ExternKernelSchedulerNode(name='op732'), can_inplace=False, is_weak=False)]
]
op728_op729_op731.snodes[0] =
op728: SchedulerNode(ComputedBuffer)
op728.writes = [MemoryDep('buf728', c0, {c0: 2048}, None)]
op728.unmet_dependencies = 
    [   MemoryDep('buf710', c0, {c0: 2097152}, None),
        MemoryDep('buf727', c0, {c0: 2097152}, None)]
op728.met_dependencies = [MemoryDep('arg468_1', c1, {c0: 2048, c1: 1024}, None)]
op728.outputs = [
    buf728: ComputedBuffer
    buf728.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf728.users = [NodeUser(node=SchedulerNode(name='op731'), can_inplace=False, is_weak=False)]
]
op728.group.device = cuda:0
op728.group.iteration = (2048, 1024)
op728.sizes = ([2048], [1024])
buf710_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf727_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg468_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf728_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op728_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf710', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf727', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg468_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf728', get_index_3, getitem)
        return store_reduction
op728 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op728_op729_op731.snodes[1] =
op729: SchedulerNode(ComputedBuffer)
op729.writes = [MemoryDep('buf729', c0, {c0: 2048}, None)]
op729.unmet_dependencies = 
    [   MemoryDep('buf710', c0, {c0: 2097152}, None),
        MemoryDep('buf727', c0, {c0: 2097152}, None)]
op729.met_dependencies = [MemoryDep('arg468_1', c1, {c0: 2048, c1: 1024}, None)]
op729.outputs = [
    buf729: ComputedBuffer
    buf729.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf729.users = [NodeUser(node=SchedulerNode(name='op731'), can_inplace=False, is_weak=False)]
]
op729.group.device = cuda:0
op729.group.iteration = (2048, 1024)
op729.sizes = ([2048], [1024])
buf710_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf727_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg468_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf729_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op729_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf710', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf727', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg468_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf729', get_index_3, getitem_1)
        return store_reduction
op729 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op728_op729_op731.snodes[2] =
op731: SchedulerNode(ComputedBuffer)
op731.writes = [MemoryDep('buf731', c0, {c0: 2097152}, None)]
op731.unmet_dependencies = 
    [   MemoryDep('buf710', c0, {c0: 2097152}, None),
        MemoryDep('buf727', c0, {c0: 2097152}, None),
        MemoryDep('buf728', c0, {c0: 2048}, None),
        MemoryDep('buf729', c0, {c0: 2048}, None)]
op731.met_dependencies = 
    [   MemoryDep('arg468_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg469_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg470_1', c1, {c0: 2048, c1: 1024}, None)]
op731.outputs = [
    buf731: ComputedBuffer
    buf731.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf731.users = [NodeUser(node=ExternKernelSchedulerNode(name='op732'), can_inplace=False, is_weak=False)]
]
op731.group.device = cuda:0
op731.group.iteration = (2097152, 1)
op731.sizes = ([2048, 1024], [])
buf710_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf727_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg468_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf728_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf729_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg469_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg470_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf731_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op731_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf710', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf727', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg468_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf728', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf729', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg469_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg470_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf731', get_index_7, add_3, None)
        return store
op731 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op728_op729_op731 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op732: ExternKernelSchedulerNode(ExternKernelOut)
op732.writes = [StarDep(name='buf732', mode=None)]
op732.unmet_dependencies = [StarDep(name='buf731', mode=None)]
op732.met_dependencies = [StarDep(name='arg471_1', mode=None)]
op732.outputs = [
    buf732: ExternKernelOut
    buf732.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf732.users = [NodeUser(node=SchedulerNode(name='op737'), can_inplace=False, is_weak=False)]
]
op732.node.kernel = extern_kernels.mm


op733: ExternKernelSchedulerNode(ExternKernelOut)
op733.writes = [StarDep(name='buf733', mode=None)]
op733.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op733.met_dependencies = [StarDep(name='arg473_1', mode=None)]
op733.outputs = [
    buf733: ExternKernelOut
    buf733.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf733.users = [NodeUser(node=SchedulerNode(name='op734'), can_inplace=False, is_weak=False)]
]
op733.node.kernel = extern_kernels.mm


op734: SchedulerNode(ComputedBuffer)
op734.writes = [MemoryDep('buf734', c0, {c0: 2097152}, None)]
op734.unmet_dependencies = [   MemoryDep('buf733', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op734.met_dependencies = [MemoryDep('arg474_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op734.outputs = [
    buf734: ComputedBuffer
    buf734.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf734.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op738'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op734.group.device = cuda:0
op734.group.iteration = (2097152, 1)
op734.sizes = ([16, 16, 128, 64], [])
buf733_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg474_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf734_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op734_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf733', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg474_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf734', get_index_2, add, None)
        return store
op734 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op735: ExternKernelSchedulerNode(ExternKernelOut)
op735.writes = [StarDep(name='buf735', mode=None)]
op735.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op735.met_dependencies = [StarDep(name='arg475_1', mode=None)]
op735.outputs = [
    buf735: ExternKernelOut
    buf735.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf735.users = [NodeUser(node=SchedulerNode(name='op736'), can_inplace=False, is_weak=False)]
]
op735.node.kernel = extern_kernels.mm


op736: SchedulerNode(ComputedBuffer)
op736.writes = [MemoryDep('buf736', c0, {c0: 2097152}, None)]
op736.unmet_dependencies = [   MemoryDep('buf735', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op736.met_dependencies = [MemoryDep('arg476_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op736.outputs = [
    buf736: ComputedBuffer
    buf736.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf736.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op738'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op736.group.device = cuda:0
op736.group.iteration = (2097152, 1)
op736.sizes = ([16, 16, 128, 64], [])
buf735_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg476_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf736_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op736_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf735', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg476_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf736', get_index_2, add, None)
        return store
op736 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op737: SchedulerNode(ComputedBuffer)
op737.writes = [MemoryDep('buf737', c0, {c0: 2097152}, None)]
op737.unmet_dependencies = [   MemoryDep('buf732', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op737.met_dependencies = [MemoryDep('arg472_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op737.outputs = [
    buf737: ComputedBuffer
    buf737.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf737.users = [NodeUser(node=ExternKernelSchedulerNode(name='op738'), can_inplace=False, is_weak=False)]
]
op737.group.device = cuda:0
op737.group.iteration = (2097152, 1)
op737.sizes = ([16, 16, 128, 64], [])
buf732_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg472_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf737_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op737_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf732', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg472_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf737', get_index_2, add, None)
        return store
op737 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op738: ExternKernelSchedulerNode(FallbackKernel)
op738.writes = [StarDep(name='buf738', mode=None)]
op738.unmet_dependencies = 
    [   StarDep(name='buf734', mode=None),
        StarDep(name='buf736', mode=None),
        StarDep(name='buf737', mode=None)]
op738.met_dependencies = []
op738.outputs = [
    buf738: FallbackKernel
    buf738.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf738.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op739'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op740'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op741'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op742'), can_inplace=False, is_weak=False),
    ]
]
op738.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op739: ExternKernelSchedulerNode(MultiOutput)
op739.writes = [StarDep(name='buf739', mode=None)]
op739.unmet_dependencies = [StarDep(name='buf738', mode=None)]
op739.met_dependencies = []
op739.outputs = [
    buf739: MultiOutput
    buf739.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf739.users = [NodeUser(node=ExternKernelSchedulerNode(name='op743'), can_inplace=False, is_weak=False)]
]
op739.node.kernel = None


op743: ExternKernelSchedulerNode(ExternKernelOut)
op743.writes = [StarDep(name='buf743', mode=None)]
op743.unmet_dependencies = [StarDep(name='buf739', mode=None)]
op743.met_dependencies = [StarDep(name='arg477_1', mode=None)]
op743.outputs = [
    buf743: ExternKernelOut
    buf743.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf743.users = [NodeUser(node=SchedulerNode(name='op744'), can_inplace=True, is_weak=False)]
]
op743.node.kernel = extern_kernels.mm


op744_op745_op746_op748: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op744_op745_op746_op748.writes = 
    [   MemoryDep('buf744', c0, {c0: 2097152}, None),
        MemoryDep('buf745', c0, {c0: 2048}, None),
        MemoryDep('buf746', c0, {c0: 2048}, None),
        MemoryDep('buf748', c0, {c0: 2097152}, None)]
op744_op745_op746_op748.unmet_dependencies = 
    [   MemoryDep('buf710', c0, {c0: 2097152}, None),
        MemoryDep('buf727', c0, {c0: 2097152}, None),
        MemoryDep('buf743', c0, {c0: 2097152}, None)]
op744_op745_op746_op748.met_dependencies = 
    [   MemoryDep('arg468_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg478_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg479_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg480_1', c1, {c0: 2048, c1: 1024}, None)]
op744_op745_op746_op748.outputs = [
    buf744: ComputedBuffer
    buf744.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf744.users = [
        NodeUser(node=SchedulerNode(name='op745'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op746'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op747'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op748'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op752'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op755'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op769'), can_inplace=True, is_weak=False),
    ]
    buf745: ComputedBuffer
    buf745.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf745.users = [NodeUser(node=SchedulerNode(name='op748'), can_inplace=False, is_weak=False)]
    buf746: ComputedBuffer
    buf746.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf746.users = [NodeUser(node=SchedulerNode(name='op748'), can_inplace=False, is_weak=False)]
    buf748: ComputedBuffer
    buf748.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf748.users = [NodeUser(node=ExternKernelSchedulerNode(name='op749'), can_inplace=False, is_weak=False)]
]
op744_op745_op746_op748.snodes[0] =
op744: SchedulerNode(ComputedBuffer)
op744.writes = [MemoryDep('buf744', c0, {c0: 2097152}, None)]
op744.unmet_dependencies = 
    [   MemoryDep('buf710', c0, {c0: 2097152}, None),
        MemoryDep('buf727', c0, {c0: 2097152}, None),
        MemoryDep('buf743', c0, {c0: 2097152}, None)]
op744.met_dependencies = 
    [   MemoryDep('arg468_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg478_1', c1, {c0: 2048, c1: 1024}, None)]
op744.outputs = [
    buf744: ComputedBuffer
    buf744.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf744.users = [
        NodeUser(node=SchedulerNode(name='op745'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op746'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op747'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op748'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op752'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op755'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op769'), can_inplace=True, is_weak=False),
    ]
]
op744.group.device = cuda:0
op744.group.iteration = (2097152, 1)
op744.sizes = ([2048, 1024], [])
buf710_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf727_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg468_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf743_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg478_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf744_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op744_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf710', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf727', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg468_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf743', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg478_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf744', get_index_5, add_3, None)
        return store
op744 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op744_op745_op746_op748.snodes[1] =
op745: SchedulerNode(ComputedBuffer)
op745.writes = [MemoryDep('buf745', c0, {c0: 2048}, None)]
op745.unmet_dependencies = [MemoryDep('buf744', c0, {c0: 2097152}, None)]
op745.met_dependencies = []
op745.outputs = [
    buf745: ComputedBuffer
    buf745.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf745.users = [NodeUser(node=SchedulerNode(name='op748'), can_inplace=False, is_weak=False)]
]
op745.group.device = cuda:0
op745.group.iteration = (2048, 1024)
op745.sizes = ([2048], [1024])
buf744_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf745_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op745_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf744', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf745', get_index_1, getitem)
        return store_reduction
op745 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op744_op745_op746_op748.snodes[2] =
op746: SchedulerNode(ComputedBuffer)
op746.writes = [MemoryDep('buf746', c0, {c0: 2048}, None)]
op746.unmet_dependencies = [MemoryDep('buf744', c0, {c0: 2097152}, None)]
op746.met_dependencies = []
op746.outputs = [
    buf746: ComputedBuffer
    buf746.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf746.users = [NodeUser(node=SchedulerNode(name='op748'), can_inplace=False, is_weak=False)]
]
op746.group.device = cuda:0
op746.group.iteration = (2048, 1024)
op746.sizes = ([2048], [1024])
buf744_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf746_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op746_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf744', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf746', get_index_1, getitem_1)
        return store_reduction
op746 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op744_op745_op746_op748.snodes[3] =
op748: SchedulerNode(ComputedBuffer)
op748.writes = [MemoryDep('buf748', c0, {c0: 2097152}, None)]
op748.unmet_dependencies = 
    [   MemoryDep('buf744', c0, {c0: 2097152}, None),
        MemoryDep('buf745', c0, {c0: 2048}, None),
        MemoryDep('buf746', c0, {c0: 2048}, None)]
op748.met_dependencies = 
    [   MemoryDep('arg479_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg480_1', c1, {c0: 2048, c1: 1024}, None)]
op748.outputs = [
    buf748: ComputedBuffer
    buf748.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf748.users = [NodeUser(node=ExternKernelSchedulerNode(name='op749'), can_inplace=False, is_weak=False)]
]
op748.group.device = cuda:0
op748.group.iteration = (2097152, 1)
op748.sizes = ([2048, 1024], [])
buf744_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf745_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf746_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg479_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg480_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf748_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op748_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf744', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf745', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf746', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg479_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg480_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf748', get_index_5, add_1, None)
        return store
op748 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op744_op745_op746_op748 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op749: ExternKernelSchedulerNode(ExternKernelOut)
op749.writes = [StarDep(name='buf749', mode=None)]
op749.unmet_dependencies = [StarDep(name='buf748', mode=None)]
op749.met_dependencies = [StarDep(name='arg481_1', mode=None)]
op749.outputs = [
    buf749: ExternKernelOut
    buf749.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf749.users = [NodeUser(node=SchedulerNode(name='op750'), can_inplace=True, is_weak=False)]
]
op749.node.kernel = extern_kernels.mm


op750: SchedulerNode(ComputedBuffer)
op750.writes = [MemoryDep('buf750', c0, {c0: 8388608}, None)]
op750.unmet_dependencies = [MemoryDep('buf749', c0, {c0: 8388608}, None)]
op750.met_dependencies = [MemoryDep('arg482_1', c1, {c0: 2048, c1: 4096}, None)]
op750.outputs = [
    buf750: ComputedBuffer
    buf750.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf750.users = [NodeUser(node=ExternKernelSchedulerNode(name='op751'), can_inplace=False, is_weak=False)]
]
op750.group.device = cuda:0
op750.group.iteration = (8388608, 1)
op750.sizes = ([2048, 4096], [])
buf749_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg482_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf750_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op750_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf749', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg482_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf750', get_index_2, relu, None)
        return store
op750 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op751: ExternKernelSchedulerNode(ExternKernelOut)
op751.writes = [StarDep(name='buf751', mode=None)]
op751.unmet_dependencies = [StarDep(name='buf750', mode=None)]
op751.met_dependencies = [StarDep(name='arg483_1', mode=None)]
op751.outputs = [
    buf751: ExternKernelOut
    buf751.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf751.users = [
        NodeUser(node=SchedulerNode(name='op752'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op755'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op769'), can_inplace=True, is_weak=False),
    ]
]
op751.node.kernel = extern_kernels.mm


op752_op753_op755: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op752_op753_op755.writes = 
    [   MemoryDep('buf752', c0, {c0: 2048}, None),
        MemoryDep('buf753', c0, {c0: 2048}, None),
        MemoryDep('buf755', c0, {c0: 2097152}, None)]
op752_op753_op755.unmet_dependencies = 
    [   MemoryDep('buf744', c0, {c0: 2097152}, None),
        MemoryDep('buf751', c0, {c0: 2097152}, None)]
op752_op753_op755.met_dependencies = 
    [   MemoryDep('arg484_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg485_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg486_1', c1, {c0: 2048, c1: 1024}, None)]
op752_op753_op755.outputs = [
    buf752: ComputedBuffer
    buf752.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf752.users = [NodeUser(node=SchedulerNode(name='op755'), can_inplace=False, is_weak=False)]
    buf753: ComputedBuffer
    buf753.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf753.users = [NodeUser(node=SchedulerNode(name='op755'), can_inplace=False, is_weak=False)]
    buf755: ComputedBuffer
    buf755.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf755.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op756'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op757'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op759'), can_inplace=False, is_weak=False),
    ]
]
op752_op753_op755.snodes[0] =
op752: SchedulerNode(ComputedBuffer)
op752.writes = [MemoryDep('buf752', c0, {c0: 2048}, None)]
op752.unmet_dependencies = 
    [   MemoryDep('buf744', c0, {c0: 2097152}, None),
        MemoryDep('buf751', c0, {c0: 2097152}, None)]
op752.met_dependencies = [MemoryDep('arg484_1', c1, {c0: 2048, c1: 1024}, None)]
op752.outputs = [
    buf752: ComputedBuffer
    buf752.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf752.users = [NodeUser(node=SchedulerNode(name='op755'), can_inplace=False, is_weak=False)]
]
op752.group.device = cuda:0
op752.group.iteration = (2048, 1024)
op752.sizes = ([2048], [1024])
buf744_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf751_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg484_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf752_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op752_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf744', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf751', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg484_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf752', get_index_3, getitem)
        return store_reduction
op752 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op752_op753_op755.snodes[1] =
op753: SchedulerNode(ComputedBuffer)
op753.writes = [MemoryDep('buf753', c0, {c0: 2048}, None)]
op753.unmet_dependencies = 
    [   MemoryDep('buf744', c0, {c0: 2097152}, None),
        MemoryDep('buf751', c0, {c0: 2097152}, None)]
op753.met_dependencies = [MemoryDep('arg484_1', c1, {c0: 2048, c1: 1024}, None)]
op753.outputs = [
    buf753: ComputedBuffer
    buf753.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf753.users = [NodeUser(node=SchedulerNode(name='op755'), can_inplace=False, is_weak=False)]
]
op753.group.device = cuda:0
op753.group.iteration = (2048, 1024)
op753.sizes = ([2048], [1024])
buf744_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf751_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg484_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf753_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op753_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf744', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf751', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg484_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf753', get_index_3, getitem_1)
        return store_reduction
op753 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op752_op753_op755.snodes[2] =
op755: SchedulerNode(ComputedBuffer)
op755.writes = [MemoryDep('buf755', c0, {c0: 2097152}, None)]
op755.unmet_dependencies = 
    [   MemoryDep('buf744', c0, {c0: 2097152}, None),
        MemoryDep('buf751', c0, {c0: 2097152}, None),
        MemoryDep('buf752', c0, {c0: 2048}, None),
        MemoryDep('buf753', c0, {c0: 2048}, None)]
op755.met_dependencies = 
    [   MemoryDep('arg484_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg485_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg486_1', c1, {c0: 2048, c1: 1024}, None)]
op755.outputs = [
    buf755: ComputedBuffer
    buf755.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf755.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op756'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op757'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op759'), can_inplace=False, is_weak=False),
    ]
]
op755.group.device = cuda:0
op755.group.iteration = (2097152, 1)
op755.sizes = ([2048, 1024], [])
buf744_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf751_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg484_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf752_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf753_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg485_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg486_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf755_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op755_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf744', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf751', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg484_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf752', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf753', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg485_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg486_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf755', get_index_7, add_3, None)
        return store
op755 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op752_op753_op755 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op756: ExternKernelSchedulerNode(ExternKernelOut)
op756.writes = [StarDep(name='buf756', mode=None)]
op756.unmet_dependencies = [StarDep(name='buf755', mode=None)]
op756.met_dependencies = [StarDep(name='arg487_1', mode=None)]
op756.outputs = [
    buf756: ExternKernelOut
    buf756.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf756.users = [NodeUser(node=SchedulerNode(name='op761'), can_inplace=False, is_weak=False)]
]
op756.node.kernel = extern_kernels.mm


op757: ExternKernelSchedulerNode(ExternKernelOut)
op757.writes = [StarDep(name='buf757', mode=None)]
op757.unmet_dependencies = [StarDep(name='buf755', mode=None)]
op757.met_dependencies = [StarDep(name='arg489_1', mode=None)]
op757.outputs = [
    buf757: ExternKernelOut
    buf757.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf757.users = [NodeUser(node=SchedulerNode(name='op758'), can_inplace=False, is_weak=False)]
]
op757.node.kernel = extern_kernels.mm


op758: SchedulerNode(ComputedBuffer)
op758.writes = [MemoryDep('buf758', c0, {c0: 2097152}, None)]
op758.unmet_dependencies = [   MemoryDep('buf757', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op758.met_dependencies = [MemoryDep('arg490_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op758.outputs = [
    buf758: ComputedBuffer
    buf758.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf758.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op763'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op758.group.device = cuda:0
op758.group.iteration = (2097152, 1)
op758.sizes = ([16, 16, 128, 64], [])
buf757_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg490_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf758_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op758_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf757', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg490_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf758', get_index_2, add, None)
        return store
op758 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op759: ExternKernelSchedulerNode(ExternKernelOut)
op759.writes = [StarDep(name='buf759', mode=None)]
op759.unmet_dependencies = [StarDep(name='buf755', mode=None)]
op759.met_dependencies = [StarDep(name='arg491_1', mode=None)]
op759.outputs = [
    buf759: ExternKernelOut
    buf759.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf759.users = [NodeUser(node=SchedulerNode(name='op760'), can_inplace=False, is_weak=False)]
]
op759.node.kernel = extern_kernels.mm


op760: SchedulerNode(ComputedBuffer)
op760.writes = [MemoryDep('buf760', c0, {c0: 2097152}, None)]
op760.unmet_dependencies = [   MemoryDep('buf759', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op760.met_dependencies = [MemoryDep('arg492_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op760.outputs = [
    buf760: ComputedBuffer
    buf760.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf760.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op763'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op760.group.device = cuda:0
op760.group.iteration = (2097152, 1)
op760.sizes = ([16, 16, 128, 64], [])
buf759_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg492_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf760_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op760_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf759', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg492_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf760', get_index_2, add, None)
        return store
op760 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op761: SchedulerNode(ComputedBuffer)
op761.writes = [MemoryDep('buf761', c0, {c0: 2097152}, None)]
op761.unmet_dependencies = [   MemoryDep('buf756', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op761.met_dependencies = [MemoryDep('arg488_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op761.outputs = [
    buf761: ComputedBuffer
    buf761.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf761.users = [NodeUser(node=ExternKernelSchedulerNode(name='op763'), can_inplace=False, is_weak=False)]
]
op761.group.device = cuda:0
op761.group.iteration = (2097152, 1)
op761.sizes = ([16, 16, 128, 64], [])
buf756_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg488_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf761_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op761_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf756', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg488_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf761', get_index_2, add, None)
        return store
op761 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op762: SchedulerNode(ComputedBuffer)
op762.writes = [MemoryDep('buf762', c0, {c0: 4194304}, None)]
op762.unmet_dependencies = []
op762.met_dependencies = []
op762.outputs = [
    buf762: ComputedBuffer
    buf762.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf762.users = [NodeUser(node=ExternKernelSchedulerNode(name='op763'), can_inplace=False, is_weak=False)]
]
op762.group.device = cuda:0
op762.group.iteration = (4194304, 1)
op762.sizes = ([256, 128, 128], [])
buf762_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op762_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 128}
    index0 = z2
    index1 = z1 + 1
    index2 = 16384*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf762', get_index_2, where, None)
        return store
op762 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x3 = xindex
        tmp0 = x0
        tmp1 = 1 + x1
        tmp2 = tmp0 < tmp1
        tmp3 = 0.0
        tmp4 = -3.4028234663852886e+38
        tmp5 = tl.where(tmp2, tmp3, tmp4)
        tl.store(out_ptr0 + (x3), tmp5, None)


op763: ExternKernelSchedulerNode(FallbackKernel)
op763.writes = [StarDep(name='buf763', mode=None)]
op763.unmet_dependencies = 
    [   StarDep(name='buf758', mode=None),
        StarDep(name='buf760', mode=None),
        StarDep(name='buf761', mode=None),
        StarDep(name='buf762', mode=None)]
op763.met_dependencies = []
op763.outputs = [
    buf763: FallbackKernel
    buf763.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf763.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op764'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op765'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op766'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op767'), can_inplace=False, is_weak=False),
    ]
]
op763.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op764: ExternKernelSchedulerNode(MultiOutput)
op764.writes = [StarDep(name='buf764', mode=None)]
op764.unmet_dependencies = [StarDep(name='buf763', mode=None)]
op764.met_dependencies = []
op764.outputs = [
    buf764: MultiOutput
    buf764.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf764.users = [NodeUser(node=ExternKernelSchedulerNode(name='op768'), can_inplace=False, is_weak=False)]
]
op764.node.kernel = None


op768: ExternKernelSchedulerNode(ExternKernelOut)
op768.writes = [StarDep(name='buf768', mode=None)]
op768.unmet_dependencies = [StarDep(name='buf764', mode=None)]
op768.met_dependencies = [StarDep(name='arg493_1', mode=None)]
op768.outputs = [
    buf768: ExternKernelOut
    buf768.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf768.users = [NodeUser(node=SchedulerNode(name='op769'), can_inplace=True, is_weak=False)]
]
op768.node.kernel = extern_kernels.mm


op769_op770_op771_op773: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op769_op770_op771_op773.writes = 
    [   MemoryDep('buf769', c0, {c0: 2097152}, None),
        MemoryDep('buf770', c0, {c0: 2048}, None),
        MemoryDep('buf771', c0, {c0: 2048}, None),
        MemoryDep('buf773', c0, {c0: 2097152}, None)]
op769_op770_op771_op773.unmet_dependencies = 
    [   MemoryDep('buf744', c0, {c0: 2097152}, None),
        MemoryDep('buf751', c0, {c0: 2097152}, None),
        MemoryDep('buf768', c0, {c0: 2097152}, None)]
op769_op770_op771_op773.met_dependencies = 
    [   MemoryDep('arg484_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg494_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg495_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg496_1', c1, {c0: 2048, c1: 1024}, None)]
op769_op770_op771_op773.outputs = [
    buf769: ComputedBuffer
    buf769.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf769.users = [
        NodeUser(node=SchedulerNode(name='op770'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op771'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op772'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op773'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op786'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op787'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op788'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op789'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op793'), can_inplace=True, is_weak=False),
    ]
    buf770: ComputedBuffer
    buf770.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf770.users = [NodeUser(node=SchedulerNode(name='op773'), can_inplace=False, is_weak=False)]
    buf771: ComputedBuffer
    buf771.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf771.users = [NodeUser(node=SchedulerNode(name='op773'), can_inplace=False, is_weak=False)]
    buf773: ComputedBuffer
    buf773.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf773.users = [NodeUser(node=ExternKernelSchedulerNode(name='op774'), can_inplace=False, is_weak=False)]
]
op769_op770_op771_op773.snodes[0] =
op769: SchedulerNode(ComputedBuffer)
op769.writes = [MemoryDep('buf769', c0, {c0: 2097152}, None)]
op769.unmet_dependencies = 
    [   MemoryDep('buf744', c0, {c0: 2097152}, None),
        MemoryDep('buf751', c0, {c0: 2097152}, None),
        MemoryDep('buf768', c0, {c0: 2097152}, None)]
op769.met_dependencies = 
    [   MemoryDep('arg484_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg494_1', c1, {c0: 2048, c1: 1024}, None)]
op769.outputs = [
    buf769: ComputedBuffer
    buf769.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf769.users = [
        NodeUser(node=SchedulerNode(name='op770'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op771'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op772'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op773'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op786'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op787'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op788'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op789'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op793'), can_inplace=True, is_weak=False),
    ]
]
op769.group.device = cuda:0
op769.group.iteration = (2097152, 1)
op769.sizes = ([2048, 1024], [])
buf744_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf751_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg484_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf768_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg494_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf769_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op769_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf744', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf751', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg484_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf768', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg494_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf769', get_index_5, add_3, None)
        return store
op769 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op769_op770_op771_op773.snodes[1] =
op770: SchedulerNode(ComputedBuffer)
op770.writes = [MemoryDep('buf770', c0, {c0: 2048}, None)]
op770.unmet_dependencies = [MemoryDep('buf769', c0, {c0: 2097152}, None)]
op770.met_dependencies = []
op770.outputs = [
    buf770: ComputedBuffer
    buf770.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf770.users = [NodeUser(node=SchedulerNode(name='op773'), can_inplace=False, is_weak=False)]
]
op770.group.device = cuda:0
op770.group.iteration = (2048, 1024)
op770.sizes = ([2048], [1024])
buf769_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf770_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op770_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf769', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf770', get_index_1, getitem)
        return store_reduction
op770 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op769_op770_op771_op773.snodes[2] =
op771: SchedulerNode(ComputedBuffer)
op771.writes = [MemoryDep('buf771', c0, {c0: 2048}, None)]
op771.unmet_dependencies = [MemoryDep('buf769', c0, {c0: 2097152}, None)]
op771.met_dependencies = []
op771.outputs = [
    buf771: ComputedBuffer
    buf771.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf771.users = [NodeUser(node=SchedulerNode(name='op773'), can_inplace=False, is_weak=False)]
]
op771.group.device = cuda:0
op771.group.iteration = (2048, 1024)
op771.sizes = ([2048], [1024])
buf769_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf771_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op771_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf769', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf771', get_index_1, getitem_1)
        return store_reduction
op771 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op769_op770_op771_op773.snodes[3] =
op773: SchedulerNode(ComputedBuffer)
op773.writes = [MemoryDep('buf773', c0, {c0: 2097152}, None)]
op773.unmet_dependencies = 
    [   MemoryDep('buf769', c0, {c0: 2097152}, None),
        MemoryDep('buf770', c0, {c0: 2048}, None),
        MemoryDep('buf771', c0, {c0: 2048}, None)]
op773.met_dependencies = 
    [   MemoryDep('arg495_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg496_1', c1, {c0: 2048, c1: 1024}, None)]
op773.outputs = [
    buf773: ComputedBuffer
    buf773.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf773.users = [NodeUser(node=ExternKernelSchedulerNode(name='op774'), can_inplace=False, is_weak=False)]
]
op773.group.device = cuda:0
op773.group.iteration = (2097152, 1)
op773.sizes = ([2048, 1024], [])
buf769_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf770_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf771_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg495_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg496_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf773_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op773_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf769', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf770', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf771', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg495_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg496_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf773', get_index_5, add_1, None)
        return store
op773 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op769_op770_op771_op773 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op774: ExternKernelSchedulerNode(ExternKernelOut)
op774.writes = [StarDep(name='buf774', mode=None)]
op774.unmet_dependencies = [StarDep(name='buf773', mode=None)]
op774.met_dependencies = [StarDep(name='arg497_1', mode=None)]
op774.outputs = [
    buf774: ExternKernelOut
    buf774.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf774.users = [NodeUser(node=SchedulerNode(name='op779'), can_inplace=False, is_weak=False)]
]
op774.node.kernel = extern_kernels.mm


op775: ExternKernelSchedulerNode(ExternKernelOut)
op775.writes = [StarDep(name='buf775', mode=None)]
op775.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op775.met_dependencies = [StarDep(name='arg499_1', mode=None)]
op775.outputs = [
    buf775: ExternKernelOut
    buf775.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf775.users = [NodeUser(node=SchedulerNode(name='op776'), can_inplace=False, is_weak=False)]
]
op775.node.kernel = extern_kernels.mm


op776: SchedulerNode(ComputedBuffer)
op776.writes = [MemoryDep('buf776', c0, {c0: 2097152}, None)]
op776.unmet_dependencies = [   MemoryDep('buf775', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op776.met_dependencies = [MemoryDep('arg500_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op776.outputs = [
    buf776: ComputedBuffer
    buf776.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf776.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op780'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op776.group.device = cuda:0
op776.group.iteration = (2097152, 1)
op776.sizes = ([16, 16, 128, 64], [])
buf775_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg500_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf776_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op776_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf775', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg500_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf776', get_index_2, add, None)
        return store
op776 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op777: ExternKernelSchedulerNode(ExternKernelOut)
op777.writes = [StarDep(name='buf777', mode=None)]
op777.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op777.met_dependencies = [StarDep(name='arg501_1', mode=None)]
op777.outputs = [
    buf777: ExternKernelOut
    buf777.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf777.users = [NodeUser(node=SchedulerNode(name='op778'), can_inplace=False, is_weak=False)]
]
op777.node.kernel = extern_kernels.mm


op778: SchedulerNode(ComputedBuffer)
op778.writes = [MemoryDep('buf778', c0, {c0: 2097152}, None)]
op778.unmet_dependencies = [   MemoryDep('buf777', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op778.met_dependencies = [MemoryDep('arg502_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op778.outputs = [
    buf778: ComputedBuffer
    buf778.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf778.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op780'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op778.group.device = cuda:0
op778.group.iteration = (2097152, 1)
op778.sizes = ([16, 16, 128, 64], [])
buf777_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg502_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf778_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op778_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf777', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg502_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf778', get_index_2, add, None)
        return store
op778 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op779: SchedulerNode(ComputedBuffer)
op779.writes = [MemoryDep('buf779', c0, {c0: 2097152}, None)]
op779.unmet_dependencies = [   MemoryDep('buf774', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op779.met_dependencies = [MemoryDep('arg498_1', 64*c1 + c3, {c0: 16, c1: 16, c2: 128, c3: 64}, None)]
op779.outputs = [
    buf779: ComputedBuffer
    buf779.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf779.users = [NodeUser(node=ExternKernelSchedulerNode(name='op780'), can_inplace=False, is_weak=False)]
]
op779.group.device = cuda:0
op779.group.iteration = (2097152, 1)
op779.sizes = ([16, 16, 128, 64], [])
buf774_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg498_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf779_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op779_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf774', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg498_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf779', get_index_2, add, None)
        return store
op779 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op780: ExternKernelSchedulerNode(FallbackKernel)
op780.writes = [StarDep(name='buf780', mode=None)]
op780.unmet_dependencies = 
    [   StarDep(name='buf776', mode=None),
        StarDep(name='buf778', mode=None),
        StarDep(name='buf779', mode=None)]
op780.met_dependencies = []
op780.outputs = [
    buf780: FallbackKernel
    buf780.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf780.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op781'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op782'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op783'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op784'), can_inplace=False, is_weak=False),
    ]
]
op780.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op781: ExternKernelSchedulerNode(MultiOutput)
op781.writes = [StarDep(name='buf781', mode=None)]
op781.unmet_dependencies = [StarDep(name='buf780', mode=None)]
op781.met_dependencies = []
op781.outputs = [
    buf781: MultiOutput
    buf781.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf781.users = [NodeUser(node=ExternKernelSchedulerNode(name='op785'), can_inplace=False, is_weak=False)]
]
op781.node.kernel = None


op785: ExternKernelSchedulerNode(ExternKernelOut)
op785.writes = [StarDep(name='buf785', mode=None)]
op785.unmet_dependencies = [StarDep(name='buf781', mode=None)]
op785.met_dependencies = [StarDep(name='arg503_1', mode=None)]
op785.outputs = [
    buf785: ExternKernelOut
    buf785.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf785.users = [
        NodeUser(node=SchedulerNode(name='op786'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op787'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op788'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op789'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op793'), can_inplace=True, is_weak=False),
    ]
]
op785.node.kernel = extern_kernels.mm


op786_op787_op789: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op786_op787_op789.writes = 
    [   MemoryDep('buf786', c0, {c0: 2048}, None),
        MemoryDep('buf787', c0, {c0: 2048}, None),
        MemoryDep('buf789', c0, {c0: 2097152}, None)]
op786_op787_op789.unmet_dependencies = 
    [   MemoryDep('buf769', c0, {c0: 2097152}, None),
        MemoryDep('buf785', c0, {c0: 2097152}, None)]
op786_op787_op789.met_dependencies = 
    [   MemoryDep('arg504_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg505_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg506_1', c1, {c0: 2048, c1: 1024}, None)]
op786_op787_op789.outputs = [
    buf786: ComputedBuffer
    buf786.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf786.users = [NodeUser(node=SchedulerNode(name='op789'), can_inplace=False, is_weak=False)]
    buf787: ComputedBuffer
    buf787.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf787.users = [NodeUser(node=SchedulerNode(name='op789'), can_inplace=False, is_weak=False)]
    buf789: ComputedBuffer
    buf789.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf789.users = [NodeUser(node=ExternKernelSchedulerNode(name='op790'), can_inplace=False, is_weak=False)]
]
op786_op787_op789.snodes[0] =
op786: SchedulerNode(ComputedBuffer)
op786.writes = [MemoryDep('buf786', c0, {c0: 2048}, None)]
op786.unmet_dependencies = 
    [   MemoryDep('buf769', c0, {c0: 2097152}, None),
        MemoryDep('buf785', c0, {c0: 2097152}, None)]
op786.met_dependencies = [MemoryDep('arg504_1', c1, {c0: 2048, c1: 1024}, None)]
op786.outputs = [
    buf786: ComputedBuffer
    buf786.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf786.users = [NodeUser(node=SchedulerNode(name='op789'), can_inplace=False, is_weak=False)]
]
op786.group.device = cuda:0
op786.group.iteration = (2048, 1024)
op786.sizes = ([2048], [1024])
buf769_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf785_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg504_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf786_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op786_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf769', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf785', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg504_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf786', get_index_3, getitem)
        return store_reduction
op786 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op786_op787_op789.snodes[1] =
op787: SchedulerNode(ComputedBuffer)
op787.writes = [MemoryDep('buf787', c0, {c0: 2048}, None)]
op787.unmet_dependencies = 
    [   MemoryDep('buf769', c0, {c0: 2097152}, None),
        MemoryDep('buf785', c0, {c0: 2097152}, None)]
op787.met_dependencies = [MemoryDep('arg504_1', c1, {c0: 2048, c1: 1024}, None)]
op787.outputs = [
    buf787: ComputedBuffer
    buf787.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf787.users = [NodeUser(node=SchedulerNode(name='op789'), can_inplace=False, is_weak=False)]
]
op787.group.device = cuda:0
op787.group.iteration = (2048, 1024)
op787.sizes = ([2048], [1024])
buf769_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf785_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg504_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf787_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op787_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf769', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf785', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg504_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf787', get_index_3, getitem_1)
        return store_reduction
op787 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op786_op787_op789.snodes[2] =
op789: SchedulerNode(ComputedBuffer)
op789.writes = [MemoryDep('buf789', c0, {c0: 2097152}, None)]
op789.unmet_dependencies = 
    [   MemoryDep('buf769', c0, {c0: 2097152}, None),
        MemoryDep('buf785', c0, {c0: 2097152}, None),
        MemoryDep('buf786', c0, {c0: 2048}, None),
        MemoryDep('buf787', c0, {c0: 2048}, None)]
op789.met_dependencies = 
    [   MemoryDep('arg504_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg505_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg506_1', c1, {c0: 2048, c1: 1024}, None)]
op789.outputs = [
    buf789: ComputedBuffer
    buf789.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf789.users = [NodeUser(node=ExternKernelSchedulerNode(name='op790'), can_inplace=False, is_weak=False)]
]
op789.group.device = cuda:0
op789.group.iteration = (2097152, 1)
op789.sizes = ([2048, 1024], [])
buf769_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf785_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg504_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf786_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf787_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg505_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg506_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf789_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op789_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf769', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf785', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg504_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf786', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf787', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg505_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg506_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf789', get_index_7, add_3, None)
        return store
op789 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op786_op787_op789 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op790: ExternKernelSchedulerNode(ExternKernelOut)
op790.writes = [StarDep(name='buf790', mode=None)]
op790.unmet_dependencies = [StarDep(name='buf789', mode=None)]
op790.met_dependencies = [StarDep(name='arg507_1', mode=None)]
op790.outputs = [
    buf790: ExternKernelOut
    buf790.layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
    buf790.users = [NodeUser(node=SchedulerNode(name='op791'), can_inplace=True, is_weak=False)]
]
op790.node.kernel = extern_kernels.mm


op791: SchedulerNode(ComputedBuffer)
op791.writes = [MemoryDep('buf791', c0, {c0: 8388608}, None)]
op791.unmet_dependencies = [MemoryDep('buf790', c0, {c0: 8388608}, None)]
op791.met_dependencies = [MemoryDep('arg508_1', c1, {c0: 2048, c1: 4096}, None)]
op791.outputs = [
    buf791: ComputedBuffer
    buf791.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
    buf791.users = [NodeUser(node=ExternKernelSchedulerNode(name='op792'), can_inplace=False, is_weak=False)]
]
op791.group.device = cuda:0
op791.group.iteration = (8388608, 1)
op791.sizes = ([2048, 4096], [])
buf790_layout = FixedLayout('cuda', torch.float32, size=[2048, 4096], stride=[4096, 1])
arg508_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf791_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 4096], stride=[524288, 4096, 1])
class op791_loop_body:
    var_ranges = {z0: 2048, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf790', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg508_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf791', get_index_2, relu, None)
        return store
op791 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op792: ExternKernelSchedulerNode(ExternKernelOut)
op792.writes = [StarDep(name='buf792', mode=None)]
op792.unmet_dependencies = [StarDep(name='buf791', mode=None)]
op792.met_dependencies = [StarDep(name='arg509_1', mode=None)]
op792.outputs = [
    buf792: ExternKernelOut
    buf792.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf792.users = [NodeUser(node=SchedulerNode(name='op793'), can_inplace=True, is_weak=False)]
]
op792.node.kernel = extern_kernels.mm


op793_op794_op795_op797: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op793_op794_op795_op797.writes = 
    [   MemoryDep('buf793', c0, {c0: 2097152}, None),
        MemoryDep('buf794', c0, {c0: 2048}, None),
        MemoryDep('buf795', c0, {c0: 2048}, None),
        MemoryDep('buf797', c0, {c0: 2097152}, None)]
op793_op794_op795_op797.unmet_dependencies = 
    [   MemoryDep('buf769', c0, {c0: 2097152}, None),
        MemoryDep('buf785', c0, {c0: 2097152}, None),
        MemoryDep('buf792', c0, {c0: 2097152}, None)]
op793_op794_op795_op797.met_dependencies = 
    [   MemoryDep('arg504_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg510_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg511_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg512_1', c1, {c0: 2048, c1: 1024}, None)]
op793_op794_op795_op797.outputs = [
    buf793: ComputedBuffer
    buf793.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf793.users = [
        NodeUser(node=SchedulerNode(name='op794'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op795'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op796'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op797'), can_inplace=True, is_weak=False),
    ]
    buf794: ComputedBuffer
    buf794.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf794.users = [NodeUser(node=SchedulerNode(name='op797'), can_inplace=False, is_weak=False)]
    buf795: ComputedBuffer
    buf795.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf795.users = [NodeUser(node=SchedulerNode(name='op797'), can_inplace=False, is_weak=False)]
    buf797: ComputedBuffer
    buf797.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf797.users = [NodeUser(node=ExternKernelSchedulerNode(name='op798'), can_inplace=False, is_weak=False)]
]
op793_op794_op795_op797.snodes[0] =
op793: SchedulerNode(ComputedBuffer)
op793.writes = [MemoryDep('buf793', c0, {c0: 2097152}, None)]
op793.unmet_dependencies = 
    [   MemoryDep('buf769', c0, {c0: 2097152}, None),
        MemoryDep('buf785', c0, {c0: 2097152}, None),
        MemoryDep('buf792', c0, {c0: 2097152}, None)]
op793.met_dependencies = 
    [   MemoryDep('arg504_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg510_1', c1, {c0: 2048, c1: 1024}, None)]
op793.outputs = [
    buf793: ComputedBuffer
    buf793.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf793.users = [
        NodeUser(node=SchedulerNode(name='op794'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op795'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op796'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op797'), can_inplace=True, is_weak=False),
    ]
]
op793.group.device = cuda:0
op793.group.iteration = (2097152, 1)
op793.sizes = ([2048, 1024], [])
buf769_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf785_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg504_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf792_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
arg510_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf793_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op793_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf769', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf785', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg504_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf792', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg510_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf793', get_index_5, add_3, None)
        return store
op793 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op793_op794_op795_op797.snodes[1] =
op794: SchedulerNode(ComputedBuffer)
op794.writes = [MemoryDep('buf794', c0, {c0: 2048}, None)]
op794.unmet_dependencies = [MemoryDep('buf793', c0, {c0: 2097152}, None)]
op794.met_dependencies = []
op794.outputs = [
    buf794: ComputedBuffer
    buf794.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf794.users = [NodeUser(node=SchedulerNode(name='op797'), can_inplace=False, is_weak=False)]
]
op794.group.device = cuda:0
op794.group.iteration = (2048, 1024)
op794.sizes = ([2048], [1024])
buf793_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf794_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op794_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf793', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf794', get_index_1, getitem)
        return store_reduction
op794 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op793_op794_op795_op797.snodes[2] =
op795: SchedulerNode(ComputedBuffer)
op795.writes = [MemoryDep('buf795', c0, {c0: 2048}, None)]
op795.unmet_dependencies = [MemoryDep('buf793', c0, {c0: 2097152}, None)]
op795.met_dependencies = []
op795.outputs = [
    buf795: ComputedBuffer
    buf795.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf795.users = [NodeUser(node=SchedulerNode(name='op797'), can_inplace=False, is_weak=False)]
]
op795.group.device = cuda:0
op795.group.iteration = (2048, 1024)
op795.sizes = ([2048], [1024])
buf793_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf795_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op795_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf793', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf795', get_index_1, getitem_1)
        return store_reduction
op795 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op793_op794_op795_op797.snodes[3] =
op797: SchedulerNode(ComputedBuffer)
op797.writes = [MemoryDep('buf797', c0, {c0: 2097152}, None)]
op797.unmet_dependencies = 
    [   MemoryDep('buf793', c0, {c0: 2097152}, None),
        MemoryDep('buf794', c0, {c0: 2048}, None),
        MemoryDep('buf795', c0, {c0: 2048}, None)]
op797.met_dependencies = 
    [   MemoryDep('arg511_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg512_1', c1, {c0: 2048, c1: 1024}, None)]
op797.outputs = [
    buf797: ComputedBuffer
    buf797.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf797.users = [NodeUser(node=ExternKernelSchedulerNode(name='op798'), can_inplace=False, is_weak=False)]
]
op797.group.device = cuda:0
op797.group.iteration = (2097152, 1)
op797.sizes = ([2048, 1024], [])
buf793_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
buf794_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf795_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
arg511_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg512_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf797_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op797_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf793', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf794', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf795', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg511_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg512_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf797', get_index_5, add_1, None)
        return store
op797 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op793_op794_op795_op797 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op798: ExternKernelSchedulerNode(ExternKernelOut)
op798.writes = [StarDep(name='buf798', mode=None)]
op798.unmet_dependencies = [StarDep(name='buf797', mode=None)]
op798.met_dependencies = [StarDep(name='arg2_1', mode=None)]
op798.outputs = [
    buf798: ExternKernelOut
    buf798.layout = FixedLayout('cuda', torch.float32, size=[2048, 128112], stride=[128128, 1])
    buf798.users = [
        NodeUser(node=SchedulerNode(name='op799'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op800'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op801'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op798.node.kernel = extern_kernels.mm


op799_op800: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op799_op800.writes = 
    [   MemoryDep('buf799', c0, {c0: 2048}, None),
        MemoryDep('buf800', c0, {c0: 2048}, None)]
op799_op800.unmet_dependencies = [MemoryDep('buf798', 128128*c0 + c1, {c0: 2048, c1: 128112}, None)]
op799_op800.met_dependencies = []
op799_op800.outputs = [
    buf799: ComputedBuffer
    buf799.layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
    buf799.users = [
        NodeUser(node=SchedulerNode(name='op800'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op801'), can_inplace=False, is_weak=False),
    ]
    buf800: ComputedBuffer
    buf800.layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
    buf800.users = [NodeUser(node=SchedulerNode(name='op801'), can_inplace=False, is_weak=False)]
]
op799_op800.snodes[0] =
op799: SchedulerNode(ComputedBuffer)
op799.writes = [MemoryDep('buf799', c0, {c0: 2048}, None)]
op799.unmet_dependencies = [MemoryDep('buf798', 128128*c0 + c1, {c0: 2048, c1: 128112}, None)]
op799.met_dependencies = []
op799.outputs = [
    buf799: ComputedBuffer
    buf799.layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
    buf799.users = [
        NodeUser(node=SchedulerNode(name='op800'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op801'), can_inplace=False, is_weak=False),
    ]
]
op799.group.device = cuda:0
op799.group.iteration = (2048, 128112)
op799.sizes = ([2048], [128112])
buf798_layout = FixedLayout('cuda', torch.float32, size=[2048, 128112], stride=[128128, 1])
buf799_layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
class op799_loop_body:
    var_ranges = {z0: 2048, z1: 128112}
    index0 = 128128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf798', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf799', get_index_1, reduction)
        return store_reduction
op799 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[2048, 131072],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 2048
        rnumel = 128112
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp2, None)
op799_op800.snodes[1] =
op800: SchedulerNode(ComputedBuffer)
op800.writes = [MemoryDep('buf800', c0, {c0: 2048}, None)]
op800.unmet_dependencies = 
    [   MemoryDep('buf798', 128128*c0 + c1, {c0: 2048, c1: 128112}, None),
        MemoryDep('buf799', c0, {c0: 2048}, None)]
op800.met_dependencies = []
op800.outputs = [
    buf800: ComputedBuffer
    buf800.layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
    buf800.users = [NodeUser(node=SchedulerNode(name='op801'), can_inplace=False, is_weak=False)]
]
op800.group.device = cuda:0
op800.group.iteration = (2048, 128112)
op800.sizes = ([2048], [128112])
buf798_layout = FixedLayout('cuda', torch.float32, size=[2048, 128112], stride=[128128, 1])
buf799_layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
buf800_layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
class op800_loop_body:
    var_ranges = {z0: 2048, z1: 128112}
    index0 = 128128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf798', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf799', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf800', get_index_2, reduction)
        return store_reduction
op800 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[2048, 131072],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 2048
        rnumel = 128112
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)
op799_op800 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[2048, 131072],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 2048
        rnumel = 128112
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (128128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp2, None)
        _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp4 = tl.load(in_ptr0 + (r1 + (128128*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tmp4 - tmp2
            tmp6 = tl_math.exp(tmp5)
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = _tmp8 + tmp7
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = tl.sum(_tmp8, 1)[:, None]
        tl.store(out_ptr1 + (x0), tmp8, None)


op801_op802_op803: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op801_op802_op803.writes = 
    [   MemoryDep('buf801', 0, {}, None),
        MemoryDep('buf802', 0, {}, None),
        MemoryDep('buf803', 0, {}, None)]
op801_op802_op803.unmet_dependencies = 
    [   MemoryDep('buf798', 128128*c0 + tmp8, {c0: 2048}, None),
        MemoryDep('buf799', c0, {c0: 2048}, None),
        MemoryDep('buf800', c0, {c0: 2048}, None)]
op801_op802_op803.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 2048}, None)]
op801_op802_op803.outputs = [
    buf801: ComputedBuffer
    buf801.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf801.users = [NodeUser(node=SchedulerNode(name='op803'), can_inplace=True, is_weak=False)]
    buf802: ComputedBuffer
    buf802.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf802.users = [NodeUser(node=SchedulerNode(name='op803'), can_inplace=True, is_weak=False)]
    buf803: ComputedBuffer
    buf803.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf803.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op801_op802_op803.snodes[0] =
op801: SchedulerNode(ComputedBuffer)
op801.writes = [MemoryDep('buf801', 0, {}, None)]
op801.unmet_dependencies = 
    [   MemoryDep('buf798', 128128*c0 + tmp8, {c0: 2048}, None),
        MemoryDep('buf799', c0, {c0: 2048}, None),
        MemoryDep('buf800', c0, {c0: 2048}, None)]
op801.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 2048}, None)]
op801.outputs = [
    buf801: ComputedBuffer
    buf801.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf801.users = [NodeUser(node=SchedulerNode(name='op803'), can_inplace=True, is_weak=False)]
]
op801.group.device = cuda:0
op801.group.iteration = (1, 2048)
op801.sizes = ([], [2048])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
buf798_layout = FixedLayout('cuda', torch.float32, size=[2048, 128112], stride=[128128, 1])
buf799_layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
buf800_layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
buf801_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op801_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    index1 = indirect0 + 128128*z0
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg0_1', get_index_1)
        constant_1 = ops.constant(-100, torch.int64)
        ne_1 = ops.ne(load_1, constant_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg0_1', get_index_2)
        constant_2 = ops.constant(0, torch.int64)
        where = ops.where(ne_1, load_2, constant_2)
        set_indirect0 = self.set_indirect0(where)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf798', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf799', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf800', get_index_5)
        log = ops.log(load_5)
        sub_1 = ops.sub(sub, log)
        neg = ops.neg(sub_1)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ne, neg, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', where_1)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf801', get_index_6, reduction)
        return store_reduction
op801 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 2048
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp13 = tl.load(in_ptr3 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tl.full([1, 1], 0, tl.int64)
            tmp4 = tl.where(tmp2, tmp0, tmp3)
            tmp5 = tl.full([XBLOCK, RBLOCK], 128112, tl.int32)
            tmp6 = tmp4 + tmp5
            tmp7 = tmp4 < 0
            tmp8 = tl.where(tmp7, tmp6, tmp4)
            tl.device_assert(((0 <= tmp8) & (tmp8 < 128112)) | ~(rmask), "index out of bounds: 0 <= tmp8 < 128112")
            tmp10 = tl.load(in_ptr1 + (tmp8 + (128128*r0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 - tmp11
            tmp14 = tl_math.log(tmp13)
            tmp15 = tmp12 - tmp14
            tmp16 = -tmp15
            tmp17 = 0.0
            tmp18 = tl.where(tmp2, tmp16, tmp17)
            tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
            tmp21 = _tmp20 + tmp19
            _tmp20 = tl.where(rmask, tmp21, _tmp20)
        tmp20 = tl.sum(_tmp20, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp20, None)
op801_op802_op803.snodes[1] =
op802: SchedulerNode(ComputedBuffer)
op802.writes = [MemoryDep('buf802', 0, {}, None)]
op802.unmet_dependencies = []
op802.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 2048}, None)]
op802.outputs = [
    buf802: ComputedBuffer
    buf802.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf802.users = [NodeUser(node=SchedulerNode(name='op803'), can_inplace=True, is_weak=False)]
]
op802.group.device = cuda:0
op802.group.iteration = (1, 2048)
op802.sizes = ([], [2048])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
buf802_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op802_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf802', get_index_1, reduction)
        return store_reduction
op802 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 3), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 2048
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tmp2.to(tl.int64)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp5, None)
op801_op802_op803.snodes[2] =
op803: SchedulerNode(ComputedBuffer)
op803.writes = [MemoryDep('buf803', 0, {}, None)]
op803.unmet_dependencies = [MemoryDep('buf801', 0, {}, None), MemoryDep('buf802', 0, {}, None)]
op803.met_dependencies = []
op803.outputs = [
    buf803: ComputedBuffer
    buf803.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf803.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op803.group.device = cuda:0
op803.group.iteration = (1, 1)
op803.sizes = ([], [])
buf801_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf802_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
buf803_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op803_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf801', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf802', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        truediv = ops.truediv(load, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf803', get_index_2, truediv, None)
        return store
op803 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp0 = tl.load(in_out_ptr0 + (0))
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
        tmp2 = tl.load(in_ptr0 + (0))
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK])
        tmp4 = tmp3.to(tl.float32)
        tmp5 = tmp1 / tmp4
        tl.store(in_out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp5, None)
op801_op802_op803 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 2048
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp13 = tl.load(in_ptr3 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tl.full([1, 1], 0, tl.int64)
            tmp4 = tl.where(tmp2, tmp0, tmp3)
            tmp5 = tl.full([XBLOCK, RBLOCK], 128112, tl.int32)
            tmp6 = tmp4 + tmp5
            tmp7 = tmp4 < 0
            tmp8 = tl.where(tmp7, tmp6, tmp4)
            tl.device_assert(((0 <= tmp8) & (tmp8 < 128112)) | ~(rmask), "index out of bounds: 0 <= tmp8 < 128112")
            tmp10 = tl.load(in_ptr1 + (tmp8 + (128128*r0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 - tmp11
            tmp14 = tl_math.log(tmp13)
            tmp15 = tmp12 - tmp14
            tmp16 = -tmp15
            tmp17 = 0.0
            tmp18 = tl.where(tmp2, tmp16, tmp17)
            tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
            tmp21 = _tmp20 + tmp19
            _tmp20 = tl.where(rmask, tmp21, _tmp20)
            tmp22 = tmp2.to(tl.int64)
            tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
            tmp25 = _tmp24 + tmp23
            _tmp24 = tl.where(rmask, tmp25, _tmp24)
        tmp20 = tl.sum(_tmp20, 1)[:, None]
        tmp24 = tl.sum(_tmp24, 1)[:, None]
        tmp26 = tmp24.to(tl.float32)
        tmp27 = tmp20 / tmp26
        tl.debug_barrier()
        tl.store(in_out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp27, None)


